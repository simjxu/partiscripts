
/Users/simonxu/Projects/Github-simjxu/partiscripts/Mesh-Multinode/MultinodeDS-BOR/target/1.4.1-rc.1/boron/MultinodeDS-BOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004714  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000187d0  2**0
                  CONTENTS
  4 .data         00000074  2003e2d0  000d8730  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004ac  2003e344  2003e344  0001e344  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d87a4  000d87a4  000187a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d87cc  000d87cc  000187cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000df245  00000000  00000000  000187d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010a35  00000000  00000000  000f7a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020f09  00000000  00000000  0010844a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002820  00000000  00000000  00129353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004c10  00000000  00000000  0012bb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032659  00000000  00000000  00130783  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002602c  00000000  00000000  00162ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104188  00000000  00000000  00188e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d8ec  00000000  00000000  0028cf90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff14 	bl	d7e5a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff34 	bl	d7ea6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d0 	.word	0x2003e2d0
   d4048:	000d8730 	.word	0x000d8730
   d404c:	2003e344 	.word	0x2003e344
   d4050:	2003e344 	.word	0x2003e344
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fd39 	bl	d7ad0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8730 	.word	0x000d8730
   d4080:	000d86f4 	.word	0x000d86f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ae 	b.w	d41e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8f5 	bl	d4278 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bceb 	b.w	d7a6c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bccd 	b.w	d4a34 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bccb 	b.w	d4a34 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bcd1 	b.w	d4a44 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bccf 	b.w	d4a44 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fbe2 	bl	d4878 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d45f9 	.word	0x000d45f9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.21>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40d6:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40d8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40da:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40dc:	689b      	ldr	r3, [r3, #8]
   d40de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e0:	68a3      	ldr	r3, [r4, #8]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	60a3      	str	r3, [r4, #8]
   d40e6:	b92b      	cbnz	r3, d40f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.21+0x1e>
            _M_destroy();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d40f2:	4718      	bx	r3
   d40f4:	bd10      	pop	{r4, pc}
	...

000d40f8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40f8:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40fa:	b510      	push	{r4, lr}
   d40fc:	4604      	mov	r4, r0
   d40fe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4100:	f001 fc0a 	bl	d5918 <_ZN5spark10LogManager8instanceEv>
   d4104:	4621      	mov	r1, r4
   d4106:	f001 fdf7 	bl	d5cf8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d410a:	f003 fc6b 	bl	d79e4 <_Z16_fetch_usbserialv>
   d410e:	f003 fc5b 	bl	d79c8 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4112:	4620      	mov	r0, r4
   d4114:	4b04      	ldr	r3, [pc, #16]	; (d4128 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4116:	f840 3b04 	str.w	r3, [r0], #4
   d411a:	f001 fcf3 	bl	d5b04 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}
   d4122:	bf00      	nop
   d4124:	000d8160 	.word	0x000d8160
   d4128:	000d8148 	.word	0x000d8148

000d412c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4130:	f7ff ffe2 	bl	d40f8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2124      	movs	r1, #36	; 0x24
   d4138:	f003 fd0b 	bl	d7b52 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4140:	b40e      	push	{r1, r2, r3}
   d4142:	b500      	push	{lr}
   d4144:	b08c      	sub	sp, #48	; 0x30
   d4146:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4148:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d414e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4150:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4154:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4156:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4158:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415a:	aa04      	add	r2, sp, #16
   d415c:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d415e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4160:	f000 fb9a 	bl	d4898 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d4164:	b00c      	add	sp, #48	; 0x30
   d4166:	f85d eb04 	ldr.w	lr, [sp], #4
   d416a:	b003      	add	sp, #12
   d416c:	4770      	bx	lr
	...

000d4170 <_Z11pingHandlerPKcS0_>:
int restart_time = 0;
int publish_flag = 0;
int current_count = 0; 
// Change this to equate to number of devices
int num_devices = 1;
void pingHandler(const char *event, const char *data) {
   d4170:	b570      	push	{r4, r5, r6, lr}
  Log.trace("ping received");
   d4172:	4819      	ldr	r0, [pc, #100]	; (d41d8 <_Z11pingHandlerPKcS0_+0x68>)
int restart_time = 0;
int publish_flag = 0;
int current_count = 0; 
// Change this to equate to number of devices
int num_devices = 1;
void pingHandler(const char *event, const char *data) {
   d4174:	b0c6      	sub	sp, #280	; 0x118
   d4176:	460c      	mov	r4, r1
  Log.trace("ping received");
   d4178:	4918      	ldr	r1, [pc, #96]	; (d41dc <_Z11pingHandlerPKcS0_+0x6c>)
   d417a:	f7ff ffe1 	bl	d4140 <_ZNK5spark6Logger5traceEPKcz>
  QueueData d = {};
   d417e:	f44f 728c 	mov.w	r2, #280	; 0x118
   d4182:	2100      	movs	r1, #0
   d4184:	4668      	mov	r0, sp
   d4186:	f003 fe8e 	bl	d7ea6 <memset>
  memcpy(d.deviceId, data, HAL_DEVICE_ID_SIZE * 2);
   d418a:	466d      	mov	r5, sp
   d418c:	4623      	mov	r3, r4
   d418e:	f104 0618 	add.w	r6, r4, #24
   d4192:	6818      	ldr	r0, [r3, #0]
   d4194:	6859      	ldr	r1, [r3, #4]
   d4196:	462a      	mov	r2, r5
   d4198:	c203      	stmia	r2!, {r0, r1}
   d419a:	3308      	adds	r3, #8
   d419c:	42b3      	cmp	r3, r6
   d419e:	4615      	mov	r5, r2
   d41a0:	d1f7      	bne.n	d4192 <_Z11pingHandlerPKcS0_+0x22>
  if (data) {
    Log.trace(data);
   d41a2:	4621      	mov	r1, r4
   d41a4:	480c      	ldr	r0, [pc, #48]	; (d41d8 <_Z11pingHandlerPKcS0_+0x68>)
   d41a6:	f7ff ffcb 	bl	d4140 <_ZNK5spark6Logger5traceEPKcz>
    memcpy(d.data, data, std::max(strlen(data), sizeof(d.data)));
   d41aa:	4620      	mov	r0, r4
   d41ac:	f003 fef1 	bl	d7f92 <strlen>
   d41b0:	4621      	mov	r1, r4
   d41b2:	28fe      	cmp	r0, #254	; 0xfe
   d41b4:	bf8c      	ite	hi
   d41b6:	4602      	movhi	r2, r0
   d41b8:	22ff      	movls	r2, #255	; 0xff
   d41ba:	f10d 0019 	add.w	r0, sp, #25
   d41be:	f003 fe4c 	bl	d7e5a <memcpy>
  }
  os_queue_put(device_queue, &d, CONCURRENT_WAIT_FOREVER, nullptr);
   d41c2:	4807      	ldr	r0, [pc, #28]	; (d41e0 <_Z11pingHandlerPKcS0_+0x70>)
   d41c4:	2300      	movs	r3, #0
   d41c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d41ca:	4669      	mov	r1, sp
   d41cc:	6800      	ldr	r0, [r0, #0]
   d41ce:	f000 f9eb 	bl	d45a8 <os_queue_put>
}
   d41d2:	b046      	add	sp, #280	; 0x118
   d41d4:	bd70      	pop	{r4, r5, r6, pc}
   d41d6:	bf00      	nop
   d41d8:	2003e3f0 	.word	0x2003e3f0
   d41dc:	000d8170 	.word	0x000d8170
   d41e0:	2003e348 	.word	0x2003e348

000d41e4 <setup>:
void setup() {
   d41e4:	b510      	push	{r4, lr}
  os_queue_create(&device_queue, sizeof(QueueData), 10, nullptr);
   d41e6:	2300      	movs	r3, #0
   d41e8:	220a      	movs	r2, #10
   d41ea:	f44f 718c 	mov.w	r1, #280	; 0x118
   d41ee:	481a      	ldr	r0, [pc, #104]	; (d4258 <setup+0x74>)
   d41f0:	f000 f9d2 	bl	d4598 <os_queue_create>

  waitUntil(Serial.isConnected);
   d41f4:	f003 fbf6 	bl	d79e4 <_Z16_fetch_usbserialv>
   d41f8:	f003 fbe9 	bl	d79ce <_ZN9USBSerial11isConnectedEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41fc:	b340      	cbz	r0, d4250 <setup+0x6c>
   d41fe:	f003 fbf1 	bl	d79e4 <_Z16_fetch_usbserialv>
   d4202:	f003 fbe4 	bl	d79ce <_ZN9USBSerial11isConnectedEv>
   d4206:	4c15      	ldr	r4, [pc, #84]	; (d425c <setup+0x78>)
  
  Log.trace("Connecting to mesh");
   d4208:	4915      	ldr	r1, [pc, #84]	; (d4260 <setup+0x7c>)
   d420a:	4816      	ldr	r0, [pc, #88]	; (d4264 <setup+0x80>)
   d420c:	f7ff ff98 	bl	d4140 <_ZNK5spark6Logger5traceEPKcz>
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4210:	2300      	movs	r3, #0
   d4212:	461a      	mov	r2, r3
   d4214:	4619      	mov	r1, r3
   d4216:	6860      	ldr	r0, [r4, #4]
   d4218:	f000 fbdc 	bl	d49d4 <network_on>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d421c:	2300      	movs	r3, #0
   d421e:	461a      	mov	r2, r3
   d4220:	4619      	mov	r1, r3
   d4222:	6860      	ldr	r0, [r4, #4]
   d4224:	f000 fbb6 	bl	d4994 <network_connect>
   d4228:	480f      	ldr	r0, [pc, #60]	; (d4268 <setup+0x84>)
   d422a:	2300      	movs	r3, #0
   d422c:	461a      	mov	r2, r3
   d422e:	4619      	mov	r1, r3
   d4230:	6840      	ldr	r0, [r0, #4]
   d4232:	f000 fbaf 	bl	d4994 <network_connect>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4236:	f000 fb8d 	bl	d4954 <spark_cloud_flag_connect>
  Mesh.on();
  Mesh.connect();
  Cellular.connect();
  Particle.connect();
  // Subscribe to the xen_ping and point to Handler
  Mesh.subscribe("bor_ping", pingHandler); 
   d423a:	4a0c      	ldr	r2, [pc, #48]	; (d426c <setup+0x88>)
   d423c:	490c      	ldr	r1, [pc, #48]	; (d4270 <setup+0x8c>)
   d423e:	f104 0008 	add.w	r0, r4, #8
   d4242:	f002 fd21 	bl	d6c88 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4246:	f000 f9df 	bl	d4608 <HAL_Timer_Get_Milli_Seconds>
  restart_time = millis();
   d424a:	4b0a      	ldr	r3, [pc, #40]	; (d4274 <setup+0x90>)
   d424c:	6018      	str	r0, [r3, #0]
}
   d424e:	bd10      	pop	{r4, pc}
            spark_process();
   d4250:	f000 fb78 	bl	d4944 <spark_process>
   d4254:	e7ce      	b.n	d41f4 <setup+0x10>
   d4256:	bf00      	nop
   d4258:	2003e348 	.word	0x2003e348
   d425c:	2003e3f4 	.word	0x2003e3f4
   d4260:	000d817e 	.word	0x000d817e
   d4264:	2003e3f0 	.word	0x2003e3f0
   d4268:	2003e384 	.word	0x2003e384
   d426c:	000d4171 	.word	0x000d4171
   d4270:	000d8191 	.word	0x000d8191
   d4274:	2003e350 	.word	0x2003e350

000d4278 <loop>:

void loop() {
   d4278:	b530      	push	{r4, r5, lr}
   d427a:	b0d1      	sub	sp, #324	; 0x144
  QueueData data = {};
   d427c:	f44f 728c 	mov.w	r2, #280	; 0x118
   d4280:	2100      	movs	r1, #0
   d4282:	a80a      	add	r0, sp, #40	; 0x28
   d4284:	f003 fe0f 	bl	d7ea6 <memset>
  while (!os_queue_take(device_queue, &data, 0, nullptr)) { 
   d4288:	4d2d      	ldr	r5, [pc, #180]	; (d4340 <loop+0xc8>)
   d428a:	6828      	ldr	r0, [r5, #0]
   d428c:	2300      	movs	r3, #0
   d428e:	461a      	mov	r2, r3
   d4290:	a90a      	add	r1, sp, #40	; 0x28
   d4292:	f000 f991 	bl	d45b8 <os_queue_take>
   d4296:	4604      	mov	r4, r0
   d4298:	2800      	cmp	r0, #0
   d429a:	d131      	bne.n	d4300 <loop+0x88>
    Log.trace("Sending response pong to %s", data.deviceId);
   d429c:	aa0a      	add	r2, sp, #40	; 0x28
   d429e:	4929      	ldr	r1, [pc, #164]	; (d4344 <loop+0xcc>)
   d42a0:	4829      	ldr	r0, [pc, #164]	; (d4348 <loop+0xd0>)
   d42a2:	f7ff ff4d 	bl	d4140 <_ZNK5spark6Logger5traceEPKcz>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42a6:	4929      	ldr	r1, [pc, #164]	; (d434c <loop+0xd4>)
   d42a8:	a806      	add	r0, sp, #24
   d42aa:	f002 fefa 	bl	d70a2 <_ZN6StringC1EPK19__FlashStringHelper>
    Mesh.publish("bor_pong:" + String(data.deviceId));
   d42ae:	a90a      	add	r1, sp, #40	; 0x28
   d42b0:	a802      	add	r0, sp, #8
   d42b2:	f002 fef6 	bl	d70a2 <_ZN6StringC1EPK19__FlashStringHelper>
   d42b6:	a902      	add	r1, sp, #8
   d42b8:	a806      	add	r0, sp, #24
   d42ba:	f002 ff36 	bl	d712a <_ZplRK15StringSumHelperRK6String>
   d42be:	4622      	mov	r2, r4
   d42c0:	6801      	ldr	r1, [r0, #0]
   d42c2:	4823      	ldr	r0, [pc, #140]	; (d4350 <loop+0xd8>)
   d42c4:	f002 fc68 	bl	d6b98 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42c8:	a802      	add	r0, sp, #8
   d42ca:	f002 fea3 	bl	d7014 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d42ce:	a806      	add	r0, sp, #24
   d42d0:	f002 fea0 	bl	d7014 <_ZN6StringD1Ev>
   d42d4:	4b1f      	ldr	r3, [pc, #124]	; (d4354 <loop+0xdc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42d6:	4920      	ldr	r1, [pc, #128]	; (d4358 <loop+0xe0>)
   d42d8:	781b      	ldrb	r3, [r3, #0]
   d42da:	f88d 3000 	strb.w	r3, [sp]
   d42de:	a806      	add	r0, sp, #24
   d42e0:	233c      	movs	r3, #60	; 0x3c
   d42e2:	f10d 0241 	add.w	r2, sp, #65	; 0x41
   d42e6:	f000 fdcf 	bl	d4e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42ea:	9807      	ldr	r0, [sp, #28]
   d42ec:	2800      	cmp	r0, #0
   d42ee:	d0cc      	beq.n	d428a <loop+0x12>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42f0:	6843      	ldr	r3, [r0, #4]
   d42f2:	3b01      	subs	r3, #1
   d42f4:	6043      	str	r3, [r0, #4]
   d42f6:	2b00      	cmp	r3, #0
   d42f8:	d1c7      	bne.n	d428a <loop+0x12>
   d42fa:	f7ff feec 	bl	d40d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.21>
  restart_time = millis();
}

void loop() {
  QueueData data = {};
  while (!os_queue_take(device_queue, &data, 0, nullptr)) { 
   d42fe:	e7c4      	b.n	d428a <loop+0x12>
   d4300:	f000 f982 	bl	d4608 <HAL_Timer_Get_Milli_Seconds>
    Log.trace("Sending response pong to %s", data.deviceId);
    Mesh.publish("bor_pong:" + String(data.deviceId));
    Particle.publish("xenon-pub", data.data);
  }

  if(millis()-restart_time >= 600000){
   d4304:	4b15      	ldr	r3, [pc, #84]	; (d435c <loop+0xe4>)
   d4306:	681a      	ldr	r2, [r3, #0]
   d4308:	1a80      	subs	r0, r0, r2
   d430a:	4a15      	ldr	r2, [pc, #84]	; (d4360 <loop+0xe8>)
   d430c:	4290      	cmp	r0, r2
   d430e:	461c      	mov	r4, r3
   d4310:	d914      	bls.n	d433c <loop+0xc4>
   d4312:	4b10      	ldr	r3, [pc, #64]	; (d4354 <loop+0xdc>)
   d4314:	4913      	ldr	r1, [pc, #76]	; (d4364 <loop+0xec>)
   d4316:	781b      	ldrb	r3, [r3, #0]
   d4318:	f88d 3000 	strb.w	r3, [sp]
   d431c:	a806      	add	r0, sp, #24
   d431e:	233c      	movs	r3, #60	; 0x3c
   d4320:	2200      	movs	r2, #0
   d4322:	f000 fdb1 	bl	d4e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4326:	9807      	ldr	r0, [sp, #28]
   d4328:	b128      	cbz	r0, d4336 <loop+0xbe>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d432a:	6843      	ldr	r3, [r0, #4]
   d432c:	3b01      	subs	r3, #1
   d432e:	6043      	str	r3, [r0, #4]
   d4330:	b90b      	cbnz	r3, d4336 <loop+0xbe>
   d4332:	f7ff fed0 	bl	d40d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.21>
   d4336:	f000 f967 	bl	d4608 <HAL_Timer_Get_Milli_Seconds>
    Particle.publish("bor_online");
    restart_time = millis();
   d433a:	6020      	str	r0, [r4, #0]
  }  
   d433c:	b051      	add	sp, #324	; 0x144
   d433e:	bd30      	pop	{r4, r5, pc}
   d4340:	2003e348 	.word	0x2003e348
   d4344:	000d819a 	.word	0x000d819a
   d4348:	2003e3f0 	.word	0x2003e3f0
   d434c:	000d81b6 	.word	0x000d81b6
   d4350:	2003e3fc 	.word	0x2003e3fc
   d4354:	2003e34c 	.word	0x2003e34c
   d4358:	000d81c0 	.word	0x000d81c0
   d435c:	2003e350 	.word	0x2003e350
   d4360:	000927bf 	.word	0x000927bf
   d4364:	000d81ca 	.word	0x000d81ca

000d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4368:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d436a:	6804      	ldr	r4, [r0, #0]
   d436c:	6843      	ldr	r3, [r0, #4]
   d436e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4370:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4372:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4376:	42a6      	cmp	r6, r4
   d4378:	d004      	beq.n	d4384 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d437a:	4620      	mov	r0, r4
   d437c:	f002 fe4a 	bl	d7014 <_ZN6StringD1Ev>
   d4380:	3414      	adds	r4, #20
   d4382:	e7f8      	b.n	d4376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4384:	6828      	ldr	r0, [r5, #0]
   d4386:	f000 fb5d 	bl	d4a44 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d438a:	4628      	mov	r0, r5
   d438c:	bd70      	pop	{r4, r5, r6, pc}

000d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d438e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4392:	4606      	mov	r6, r0
   d4394:	460c      	mov	r4, r1
   d4396:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4398:	d916      	bls.n	d43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d439a:	4290      	cmp	r0, r2
   d439c:	d215      	bcs.n	d43ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d439e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d43a2:	1a6c      	subs	r4, r5, r1
   d43a4:	f1a1 0714 	sub.w	r7, r1, #20
   d43a8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d43aa:	42af      	cmp	r7, r5
   d43ac:	d01c      	beq.n	d43e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d43ae:	b12c      	cbz	r4, d43bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d43b0:	4629      	mov	r1, r5
   d43b2:	4620      	mov	r0, r4
   d43b4:	f002 fe1e 	bl	d6ff4 <_ZN6StringC1EOS_>
   d43b8:	7c2b      	ldrb	r3, [r5, #16]
   d43ba:	7423      	strb	r3, [r4, #16]
   d43bc:	4628      	mov	r0, r5
   d43be:	f002 fe29 	bl	d7014 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d43c2:	3d14      	subs	r5, #20
   d43c4:	3c14      	subs	r4, #20
   d43c6:	e7f0      	b.n	d43aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d43c8:	d00e      	beq.n	d43e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d43ca:	42ac      	cmp	r4, r5
   d43cc:	d00c      	beq.n	d43e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d43ce:	b12e      	cbz	r6, d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d43d0:	4621      	mov	r1, r4
   d43d2:	4630      	mov	r0, r6
   d43d4:	f002 fe0e 	bl	d6ff4 <_ZN6StringC1EOS_>
   d43d8:	7c23      	ldrb	r3, [r4, #16]
   d43da:	7433      	strb	r3, [r6, #16]
   d43dc:	4620      	mov	r0, r4
   d43de:	f002 fe19 	bl	d7014 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d43e2:	3414      	adds	r4, #20
   d43e4:	3614      	adds	r6, #20
   d43e6:	e7f0      	b.n	d43ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d43e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d43ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d43ee:	2300      	movs	r3, #0
   d43f0:	6003      	str	r3, [r0, #0]
   d43f2:	6043      	str	r3, [r0, #4]
   d43f4:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d43f6:	684e      	ldr	r6, [r1, #4]
   d43f8:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d43fa:	4604      	mov	r4, r0
   d43fc:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d43fe:	dd24      	ble.n	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4400:	f04f 0814 	mov.w	r8, #20
   d4404:	fb08 f006 	mul.w	r0, r8, r6
   d4408:	f000 fb14 	bl	d4a34 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d440c:	4605      	mov	r5, r0
   d440e:	b1e0      	cbz	r0, d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4410:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4414:	fb08 1202 	mla	r2, r8, r2, r1
   d4418:	f7ff ffb9 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d441c:	6820      	ldr	r0, [r4, #0]
   d441e:	f000 fb11 	bl	d4a44 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4422:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4424:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4426:	683e      	ldr	r6, [r7, #0]
   d4428:	687b      	ldr	r3, [r7, #4]
   d442a:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d442e:	4546      	cmp	r6, r8
   d4430:	d009      	beq.n	d4446 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4432:	b12d      	cbz	r5, d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4434:	4631      	mov	r1, r6
   d4436:	4628      	mov	r0, r5
   d4438:	f002 fe55 	bl	d70e6 <_ZN6StringC1ERKS_>
   d443c:	7c33      	ldrb	r3, [r6, #16]
   d443e:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4440:	3614      	adds	r6, #20
   d4442:	3514      	adds	r5, #20
   d4444:	e7f3      	b.n	d442e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4446:	687b      	ldr	r3, [r7, #4]
   d4448:	6063      	str	r3, [r4, #4]
    }
}
   d444a:	4620      	mov	r0, r4
   d444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4450 <_GLOBAL__sub_I_dbg>:
   d4450:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4452:	4b29      	ldr	r3, [pc, #164]	; (d44f8 <_GLOBAL__sub_I_dbg+0xa8>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4454:	4d29      	ldr	r5, [pc, #164]	; (d44fc <_GLOBAL__sub_I_dbg+0xac>)
   d4456:	b08d      	sub	sp, #52	; 0x34
   d4458:	2400      	movs	r4, #0
   d445a:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d445c:	f000 f8dc 	bl	d4618 <HAL_Pin_Map>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4460:	9400      	str	r4, [sp, #0]
   d4462:	9401      	str	r4, [sp, #4]
   d4464:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4466:	f003 fabd 	bl	d79e4 <_Z16_fetch_usbserialv>
   d446a:	4669      	mov	r1, sp
   d446c:	4607      	mov	r7, r0
   d446e:	a803      	add	r0, sp, #12
   d4470:	f7ff ffbb 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4474:	462e      	mov	r6, r5
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4476:	a903      	add	r1, sp, #12
   d4478:	a806      	add	r0, sp, #24
   d447a:	f7ff ffb6 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d447e:	4b20      	ldr	r3, [pc, #128]	; (d4500 <_GLOBAL__sub_I_dbg+0xb0>)
   d4480:	f846 3b04 	str.w	r3, [r6], #4
   d4484:	a906      	add	r1, sp, #24
   d4486:	a809      	add	r0, sp, #36	; 0x24
   d4488:	f7ff ffaf 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d448c:	aa09      	add	r2, sp, #36	; 0x24
   d448e:	2101      	movs	r1, #1
   d4490:	4630      	mov	r0, r6
   d4492:	f001 fd94 	bl	d5fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4496:	a809      	add	r0, sp, #36	; 0x24
   d4498:	f7ff ff66 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d449c:	a806      	add	r0, sp, #24
   d449e:	f7ff ff63 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44a2:	4b18      	ldr	r3, [pc, #96]	; (d4504 <_GLOBAL__sub_I_dbg+0xb4>)
   d44a4:	602b      	str	r3, [r5, #0]
   d44a6:	a803      	add	r0, sp, #12
   d44a8:	622f      	str	r7, [r5, #32]
   d44aa:	f7ff ff5d 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44ae:	4b16      	ldr	r3, [pc, #88]	; (d4508 <_GLOBAL__sub_I_dbg+0xb8>)
   d44b0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d44b2:	f003 fa97 	bl	d79e4 <_Z16_fetch_usbserialv>
   d44b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44ba:	f003 fa81 	bl	d79c0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d44be:	f001 fa2b 	bl	d5918 <_ZN5spark10LogManager8instanceEv>
   d44c2:	4629      	mov	r1, r5
   d44c4:	f001 fd0e 	bl	d5ee4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
#include "application.h"
#include "deviceid_hal.h"

SerialLogHandler dbg(LOG_LEVEL_ALL);
   d44c8:	4668      	mov	r0, sp
   d44ca:	f7ff ff4d 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44ce:	490f      	ldr	r1, [pc, #60]	; (d450c <_GLOBAL__sub_I_dbg+0xbc>)
   d44d0:	4a0f      	ldr	r2, [pc, #60]	; (d4510 <_GLOBAL__sub_I_dbg+0xc0>)
   d44d2:	4628      	mov	r0, r5
   d44d4:	f003 fb38 	bl	d7b48 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d44d8:	4b0e      	ldr	r3, [pc, #56]	; (d4514 <_GLOBAL__sub_I_dbg+0xc4>)
   d44da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d44de:	701c      	strb	r4, [r3, #0]
   d44e0:	805c      	strh	r4, [r3, #2]
   d44e2:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d44e4:	2002      	movs	r0, #2
   d44e6:	f000 f9ef 	bl	d48c8 <set_system_mode>

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d44ea:	4621      	mov	r1, r4
   d44ec:	2001      	movs	r0, #1
   d44ee:	f000 f9f3 	bl	d48d8 <system_thread_set_state>

  if(millis()-restart_time >= 600000){
    Particle.publish("bor_online");
    restart_time = millis();
  }  
   d44f2:	b00d      	add	sp, #52	; 0x34
   d44f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44f6:	bf00      	nop
   d44f8:	2003e34c 	.word	0x2003e34c
   d44fc:	2003e354 	.word	0x2003e354
   d4500:	000d8148 	.word	0x000d8148
   d4504:	000d83c0 	.word	0x000d83c0
   d4508:	000d8160 	.word	0x000d8160
   d450c:	000d40f9 	.word	0x000d40f9
   d4510:	2003e344 	.word	0x2003e344
   d4514:	2003e378 	.word	0x2003e378

000d4518 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <os_thread_create+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030248 	.word	0x00030248

000d4528 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <os_thread_is_current+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	689b      	ldr	r3, [r3, #8]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030248 	.word	0x00030248

000d4538 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <os_thread_join+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	691b      	ldr	r3, [r3, #16]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030248 	.word	0x00030248

000d4548 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <os_thread_cleanup+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	695b      	ldr	r3, [r3, #20]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030248 	.word	0x00030248

000d4558 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <os_mutex_create+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030248 	.word	0x00030248

000d4568 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <os_mutex_recursive_create+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030248 	.word	0x00030248

000d4578 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <os_mutex_recursive_lock+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030248 	.word	0x00030248

000d4588 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <os_mutex_recursive_unlock+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030248 	.word	0x00030248

000d4598 <os_queue_create>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <os_queue_create+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030248 	.word	0x00030248

000d45a8 <os_queue_put>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <os_queue_put+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030248 	.word	0x00030248

000d45b8 <os_queue_take>:
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <os_queue_take+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030248 	.word	0x00030248

000d45c8 <os_thread_exit>:
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <os_thread_exit+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030248 	.word	0x00030248

000d45d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_RNG_GetRandomNumber+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	685b      	ldr	r3, [r3, #4]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030218 	.word	0x00030218

000d45e8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_Delay_Milliseconds+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	689b      	ldr	r3, [r3, #8]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030218 	.word	0x00030218

000d45f8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_Delay_Microseconds+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	68db      	ldr	r3, [r3, #12]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030218 	.word	0x00030218

000d4608 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	695b      	ldr	r3, [r3, #20]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030218 	.word	0x00030218

000d4618 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_Pin_Map+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003022c 	.word	0x0003022c

000d4628 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <if_name_to_index+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	691b      	ldr	r3, [r3, #16]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003026c 	.word	0x0003026c

000d4638 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <if_index_to_name+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003026c 	.word	0x0003026c

000d4648 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <if_get_by_index+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	699b      	ldr	r3, [r3, #24]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003026c 	.word	0x0003026c

000d4658 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <if_get_addrs+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003026c 	.word	0x0003026c

000d4668 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <if_free_if_addrs+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003026c 	.word	0x0003026c

000d4678 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <inet_inet_ntop+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	695b      	ldr	r3, [r3, #20]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030264 	.word	0x00030264

000d4688 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <inet_inet_pton+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	699b      	ldr	r3, [r3, #24]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030264 	.word	0x00030264

000d4698 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <inet_htonl+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6a1b      	ldr	r3, [r3, #32]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030264 	.word	0x00030264

000d46a8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <inet_ntohs+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030264 	.word	0x00030264

000d46b8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <inet_htons+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030264 	.word	0x00030264

000d46c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <netdb_freeaddrinfo+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	689b      	ldr	r3, [r3, #8]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030268 	.word	0x00030268

000d46d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <netdb_getaddrinfo+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	68db      	ldr	r3, [r3, #12]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030268 	.word	0x00030268

000d46e8 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <sock_bind+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	685b      	ldr	r3, [r3, #4]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030238 	.word	0x00030238

000d46f8 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <sock_setsockopt+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	699b      	ldr	r3, [r3, #24]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030238 	.word	0x00030238

000d4708 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <sock_close+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	69db      	ldr	r3, [r3, #28]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030238 	.word	0x00030238

000d4718 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <sock_recvfrom+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030238 	.word	0x00030238

000d4728 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <sock_sendto+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030238 	.word	0x00030238

000d4738 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <sock_socket+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030238 	.word	0x00030238

000d4748 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_SPI_Init+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	69db      	ldr	r3, [r3, #28]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030230 	.word	0x00030230

000d4758 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_USART_Init+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	681b      	ldr	r3, [r3, #0]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_USART_End+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	689b      	ldr	r3, [r3, #8]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_USART_Write_Data+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	68db      	ldr	r3, [r3, #12]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003023c 	.word	0x0003023c

000d4788 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <HAL_USART_Available_Data+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	691b      	ldr	r3, [r3, #16]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003023c 	.word	0x0003023c

000d4798 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_USART_Read_Data+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	695b      	ldr	r3, [r3, #20]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003023c 	.word	0x0003023c

000d47a8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_USART_Peek_Data+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	699b      	ldr	r3, [r3, #24]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003023c 	.word	0x0003023c

000d47b8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_USART_Flush_Data+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	69db      	ldr	r3, [r3, #28]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003023c 	.word	0x0003023c

000d47c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_USART_Available_Data_For_Write+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003023c 	.word	0x0003023c

000d47d8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_USART_BeginConfig+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003023c 	.word	0x0003023c

000d47e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_USB_USART_Init+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	681b      	ldr	r3, [r3, #0]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003024c 	.word	0x0003024c

000d47f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_USB_USART_Begin+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	685b      	ldr	r3, [r3, #4]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003024c 	.word	0x0003024c

000d4808 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_USB_USART_End+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	689b      	ldr	r3, [r3, #8]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003024c 	.word	0x0003024c

000d4818 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USB_USART_Available_Data+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	691b      	ldr	r3, [r3, #16]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003024c 	.word	0x0003024c

000d4828 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	695b      	ldr	r3, [r3, #20]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003024c 	.word	0x0003024c

000d4838 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_USB_USART_Receive_Data+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	699b      	ldr	r3, [r3, #24]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003024c 	.word	0x0003024c

000d4848 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USB_USART_Send_Data+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	69db      	ldr	r3, [r3, #28]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003024c 	.word	0x0003024c

000d4858 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USB_USART_Flush_Data+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6a1b      	ldr	r3, [r3, #32]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003024c 	.word	0x0003024c

000d4868 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USB_USART_Is_Connected+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003024c 	.word	0x0003024c

000d4878 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <panic_+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030260 	.word	0x00030260

000d4888 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <log_message+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030260 	.word	0x00030260

000d4898 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <log_message_v+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030260 	.word	0x00030260

000d48a8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <log_level_name+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030260 	.word	0x00030260

000d48b8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <log_set_callbacks+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030260 	.word	0x00030260

000d48c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <set_system_mode+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	685b      	ldr	r3, [r3, #4]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030220 	.word	0x00030220

000d48d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <system_thread_set_state+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030220 	.word	0x00030220

000d48e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <application_thread_current+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030220 	.word	0x00030220

000d48f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <application_thread_invoke+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030220 	.word	0x00030220

000d4908 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b03      	ldr	r3, [pc, #12]	; (d4918 <system_ctrl_set_app_request_handler+0x10>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4912:	9301      	str	r3, [sp, #4]
   d4914:	bd08      	pop	{r3, pc}
   d4916:	0000      	.short	0x0000
   d4918:	00030220 	.word	0x00030220

000d491c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b03      	ldr	r3, [pc, #12]	; (d492c <system_ctrl_set_result+0x10>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4926:	9301      	str	r3, [sp, #4]
   d4928:	bd08      	pop	{r3, pc}
   d492a:	0000      	.short	0x0000
   d492c:	00030220 	.word	0x00030220

000d4930 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b03      	ldr	r3, [pc, #12]	; (d4940 <system_invoke_event_handler+0x10>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d493a:	9301      	str	r3, [sp, #4]
   d493c:	bd08      	pop	{r3, pc}
   d493e:	0000      	.short	0x0000
   d4940:	00030220 	.word	0x00030220

000d4944 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <spark_process+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	689b      	ldr	r3, [r3, #8]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030244 	.word	0x00030244

000d4954 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <spark_cloud_flag_connect+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	68db      	ldr	r3, [r3, #12]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030244 	.word	0x00030244

000d4964 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <spark_cloud_flag_connected+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	695b      	ldr	r3, [r3, #20]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030244 	.word	0x00030244

000d4974 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <spark_send_event+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6a1b      	ldr	r3, [r3, #32]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030244 	.word	0x00030244

000d4984 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030244 	.word	0x00030244

000d4994 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_connect+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	685b      	ldr	r3, [r3, #4]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_connecting+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	689b      	ldr	r3, [r3, #8]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_disconnect+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	68db      	ldr	r3, [r3, #12]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_ready+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	691b      	ldr	r3, [r3, #16]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <network_on+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	695b      	ldr	r3, [r3, #20]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030240 	.word	0x00030240

000d49e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <network_off+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	699b      	ldr	r3, [r3, #24]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030240 	.word	0x00030240

000d49f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <network_listen+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	69db      	ldr	r3, [r3, #28]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030240 	.word	0x00030240

000d4a04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <network_listening+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6a1b      	ldr	r3, [r3, #32]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030240 	.word	0x00030240

000d4a14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <network_set_listen_timeout+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030240 	.word	0x00030240

000d4a24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <network_get_listen_timeout+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030240 	.word	0x00030240

000d4a34 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <malloc+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <free+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <realloc+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	689b      	ldr	r3, [r3, #8]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003021c 	.word	0x0003021c

000d4a64 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <vsnprintf+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003021c 	.word	0x0003021c

000d4a74 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <abort+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003021c 	.word	0x0003021c

000d4a84 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <_malloc_r+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003021c 	.word	0x0003021c

000d4a94 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4a94:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a96:	6883      	ldr	r3, [r0, #8]
   d4a98:	4604      	mov	r4, r0
   d4a9a:	b90b      	cbnz	r3, d4aa0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4a9c:	f003 f875 	bl	d7b8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4aa0:	68c3      	ldr	r3, [r0, #12]
   d4aa2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4aa4:	68a3      	ldr	r3, [r4, #8]
   d4aa6:	b11b      	cbz	r3, d4ab0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4aa8:	2203      	movs	r2, #3
   d4aaa:	4621      	mov	r1, r4
   d4aac:	4620      	mov	r0, r4
   d4aae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	2110      	movs	r1, #16
}
   d4ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4ab8:	f003 b84b 	b.w	d7b52 <_ZdlPvj>

000d4abc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4abc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4abe:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4ac0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4ac2:	689b      	ldr	r3, [r3, #8]
   d4ac4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ac6:	68a3      	ldr	r3, [r4, #8]
   d4ac8:	3b01      	subs	r3, #1
   d4aca:	60a3      	str	r3, [r4, #8]
   d4acc:	b92b      	cbnz	r3, d4ada <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4ace:	6823      	ldr	r3, [r4, #0]
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4ad8:	4718      	bx	r3
   d4ada:	bd10      	pop	{r4, pc}

000d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4adc:	680b      	ldr	r3, [r1, #0]
   d4ade:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ae0:	b113      	cbz	r3, d4ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4ae2:	685a      	ldr	r2, [r3, #4]
   d4ae4:	3201      	adds	r2, #1
   d4ae6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4ae8:	4770      	bx	lr

000d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4aea:	b510      	push	{r4, lr}
   d4aec:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4aee:	6800      	ldr	r0, [r0, #0]
   d4af0:	b128      	cbz	r0, d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4af2:	6843      	ldr	r3, [r0, #4]
   d4af4:	3b01      	subs	r3, #1
   d4af6:	6043      	str	r3, [r0, #4]
   d4af8:	b90b      	cbnz	r3, d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4afa:	f7ff ffdf 	bl	d4abc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4b02:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4b04:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d4b06:	6803      	ldr	r3, [r0, #0]
   d4b08:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4b0a:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4b0c:	d00c      	beq.n	d4b28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d4b0e:	b114      	cbz	r4, d4b16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4b10:	6863      	ldr	r3, [r4, #4]
   d4b12:	3301      	adds	r3, #1
   d4b14:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4b16:	6828      	ldr	r0, [r5, #0]
   d4b18:	b128      	cbz	r0, d4b26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4b1a:	6843      	ldr	r3, [r0, #4]
   d4b1c:	3b01      	subs	r3, #1
   d4b1e:	6043      	str	r3, [r0, #4]
   d4b20:	b90b      	cbnz	r3, d4b26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d4b22:	f7ff ffcb 	bl	d4abc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4b26:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4b28:	4628      	mov	r0, r5
   d4b2a:	bd38      	pop	{r3, r4, r5, pc}

000d4b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b2c:	4802      	ldr	r0, [pc, #8]	; (d4b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4b2e:	2300      	movs	r3, #0
   d4b30:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b32:	f7ff bd19 	b.w	d4568 <os_mutex_recursive_create>
   d4b36:	bf00      	nop
   d4b38:	2003e380 	.word	0x2003e380

000d4b3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	4611      	mov	r1, r2
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	f7ff bf3f 	b.w	d49c4 <network_ready>

000d4b46 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b46:	2200      	movs	r2, #0
   d4b48:	4611      	mov	r1, r2
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff bf5a 	b.w	d4a04 <network_listening>

000d4b50 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	4611      	mov	r1, r2
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	f7ff bf65 	b.w	d4a24 <network_get_listen_timeout>

000d4b5a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	6840      	ldr	r0, [r0, #4]
   d4b5e:	f7ff bf59 	b.w	d4a14 <network_set_listen_timeout>

000d4b62 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b62:	2200      	movs	r2, #0
   d4b64:	f081 0101 	eor.w	r1, r1, #1
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	f7ff bf43 	b.w	d49f4 <network_listen>

000d4b6e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4b6e:	2300      	movs	r3, #0
   d4b70:	461a      	mov	r2, r3
   d4b72:	4619      	mov	r1, r3
   d4b74:	6840      	ldr	r0, [r0, #4]
   d4b76:	f7ff bf35 	b.w	d49e4 <network_off>

000d4b7a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4b7a:	2300      	movs	r3, #0
   d4b7c:	461a      	mov	r2, r3
   d4b7e:	4619      	mov	r1, r3
   d4b80:	6840      	ldr	r0, [r0, #4]
   d4b82:	f7ff bf27 	b.w	d49d4 <network_on>

000d4b86 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b86:	2200      	movs	r2, #0
   d4b88:	4611      	mov	r1, r2
   d4b8a:	6840      	ldr	r0, [r0, #4]
   d4b8c:	f7ff bf0a 	b.w	d49a4 <network_connecting>

000d4b90 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	2102      	movs	r1, #2
   d4b94:	6840      	ldr	r0, [r0, #4]
   d4b96:	f7ff bf0d 	b.w	d49b4 <network_disconnect>

000d4b9a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b9a:	2300      	movs	r3, #0
   d4b9c:	461a      	mov	r2, r3
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff bef8 	b.w	d4994 <network_connect>

000d4ba4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4ba4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4ba6:	4c08      	ldr	r4, [pc, #32]	; (d4bc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4ba8:	2528      	movs	r5, #40	; 0x28
   d4baa:	462a      	mov	r2, r5
   d4bac:	2100      	movs	r1, #0
   d4bae:	4620      	mov	r0, r4
   d4bb0:	f003 f979 	bl	d7ea6 <memset>
        cid = -1;
   d4bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4bb8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bba:	4b04      	ldr	r3, [pc, #16]	; (d4bcc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4bbc:	8025      	strh	r5, [r4, #0]
   d4bbe:	2204      	movs	r2, #4
   d4bc0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4bc2:	4a03      	ldr	r2, [pc, #12]	; (d4bd0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4bc4:	601a      	str	r2, [r3, #0]
   d4bc6:	bd38      	pop	{r3, r4, r5, pc}
   d4bc8:	2003e38c 	.word	0x2003e38c
   d4bcc:	2003e384 	.word	0x2003e384
   d4bd0:	000d81e0 	.word	0x000d81e0

000d4bd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4bd4:	4770      	bx	lr

000d4bd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4bd6:	2000      	movs	r0, #0
   d4bd8:	4770      	bx	lr

000d4bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4bda:	b510      	push	{r4, lr}
   d4bdc:	2110      	movs	r1, #16
   d4bde:	4604      	mov	r4, r0
   d4be0:	f002 ffb7 	bl	d7b52 <_ZdlPvj>
   d4be4:	4620      	mov	r0, r4
   d4be6:	bd10      	pop	{r4, pc}

000d4be8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4be8:	b508      	push	{r3, lr}
      { delete this; }
   d4bea:	b108      	cbz	r0, d4bf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4bec:	f7ff fff5 	bl	d4bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4bf0:	bd08      	pop	{r3, pc}

000d4bf2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bf2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4bf4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bf6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4bf8:	b113      	cbz	r3, d4c00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bfa:	2203      	movs	r2, #3
   d4bfc:	4601      	mov	r1, r0
   d4bfe:	4798      	blx	r3
    }
   d4c00:	4620      	mov	r0, r4
   d4c02:	bd10      	pop	{r4, pc}

000d4c04 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c04:	2200      	movs	r2, #0
   d4c06:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4c08:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c0a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4c0e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c10:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4c14:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c16:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c18:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c1a:	680c      	ldr	r4, [r1, #0]
   d4c1c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c1e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4c20:	bd10      	pop	{r4, pc}

000d4c22 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4c22:	b510      	push	{r4, lr}
   d4c24:	4604      	mov	r4, r0
    free((void*)msg_);
   d4c26:	6800      	ldr	r0, [r0, #0]
   d4c28:	f7ff ff0c 	bl	d4a44 <free>
}
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	bd10      	pop	{r4, pc}

000d4c30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4c30:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4c32:	68c4      	ldr	r4, [r0, #12]
   d4c34:	b1f4      	cbz	r4, d4c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4c36:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4c38:	2b02      	cmp	r3, #2
   d4c3a:	d103      	bne.n	d4c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4c3c:	f104 000c 	add.w	r0, r4, #12
   d4c40:	f7ff ffef 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4c44:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4c46:	b135      	cbz	r5, d4c56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c48:	4628      	mov	r0, r5
   d4c4a:	f7ff ffd2 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
   d4c4e:	2110      	movs	r1, #16
   d4c50:	4628      	mov	r0, r5
   d4c52:	f002 ff7e 	bl	d7b52 <_ZdlPvj>
   d4c56:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4c58:	b135      	cbz	r5, d4c68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4c5a:	4628      	mov	r0, r5
   d4c5c:	f7ff ffc9 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
   d4c60:	2110      	movs	r1, #16
   d4c62:	4628      	mov	r0, r5
   d4c64:	f002 ff75 	bl	d7b52 <_ZdlPvj>
   d4c68:	4620      	mov	r0, r4
   d4c6a:	2114      	movs	r1, #20
   d4c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c70:	f002 bf6f 	b.w	d7b52 <_ZdlPvj>
   d4c74:	bd38      	pop	{r3, r4, r5, pc}

000d4c76 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4c76:	b513      	push	{r0, r1, r4, lr}
   d4c78:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4c7a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4c7e:	2300      	movs	r3, #0
   d4c80:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c82:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c84:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4c86:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c88:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4c8a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c8c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c8e:	f7ff ff2c 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c92:	4620      	mov	r0, r4
   d4c94:	b002      	add	sp, #8
   d4c96:	bd10      	pop	{r4, pc}

000d4c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c9a:	460c      	mov	r4, r1
   d4c9c:	ad02      	add	r5, sp, #8
   d4c9e:	f854 3b04 	ldr.w	r3, [r4], #4
   d4ca2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4ca6:	4606      	mov	r6, r0
   d4ca8:	460f      	mov	r7, r1
   d4caa:	a801      	add	r0, sp, #4
   d4cac:	4621      	mov	r1, r4
   d4cae:	f7ff ff15 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4cb2:	4629      	mov	r1, r5
   d4cb4:	4630      	mov	r0, r6
   d4cb6:	f7ff ffde 	bl	d4c76 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cba:	a801      	add	r0, sp, #4
   d4cbc:	f7ff ff15 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	f7ff ff12 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4cc6:	4638      	mov	r0, r7
   d4cc8:	2108      	movs	r1, #8
   d4cca:	f002 ff42 	bl	d7b52 <_ZdlPvj>
        return p;
    }
   d4cce:	4630      	mov	r0, r6
   d4cd0:	b003      	add	sp, #12
   d4cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4cd4:	b513      	push	{r0, r1, r4, lr}
   d4cd6:	460b      	mov	r3, r1
   d4cd8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cda:	c803      	ldmia	r0, {r0, r1}
   d4cdc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ce0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ce4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ce8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4cec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4cf0:	b002      	add	sp, #8
   d4cf2:	bd10      	pop	{r4, pc}

000d4cf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4cf4:	b538      	push	{r3, r4, r5, lr}
   d4cf6:	2300      	movs	r3, #0
   d4cf8:	4604      	mov	r4, r0
   d4cfa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4cfc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4cfe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d00:	f7ff f9c9 	bl	d4096 <_Znwj>
   d4d04:	b128      	cbz	r0, d4d12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d06:	2301      	movs	r3, #1
   d4d08:	6043      	str	r3, [r0, #4]
   d4d0a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4d0c:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d0e:	6003      	str	r3, [r0, #0]
   d4d10:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d12:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4d14:	4620      	mov	r0, r4
   d4d16:	bd38      	pop	{r3, r4, r5, pc}
   d4d18:	000d8214 	.word	0x000d8214

000d4d1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d20:	b90a      	cbnz	r2, d4d26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d22:	f002 ff32 	bl	d7b8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d26:	68c3      	ldr	r3, [r0, #12]
    }
   d4d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d2c:	4718      	bx	r3

000d4d2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d32:	f100 0110 	add.w	r1, r0, #16
   d4d36:	f7ff fff1 	bl	d4d1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d3a:	bd08      	pop	{r3, pc}

000d4d3c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d3c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d3e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d40:	b90a      	cbnz	r2, d4d46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4d42:	f002 ff22 	bl	d7b8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d46:	68c3      	ldr	r3, [r0, #12]
    }
   d4d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d4c:	4718      	bx	r3

000d4d4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d4e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d50:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d52:	f100 0110 	add.w	r1, r0, #16
   d4d56:	f7ff fff1 	bl	d4d3c <_ZNKSt8functionIFvRKbEEclES1_>
   d4d5a:	bd08      	pop	{r3, pc}

000d4d5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d5e:	2300      	movs	r3, #0
   d4d60:	6083      	str	r3, [r0, #8]
   d4d62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d64:	4604      	mov	r4, r0
   d4d66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d68:	b12b      	cbz	r3, d4d76 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d6a:	2202      	movs	r2, #2
   d4d6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d6e:	68eb      	ldr	r3, [r5, #12]
   d4d70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d72:	68ab      	ldr	r3, [r5, #8]
   d4d74:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d7e:	b089      	sub	sp, #36	; 0x24
   d4d80:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4d82:	4668      	mov	r0, sp
   d4d84:	f7ff ff3e 	bl	d4c04 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d88:	2300      	movs	r3, #0
   d4d8a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d8e:	f04f 0202 	mov.w	r2, #2
   d4d92:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4d96:	2b00      	cmp	r3, #0
   d4d98:	d103      	bne.n	d4da2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4d9a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4d9e:	2900      	cmp	r1, #0
   d4da0:	d1f7      	bne.n	d4d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4da2:	d002      	beq.n	d4daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4da4:	f88d 3008 	strb.w	r3, [sp, #8]
   d4da8:	e063      	b.n	d4e72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4daa:	f114 050c 	adds.w	r5, r4, #12
   d4dae:	d003      	beq.n	d4db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4db0:	4669      	mov	r1, sp
   d4db2:	4628      	mov	r0, r5
   d4db4:	f7ff ff26 	bl	d4c04 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4db8:	f3bf 8f5f 	dmb	sy
   d4dbc:	2301      	movs	r3, #1
   d4dbe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4dc0:	2000      	movs	r0, #0
   d4dc2:	f104 0308 	add.w	r3, r4, #8
   d4dc6:	f3bf 8f5f 	dmb	sy
   d4dca:	e853 6f00 	ldrex	r6, [r3]
   d4dce:	e843 0200 	strex	r2, r0, [r3]
   d4dd2:	2a00      	cmp	r2, #0
   d4dd4:	d1f9      	bne.n	d4dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4dd6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4dda:	2e00      	cmp	r6, #0
   d4ddc:	d049      	beq.n	d4e72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4dde:	f7ff fd83 	bl	d48e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4de2:	b120      	cbz	r0, d4dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4de4:	4629      	mov	r1, r5
   d4de6:	4630      	mov	r0, r6
   d4de8:	f7ff ff98 	bl	d4d1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4dec:	e03a      	b.n	d4e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4dee:	4631      	mov	r1, r6
   d4df0:	a802      	add	r0, sp, #8
   d4df2:	f7ff ffb3 	bl	d4d5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4df6:	68e0      	ldr	r0, [r4, #12]
   d4df8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dfc:	b108      	cbz	r0, d4e02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4dfe:	f003 f8ad 	bl	d7f5c <strdup>
   d4e02:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e04:	2010      	movs	r0, #16
   d4e06:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e0a:	f7ff f944 	bl	d4096 <_Znwj>
   d4e0e:	4605      	mov	r5, r0
   d4e10:	b1e8      	cbz	r0, d4e4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e12:	2700      	movs	r7, #0
   d4e14:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e16:	2018      	movs	r0, #24
   d4e18:	f7ff f93d 	bl	d4096 <_Znwj>
   d4e1c:	4604      	mov	r4, r0
   d4e1e:	b188      	cbz	r0, d4e44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e20:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e22:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e24:	a802      	add	r0, sp, #8
   d4e26:	f7ff ff55 	bl	d4cd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e2a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e2e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e30:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e32:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e34:	a906      	add	r1, sp, #24
   d4e36:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e38:	60e3      	str	r3, [r4, #12]
   d4e3a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e3e:	9205      	str	r2, [sp, #20]
   d4e40:	f7ff fee0 	bl	d4c04 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e44:	4b0d      	ldr	r3, [pc, #52]	; (d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4e46:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e48:	4b0d      	ldr	r3, [pc, #52]	; (d4e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e4a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e4c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4e4e:	a806      	add	r0, sp, #24
   d4e50:	f7ff fee7 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e54:	a802      	add	r0, sp, #8
   d4e56:	f7ff fecc 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e5a:	2200      	movs	r2, #0
   d4e5c:	4629      	mov	r1, r5
   d4e5e:	4809      	ldr	r0, [pc, #36]	; (d4e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4e60:	f7ff fd4a 	bl	d48f8 <application_thread_invoke>
   d4e64:	4630      	mov	r0, r6
   d4e66:	f7ff fec4 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e6a:	2110      	movs	r1, #16
   d4e6c:	4630      	mov	r0, r6
   d4e6e:	f002 fe70 	bl	d7b52 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4e72:	4668      	mov	r0, sp
   d4e74:	f7ff fed5 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
    }
   d4e78:	b009      	add	sp, #36	; 0x24
   d4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e7c:	000d4d2f 	.word	0x000d4d2f
   d4e80:	000d4fa5 	.word	0x000d4fa5
   d4e84:	000d4a95 	.word	0x000d4a95

000d4e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e8c:	b08b      	sub	sp, #44	; 0x2c
   d4e8e:	4606      	mov	r6, r0
   d4e90:	460f      	mov	r7, r1
   d4e92:	4690      	mov	r8, r2
   d4e94:	4699      	mov	r9, r3
   d4e96:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e9a:	f7ff fd63 	bl	d4964 <spark_cloud_flag_connected>
   d4e9e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4ea0:	4683      	mov	fp, r0
   d4ea2:	bb30      	cbnz	r0, d4ef2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ea4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ea8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4eaa:	a905      	add	r1, sp, #20
   d4eac:	4628      	mov	r0, r5
   d4eae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4eb2:	f7ff fea7 	bl	d4c04 <_ZN8particle5ErrorC1EOS0_>
   d4eb6:	2014      	movs	r0, #20
   d4eb8:	f7ff f8ed 	bl	d4096 <_Znwj>
   d4ebc:	4604      	mov	r4, r0
   d4ebe:	b158      	cbz	r0, d4ed8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4ec0:	2302      	movs	r3, #2
   d4ec2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ec4:	2301      	movs	r3, #1
   d4ec6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4ec8:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ecc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4ed0:	4629      	mov	r1, r5
   d4ed2:	300c      	adds	r0, #12
   d4ed4:	f7ff fe96 	bl	d4c04 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4ed8:	4630      	mov	r0, r6
   d4eda:	4621      	mov	r1, r4
   d4edc:	f840 4b04 	str.w	r4, [r0], #4
   d4ee0:	f7ff ff08 	bl	d4cf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ee4:	4628      	mov	r0, r5
   d4ee6:	f7ff fe9c 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4eea:	a805      	add	r0, sp, #20
   d4eec:	f7ff fe99 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
   d4ef0:	e052      	b.n	d4f98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ef2:	2400      	movs	r4, #0
   d4ef4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4ef6:	2014      	movs	r0, #20
   d4ef8:	606c      	str	r4, [r5, #4]
   d4efa:	60ac      	str	r4, [r5, #8]
   d4efc:	9307      	str	r3, [sp, #28]
   d4efe:	f7ff f8ca 	bl	d4096 <_Znwj>
   d4f02:	4601      	mov	r1, r0
   d4f04:	b118      	cbz	r0, d4f0e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4f06:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f08:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f0a:	6044      	str	r4, [r0, #4]
   d4f0c:	6084      	str	r4, [r0, #8]
   d4f0e:	a804      	add	r0, sp, #16
   d4f10:	9103      	str	r1, [sp, #12]
   d4f12:	f7ff feef 	bl	d4cf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4f16:	4b22      	ldr	r3, [pc, #136]	; (d4fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4f18:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f1a:	2008      	movs	r0, #8
   d4f1c:	f7ff f8bb 	bl	d4096 <_Znwj>
   d4f20:	4604      	mov	r4, r0
   d4f22:	b128      	cbz	r0, d4f30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f24:	9b03      	ldr	r3, [sp, #12]
   d4f26:	f840 3b04 	str.w	r3, [r0], #4
   d4f2a:	a904      	add	r1, sp, #16
   d4f2c:	f7ff fdd6 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f30:	9500      	str	r5, [sp, #0]
   d4f32:	fa5f f38a 	uxtb.w	r3, sl
   d4f36:	464a      	mov	r2, r9
   d4f38:	4641      	mov	r1, r8
   d4f3a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4f3c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f3e:	f7ff fd19 	bl	d4974 <spark_send_event>
   d4f42:	b920      	cbnz	r0, d4f4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4f44:	9b03      	ldr	r3, [sp, #12]
   d4f46:	785b      	ldrb	r3, [r3, #1]
   d4f48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4f4c:	b183      	cbz	r3, d4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4f4e:	9b03      	ldr	r3, [sp, #12]
   d4f50:	9305      	str	r3, [sp, #20]
   d4f52:	a904      	add	r1, sp, #16
   d4f54:	a806      	add	r0, sp, #24
   d4f56:	f7ff fdc1 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4f5a:	a905      	add	r1, sp, #20
   d4f5c:	4630      	mov	r0, r6
   d4f5e:	f7ff fe8a 	bl	d4c76 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f62:	a806      	add	r0, sp, #24
   d4f64:	f7ff fdc1 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f68:	a804      	add	r0, sp, #16
   d4f6a:	f7ff fdbe 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f6e:	e013      	b.n	d4f98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4f70:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4f74:	a905      	add	r1, sp, #20
   d4f76:	a803      	add	r0, sp, #12
   d4f78:	9205      	str	r2, [sp, #20]
   d4f7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f7e:	f7ff fefd 	bl	d4d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f82:	a805      	add	r0, sp, #20
   d4f84:	f7ff fe4d 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4f88:	a805      	add	r0, sp, #20
   d4f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4f8c:	f7ff fe84 	bl	d4c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4f90:	a806      	add	r0, sp, #24
   d4f92:	f7ff fdaa 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f96:	e7da      	b.n	d4f4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4f98:	4630      	mov	r0, r6
   d4f9a:	b00b      	add	sp, #44	; 0x2c
   d4f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fa0:	000d5115 	.word	0x000d5115

000d4fa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fa4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fa8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4faa:	d006      	beq.n	d4fba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4fac:	2a03      	cmp	r2, #3
   d4fae:	d017      	beq.n	d4fe0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4fb0:	2a01      	cmp	r2, #1
   d4fb2:	d122      	bne.n	d4ffa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fb4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4fb6:	6003      	str	r3, [r0, #0]
	      break;
   d4fb8:	e01f      	b.n	d4ffa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fba:	2018      	movs	r0, #24
   d4fbc:	680e      	ldr	r6, [r1, #0]
   d4fbe:	f7ff f86a 	bl	d4096 <_Znwj>
   d4fc2:	4605      	mov	r5, r0
   d4fc4:	b150      	cbz	r0, d4fdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4fc6:	4631      	mov	r1, r6
   d4fc8:	f7ff fec8 	bl	d4d5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4fcc:	6930      	ldr	r0, [r6, #16]
   d4fce:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4fd2:	b108      	cbz	r0, d4fd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4fd4:	f002 ffc2 	bl	d7f5c <strdup>
   d4fd8:	6128      	str	r0, [r5, #16]
   d4fda:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fdc:	6025      	str	r5, [r4, #0]
   d4fde:	e00c      	b.n	d4ffa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4fe0:	6804      	ldr	r4, [r0, #0]
   d4fe2:	b154      	cbz	r4, d4ffa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4fe4:	f104 0010 	add.w	r0, r4, #16
   d4fe8:	f7ff fe1b 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fec:	4620      	mov	r0, r4
   d4fee:	f7ff fe00 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ff2:	2118      	movs	r1, #24
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	f002 fdac 	bl	d7b52 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4ffa:	2000      	movs	r0, #0
   d4ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ffe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4ffe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5000:	2300      	movs	r3, #0
   d5002:	6083      	str	r3, [r0, #8]
   d5004:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5006:	4604      	mov	r4, r0
   d5008:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d500a:	b12b      	cbz	r3, d5018 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d500c:	2202      	movs	r2, #2
   d500e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5010:	68eb      	ldr	r3, [r5, #12]
   d5012:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5014:	68ab      	ldr	r3, [r5, #8]
   d5016:	60a3      	str	r3, [r4, #8]
	}
    }
   d5018:	4620      	mov	r0, r4
   d501a:	bd38      	pop	{r3, r4, r5, pc}

000d501c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d501c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d501e:	b570      	push	{r4, r5, r6, lr}
   d5020:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5022:	d006      	beq.n	d5032 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5024:	2a03      	cmp	r2, #3
   d5026:	d011      	beq.n	d504c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5028:	2a01      	cmp	r2, #1
   d502a:	d118      	bne.n	d505e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d502c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d502e:	6003      	str	r3, [r0, #0]
	      break;
   d5030:	e015      	b.n	d505e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5032:	2014      	movs	r0, #20
   d5034:	680e      	ldr	r6, [r1, #0]
   d5036:	f7ff f82e 	bl	d4096 <_Znwj>
   d503a:	4605      	mov	r5, r0
   d503c:	b120      	cbz	r0, d5048 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d503e:	4631      	mov	r1, r6
   d5040:	f7ff ffdd 	bl	d4ffe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5044:	7c33      	ldrb	r3, [r6, #16]
   d5046:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5048:	6025      	str	r5, [r4, #0]
   d504a:	e008      	b.n	d505e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d504c:	6804      	ldr	r4, [r0, #0]
   d504e:	b134      	cbz	r4, d505e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5050:	4620      	mov	r0, r4
   d5052:	f7ff fdce 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5056:	2114      	movs	r1, #20
   d5058:	4620      	mov	r0, r4
   d505a:	f002 fd7a 	bl	d7b52 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d505e:	2000      	movs	r0, #0
   d5060:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5064:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5066:	2300      	movs	r3, #0
   d5068:	b087      	sub	sp, #28
   d506a:	460c      	mov	r4, r1
   d506c:	f3bf 8f5f 	dmb	sy
   d5070:	e850 6f00 	ldrex	r6, [r0]
   d5074:	e840 3200 	strex	r2, r3, [r0]
   d5078:	2a00      	cmp	r2, #0
   d507a:	d1f9      	bne.n	d5070 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d507c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5080:	2e00      	cmp	r6, #0
   d5082:	d03f      	beq.n	d5104 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5084:	4618      	mov	r0, r3
   d5086:	f7ff fc2f 	bl	d48e8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d508a:	4607      	mov	r7, r0
   d508c:	b120      	cbz	r0, d5098 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d508e:	4621      	mov	r1, r4
   d5090:	4630      	mov	r0, r6
   d5092:	f7ff fe53 	bl	d4d3c <_ZNKSt8functionIFvRKbEEclES1_>
   d5096:	e02e      	b.n	d50f6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5098:	4631      	mov	r1, r6
   d509a:	a801      	add	r0, sp, #4
   d509c:	f7ff ffaf 	bl	d4ffe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50a0:	7823      	ldrb	r3, [r4, #0]
   d50a2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50a6:	2010      	movs	r0, #16
   d50a8:	f7fe fff5 	bl	d4096 <_Znwj>
   d50ac:	4605      	mov	r5, r0
   d50ae:	b1d0      	cbz	r0, d50e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50b0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50b2:	2014      	movs	r0, #20
   d50b4:	f7fe ffef 	bl	d4096 <_Znwj>
   d50b8:	4604      	mov	r4, r0
   d50ba:	b178      	cbz	r0, d50dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50bc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50be:	4601      	mov	r1, r0
   d50c0:	a801      	add	r0, sp, #4
   d50c2:	f7ff fe07 	bl	d4cd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50c6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d50c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50ca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50ce:	9203      	str	r2, [sp, #12]
   d50d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d2:	60e3      	str	r3, [r4, #12]
   d50d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50d8:	9204      	str	r2, [sp, #16]
   d50da:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d50dc:	4b0a      	ldr	r3, [pc, #40]	; (d5108 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d50de:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d50e0:	4b0a      	ldr	r3, [pc, #40]	; (d510c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50e2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d50e4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50e6:	a801      	add	r0, sp, #4
   d50e8:	f7ff fd83 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d50ec:	2200      	movs	r2, #0
   d50ee:	4629      	mov	r1, r5
   d50f0:	4807      	ldr	r0, [pc, #28]	; (d5110 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d50f2:	f7ff fc01 	bl	d48f8 <application_thread_invoke>
   d50f6:	4630      	mov	r0, r6
   d50f8:	f7ff fd7b 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d50fc:	2110      	movs	r1, #16
   d50fe:	4630      	mov	r0, r6
   d5100:	f002 fd27 	bl	d7b52 <_ZdlPvj>
        }
    }
   d5104:	b007      	add	sp, #28
   d5106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5108:	000d4d4f 	.word	0x000d4d4f
   d510c:	000d501d 	.word	0x000d501d
   d5110:	000d4a95 	.word	0x000d4a95

000d5114 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5114:	b530      	push	{r4, r5, lr}
   d5116:	b085      	sub	sp, #20
   d5118:	4604      	mov	r4, r0
   d511a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d511c:	4668      	mov	r0, sp
   d511e:	4611      	mov	r1, r2
   d5120:	f7ff fdba 	bl	d4c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5124:	b17c      	cbz	r4, d5146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5126:	b224      	sxth	r4, r4
   d5128:	4628      	mov	r0, r5
   d512a:	b10d      	cbz	r5, d5130 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d512c:	f002 ff16 	bl	d7f5c <strdup>
   d5130:	9002      	str	r0, [sp, #8]
   d5132:	a902      	add	r1, sp, #8
   d5134:	4668      	mov	r0, sp
   d5136:	f8ad 400c 	strh.w	r4, [sp, #12]
   d513a:	f7ff fe1f 	bl	d4d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d513e:	a802      	add	r0, sp, #8
   d5140:	f7ff fd6f 	bl	d4c22 <_ZN8particle5ErrorD1Ev>
   d5144:	e01d      	b.n	d5182 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5146:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5148:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d514c:	f04f 0201 	mov.w	r2, #1
   d5150:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5154:	42a3      	cmp	r3, r4
   d5156:	d103      	bne.n	d5160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5158:	e8c0 2f41 	strexb	r1, r2, [r0]
   d515c:	2900      	cmp	r1, #0
   d515e:	d1f7      	bne.n	d5150 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5160:	d002      	beq.n	d5168 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5162:	f88d 3008 	strb.w	r3, [sp, #8]
   d5166:	e00c      	b.n	d5182 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5168:	f110 010c 	adds.w	r1, r0, #12
   d516c:	f04f 0301 	mov.w	r3, #1
   d5170:	bf18      	it	ne
   d5172:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5174:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5178:	3004      	adds	r0, #4
   d517a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d517e:	f7ff ff71 	bl	d5064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5182:	a801      	add	r0, sp, #4
   d5184:	f7ff fcb1 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5188:	b005      	add	sp, #20
   d518a:	bd30      	pop	{r4, r5, pc}

000d518c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d518c:	2200      	movs	r2, #0
   d518e:	4611      	mov	r1, r2
   d5190:	6840      	ldr	r0, [r0, #4]
   d5192:	f7ff bc37 	b.w	d4a04 <network_listening>

000d5196 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5196:	2200      	movs	r2, #0
   d5198:	4611      	mov	r1, r2
   d519a:	6840      	ldr	r0, [r0, #4]
   d519c:	f7ff bc42 	b.w	d4a24 <network_get_listen_timeout>

000d51a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51a0:	2200      	movs	r2, #0
   d51a2:	6840      	ldr	r0, [r0, #4]
   d51a4:	f7ff bc36 	b.w	d4a14 <network_set_listen_timeout>

000d51a8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51a8:	2200      	movs	r2, #0
   d51aa:	f081 0101 	eor.w	r1, r1, #1
   d51ae:	6840      	ldr	r0, [r0, #4]
   d51b0:	f7ff bc20 	b.w	d49f4 <network_listen>

000d51b4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d51b4:	2300      	movs	r3, #0
   d51b6:	461a      	mov	r2, r3
   d51b8:	4619      	mov	r1, r3
   d51ba:	6840      	ldr	r0, [r0, #4]
   d51bc:	f7ff bc12 	b.w	d49e4 <network_off>

000d51c0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d51c0:	2300      	movs	r3, #0
   d51c2:	461a      	mov	r2, r3
   d51c4:	4619      	mov	r1, r3
   d51c6:	6840      	ldr	r0, [r0, #4]
   d51c8:	f7ff bc04 	b.w	d49d4 <network_on>

000d51cc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51cc:	2200      	movs	r2, #0
   d51ce:	4611      	mov	r1, r2
   d51d0:	6840      	ldr	r0, [r0, #4]
   d51d2:	f7ff bbf7 	b.w	d49c4 <network_ready>

000d51d6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51d6:	2200      	movs	r2, #0
   d51d8:	4611      	mov	r1, r2
   d51da:	6840      	ldr	r0, [r0, #4]
   d51dc:	f7ff bbe2 	b.w	d49a4 <network_connecting>

000d51e0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51e0:	2200      	movs	r2, #0
   d51e2:	2102      	movs	r1, #2
   d51e4:	6840      	ldr	r0, [r0, #4]
   d51e6:	f7ff bbe5 	b.w	d49b4 <network_disconnect>

000d51ea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51ea:	2300      	movs	r3, #0
   d51ec:	461a      	mov	r2, r3
   d51ee:	6840      	ldr	r0, [r0, #4]
   d51f0:	f7ff bbd0 	b.w	d4994 <network_connect>

000d51f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d51f4:	4b02      	ldr	r3, [pc, #8]	; (d5200 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51f6:	2203      	movs	r2, #3
   d51f8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51fa:	4a02      	ldr	r2, [pc, #8]	; (d5204 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51fc:	601a      	str	r2, [r3, #0]
   d51fe:	4770      	bx	lr
   d5200:	2003e3b4 	.word	0x2003e3b4
   d5204:	000d8230 	.word	0x000d8230

000d5208 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5208:	4770      	bx	lr

000d520a <_ZN9IPAddressD0Ev>:
   d520a:	b510      	push	{r4, lr}
   d520c:	2118      	movs	r1, #24
   d520e:	4604      	mov	r4, r0
   d5210:	f002 fc9f 	bl	d7b52 <_ZdlPvj>
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}

000d5218 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5218:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d521a:	7d03      	ldrb	r3, [r0, #20]
   d521c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d521e:	b08d      	sub	sp, #52	; 0x34
   d5220:	460e      	mov	r6, r1
   d5222:	f100 0704 	add.w	r7, r0, #4
   d5226:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d522a:	d002      	beq.n	d5232 <_ZNK9IPAddress7printToER5Print+0x1a>
   d522c:	f100 0508 	add.w	r5, r0, #8
   d5230:	e018      	b.n	d5264 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5232:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5234:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5236:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d523a:	232f      	movs	r3, #47	; 0x2f
   d523c:	462a      	mov	r2, r5
   d523e:	200a      	movs	r0, #10
   d5240:	f7ff fa1a 	bl	d4678 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5244:	4628      	mov	r0, r5
   d5246:	f002 fea4 	bl	d7f92 <strlen>
   d524a:	6833      	ldr	r3, [r6, #0]
   d524c:	4602      	mov	r2, r0
   d524e:	68db      	ldr	r3, [r3, #12]
   d5250:	4629      	mov	r1, r5
   d5252:	4630      	mov	r0, r6
   d5254:	4798      	blx	r3
   d5256:	e00f      	b.n	d5278 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5258:	b124      	cbz	r4, d5264 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d525a:	212e      	movs	r1, #46	; 0x2e
   d525c:	4630      	mov	r0, r6
   d525e:	f001 fe21 	bl	d6ea4 <_ZN5Print5printEc>
   d5262:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5264:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5268:	220a      	movs	r2, #10
   d526a:	4630      	mov	r0, r6
   d526c:	f001 fe56 	bl	d6f1c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5270:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5272:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5274:	d1f0      	bne.n	d5258 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5276:	4620      	mov	r0, r4
    }
    return n;
}
   d5278:	b00d      	add	sp, #52	; 0x34
   d527a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d527c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d527c:	b510      	push	{r4, lr}
   d527e:	4b05      	ldr	r3, [pc, #20]	; (d5294 <_ZN9IPAddressC1Ev+0x18>)
   d5280:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5282:	2211      	movs	r2, #17
   d5284:	f840 3b04 	str.w	r3, [r0], #4
   d5288:	2100      	movs	r1, #0
   d528a:	f002 fe0c 	bl	d7ea6 <memset>
{
    clear();
}
   d528e:	4620      	mov	r0, r4
   d5290:	bd10      	pop	{r4, pc}
   d5292:	bf00      	nop
   d5294:	000d8264 	.word	0x000d8264

000d5298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5298:	4603      	mov	r3, r0
   d529a:	4a07      	ldr	r2, [pc, #28]	; (d52b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d529c:	b510      	push	{r4, lr}
   d529e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52a2:	f101 0210 	add.w	r2, r1, #16
   d52a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d52aa:	f843 4b04 	str.w	r4, [r3], #4
   d52ae:	4291      	cmp	r1, r2
   d52b0:	d1f9      	bne.n	d52a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52b2:	780a      	ldrb	r2, [r1, #0]
   d52b4:	701a      	strb	r2, [r3, #0]
}
   d52b6:	bd10      	pop	{r4, pc}
   d52b8:	000d8264 	.word	0x000d8264

000d52bc <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d52bc:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d52be:	2b04      	cmp	r3, #4
   d52c0:	d101      	bne.n	d52c6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d52c2:	6840      	ldr	r0, [r0, #4]
   d52c4:	e008      	b.n	d52d8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d52c6:	2b06      	cmp	r3, #6
   d52c8:	d10a      	bne.n	d52e0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d52ca:	6843      	ldr	r3, [r0, #4]
   d52cc:	b953      	cbnz	r3, d52e4 <_ZNK9IPAddresscvbEv+0x28>
   d52ce:	6883      	ldr	r3, [r0, #8]
   d52d0:	b943      	cbnz	r3, d52e4 <_ZNK9IPAddresscvbEv+0x28>
   d52d2:	68c3      	ldr	r3, [r0, #12]
   d52d4:	b933      	cbnz	r3, d52e4 <_ZNK9IPAddresscvbEv+0x28>
   d52d6:	6900      	ldr	r0, [r0, #16]
   d52d8:	3000      	adds	r0, #0
   d52da:	bf18      	it	ne
   d52dc:	2001      	movne	r0, #1
   d52de:	4770      	bx	lr
    } else {
        return false;
   d52e0:	2000      	movs	r0, #0
   d52e2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d52e4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d52e6:	4770      	bx	lr

000d52e8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52fa:	2304      	movs	r3, #4
   d52fc:	6041      	str	r1, [r0, #4]
   d52fe:	7503      	strb	r3, [r0, #20]
   d5300:	bd10      	pop	{r4, pc}

000d5302 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5302:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5304:	780d      	ldrb	r5, [r1, #0]
   d5306:	788b      	ldrb	r3, [r1, #2]
   d5308:	784a      	ldrb	r2, [r1, #1]
   d530a:	78c9      	ldrb	r1, [r1, #3]
   d530c:	9100      	str	r1, [sp, #0]
   d530e:	4629      	mov	r1, r5
   d5310:	f7ff ffea 	bl	d52e8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5314:	b003      	add	sp, #12
   d5316:	bd30      	pop	{r4, r5, pc}

000d5318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d5318:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d531c:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d531e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d5322:	2901      	cmp	r1, #1
   d5324:	4610      	mov	r0, r2
   d5326:	d104      	bne.n	d5332 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d5328:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d532c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d5330:	e004      	b.n	d533c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d5332:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5334:	bf04      	itt	eq
   d5336:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d533a:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d533c:	3b01      	subs	r3, #1
   d533e:	f102 0210 	add.w	r2, r2, #16
   d5342:	d1ec      	bne.n	d531e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d5344:	4770      	bx	lr

000d5346 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d5346:	b40e      	push	{r1, r2, r3}
   d5348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d534c:	b087      	sub	sp, #28
   d534e:	af00      	add	r7, sp, #0
   d5350:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d5354:	4605      	mov	r5, r0
   d5356:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d535a:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d535c:	4623      	mov	r3, r4
   d535e:	4632      	mov	r2, r6
   d5360:	2110      	movs	r1, #16
   d5362:	f107 0008 	add.w	r0, r7, #8
   d5366:	f7ff fb7d 	bl	d4a64 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d536a:	280f      	cmp	r0, #15
   d536c:	d916      	bls.n	d539c <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d536e:	f100 0308 	add.w	r3, r0, #8
   d5372:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5376:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5378:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d537c:	4632      	mov	r2, r6
   d537e:	1c41      	adds	r1, r0, #1
   d5380:	4623      	mov	r3, r4
   d5382:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d5384:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5386:	f7ff fb6d 	bl	d4a64 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d538a:	1e02      	subs	r2, r0, #0
   d538c:	dd04      	ble.n	d5398 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d538e:	682b      	ldr	r3, [r5, #0]
   d5390:	4669      	mov	r1, sp
   d5392:	689b      	ldr	r3, [r3, #8]
   d5394:	4628      	mov	r0, r5
   d5396:	4798      	blx	r3
   d5398:	46c5      	mov	sp, r8
   d539a:	e007      	b.n	d53ac <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d539c:	b130      	cbz	r0, d53ac <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d539e:	682b      	ldr	r3, [r5, #0]
   d53a0:	4602      	mov	r2, r0
   d53a2:	689b      	ldr	r3, [r3, #8]
   d53a4:	f107 0108 	add.w	r1, r7, #8
   d53a8:	4628      	mov	r0, r5
   d53aa:	4798      	blx	r3
    }
}
   d53ac:	371c      	adds	r7, #28
   d53ae:	46bd      	mov	sp, r7
   d53b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d53b4:	b003      	add	sp, #12
   d53b6:	4770      	bx	lr

000d53b8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d53b8:	b513      	push	{r0, r1, r4, lr}
   d53ba:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d53bc:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d53be:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d53c2:	6894      	ldr	r4, [r2, #8]
   d53c4:	4619      	mov	r1, r3
   d53c6:	2201      	movs	r2, #1
   d53c8:	47a0      	blx	r4
}
   d53ca:	b002      	add	sp, #8
   d53cc:	bd10      	pop	{r4, pc}

000d53ce <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d53ce:	6883      	ldr	r3, [r0, #8]
   d53d0:	b1fb      	cbz	r3, d5412 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d53d2:	781a      	ldrb	r2, [r3, #0]
   d53d4:	2a03      	cmp	r2, #3
   d53d6:	d81a      	bhi.n	d540e <_ZNK5spark9JSONValue4typeEv+0x40>
   d53d8:	e8df f002 	tbb	[pc, r2]
   d53dc:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d53e0:	2005      	movs	r0, #5
   d53e2:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d53e4:	6802      	ldr	r2, [r0, #0]
   d53e6:	685b      	ldr	r3, [r3, #4]
   d53e8:	6852      	ldr	r2, [r2, #4]
   d53ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d53ec:	282d      	cmp	r0, #45	; 0x2d
   d53ee:	d014      	beq.n	d541a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d53f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d53f4:	2b09      	cmp	r3, #9
   d53f6:	d910      	bls.n	d541a <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d53f8:	2874      	cmp	r0, #116	; 0x74
   d53fa:	d010      	beq.n	d541e <_ZNK5spark9JSONValue4typeEv+0x50>
   d53fc:	2866      	cmp	r0, #102	; 0x66
   d53fe:	d00e      	beq.n	d541e <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5400:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5404:	4258      	negs	r0, r3
   d5406:	4158      	adcs	r0, r3
   d5408:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d540a:	2006      	movs	r0, #6
   d540c:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d540e:	2000      	movs	r0, #0
   d5410:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5412:	4618      	mov	r0, r3
   d5414:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d5416:	2004      	movs	r0, #4
   d5418:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d541a:	2003      	movs	r0, #3
   d541c:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d541e:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d5420:	4770      	bx	lr

000d5422 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d5422:	b510      	push	{r4, lr}
   d5424:	4604      	mov	r4, r0
    switch (type()) {
   d5426:	f7ff ffd2 	bl	d53ce <_ZNK5spark9JSONValue4typeEv>
   d542a:	2802      	cmp	r0, #2
   d542c:	d00d      	beq.n	d544a <_ZNK5spark9JSONValue5toIntEv+0x28>
   d542e:	d316      	bcc.n	d545e <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d5430:	2804      	cmp	r0, #4
   d5432:	d814      	bhi.n	d545e <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d5434:	6822      	ldr	r2, [r4, #0]
   d5436:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d5438:	6850      	ldr	r0, [r2, #4]
   d543a:	685b      	ldr	r3, [r3, #4]
   d543c:	220a      	movs	r2, #10
   d543e:	2100      	movs	r1, #0
   d5440:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d5442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d5446:	f002 be67 	b.w	d8118 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d544a:	6822      	ldr	r2, [r4, #0]
   d544c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d544e:	6852      	ldr	r2, [r2, #4]
   d5450:	685b      	ldr	r3, [r3, #4]
   d5452:	5cd0      	ldrb	r0, [r2, r3]
   d5454:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5458:	4258      	negs	r0, r3
   d545a:	4158      	adcs	r0, r3
   d545c:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d545e:	2000      	movs	r0, #0
    }
}
   d5460:	bd10      	pop	{r4, pc}

000d5462 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5462:	b510      	push	{r4, lr}
    if (!n_) {
   d5464:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5466:	4604      	mov	r4, r0
    if (!n_) {
   d5468:	b15b      	cbz	r3, d5482 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d546a:	6880      	ldr	r0, [r0, #8]
   d546c:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d546e:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d5470:	3010      	adds	r0, #16
   d5472:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5474:	6120      	str	r0, [r4, #16]
    --n_;
   d5476:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5478:	b12b      	cbz	r3, d5486 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d547a:	f7ff ff4d 	bl	d5318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d547e:	60a0      	str	r0, [r4, #8]
   d5480:	e001      	b.n	d5486 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d5482:	4618      	mov	r0, r3
   d5484:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d5486:	2001      	movs	r0, #1
}
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d548a:	b510      	push	{r4, lr}
    write('}');
   d548c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d548e:	4604      	mov	r4, r0
    write('}');
   d5490:	f7ff ff92 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5494:	2301      	movs	r3, #1
   d5496:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5498:	4620      	mov	r0, r4
   d549a:	bd10      	pop	{r4, pc}

000d549c <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d549c:	b508      	push	{r3, lr}
    switch (state_) {
   d549e:	7903      	ldrb	r3, [r0, #4]
   d54a0:	2b01      	cmp	r3, #1
   d54a2:	d002      	beq.n	d54aa <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d54a4:	2b02      	cmp	r3, #2
   d54a6:	d002      	beq.n	d54ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d54a8:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d54aa:	212c      	movs	r1, #44	; 0x2c
   d54ac:	e000      	b.n	d54b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d54ae:	213a      	movs	r1, #58	; 0x3a
   d54b0:	f7ff ff82 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
   d54b4:	bd08      	pop	{r3, pc}

000d54b6 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d54b6:	b510      	push	{r4, lr}
   d54b8:	4604      	mov	r4, r0
    writeSeparator();
   d54ba:	f7ff ffef 	bl	d549c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d54be:	4620      	mov	r0, r4
   d54c0:	217b      	movs	r1, #123	; 0x7b
   d54c2:	f7ff ff79 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d54c6:	2300      	movs	r3, #0
   d54c8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d54ca:	4620      	mov	r0, r4
   d54cc:	bd10      	pop	{r4, pc}
	...

000d54d0 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d54d0:	b538      	push	{r3, r4, r5, lr}
   d54d2:	4604      	mov	r4, r0
   d54d4:	460d      	mov	r5, r1
    writeSeparator();
   d54d6:	f7ff ffe1 	bl	d549c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d54da:	6823      	ldr	r3, [r4, #0]
   d54dc:	4904      	ldr	r1, [pc, #16]	; (d54f0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d54de:	68db      	ldr	r3, [r3, #12]
   d54e0:	4620      	mov	r0, r4
   d54e2:	462a      	mov	r2, r5
   d54e4:	4798      	blx	r3
    state_ = NEXT;
   d54e6:	2301      	movs	r3, #1
   d54e8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d54ea:	4620      	mov	r0, r4
   d54ec:	bd38      	pop	{r3, r4, r5, pc}
   d54ee:	bf00      	nop
   d54f0:	000d843d 	.word	0x000d843d

000d54f4 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d54f4:	b538      	push	{r3, r4, r5, lr}
   d54f6:	4604      	mov	r4, r0
   d54f8:	460d      	mov	r5, r1
    writeSeparator();
   d54fa:	f7ff ffcf 	bl	d549c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d54fe:	6823      	ldr	r3, [r4, #0]
   d5500:	4904      	ldr	r1, [pc, #16]	; (d5514 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d5502:	68db      	ldr	r3, [r3, #12]
   d5504:	4620      	mov	r0, r4
   d5506:	462a      	mov	r2, r5
   d5508:	4798      	blx	r3
    state_ = NEXT;
   d550a:	2301      	movs	r3, #1
   d550c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d550e:	4620      	mov	r0, r4
   d5510:	bd38      	pop	{r3, r4, r5, pc}
   d5512:	bf00      	nop
   d5514:	000d827f 	.word	0x000d827f

000d5518 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d551a:	460d      	mov	r5, r1
   d551c:	4617      	mov	r7, r2
    write('"');
   d551e:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5520:	4604      	mov	r4, r0
   d5522:	442f      	add	r7, r5
    write('"');
   d5524:	f7ff ff48 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
   d5528:	462a      	mov	r2, r5
    const char* const end = str + size;
   d552a:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d552c:	42ba      	cmp	r2, r7
   d552e:	d038      	beq.n	d55a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d5530:	4616      	mov	r6, r2
   d5532:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d5536:	2d22      	cmp	r5, #34	; 0x22
   d5538:	d003      	beq.n	d5542 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d553a:	2d5c      	cmp	r5, #92	; 0x5c
   d553c:	d001      	beq.n	d5542 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d553e:	2d1f      	cmp	r5, #31
   d5540:	d82d      	bhi.n	d559e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d5542:	6823      	ldr	r3, [r4, #0]
   d5544:	1a52      	subs	r2, r2, r1
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	4620      	mov	r0, r4
   d554a:	4798      	blx	r3
            write('\\');
   d554c:	215c      	movs	r1, #92	; 0x5c
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff ff32 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5554:	2d0c      	cmp	r5, #12
   d5556:	d019      	beq.n	d558c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d5558:	d807      	bhi.n	d556a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d555a:	2d09      	cmp	r5, #9
   d555c:	d00f      	beq.n	d557e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d555e:	2d0a      	cmp	r5, #10
   d5560:	d012      	beq.n	d5588 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d5562:	2d08      	cmp	r5, #8
   d5564:	d114      	bne.n	d5590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5566:	2162      	movs	r1, #98	; 0x62
   d5568:	e00a      	b.n	d5580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d556a:	2d22      	cmp	r5, #34	; 0x22
   d556c:	d005      	beq.n	d557a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d556e:	2d5c      	cmp	r5, #92	; 0x5c
   d5570:	d003      	beq.n	d557a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d5572:	2d0d      	cmp	r5, #13
   d5574:	d10c      	bne.n	d5590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d5576:	2172      	movs	r1, #114	; 0x72
   d5578:	e002      	b.n	d5580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d557a:	4629      	mov	r1, r5
   d557c:	e000      	b.n	d5580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d557e:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5580:	4620      	mov	r0, r4
   d5582:	f7ff ff19 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
                break;
   d5586:	e009      	b.n	d559c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5588:	216e      	movs	r1, #110	; 0x6e
   d558a:	e7f9      	b.n	d5580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d558c:	2166      	movs	r1, #102	; 0x66
   d558e:	e7f7      	b.n	d5580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d5590:	6823      	ldr	r3, [r4, #0]
   d5592:	490a      	ldr	r1, [pc, #40]	; (d55bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d5594:	68db      	ldr	r3, [r3, #12]
   d5596:	462a      	mov	r2, r5
   d5598:	4620      	mov	r0, r4
   d559a:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d559c:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d559e:	4632      	mov	r2, r6
   d55a0:	e7c4      	b.n	d552c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d55a2:	4291      	cmp	r1, r2
   d55a4:	d004      	beq.n	d55b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d55a6:	6823      	ldr	r3, [r4, #0]
   d55a8:	1a52      	subs	r2, r2, r1
   d55aa:	689d      	ldr	r5, [r3, #8]
   d55ac:	4620      	mov	r0, r4
   d55ae:	47a8      	blx	r5
    }
    write('"');
   d55b0:	2122      	movs	r1, #34	; 0x22
   d55b2:	4620      	mov	r0, r4
   d55b4:	f7ff ff00 	bl	d53b8 <_ZN5spark10JSONWriter5writeEc>
   d55b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d55ba:	bf00      	nop
   d55bc:	000d828a 	.word	0x000d828a

000d55c0 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d55c0:	b570      	push	{r4, r5, r6, lr}
   d55c2:	4604      	mov	r4, r0
   d55c4:	460d      	mov	r5, r1
   d55c6:	4616      	mov	r6, r2
    writeSeparator();
   d55c8:	f7ff ff68 	bl	d549c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d55cc:	4620      	mov	r0, r4
   d55ce:	4632      	mov	r2, r6
   d55d0:	4629      	mov	r1, r5
   d55d2:	f7ff ffa1 	bl	d5518 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d55d6:	2302      	movs	r3, #2
   d55d8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d55da:	4620      	mov	r0, r4
   d55dc:	bd70      	pop	{r4, r5, r6, pc}

000d55de <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d55de:	b570      	push	{r4, r5, r6, lr}
   d55e0:	4604      	mov	r4, r0
   d55e2:	460d      	mov	r5, r1
   d55e4:	4616      	mov	r6, r2
    writeSeparator();
   d55e6:	f7ff ff59 	bl	d549c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d55ea:	4620      	mov	r0, r4
   d55ec:	4632      	mov	r2, r6
   d55ee:	4629      	mov	r1, r5
   d55f0:	f7ff ff92 	bl	d5518 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d55f4:	2301      	movs	r3, #1
   d55f6:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d55f8:	4620      	mov	r0, r4
   d55fa:	bd70      	pop	{r4, r5, r6, pc}

000d55fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d55fc:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d55fe:	2300      	movs	r3, #0
   d5600:	4604      	mov	r4, r0
   d5602:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5604:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5606:	4810      	ldr	r0, [pc, #64]	; (d5648 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d5608:	60a0      	str	r0, [r4, #8]
   d560a:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d560c:	b1d1      	cbz	r1, d5644 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d560e:	780b      	ldrb	r3, [r1, #0]
   d5610:	2b03      	cmp	r3, #3
   d5612:	d006      	beq.n	d5622 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5614:	b9b3      	cbnz	r3, d5644 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5616:	6813      	ldr	r3, [r2, #0]
   d5618:	6858      	ldr	r0, [r3, #4]
   d561a:	684b      	ldr	r3, [r1, #4]
   d561c:	5cc3      	ldrb	r3, [r0, r3]
   d561e:	2b6e      	cmp	r3, #110	; 0x6e
   d5620:	d008      	beq.n	d5634 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d5622:	6813      	ldr	r3, [r2, #0]
   d5624:	6858      	ldr	r0, [r3, #4]
   d5626:	684b      	ldr	r3, [r1, #4]
   d5628:	4403      	add	r3, r0
   d562a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d562c:	688b      	ldr	r3, [r1, #8]
   d562e:	6849      	ldr	r1, [r1, #4]
   d5630:	1a5b      	subs	r3, r3, r1
   d5632:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5634:	4611      	mov	r1, r2
   d5636:	4620      	mov	r0, r4
   d5638:	f851 3b04 	ldr.w	r3, [r1], #4
   d563c:	f840 3b04 	str.w	r3, [r0], #4
   d5640:	f7ff fa5f 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5644:	4620      	mov	r0, r4
   d5646:	bd10      	pop	{r4, pc}
   d5648:	000d837c 	.word	0x000d837c

000d564c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d564c:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d564e:	b510      	push	{r4, lr}
   d5650:	4604      	mov	r4, r0
   d5652:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5654:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5656:	6083      	str	r3, [r0, #8]
   d5658:	60c3      	str	r3, [r0, #12]
   d565a:	6103      	str	r3, [r0, #16]
   d565c:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d565e:	b171      	cbz	r1, d567e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5660:	780b      	ldrb	r3, [r1, #0]
   d5662:	2b01      	cmp	r3, #1
   d5664:	d10b      	bne.n	d567e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5666:	f101 0310 	add.w	r3, r1, #16
   d566a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d566c:	68cb      	ldr	r3, [r1, #12]
   d566e:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5670:	4611      	mov	r1, r2
   d5672:	f851 3b04 	ldr.w	r3, [r1], #4
   d5676:	f840 3b04 	str.w	r3, [r0], #4
   d567a:	f7ff fa42 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d567e:	4620      	mov	r0, r4
   d5680:	bd10      	pop	{r4, pc}

000d5682 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5682:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5684:	b510      	push	{r4, lr}
   d5686:	4604      	mov	r4, r0
   d5688:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d568a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d568c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d568e:	b131      	cbz	r1, d569e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5690:	4611      	mov	r1, r2
   d5692:	f851 3b04 	ldr.w	r3, [r1], #4
   d5696:	f840 3b04 	str.w	r3, [r0], #4
   d569a:	f7ff fa32 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d569e:	4620      	mov	r0, r4
   d56a0:	bd10      	pop	{r4, pc}

000d56a2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d56a2:	6880      	ldr	r0, [r0, #8]
   d56a4:	6803      	ldr	r3, [r0, #0]
   d56a6:	68db      	ldr	r3, [r3, #12]
   d56a8:	4718      	bx	r3

000d56aa <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d56aa:	4770      	bx	lr

000d56ac <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d56ac:	b119      	cbz	r1, d56b6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d56ae:	680b      	ldr	r3, [r1, #0]
   d56b0:	4608      	mov	r0, r1
   d56b2:	685b      	ldr	r3, [r3, #4]
   d56b4:	4718      	bx	r3
   d56b6:	4770      	bx	lr

000d56b8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d56b8:	b119      	cbz	r1, d56c2 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d56ba:	680b      	ldr	r3, [r1, #0]
   d56bc:	4608      	mov	r0, r1
   d56be:	685b      	ldr	r3, [r3, #4]
   d56c0:	4718      	bx	r3
   d56c2:	4770      	bx	lr

000d56c4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d56c4:	4770      	bx	lr

000d56c6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d56c6:	4770      	bx	lr

000d56c8 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d56c8:	4770      	bx	lr

000d56ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d56ca:	b538      	push	{r3, r4, r5, lr}
   d56cc:	4604      	mov	r4, r0
   d56ce:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d56d0:	6800      	ldr	r0, [r0, #0]
   d56d2:	212e      	movs	r1, #46	; 0x2e
   d56d4:	f002 fc26 	bl	d7f24 <strchrnul>
    size = s - category;
   d56d8:	6823      	ldr	r3, [r4, #0]
   d56da:	1ac3      	subs	r3, r0, r3
   d56dc:	602b      	str	r3, [r5, #0]
    if (size) {
   d56de:	b123      	cbz	r3, d56ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d56e0:	7803      	ldrb	r3, [r0, #0]
   d56e2:	b103      	cbz	r3, d56e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d56e4:	3001      	adds	r0, #1
   d56e6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e8:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d56ea:	4618      	mov	r0, r3
}
   d56ec:	bd38      	pop	{r3, r4, r5, pc}

000d56ee <_ZN5spark16JSONStreamWriterD0Ev>:
   d56ee:	b510      	push	{r4, lr}
   d56f0:	210c      	movs	r1, #12
   d56f2:	4604      	mov	r4, r0
   d56f4:	f002 fa2d 	bl	d7b52 <_ZdlPvj>
   d56f8:	4620      	mov	r0, r4
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d56fc:	b510      	push	{r4, lr}
   d56fe:	2104      	movs	r1, #4
   d5700:	4604      	mov	r4, r0
   d5702:	f002 fa26 	bl	d7b52 <_ZdlPvj>
   d5706:	4620      	mov	r0, r4
   d5708:	bd10      	pop	{r4, pc}

000d570a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d570a:	b510      	push	{r4, lr}
   d570c:	2104      	movs	r1, #4
   d570e:	4604      	mov	r4, r0
   d5710:	f002 fa1f 	bl	d7b52 <_ZdlPvj>
   d5714:	4620      	mov	r0, r4
   d5716:	bd10      	pop	{r4, pc}

000d5718 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5718:	b538      	push	{r3, r4, r5, lr}
   d571a:	460c      	mov	r4, r1
   d571c:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d571e:	f002 f961 	bl	d79e4 <_Z16_fetch_usbserialv>
   d5722:	4284      	cmp	r4, r0
   d5724:	d00d      	beq.n	d5742 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5726:	f002 f8cf 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d572a:	4284      	cmp	r4, r0
   d572c:	d105      	bne.n	d573a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d572e:	f002 f8cb 	bl	d78c8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5736:	f002 b8c4 	b.w	d78c2 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d573a:	4621      	mov	r1, r4
   d573c:	4628      	mov	r0, r5
   d573e:	f7ff ffbb 	bl	d56b8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5742:	bd38      	pop	{r3, r4, r5, pc}

000d5744 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5744:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5746:	f002 fbf7 	bl	d7f38 <strcmp>
}
   d574a:	fab0 f080 	clz	r0, r0
   d574e:	0940      	lsrs	r0, r0, #5
   d5750:	bd08      	pop	{r3, pc}

000d5752 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5752:	b538      	push	{r3, r4, r5, lr}
   d5754:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5756:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5758:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d575a:	f002 fc1a 	bl	d7f92 <strlen>
   d575e:	4621      	mov	r1, r4
   d5760:	4602      	mov	r2, r0
   d5762:	4628      	mov	r0, r5
}
   d5764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5768:	f7ff bf39 	b.w	d55de <_ZN5spark10JSONWriter5valueEPKcj>

000d576c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d576c:	6800      	ldr	r0, [r0, #0]
   d576e:	f7fe bf03 	b.w	d4578 <os_mutex_recursive_lock>

000d5772 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5772:	b570      	push	{r4, r5, r6, lr}
   d5774:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5776:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5778:	460d      	mov	r5, r1
    write(str, strlen(str));
   d577a:	f002 fc0a 	bl	d7f92 <strlen>
   d577e:	6823      	ldr	r3, [r4, #0]
   d5780:	4602      	mov	r2, r0
   d5782:	4629      	mov	r1, r5
   d5784:	4620      	mov	r0, r4
   d5786:	68db      	ldr	r3, [r3, #12]
}
   d5788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d578c:	4718      	bx	r3

000d578e <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d578e:	b513      	push	{r0, r1, r4, lr}
   d5790:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5792:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5794:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5798:	68d4      	ldr	r4, [r2, #12]
   d579a:	4619      	mov	r1, r3
   d579c:	2201      	movs	r2, #1
   d579e:	47a0      	blx	r4
}
   d57a0:	b002      	add	sp, #8
   d57a2:	bd10      	pop	{r4, pc}

000d57a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d57a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d57a8:	6845      	ldr	r5, [r0, #4]
   d57aa:	6807      	ldr	r7, [r0, #0]
   d57ac:	b085      	sub	sp, #20
   d57ae:	4691      	mov	r9, r2
   d57b0:	2214      	movs	r2, #20
   d57b2:	4355      	muls	r5, r2
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	10ab      	asrs	r3, r5, #2
   d57b8:	4d19      	ldr	r5, [pc, #100]	; (d5820 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d57ba:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d57bc:	435d      	muls	r5, r3
   d57be:	468b      	mov	fp, r1
   d57c0:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d57c2:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d57c4:	2d00      	cmp	r5, #0
   d57c6:	9303      	str	r3, [sp, #12]
   d57c8:	dd23      	ble.n	d5812 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d57ca:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d57cc:	106e      	asrs	r6, r5, #1
   d57ce:	fb03 f006 	mul.w	r0, r3, r6
   d57d2:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d57d6:	464a      	mov	r2, r9
   d57d8:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d57dc:	5820      	ldr	r0, [r4, r0]
   d57de:	45d1      	cmp	r9, sl
   d57e0:	bf28      	it	cs
   d57e2:	4652      	movcs	r2, sl
   d57e4:	4659      	mov	r1, fp
   d57e6:	f002 fbdc 	bl	d7fa2 <strncmp>
                if (cmp == 0) {
   d57ea:	9b03      	ldr	r3, [sp, #12]
   d57ec:	b948      	cbnz	r0, d5802 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d57ee:	45d1      	cmp	r9, sl
   d57f0:	d103      	bne.n	d57fa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d57f2:	9a01      	ldr	r2, [sp, #4]
   d57f4:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d57f6:	4635      	mov	r5, r6
   d57f8:	e7e4      	b.n	d57c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d57fa:	bf8c      	ite	hi
   d57fc:	2001      	movhi	r0, #1
   d57fe:	2000      	movls	r0, #0
   d5800:	e000      	b.n	d5804 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5802:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5804:	2800      	cmp	r0, #0
   d5806:	d0f6      	beq.n	d57f6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5808:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d580a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d580e:	3e01      	subs	r6, #1
   d5810:	e7f1      	b.n	d57f6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5812:	1be4      	subs	r4, r4, r7
}
   d5814:	4802      	ldr	r0, [pc, #8]	; (d5820 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5816:	10a4      	asrs	r4, r4, #2
}
   d5818:	4360      	muls	r0, r4
   d581a:	b005      	add	sp, #20
   d581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5820:	cccccccd 	.word	0xcccccccd

000d5824 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5824:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5826:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5828:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d582a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d582c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d582e:	b313      	cbz	r3, d5876 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5830:	b309      	cbz	r1, d5876 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5832:	af04      	add	r7, sp, #16
   d5834:	2300      	movs	r3, #0
   d5836:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d583a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d583e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5840:	4639      	mov	r1, r7
   d5842:	a801      	add	r0, sp, #4
   d5844:	f7ff ff41 	bl	d56ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5848:	4601      	mov	r1, r0
   d584a:	b1a0      	cbz	r0, d5876 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d584c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d584e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5850:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5854:	4620      	mov	r0, r4
   d5856:	f7ff ffa5 	bl	d57a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d585a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d585e:	b153      	cbz	r3, d5876 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5860:	6823      	ldr	r3, [r4, #0]
   d5862:	2414      	movs	r4, #20
   d5864:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5868:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d586a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d586e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5870:	bfa8      	it	ge
   d5872:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5874:	e7e4      	b.n	d5840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5876:	4630      	mov	r0, r6
   d5878:	b005      	add	sp, #20
   d587a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d587c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d587c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d587e:	4c09      	ldr	r4, [pc, #36]	; (d58a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5880:	6823      	ldr	r3, [r4, #0]
   d5882:	07db      	lsls	r3, r3, #31
   d5884:	d40b      	bmi.n	d589e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5886:	4620      	mov	r0, r4
   d5888:	f7fe fc18 	bl	d40bc <__cxa_guard_acquire>
   d588c:	b138      	cbz	r0, d589e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d588e:	4620      	mov	r0, r4
   d5890:	f7fe fc19 	bl	d40c6 <__cxa_guard_release>
   d5894:	4a04      	ldr	r2, [pc, #16]	; (d58a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5896:	4905      	ldr	r1, [pc, #20]	; (d58ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5898:	4805      	ldr	r0, [pc, #20]	; (d58b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d589a:	f002 f955 	bl	d7b48 <__aeabi_atexit>
    return &factory;
}
   d589e:	4804      	ldr	r0, [pc, #16]	; (d58b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d58a0:	bd10      	pop	{r4, pc}
   d58a2:	bf00      	nop
   d58a4:	2003e3bc 	.word	0x2003e3bc
   d58a8:	2003e344 	.word	0x2003e344
   d58ac:	000d56c7 	.word	0x000d56c7
   d58b0:	2003e2d4 	.word	0x2003e2d4

000d58b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d58b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d58b6:	4c09      	ldr	r4, [pc, #36]	; (d58dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d58b8:	6823      	ldr	r3, [r4, #0]
   d58ba:	07db      	lsls	r3, r3, #31
   d58bc:	d40b      	bmi.n	d58d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d58be:	4620      	mov	r0, r4
   d58c0:	f7fe fbfc 	bl	d40bc <__cxa_guard_acquire>
   d58c4:	b138      	cbz	r0, d58d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d58c6:	4620      	mov	r0, r4
   d58c8:	f7fe fbfd 	bl	d40c6 <__cxa_guard_release>
   d58cc:	4a04      	ldr	r2, [pc, #16]	; (d58e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d58ce:	4905      	ldr	r1, [pc, #20]	; (d58e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d58d0:	4805      	ldr	r0, [pc, #20]	; (d58e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d58d2:	f002 f939 	bl	d7b48 <__aeabi_atexit>
    return &factory;
}
   d58d6:	4804      	ldr	r0, [pc, #16]	; (d58e8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d58d8:	bd10      	pop	{r4, pc}
   d58da:	bf00      	nop
   d58dc:	2003e3ec 	.word	0x2003e3ec
   d58e0:	2003e344 	.word	0x2003e344
   d58e4:	000d56c5 	.word	0x000d56c5
   d58e8:	2003e2d0 	.word	0x2003e2d0

000d58ec <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d58ec:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58ee:	2500      	movs	r5, #0
   d58f0:	4604      	mov	r4, r0
   d58f2:	6005      	str	r5, [r0, #0]
   d58f4:	6045      	str	r5, [r0, #4]
   d58f6:	6085      	str	r5, [r0, #8]
   d58f8:	6105      	str	r5, [r0, #16]
   d58fa:	6145      	str	r5, [r0, #20]
   d58fc:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58fe:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5902:	f7fe fe31 	bl	d4568 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5906:	f7ff ffb9 	bl	d587c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d590a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d590c:	f7ff ffd2 	bl	d58b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5910:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5912:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5914:	4620      	mov	r0, r4
   d5916:	bd38      	pop	{r3, r4, r5, pc}

000d5918 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5918:	b510      	push	{r4, lr}
    static LogManager mgr;
   d591a:	4c0a      	ldr	r4, [pc, #40]	; (d5944 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d591c:	6823      	ldr	r3, [r4, #0]
   d591e:	07db      	lsls	r3, r3, #31
   d5920:	d40e      	bmi.n	d5940 <_ZN5spark10LogManager8instanceEv+0x28>
   d5922:	4620      	mov	r0, r4
   d5924:	f7fe fbca 	bl	d40bc <__cxa_guard_acquire>
   d5928:	b150      	cbz	r0, d5940 <_ZN5spark10LogManager8instanceEv+0x28>
   d592a:	4807      	ldr	r0, [pc, #28]	; (d5948 <_ZN5spark10LogManager8instanceEv+0x30>)
   d592c:	f7ff ffde 	bl	d58ec <_ZN5spark10LogManagerC1Ev>
   d5930:	4620      	mov	r0, r4
   d5932:	f7fe fbc8 	bl	d40c6 <__cxa_guard_release>
   d5936:	4a05      	ldr	r2, [pc, #20]	; (d594c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5938:	4905      	ldr	r1, [pc, #20]	; (d5950 <_ZN5spark10LogManager8instanceEv+0x38>)
   d593a:	4803      	ldr	r0, [pc, #12]	; (d5948 <_ZN5spark10LogManager8instanceEv+0x30>)
   d593c:	f002 f904 	bl	d7b48 <__aeabi_atexit>
    return &mgr;
}
   d5940:	4801      	ldr	r0, [pc, #4]	; (d5948 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5942:	bd10      	pop	{r4, pc}
   d5944:	2003e3c0 	.word	0x2003e3c0
   d5948:	2003e3c4 	.word	0x2003e3c4
   d594c:	2003e344 	.word	0x2003e344
   d5950:	000d5d83 	.word	0x000d5d83

000d5954 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5954:	2300      	movs	r3, #0
   d5956:	4a02      	ldr	r2, [pc, #8]	; (d5960 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5958:	4902      	ldr	r1, [pc, #8]	; (d5964 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d595a:	4803      	ldr	r0, [pc, #12]	; (d5968 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d595c:	f7fe bfac 	b.w	d48b8 <log_set_callbacks>
   d5960:	000d5c65 	.word	0x000d5c65
   d5964:	000d5bf5 	.word	0x000d5bf5
   d5968:	000d5b7d 	.word	0x000d5b7d

000d596c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d596c:	2300      	movs	r3, #0
   d596e:	461a      	mov	r2, r3
   d5970:	4619      	mov	r1, r3
   d5972:	4618      	mov	r0, r3
   d5974:	f7fe bfa0 	b.w	d48b8 <log_set_callbacks>

000d5978 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5978:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d597a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d597c:	690e      	ldr	r6, [r1, #16]
   d597e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5982:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5986:	4605      	mov	r5, r0
   d5988:	a801      	add	r0, sp, #4
   d598a:	f7ff f8a7 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d598e:	4622      	mov	r2, r4
   d5990:	4631      	mov	r1, r6
   d5992:	4628      	mov	r0, r5
   d5994:	f7ff fe75 	bl	d5682 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5998:	a801      	add	r0, sp, #4
   d599a:	f7ff f8a6 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d599e:	4628      	mov	r0, r5
   d59a0:	b002      	add	sp, #8
   d59a2:	bd70      	pop	{r4, r5, r6, pc}

000d59a4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d59a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59a6:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d59a8:	688e      	ldr	r6, [r1, #8]
   d59aa:	f851 3b04 	ldr.w	r3, [r1], #4
   d59ae:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d59b2:	4605      	mov	r5, r0
   d59b4:	a801      	add	r0, sp, #4
   d59b6:	f7ff f891 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d59ba:	4622      	mov	r2, r4
   d59bc:	4631      	mov	r1, r6
   d59be:	4628      	mov	r0, r5
   d59c0:	f7ff fe44 	bl	d564c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59c4:	a801      	add	r0, sp, #4
   d59c6:	f7ff f890 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d59ca:	4628      	mov	r0, r5
   d59cc:	b002      	add	sp, #8
   d59ce:	bd70      	pop	{r4, r5, r6, pc}

000d59d0 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d59d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59d2:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d59d4:	68ce      	ldr	r6, [r1, #12]
   d59d6:	f851 3b04 	ldr.w	r3, [r1], #4
   d59da:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d59de:	4605      	mov	r5, r0
   d59e0:	a801      	add	r0, sp, #4
   d59e2:	f7ff f87b 	bl	d4adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d59e6:	4622      	mov	r2, r4
   d59e8:	4631      	mov	r1, r6
   d59ea:	4628      	mov	r0, r5
   d59ec:	f7ff fe06 	bl	d55fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59f0:	a801      	add	r0, sp, #4
   d59f2:	f7ff f87a 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d59f6:	4628      	mov	r0, r5
   d59f8:	b002      	add	sp, #8
   d59fa:	bd70      	pop	{r4, r5, r6, pc}

000d59fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d59fc:	b530      	push	{r4, r5, lr}
   d59fe:	b08b      	sub	sp, #44	; 0x2c
   d5a00:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5a02:	4601      	mov	r1, r0
   d5a04:	a804      	add	r0, sp, #16
   d5a06:	f7ff ffcd 	bl	d59a4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5a0a:	a804      	add	r0, sp, #16
   d5a0c:	f7ff fd29 	bl	d5462 <_ZN5spark18JSONObjectIterator4nextEv>
   d5a10:	b1e8      	cbz	r0, d5a4e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d5a12:	a904      	add	r1, sp, #16
   d5a14:	4668      	mov	r0, sp
   d5a16:	f7ff ffdb 	bl	d59d0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5a1a:	490f      	ldr	r1, [pc, #60]	; (d5a58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5a1c:	9802      	ldr	r0, [sp, #8]
   d5a1e:	f7ff fe91 	bl	d5744 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d5a22:	4604      	mov	r4, r0
   d5a24:	b110      	cbz	r0, d5a2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5a26:	1c2c      	adds	r4, r5, #0
   d5a28:	bf18      	it	ne
   d5a2a:	2401      	movne	r4, #1
   d5a2c:	a801      	add	r0, sp, #4
   d5a2e:	f7ff f85c 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a32:	2c00      	cmp	r4, #0
   d5a34:	d0e9      	beq.n	d5a0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5a36:	a904      	add	r1, sp, #16
   d5a38:	4668      	mov	r0, sp
   d5a3a:	f7ff ff9d 	bl	d5978 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5a3e:	4668      	mov	r0, sp
   d5a40:	f7ff fcef 	bl	d5422 <_ZNK5spark9JSONValue5toIntEv>
   d5a44:	6028      	str	r0, [r5, #0]
   d5a46:	a801      	add	r0, sp, #4
   d5a48:	f7ff f84f 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a4c:	e7dd      	b.n	d5a0a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d5a4e:	a805      	add	r0, sp, #20
   d5a50:	f7ff f84b 	bl	d4aea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5a54:	b00b      	add	sp, #44	; 0x2c
   d5a56:	bd30      	pop	{r4, r5, pc}
   d5a58:	000d82d8 	.word	0x000d82d8

000d5a5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5a5e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5a60:	4620      	mov	r0, r4
   d5a62:	4913      	ldr	r1, [pc, #76]	; (d5ab0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5a64:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5a66:	f002 fa67 	bl	d7f38 <strcmp>
   d5a6a:	b940      	cbnz	r0, d5a7e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5a6c:	f001 ffba 	bl	d79e4 <_Z16_fetch_usbserialv>
   d5a70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5a74:	f001 ffa4 	bl	d79c0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5a78:	f001 ffb4 	bl	d79e4 <_Z16_fetch_usbserialv>
   d5a7c:	e015      	b.n	d5aaa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d5a7e:	490d      	ldr	r1, [pc, #52]	; (d5ab4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5a80:	4620      	mov	r0, r4
   d5a82:	f002 fa59 	bl	d7f38 <strcmp>
   d5a86:	b978      	cbnz	r0, d5aa8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5a88:	a902      	add	r1, sp, #8
   d5a8a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d5a8e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5a92:	4628      	mov	r0, r5
   d5a94:	f7ff ffb2 	bl	d59fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5a98:	f001 ff16 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d5a9c:	9901      	ldr	r1, [sp, #4]
   d5a9e:	f001 ff0d 	bl	d78bc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5aa2:	f001 ff11 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d5aa6:	e000      	b.n	d5aaa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5aa8:	2000      	movs	r0, #0
}
   d5aaa:	b003      	add	sp, #12
   d5aac:	bd30      	pop	{r4, r5, pc}
   d5aae:	bf00      	nop
   d5ab0:	000d82dd 	.word	0x000d82dd
   d5ab4:	000d82e4 	.word	0x000d82e4

000d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ab8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5aba:	6804      	ldr	r4, [r0, #0]
   d5abc:	6843      	ldr	r3, [r0, #4]
   d5abe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ac0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ac2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ac6:	42a6      	cmp	r6, r4
   d5ac8:	d005      	beq.n	d5ad6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5aca:	f104 0008 	add.w	r0, r4, #8
   d5ace:	f7ff fff3 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ad2:	3414      	adds	r4, #20
   d5ad4:	e7f7      	b.n	d5ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ad6:	6828      	ldr	r0, [r5, #0]
   d5ad8:	f7fe ffb4 	bl	d4a44 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5adc:	4628      	mov	r0, r5
   d5ade:	bd70      	pop	{r4, r5, r6, pc}

000d5ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ae0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ae2:	6804      	ldr	r4, [r0, #0]
   d5ae4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ae6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ae8:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5aec:	42a6      	cmp	r6, r4
   d5aee:	d004      	beq.n	d5afa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5af0:	4620      	mov	r0, r4
   d5af2:	f001 fa8f 	bl	d7014 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5af6:	3410      	adds	r4, #16
   d5af8:	e7f8      	b.n	d5aec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5afa:	6828      	ldr	r0, [r5, #0]
   d5afc:	f7fe ffa2 	bl	d4a44 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5b00:	4628      	mov	r0, r5
   d5b02:	bd70      	pop	{r4, r5, r6, pc}

000d5b04 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5b04:	b510      	push	{r4, lr}
   d5b06:	4604      	mov	r4, r0
   d5b08:	300c      	adds	r0, #12
   d5b0a:	f7ff ffd5 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5b0e:	4620      	mov	r0, r4
   d5b10:	f7ff ffe6 	bl	d5ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5b14:	4620      	mov	r0, r4
   d5b16:	bd10      	pop	{r4, pc}

000d5b18 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5b18:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5b1a:	4b04      	ldr	r3, [pc, #16]	; (d5b2c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5b1c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5b1e:	f840 3b04 	str.w	r3, [r0], #4
   d5b22:	f7ff ffef 	bl	d5b04 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5b26:	4620      	mov	r0, r4
   d5b28:	bd10      	pop	{r4, pc}
   d5b2a:	bf00      	nop
   d5b2c:	000d8148 	.word	0x000d8148

000d5b30 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5b30:	b510      	push	{r4, lr}
   d5b32:	4604      	mov	r4, r0
   d5b34:	f7ff fff0 	bl	d5b18 <_ZN5spark16StreamLogHandlerD1Ev>
   d5b38:	4620      	mov	r0, r4
   d5b3a:	2124      	movs	r1, #36	; 0x24
   d5b3c:	f002 f809 	bl	d7b52 <_ZdlPvj>
   d5b40:	4620      	mov	r0, r4
   d5b42:	bd10      	pop	{r4, pc}

000d5b44 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5b44:	b510      	push	{r4, lr}
   d5b46:	4b03      	ldr	r3, [pc, #12]	; (d5b54 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5b48:	6003      	str	r3, [r0, #0]
   d5b4a:	4604      	mov	r4, r0
   d5b4c:	f7ff ffe4 	bl	d5b18 <_ZN5spark16StreamLogHandlerD1Ev>
   d5b50:	4620      	mov	r0, r4
   d5b52:	bd10      	pop	{r4, pc}
   d5b54:	000d82b0 	.word	0x000d82b0

000d5b58 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5b58:	b510      	push	{r4, lr}
   d5b5a:	4604      	mov	r4, r0
   d5b5c:	f7ff fff2 	bl	d5b44 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5b60:	4620      	mov	r0, r4
   d5b62:	2124      	movs	r1, #36	; 0x24
   d5b64:	f001 fff5 	bl	d7b52 <_ZdlPvj>
   d5b68:	4620      	mov	r0, r4
   d5b6a:	bd10      	pop	{r4, pc}

000d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5b6c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5b6e:	6803      	ldr	r3, [r0, #0]
   d5b70:	4604      	mov	r4, r0
   d5b72:	6818      	ldr	r0, [r3, #0]
   d5b74:	f7fe fd08 	bl	d4588 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b80:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5b82:	4b1b      	ldr	r3, [pc, #108]	; (d5bf0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5b84:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5b86:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5b8a:	b085      	sub	sp, #20
   d5b8c:	4682      	mov	sl, r0
   d5b8e:	460e      	mov	r6, r1
   d5b90:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5b92:	bb53      	cbnz	r3, d5bea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5b94:	f7ff fec0 	bl	d5918 <_ZN5spark10LogManager8instanceEv>
   d5b98:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5b9a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b9c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5b9e:	f7ff fde5 	bl	d576c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5ba2:	7b23      	ldrb	r3, [r4, #12]
   d5ba4:	b9f3      	cbnz	r3, d5be4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5ba6:	2301      	movs	r3, #1
   d5ba8:	7323      	strb	r3, [r4, #12]
   d5baa:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5bac:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d5bae:	b2f6      	uxtb	r6, r6
   d5bb0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5bb4:	454d      	cmp	r5, r9
   d5bb6:	d013      	beq.n	d5be0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5bb8:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d5bbc:	4641      	mov	r1, r8
   d5bbe:	1d38      	adds	r0, r7, #4
   d5bc0:	f7ff fe30 	bl	d5824 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5bc4:	4286      	cmp	r6, r0
   d5bc6:	d3f5      	bcc.n	d5bb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5bc8:	683b      	ldr	r3, [r7, #0]
   d5bca:	f8cd b000 	str.w	fp, [sp]
   d5bce:	689b      	ldr	r3, [r3, #8]
   d5bd0:	469e      	mov	lr, r3
   d5bd2:	4638      	mov	r0, r7
   d5bd4:	4643      	mov	r3, r8
   d5bd6:	4632      	mov	r2, r6
   d5bd8:	4651      	mov	r1, sl
   d5bda:	4677      	mov	r7, lr
   d5bdc:	47b8      	blx	r7
   d5bde:	e7e9      	b.n	d5bb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5be0:	2300      	movs	r3, #0
   d5be2:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5be4:	a803      	add	r0, sp, #12
   d5be6:	f7ff ffc1 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5bea:	b005      	add	sp, #20
   d5bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bf0:	e000ed00 	.word	0xe000ed00

000d5bf4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bf8:	4699      	mov	r9, r3
   d5bfa:	4b19      	ldr	r3, [pc, #100]	; (d5c60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d5bfc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5c02:	4607      	mov	r7, r0
   d5c04:	4688      	mov	r8, r1
   d5c06:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5c08:	bb33      	cbnz	r3, d5c58 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d5c0a:	f7ff fe85 	bl	d5918 <_ZN5spark10LogManager8instanceEv>
   d5c0e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5c10:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c12:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5c14:	f7ff fdaa 	bl	d576c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5c18:	7b23      	ldrb	r3, [r4, #12]
   d5c1a:	b9d3      	cbnz	r3, d5c52 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5c1c:	2301      	movs	r3, #1
   d5c1e:	7323      	strb	r3, [r4, #12]
   d5c20:	6825      	ldr	r5, [r4, #0]
   d5c22:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d5c24:	fa5f fb86 	uxtb.w	fp, r6
   d5c28:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5c2c:	4555      	cmp	r5, sl
   d5c2e:	d00e      	beq.n	d5c4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d5c30:	f855 6b04 	ldr.w	r6, [r5], #4
   d5c34:	4649      	mov	r1, r9
   d5c36:	1d30      	adds	r0, r6, #4
   d5c38:	f7ff fdf4 	bl	d5824 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5c3c:	4583      	cmp	fp, r0
   d5c3e:	d3f5      	bcc.n	d5c2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d5c40:	6833      	ldr	r3, [r6, #0]
   d5c42:	4642      	mov	r2, r8
   d5c44:	68db      	ldr	r3, [r3, #12]
   d5c46:	4639      	mov	r1, r7
   d5c48:	4630      	mov	r0, r6
   d5c4a:	4798      	blx	r3
   d5c4c:	e7ee      	b.n	d5c2c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5c4e:	2300      	movs	r3, #0
   d5c50:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5c52:	a801      	add	r0, sp, #4
   d5c54:	f7ff ff8a 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d5c58:	b003      	add	sp, #12
   d5c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c5e:	bf00      	nop
   d5c60:	e000ed00 	.word	0xe000ed00

000d5c64 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5c68:	4b15      	ldr	r3, [pc, #84]	; (d5cc0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d5c6a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5c70:	4604      	mov	r4, r0
   d5c72:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5c74:	b9fb      	cbnz	r3, d5cb6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d5c76:	f7ff fe4f 	bl	d5918 <_ZN5spark10LogManager8instanceEv>
   d5c7a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5c7c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c7e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5c80:	f7ff fd74 	bl	d576c <_ZN14RecursiveMutex4lockEv>
   d5c84:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d5c88:	2646      	movs	r6, #70	; 0x46
   d5c8a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5c8e:	42af      	cmp	r7, r5
   d5c90:	d107      	bne.n	d5ca2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d5c92:	a801      	add	r0, sp, #4
   d5c94:	f7ff ff6a 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d5c98:	42b4      	cmp	r4, r6
   d5c9a:	bfb4      	ite	lt
   d5c9c:	2000      	movlt	r0, #0
   d5c9e:	2001      	movge	r0, #1
   d5ca0:	e00a      	b.n	d5cb8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d5ca2:	f855 0b04 	ldr.w	r0, [r5], #4
   d5ca6:	4641      	mov	r1, r8
   d5ca8:	3004      	adds	r0, #4
   d5caa:	f7ff fdbb 	bl	d5824 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5cae:	4286      	cmp	r6, r0
   d5cb0:	bfa8      	it	ge
   d5cb2:	4606      	movge	r6, r0
   d5cb4:	e7eb      	b.n	d5c8e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d5cb6:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d5cb8:	b002      	add	sp, #8
   d5cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cbe:	bf00      	nop
   d5cc0:	e000ed00 	.word	0xe000ed00

000d5cc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5cc4:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d5cc6:	6803      	ldr	r3, [r0, #0]
   d5cc8:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5cca:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5ccc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5cd0:	429a      	cmp	r2, r3
   d5cd2:	4618      	mov	r0, r3
   d5cd4:	d00e      	beq.n	d5cf4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d5cd6:	6806      	ldr	r6, [r0, #0]
   d5cd8:	680d      	ldr	r5, [r1, #0]
   d5cda:	42ae      	cmp	r6, r5
   d5cdc:	f103 0304 	add.w	r3, r3, #4
   d5ce0:	d1f6      	bne.n	d5cd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5ce2:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5ce4:	1a52      	subs	r2, r2, r1
   d5ce6:	f002 f8c3 	bl	d7e70 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d5cea:	6863      	ldr	r3, [r4, #4]
   d5cec:	3b01      	subs	r3, #1
   d5cee:	6063      	str	r3, [r4, #4]
    return true;
   d5cf0:	2001      	movs	r0, #1
}
   d5cf2:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5cf4:	2000      	movs	r0, #0
   d5cf6:	bd70      	pop	{r4, r5, r6, pc}

000d5cf8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5cfa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5cfc:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5cfe:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d00:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5d02:	f7ff fd33 	bl	d576c <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5d06:	a901      	add	r1, sp, #4
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f7ff ffdb 	bl	d5cc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5d0e:	b920      	cbnz	r0, d5d1a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5d10:	a803      	add	r0, sp, #12
   d5d12:	f7ff ff2b 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d5d16:	b004      	add	sp, #16
   d5d18:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5d1a:	6863      	ldr	r3, [r4, #4]
   d5d1c:	2b00      	cmp	r3, #0
   d5d1e:	d1f7      	bne.n	d5d10 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d5d20:	f7ff fe24 	bl	d596c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d5d24:	e7f4      	b.n	d5d10 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d5d26 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d5d26:	b570      	push	{r4, r5, r6, lr}
   d5d28:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5d2a:	6943      	ldr	r3, [r0, #20]
   d5d2c:	2618      	movs	r6, #24
   d5d2e:	4604      	mov	r4, r0
   d5d30:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5d34:	42ae      	cmp	r6, r5
   d5d36:	d015      	beq.n	d5d64 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d5d38:	f105 0110 	add.w	r1, r5, #16
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	f7ff ffc1 	bl	d5cc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5d42:	6863      	ldr	r3, [r4, #4]
   d5d44:	b90b      	cbnz	r3, d5d4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5d46:	f7ff fe11 	bl	d596c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d5d4a:	69e0      	ldr	r0, [r4, #28]
   d5d4c:	6929      	ldr	r1, [r5, #16]
   d5d4e:	6803      	ldr	r3, [r0, #0]
   d5d50:	68db      	ldr	r3, [r3, #12]
   d5d52:	4798      	blx	r3
        if (h.stream) {
   d5d54:	6969      	ldr	r1, [r5, #20]
   d5d56:	b119      	cbz	r1, d5d60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5d58:	6a20      	ldr	r0, [r4, #32]
   d5d5a:	6803      	ldr	r3, [r0, #0]
   d5d5c:	68db      	ldr	r3, [r3, #12]
   d5d5e:	4798      	blx	r3
   d5d60:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d5d62:	e7e7      	b.n	d5d34 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5d64:	6925      	ldr	r5, [r4, #16]
   d5d66:	6963      	ldr	r3, [r4, #20]
   d5d68:	2618      	movs	r6, #24
   d5d6a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5d6e:	42b5      	cmp	r5, r6
   d5d70:	d004      	beq.n	d5d7c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5d72:	4628      	mov	r0, r5
   d5d74:	f001 f94e 	bl	d7014 <_ZN6StringD1Ev>
   d5d78:	3518      	adds	r5, #24
   d5d7a:	e7f8      	b.n	d5d6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5d7c:	2300      	movs	r3, #0
   d5d7e:	6163      	str	r3, [r4, #20]
   d5d80:	bd70      	pop	{r4, r5, r6, pc}

000d5d82 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d5d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5d84:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d86:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d5d88:	f7ff fdf0 	bl	d596c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5d90:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d5d94:	f7ff fcea 	bl	d576c <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d5d98:	4620      	mov	r0, r4
   d5d9a:	f7ff ffc4 	bl	d5d26 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d5d9e:	4628      	mov	r0, r5
   d5da0:	f7ff fee4 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5da4:	6925      	ldr	r5, [r4, #16]
   d5da6:	6963      	ldr	r3, [r4, #20]
   d5da8:	2618      	movs	r6, #24
   d5daa:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5dae:	42b5      	cmp	r5, r6
   d5db0:	d004      	beq.n	d5dbc <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5db2:	4628      	mov	r0, r5
   d5db4:	f001 f92e 	bl	d7014 <_ZN6StringD1Ev>
   d5db8:	3518      	adds	r5, #24
   d5dba:	e7f8      	b.n	d5dae <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5dbc:	6920      	ldr	r0, [r4, #16]
   d5dbe:	f7fe fe41 	bl	d4a44 <free>
   d5dc2:	6820      	ldr	r0, [r4, #0]
   d5dc4:	f7fe fe3e 	bl	d4a44 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d5dc8:	4620      	mov	r0, r4
   d5dca:	b002      	add	sp, #8
   d5dcc:	bd70      	pop	{r4, r5, r6, pc}

000d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dce:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5dd0:	680a      	ldr	r2, [r1, #0]
   d5dd2:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dd4:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dd6:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5dd8:	684a      	ldr	r2, [r1, #4]
   d5dda:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ddc:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dde:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5de0:	688a      	ldr	r2, [r1, #8]
   d5de2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5de4:	608b      	str	r3, [r1, #8]
   d5de6:	4770      	bx	lr

000d5de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5de8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5dea:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5dec:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5dee:	6003      	str	r3, [r0, #0]
   d5df0:	6043      	str	r3, [r0, #4]
   d5df2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5df4:	f7ff ffeb 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d5df8:	4620      	mov	r0, r4
   d5dfa:	bd10      	pop	{r4, pc}

000d5dfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5dfc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e00:	4604      	mov	r4, r0
   d5e02:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5e04:	d925      	bls.n	d5e52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d5e06:	4290      	cmp	r0, r2
   d5e08:	d224      	bcs.n	d5e54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5e0a:	1a55      	subs	r5, r2, r1
   d5e0c:	3d14      	subs	r5, #20
   d5e0e:	442c      	add	r4, r5
   d5e10:	f1a1 0714 	sub.w	r7, r1, #20
   d5e14:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5e18:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5e1a:	f1a5 0308 	sub.w	r3, r5, #8
   d5e1e:	429f      	cmp	r7, r3
   d5e20:	d037      	beq.n	d5e92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d5e22:	b184      	cbz	r4, d5e46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5e24:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5e28:	6023      	str	r3, [r4, #0]
   d5e2a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5e2e:	80a3      	strh	r3, [r4, #4]
   d5e30:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5e34:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5e36:	60a6      	str	r6, [r4, #8]
   d5e38:	60e6      	str	r6, [r4, #12]
   d5e3a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5e3c:	4629      	mov	r1, r5
   d5e3e:	f104 0008 	add.w	r0, r4, #8
   d5e42:	f7ff ffc4 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5e46:	4628      	mov	r0, r5
   d5e48:	f7ff fe36 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5e4c:	3c14      	subs	r4, #20
   d5e4e:	3d14      	subs	r5, #20
   d5e50:	e7e3      	b.n	d5e1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5e52:	d01e      	beq.n	d5e92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d5e54:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5e58:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5e5a:	f1a5 0308 	sub.w	r3, r5, #8
   d5e5e:	429e      	cmp	r6, r3
   d5e60:	d017      	beq.n	d5e92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d5e62:	b184      	cbz	r4, d5e86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d5e64:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5e68:	6023      	str	r3, [r4, #0]
   d5e6a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5e6e:	80a3      	strh	r3, [r4, #4]
   d5e70:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5e74:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5e76:	60a7      	str	r7, [r4, #8]
   d5e78:	60e7      	str	r7, [r4, #12]
   d5e7a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5e7c:	4629      	mov	r1, r5
   d5e7e:	f104 0008 	add.w	r0, r4, #8
   d5e82:	f7ff ffa4 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d5e86:	4628      	mov	r0, r5
   d5e88:	f7ff fe16 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5e8c:	3414      	adds	r4, #20
   d5e8e:	3514      	adds	r5, #20
   d5e90:	e7e3      	b.n	d5e5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d5e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e94 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e96:	6845      	ldr	r5, [r0, #4]
   d5e98:	6883      	ldr	r3, [r0, #8]
   d5e9a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5e9c:	4604      	mov	r4, r0
   d5e9e:	460e      	mov	r6, r1
   d5ea0:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ea2:	db0e      	blt.n	d5ec2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d5ea4:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5ea6:	2d00      	cmp	r5, #0
   d5ea8:	dd05      	ble.n	d5eb6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5eaa:	00a9      	lsls	r1, r5, #2
   d5eac:	6800      	ldr	r0, [r0, #0]
   d5eae:	f7fe fdd1 	bl	d4a54 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5eb2:	b920      	cbnz	r0, d5ebe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d5eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5eb6:	6800      	ldr	r0, [r0, #0]
   d5eb8:	f7fe fdc4 	bl	d4a44 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5ebc:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5ebe:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5ec0:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5ec2:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5ec4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5ec6:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5eca:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d5ece:	1a52      	subs	r2, r2, r1
   d5ed0:	1d08      	adds	r0, r1, #4
   d5ed2:	f001 ffcd 	bl	d7e70 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d5ed6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5eda:	6863      	ldr	r3, [r4, #4]
   d5edc:	3301      	adds	r3, #1
   d5ede:	6063      	str	r3, [r4, #4]
   d5ee0:	2001      	movs	r0, #1
    return true;
}
   d5ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ee4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ee6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5ee8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5eea:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5eec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5eee:	f7ff fc3d 	bl	d576c <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d5ef2:	6823      	ldr	r3, [r4, #0]
   d5ef4:	6861      	ldr	r1, [r4, #4]
   d5ef6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5efa:	4283      	cmp	r3, r0
   d5efc:	461a      	mov	r2, r3
   d5efe:	d009      	beq.n	d5f14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d5f00:	6812      	ldr	r2, [r2, #0]
   d5f02:	42aa      	cmp	r2, r5
   d5f04:	f103 0304 	add.w	r3, r3, #4
   d5f08:	d1f7      	bne.n	d5efa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d5f0a:	a801      	add	r0, sp, #4
   d5f0c:	f7ff fe2e 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5f10:	2500      	movs	r5, #0
   d5f12:	e00e      	b.n	d5f32 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5f14:	462a      	mov	r2, r5
   d5f16:	4620      	mov	r0, r4
   d5f18:	f7ff ffbc 	bl	d5e94 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5f1c:	4605      	mov	r5, r0
   d5f1e:	2800      	cmp	r0, #0
   d5f20:	d0f3      	beq.n	d5f0a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d5f22:	6863      	ldr	r3, [r4, #4]
   d5f24:	2b01      	cmp	r3, #1
   d5f26:	d101      	bne.n	d5f2c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d5f28:	f7ff fd14 	bl	d5954 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5f2c:	a801      	add	r0, sp, #4
   d5f2e:	f7ff fe1d 	bl	d5b6c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d5f32:	4628      	mov	r0, r5
   d5f34:	b003      	add	sp, #12
   d5f36:	bd30      	pop	{r4, r5, pc}

000d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5f38:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f3c:	4606      	mov	r6, r0
   d5f3e:	460c      	mov	r4, r1
   d5f40:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5f42:	d914      	bls.n	d5f6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5f44:	4290      	cmp	r0, r2
   d5f46:	d213      	bcs.n	d5f70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5f48:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d5f4c:	1a6c      	subs	r4, r5, r1
   d5f4e:	f1a1 0710 	sub.w	r7, r1, #16
   d5f52:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5f54:	42af      	cmp	r7, r5
   d5f56:	d018      	beq.n	d5f8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5f58:	b11c      	cbz	r4, d5f62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5f5a:	4629      	mov	r1, r5
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	f001 f849 	bl	d6ff4 <_ZN6StringC1EOS_>
                end->~T();
   d5f62:	4628      	mov	r0, r5
   d5f64:	f001 f856 	bl	d7014 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5f68:	3d10      	subs	r5, #16
   d5f6a:	3c10      	subs	r4, #16
   d5f6c:	e7f2      	b.n	d5f54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5f6e:	d00c      	beq.n	d5f8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5f70:	42ac      	cmp	r4, r5
   d5f72:	d00a      	beq.n	d5f8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5f74:	b11e      	cbz	r6, d5f7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5f76:	4621      	mov	r1, r4
   d5f78:	4630      	mov	r0, r6
   d5f7a:	f001 f83b 	bl	d6ff4 <_ZN6StringC1EOS_>
                p->~T();
   d5f7e:	4620      	mov	r0, r4
   d5f80:	f001 f848 	bl	d7014 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5f84:	3410      	adds	r4, #16
   d5f86:	3610      	adds	r6, #16
   d5f88:	e7f2      	b.n	d5f70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d5f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5f8c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5f8e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5f90:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5f92:	dd0b      	ble.n	d5fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5f94:	0130      	lsls	r0, r6, #4
   d5f96:	f7fe fd4d 	bl	d4a34 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5f9a:	4604      	mov	r4, r0
   d5f9c:	b170      	cbz	r0, d5fbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5f9e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5fa2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5fa6:	f7ff ffc7 	bl	d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d5faa:	e000      	b.n	d5fae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5fac:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5fae:	6828      	ldr	r0, [r5, #0]
   d5fb0:	f7fe fd48 	bl	d4a44 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5fb4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5fb6:	60ae      	str	r6, [r5, #8]
        return true;
   d5fb8:	2001      	movs	r0, #1
   d5fba:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5fbc:	bd70      	pop	{r4, r5, r6, pc}

000d5fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	b095      	sub	sp, #84	; 0x54
   d5fc6:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5fc8:	2246      	movs	r2, #70	; 0x46
   d5fca:	6003      	str	r3, [r0, #0]
   d5fcc:	6043      	str	r3, [r0, #4]
   d5fce:	6083      	str	r3, [r0, #8]
   d5fd0:	60c3      	str	r3, [r0, #12]
   d5fd2:	6103      	str	r3, [r0, #16]
   d5fd4:	6143      	str	r3, [r0, #20]
   d5fd6:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5fd8:	9102      	str	r1, [sp, #8]
   d5fda:	f8da 1004 	ldr.w	r1, [sl, #4]
   d5fde:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5fe0:	4299      	cmp	r1, r3
   d5fe2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5fe4:	9309      	str	r3, [sp, #36]	; 0x24
   d5fe6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5fe8:	f340 809d 	ble.w	d6126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5fec:	a808      	add	r0, sp, #32
   d5fee:	f7ff ffcd 	bl	d5f8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5ff2:	2800      	cmp	r0, #0
   d5ff4:	f040 8097 	bne.w	d6126 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5ff8:	e08e      	b.n	d6118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d5ffa:	4621      	mov	r1, r4
   d5ffc:	a80b      	add	r0, sp, #44	; 0x2c
   d5ffe:	f000 fff9 	bl	d6ff4 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6002:	a90b      	add	r1, sp, #44	; 0x2c
   d6004:	a80f      	add	r0, sp, #60	; 0x3c
   d6006:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6008:	f000 fff4 	bl	d6ff4 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d600c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6010:	4299      	cmp	r1, r3
   d6012:	f2c0 80ce 	blt.w	d61b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6016:	3101      	adds	r1, #1
   d6018:	a808      	add	r0, sp, #32
   d601a:	f7ff ffb7 	bl	d5f8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d601e:	2800      	cmp	r0, #0
   d6020:	f040 80c7 	bne.w	d61b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6024:	a80f      	add	r0, sp, #60	; 0x3c
   d6026:	f000 fff5 	bl	d7014 <_ZN6StringD1Ev>
   d602a:	a80b      	add	r0, sp, #44	; 0x2c
   d602c:	f000 fff2 	bl	d7014 <_ZN6StringD1Ev>
   d6030:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6032:	42a7      	cmp	r7, r4
   d6034:	d1e1      	bne.n	d5ffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6036:	2600      	movs	r6, #0
   d6038:	960b      	str	r6, [sp, #44]	; 0x2c
   d603a:	960c      	str	r6, [sp, #48]	; 0x30
   d603c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d603e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6040:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6042:	429e      	cmp	r6, r3
   d6044:	f280 80a8 	bge.w	d6198 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6048:	0133      	lsls	r3, r6, #4
   d604a:	9a08      	ldr	r2, [sp, #32]
   d604c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d604e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6050:	2b00      	cmp	r3, #0
   d6052:	f000 809f 	beq.w	d6194 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6056:	2314      	movs	r3, #20
   d6058:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d605a:	f8cd 901c 	str.w	r9, [sp, #28]
   d605e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6060:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6062:	a907      	add	r1, sp, #28
   d6064:	a806      	add	r0, sp, #24
   d6066:	f7ff fb30 	bl	d56ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d606a:	4607      	mov	r7, r0
   d606c:	2800      	cmp	r0, #0
   d606e:	f000 8091 	beq.w	d6194 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6072:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6074:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6076:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d607a:	9a07      	ldr	r2, [sp, #28]
   d607c:	4620      	mov	r0, r4
   d607e:	f7ff fb91 	bl	d57a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6082:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6086:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6088:	f1b8 0f00 	cmp.w	r8, #0
   d608c:	d153      	bne.n	d6136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d608e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6092:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6096:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d609a:	970f      	str	r7, [sp, #60]	; 0x3c
   d609c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d60a0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d60a4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d60a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d60ac:	6867      	ldr	r7, [r4, #4]
   d60ae:	68a3      	ldr	r3, [r4, #8]
   d60b0:	429f      	cmp	r7, r3
   d60b2:	da4f      	bge.n	d6154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d60b4:	9b00      	ldr	r3, [sp, #0]
   d60b6:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d60ba:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d60bc:	2214      	movs	r2, #20
   d60be:	4353      	muls	r3, r2
   d60c0:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d60c4:	fb02 b201 	mla	r2, r2, r1, fp
   d60c8:	f107 0014 	add.w	r0, r7, #20
   d60cc:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d60ce:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d60d0:	f7ff fe94 	bl	d5dfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d60d4:	b1a7      	cbz	r7, d6100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d60d6:	9b03      	ldr	r3, [sp, #12]
   d60d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d60da:	f84b 2003 	str.w	r2, [fp, r3]
   d60de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d60e2:	80bb      	strh	r3, [r7, #4]
   d60e4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d60e8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d60ea:	f8c7 9008 	str.w	r9, [r7, #8]
   d60ee:	f8c7 900c 	str.w	r9, [r7, #12]
   d60f2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d60f6:	a911      	add	r1, sp, #68	; 0x44
   d60f8:	f107 0008 	add.w	r0, r7, #8
   d60fc:	f7ff fe67 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6100:	6863      	ldr	r3, [r4, #4]
   d6102:	3301      	adds	r3, #1
   d6104:	6063      	str	r3, [r4, #4]
   d6106:	a811      	add	r0, sp, #68	; 0x44
   d6108:	f7ff fcd6 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d610c:	f1b8 0f00 	cmp.w	r8, #0
   d6110:	d011      	beq.n	d6136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6112:	a80b      	add	r0, sp, #44	; 0x2c
   d6114:	f7ff fcd0 	bl	d5ab8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6118:	a808      	add	r0, sp, #32
   d611a:	f7ff fce1 	bl	d5ae0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d611e:	4628      	mov	r0, r5
   d6120:	b015      	add	sp, #84	; 0x54
   d6122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6126:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d612a:	f8da 3004 	ldr.w	r3, [sl, #4]
   d612e:	2714      	movs	r7, #20
   d6130:	fb07 4703 	mla	r7, r7, r3, r4
   d6134:	e77d      	b.n	d6032 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6136:	6823      	ldr	r3, [r4, #0]
   d6138:	9a00      	ldr	r2, [sp, #0]
   d613a:	2414      	movs	r4, #20
   d613c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6140:	9b06      	ldr	r3, [sp, #24]
   d6142:	781b      	ldrb	r3, [r3, #0]
   d6144:	bb23      	cbnz	r3, d6190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6146:	f8da 3000 	ldr.w	r3, [sl]
   d614a:	9a01      	ldr	r2, [sp, #4]
   d614c:	4413      	add	r3, r2
   d614e:	7c1b      	ldrb	r3, [r3, #16]
   d6150:	80e3      	strh	r3, [r4, #6]
   d6152:	e01d      	b.n	d6190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6154:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6156:	2f00      	cmp	r7, #0
   d6158:	dd0f      	ble.n	d617a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d615a:	2314      	movs	r3, #20
   d615c:	fb03 f007 	mul.w	r0, r3, r7
   d6160:	9303      	str	r3, [sp, #12]
   d6162:	f7fe fc67 	bl	d4a34 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6166:	4683      	mov	fp, r0
   d6168:	b178      	cbz	r0, d618a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d616a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d616e:	9b03      	ldr	r3, [sp, #12]
   d6170:	fb03 1202 	mla	r2, r3, r2, r1
   d6174:	f7ff fe42 	bl	d5dfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6178:	e000      	b.n	d617c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d617a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d617c:	6820      	ldr	r0, [r4, #0]
   d617e:	f7fe fc61 	bl	d4a44 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6182:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6186:	60a7      	str	r7, [r4, #8]
   d6188:	e794      	b.n	d60b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d618a:	f04f 0801 	mov.w	r8, #1
   d618e:	e7ba      	b.n	d6106 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6190:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6192:	e766      	b.n	d6062 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6194:	3601      	adds	r6, #1
   d6196:	e753      	b.n	d6040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6198:	a908      	add	r1, sp, #32
   d619a:	4628      	mov	r0, r5
   d619c:	f7ff fe17 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d61a0:	a90b      	add	r1, sp, #44	; 0x2c
   d61a2:	f105 000c 	add.w	r0, r5, #12
   d61a6:	f7ff fe12 	bl	d5dce <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d61aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d61ae:	762b      	strb	r3, [r5, #24]
   d61b0:	e7af      	b.n	d6112 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d61b2:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d61b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d61b6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d61ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d61be:	4631      	mov	r1, r6
   d61c0:	f106 0010 	add.w	r0, r6, #16
   d61c4:	f7ff feb8 	bl	d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d61c8:	b11e      	cbz	r6, d61d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d61ca:	a90f      	add	r1, sp, #60	; 0x3c
   d61cc:	4630      	mov	r0, r6
   d61ce:	f000 ff11 	bl	d6ff4 <_ZN6StringC1EOS_>
    ++size_;
   d61d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d61d4:	3301      	adds	r3, #1
   d61d6:	9309      	str	r3, [sp, #36]	; 0x24
   d61d8:	e724      	b.n	d6024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d61dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d61dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d61de:	4604      	mov	r4, r0
   d61e0:	4b09      	ldr	r3, [pc, #36]	; (d6208 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d61e2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d61e6:	4605      	mov	r5, r0
   d61e8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d61ea:	a801      	add	r0, sp, #4
   d61ec:	4611      	mov	r1, r2
   d61ee:	f7fe f8fc 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d61f2:	aa01      	add	r2, sp, #4
   d61f4:	4631      	mov	r1, r6
   d61f6:	4620      	mov	r0, r4
   d61f8:	f7ff fee1 	bl	d5fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d61fc:	a801      	add	r0, sp, #4
   d61fe:	f7fe f8b3 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6202:	4628      	mov	r0, r5
   d6204:	b004      	add	sp, #16
   d6206:	bd70      	pop	{r4, r5, r6, pc}
   d6208:	000d8148 	.word	0x000d8148

000d620c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d620c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d620e:	460f      	mov	r7, r1
   d6210:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6212:	492b      	ldr	r1, [pc, #172]	; (d62c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6214:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6216:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6218:	4616      	mov	r6, r2
   d621a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d621c:	f001 fe8c 	bl	d7f38 <strcmp>
   d6220:	bb28      	cbnz	r0, d626e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6222:	2c00      	cmp	r4, #0
   d6224:	d049      	beq.n	d62ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6226:	4629      	mov	r1, r5
   d6228:	a801      	add	r0, sp, #4
   d622a:	f7ff fddd 	bl	d5de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d622e:	4925      	ldr	r1, [pc, #148]	; (d62c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6230:	2024      	movs	r0, #36	; 0x24
   d6232:	f001 fc99 	bl	d7b68 <_ZnwjRKSt9nothrow_t>
   d6236:	4605      	mov	r5, r0
   d6238:	b1b8      	cbz	r0, d626a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d623a:	a901      	add	r1, sp, #4
   d623c:	a804      	add	r0, sp, #16
   d623e:	f7ff fdd3 	bl	d5de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6242:	a904      	add	r1, sp, #16
   d6244:	a807      	add	r0, sp, #28
   d6246:	f7fe f8d0 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d624a:	aa07      	add	r2, sp, #28
   d624c:	4631      	mov	r1, r6
   d624e:	4628      	mov	r0, r5
   d6250:	f7ff ffc4 	bl	d61dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6254:	a807      	add	r0, sp, #28
   d6256:	f7fe f887 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d625a:	4b1b      	ldr	r3, [pc, #108]	; (d62c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d625c:	602b      	str	r3, [r5, #0]
   d625e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6260:	a804      	add	r0, sp, #16
   d6262:	f7fe f881 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6266:	4b19      	ldr	r3, [pc, #100]	; (d62cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6268:	602b      	str	r3, [r5, #0]
   d626a:	a801      	add	r0, sp, #4
   d626c:	e01f      	b.n	d62ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d626e:	4918      	ldr	r1, [pc, #96]	; (d62d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6270:	4638      	mov	r0, r7
   d6272:	f001 fe61 	bl	d7f38 <strcmp>
   d6276:	b9f0      	cbnz	r0, d62b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6278:	b1fc      	cbz	r4, d62ba <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d627a:	4629      	mov	r1, r5
   d627c:	a804      	add	r0, sp, #16
   d627e:	f7ff fdb3 	bl	d5de8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6282:	4910      	ldr	r1, [pc, #64]	; (d62c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6284:	2024      	movs	r0, #36	; 0x24
   d6286:	f001 fc6f 	bl	d7b68 <_ZnwjRKSt9nothrow_t>
   d628a:	4605      	mov	r5, r0
   d628c:	b170      	cbz	r0, d62ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d628e:	a904      	add	r1, sp, #16
   d6290:	a807      	add	r0, sp, #28
   d6292:	f7fe f8aa 	bl	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6296:	aa07      	add	r2, sp, #28
   d6298:	4631      	mov	r1, r6
   d629a:	4628      	mov	r0, r5
   d629c:	f7ff ff9e 	bl	d61dc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d62a0:	a807      	add	r0, sp, #28
   d62a2:	f7fe f861 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d62a6:	4b08      	ldr	r3, [pc, #32]	; (d62c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d62a8:	602b      	str	r3, [r5, #0]
   d62aa:	622c      	str	r4, [r5, #32]
   d62ac:	a804      	add	r0, sp, #16
   d62ae:	f7fe f85b 	bl	d4368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d62b2:	4628      	mov	r0, r5
   d62b4:	e002      	b.n	d62bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d62b6:	2000      	movs	r0, #0
   d62b8:	e000      	b.n	d62bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d62ba:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d62bc:	b00b      	add	sp, #44	; 0x2c
   d62be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62c0:	000d8336 	.word	0x000d8336
   d62c4:	000d858c 	.word	0x000d858c
   d62c8:	000d83c0 	.word	0x000d83c0
   d62cc:	000d82b0 	.word	0x000d82b0
   d62d0:	000d833a 	.word	0x000d833a

000d62d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d62d4:	4b01      	ldr	r3, [pc, #4]	; (d62dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d62d6:	4a02      	ldr	r2, [pc, #8]	; (d62e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d62d8:	601a      	str	r2, [r3, #0]
   d62da:	4770      	bx	lr
   d62dc:	2003e3f0 	.word	0x2003e3f0
   d62e0:	000d834b 	.word	0x000d834b

000d62e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d62e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d62e8:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d62ea:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d62ee:	4604      	mov	r4, r0
   d62f0:	460e      	mov	r6, r1
   d62f2:	4617      	mov	r7, r2
   d62f4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d62f6:	f001 fb75 	bl	d79e4 <_Z16_fetch_usbserialv>
   d62fa:	4581      	cmp	r9, r0
   d62fc:	d105      	bne.n	d630a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d62fe:	485a      	ldr	r0, [pc, #360]	; (d6468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6300:	f000 fd35 	bl	d6d6e <_ZN5spark12NetworkClass9listeningEv>
   d6304:	2800      	cmp	r0, #0
   d6306:	f040 80ac 	bne.w	d6462 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d630a:	792b      	ldrb	r3, [r5, #4]
   d630c:	071b      	lsls	r3, r3, #28
   d630e:	d505      	bpl.n	d631c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6310:	696b      	ldr	r3, [r5, #20]
   d6312:	4a56      	ldr	r2, [pc, #344]	; (d646c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6314:	6a20      	ldr	r0, [r4, #32]
   d6316:	2100      	movs	r1, #0
   d6318:	f000 fe02 	bl	d6f20 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d631c:	f1b8 0f00 	cmp.w	r8, #0
   d6320:	d00d      	beq.n	d633e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6322:	215b      	movs	r1, #91	; 0x5b
   d6324:	4620      	mov	r0, r4
   d6326:	f7ff fa32 	bl	d578e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d632a:	4641      	mov	r1, r8
   d632c:	4620      	mov	r0, r4
   d632e:	f7ff fa20 	bl	d5772 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6332:	6823      	ldr	r3, [r4, #0]
   d6334:	494e      	ldr	r1, [pc, #312]	; (d6470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6336:	68db      	ldr	r3, [r3, #12]
   d6338:	2202      	movs	r2, #2
   d633a:	4620      	mov	r0, r4
   d633c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d633e:	792b      	ldrb	r3, [r5, #4]
   d6340:	07d9      	lsls	r1, r3, #31
   d6342:	d525      	bpl.n	d6390 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6344:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6348:	212f      	movs	r1, #47	; 0x2f
   d634a:	4640      	mov	r0, r8
   d634c:	f001 fe4a 	bl	d7fe4 <strrchr>
    if (s1) {
   d6350:	b108      	cbz	r0, d6356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6352:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6356:	4641      	mov	r1, r8
   d6358:	4620      	mov	r0, r4
   d635a:	f7ff fa0a 	bl	d5772 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d635e:	792b      	ldrb	r3, [r5, #4]
   d6360:	079a      	lsls	r2, r3, #30
   d6362:	d509      	bpl.n	d6378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6364:	213a      	movs	r1, #58	; 0x3a
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff fa11 	bl	d578e <_ZN5spark16StreamLogHandler5writeEc>
   d636c:	68eb      	ldr	r3, [r5, #12]
   d636e:	4a41      	ldr	r2, [pc, #260]	; (d6474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6370:	6a20      	ldr	r0, [r4, #32]
   d6372:	2100      	movs	r1, #0
   d6374:	f000 fdd4 	bl	d6f20 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6378:	792b      	ldrb	r3, [r5, #4]
   d637a:	f013 0f04 	tst.w	r3, #4
   d637e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6380:	bf18      	it	ne
   d6382:	493d      	ldrne	r1, [pc, #244]	; (d6478 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6384:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6386:	bf08      	it	eq
   d6388:	493c      	ldreq	r1, [pc, #240]	; (d647c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d638a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d638c:	4620      	mov	r0, r4
   d638e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6390:	792b      	ldrb	r3, [r5, #4]
   d6392:	075b      	lsls	r3, r3, #29
   d6394:	d518      	bpl.n	d63c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6396:	6929      	ldr	r1, [r5, #16]
   d6398:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d639a:	4613      	mov	r3, r2
   d639c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d63a0:	b138      	cbz	r0, d63b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d63a2:	2820      	cmp	r0, #32
   d63a4:	d101      	bne.n	d63aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d63a6:	4619      	mov	r1, r3
   d63a8:	e001      	b.n	d63ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d63aa:	2828      	cmp	r0, #40	; 0x28
   d63ac:	d001      	beq.n	d63b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d63ae:	461a      	mov	r2, r3
   d63b0:	e7f3      	b.n	d639a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d63b2:	6823      	ldr	r3, [r4, #0]
   d63b4:	1a52      	subs	r2, r2, r1
   d63b6:	68db      	ldr	r3, [r3, #12]
   d63b8:	4620      	mov	r0, r4
   d63ba:	4798      	blx	r3
        write("(): ", 4);
   d63bc:	6823      	ldr	r3, [r4, #0]
   d63be:	4930      	ldr	r1, [pc, #192]	; (d6480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d63c0:	68db      	ldr	r3, [r3, #12]
   d63c2:	2204      	movs	r2, #4
   d63c4:	4620      	mov	r0, r4
   d63c6:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d63c8:	2100      	movs	r1, #0
   d63ca:	4638      	mov	r0, r7
   d63cc:	f7fe fa6c 	bl	d48a8 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d63d0:	4601      	mov	r1, r0
   d63d2:	4620      	mov	r0, r4
   d63d4:	f7ff f9cd 	bl	d5772 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d63d8:	6823      	ldr	r3, [r4, #0]
   d63da:	4928      	ldr	r1, [pc, #160]	; (d647c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d63dc:	68db      	ldr	r3, [r3, #12]
   d63de:	2202      	movs	r2, #2
   d63e0:	4620      	mov	r0, r4
   d63e2:	4798      	blx	r3
    // Message
    if (msg) {
   d63e4:	b11e      	cbz	r6, d63ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d63e6:	4631      	mov	r1, r6
   d63e8:	4620      	mov	r0, r4
   d63ea:	f7ff f9c2 	bl	d5772 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d63ee:	792b      	ldrb	r3, [r5, #4]
   d63f0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d63f4:	d02d      	beq.n	d6452 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d63f6:	6823      	ldr	r3, [r4, #0]
   d63f8:	4922      	ldr	r1, [pc, #136]	; (d6484 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d63fa:	68db      	ldr	r3, [r3, #12]
   d63fc:	4620      	mov	r0, r4
   d63fe:	2202      	movs	r2, #2
   d6400:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6402:	792b      	ldrb	r3, [r5, #4]
   d6404:	06d8      	lsls	r0, r3, #27
   d6406:	d50b      	bpl.n	d6420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6408:	6823      	ldr	r3, [r4, #0]
   d640a:	491f      	ldr	r1, [pc, #124]	; (d6488 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d640c:	68db      	ldr	r3, [r3, #12]
   d640e:	2207      	movs	r2, #7
   d6410:	4620      	mov	r0, r4
   d6412:	4798      	blx	r3
   d6414:	69ab      	ldr	r3, [r5, #24]
   d6416:	4a1d      	ldr	r2, [pc, #116]	; (d648c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6418:	6a20      	ldr	r0, [r4, #32]
   d641a:	2100      	movs	r1, #0
   d641c:	f000 fd80 	bl	d6f20 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6420:	792b      	ldrb	r3, [r5, #4]
   d6422:	0699      	lsls	r1, r3, #26
   d6424:	d511      	bpl.n	d644a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6426:	06da      	lsls	r2, r3, #27
   d6428:	d505      	bpl.n	d6436 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d642a:	6823      	ldr	r3, [r4, #0]
   d642c:	4912      	ldr	r1, [pc, #72]	; (d6478 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d642e:	68db      	ldr	r3, [r3, #12]
   d6430:	2202      	movs	r2, #2
   d6432:	4620      	mov	r0, r4
   d6434:	4798      	blx	r3
            }
            write("details = ", 10);
   d6436:	6823      	ldr	r3, [r4, #0]
   d6438:	4915      	ldr	r1, [pc, #84]	; (d6490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d643a:	68db      	ldr	r3, [r3, #12]
   d643c:	4620      	mov	r0, r4
   d643e:	220a      	movs	r2, #10
   d6440:	4798      	blx	r3
            write(attr.details);
   d6442:	69e9      	ldr	r1, [r5, #28]
   d6444:	4620      	mov	r0, r4
   d6446:	f7ff f994 	bl	d5772 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d644a:	215d      	movs	r1, #93	; 0x5d
   d644c:	4620      	mov	r0, r4
   d644e:	f7ff f99e 	bl	d578e <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6452:	6823      	ldr	r3, [r4, #0]
   d6454:	490f      	ldr	r1, [pc, #60]	; (d6494 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6456:	68db      	ldr	r3, [r3, #12]
   d6458:	4620      	mov	r0, r4
   d645a:	2202      	movs	r2, #2
}
   d645c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6460:	4718      	bx	r3
   d6462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6466:	bf00      	nop
   d6468:	2003e5c8 	.word	0x2003e5c8
   d646c:	000d834f 	.word	0x000d834f
   d6470:	000d8356 	.word	0x000d8356
   d6474:	000d843d 	.word	0x000d843d
   d6478:	000d8359 	.word	0x000d8359
   d647c:	000d835e 	.word	0x000d835e
   d6480:	000d835c 	.word	0x000d835c
   d6484:	000d8361 	.word	0x000d8361
   d6488:	000d8364 	.word	0x000d8364
   d648c:	000d836c 	.word	0x000d836c
   d6490:	000d836f 	.word	0x000d836f
   d6494:	000d837a 	.word	0x000d837a

000d6498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d649c:	b085      	sub	sp, #20
   d649e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d64a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d64a4:	4606      	mov	r6, r0
   d64a6:	460f      	mov	r7, r1
   d64a8:	4691      	mov	r9, r2
   d64aa:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d64ac:	f001 fa9a 	bl	d79e4 <_Z16_fetch_usbserialv>
   d64b0:	4580      	cmp	r8, r0
   d64b2:	d105      	bne.n	d64c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d64b4:	484a      	ldr	r0, [pc, #296]	; (d65e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d64b6:	f000 fc5a 	bl	d6d6e <_ZN5spark12NetworkClass9listeningEv>
   d64ba:	2800      	cmp	r0, #0
   d64bc:	f040 808c 	bne.w	d65d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d64c0:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d64c2:	4a48      	ldr	r2, [pc, #288]	; (d65e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d64c4:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d64c6:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d64ca:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d64cc:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d64ce:	f88d 8008 	strb.w	r8, [sp, #8]
   d64d2:	f7fe fff0 	bl	d54b6 <_ZN5spark10JSONWriter11beginObjectEv>
   d64d6:	4641      	mov	r1, r8
   d64d8:	4648      	mov	r0, r9
   d64da:	f7fe f9e5 	bl	d48a8 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d64de:	4942      	ldr	r1, [pc, #264]	; (d65e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d64e0:	4680      	mov	r8, r0
   d64e2:	2201      	movs	r2, #1
   d64e4:	a801      	add	r0, sp, #4
   d64e6:	f7ff f86b 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d64ea:	4641      	mov	r1, r8
   d64ec:	f7ff f931 	bl	d5752 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d64f0:	b13f      	cbz	r7, d6502 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d64f2:	493e      	ldr	r1, [pc, #248]	; (d65ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d64f4:	2201      	movs	r2, #1
   d64f6:	a801      	add	r0, sp, #4
   d64f8:	f7ff f862 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d64fc:	4639      	mov	r1, r7
   d64fe:	f7ff f928 	bl	d5752 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6502:	b13d      	cbz	r5, d6514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6504:	493a      	ldr	r1, [pc, #232]	; (d65f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6506:	2201      	movs	r2, #1
   d6508:	a801      	add	r0, sp, #4
   d650a:	f7ff f859 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d650e:	4629      	mov	r1, r5
   d6510:	f7ff f91f 	bl	d5752 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6514:	7923      	ldrb	r3, [r4, #4]
   d6516:	07df      	lsls	r7, r3, #31
   d6518:	d50e      	bpl.n	d6538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d651a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d651c:	212f      	movs	r1, #47	; 0x2f
   d651e:	4628      	mov	r0, r5
   d6520:	f001 fd60 	bl	d7fe4 <strrchr>
    if (s1) {
   d6524:	b100      	cbz	r0, d6528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6526:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d6528:	4932      	ldr	r1, [pc, #200]	; (d65f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d652a:	2201      	movs	r2, #1
   d652c:	a801      	add	r0, sp, #4
   d652e:	f7ff f847 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d6532:	4629      	mov	r1, r5
   d6534:	f7ff f90d 	bl	d5752 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6538:	7923      	ldrb	r3, [r4, #4]
   d653a:	079d      	lsls	r5, r3, #30
   d653c:	d507      	bpl.n	d654e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d653e:	492e      	ldr	r1, [pc, #184]	; (d65f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6540:	2202      	movs	r2, #2
   d6542:	a801      	add	r0, sp, #4
   d6544:	f7ff f83c 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d6548:	68e1      	ldr	r1, [r4, #12]
   d654a:	f7fe ffc1 	bl	d54d0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d654e:	7923      	ldrb	r3, [r4, #4]
   d6550:	0758      	lsls	r0, r3, #29
   d6552:	d516      	bpl.n	d6582 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6554:	6925      	ldr	r5, [r4, #16]
   d6556:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6558:	463b      	mov	r3, r7
   d655a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d655e:	b13a      	cbz	r2, d6570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6560:	2a20      	cmp	r2, #32
   d6562:	d101      	bne.n	d6568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6564:	461d      	mov	r5, r3
   d6566:	e001      	b.n	d656c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6568:	2a28      	cmp	r2, #40	; 0x28
   d656a:	d001      	beq.n	d6570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d656c:	461f      	mov	r7, r3
   d656e:	e7f3      	b.n	d6558 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6570:	2202      	movs	r2, #2
   d6572:	4922      	ldr	r1, [pc, #136]	; (d65fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6574:	a801      	add	r0, sp, #4
   d6576:	f7ff f823 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d657a:	1b7a      	subs	r2, r7, r5
   d657c:	4629      	mov	r1, r5
   d657e:	f7ff f82e 	bl	d55de <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6582:	7923      	ldrb	r3, [r4, #4]
   d6584:	0719      	lsls	r1, r3, #28
   d6586:	d507      	bpl.n	d6598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6588:	491d      	ldr	r1, [pc, #116]	; (d6600 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d658a:	2201      	movs	r2, #1
   d658c:	a801      	add	r0, sp, #4
   d658e:	f7ff f817 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d6592:	6961      	ldr	r1, [r4, #20]
   d6594:	f7fe ffae 	bl	d54f4 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6598:	7923      	ldrb	r3, [r4, #4]
   d659a:	06da      	lsls	r2, r3, #27
   d659c:	d508      	bpl.n	d65b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d659e:	2204      	movs	r2, #4
   d65a0:	4918      	ldr	r1, [pc, #96]	; (d6604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d65a2:	eb0d 0002 	add.w	r0, sp, r2
   d65a6:	f7ff f80b 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d65aa:	69a1      	ldr	r1, [r4, #24]
   d65ac:	f7fe ff90 	bl	d54d0 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d65b0:	7923      	ldrb	r3, [r4, #4]
   d65b2:	069b      	lsls	r3, r3, #26
   d65b4:	d507      	bpl.n	d65c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d65b6:	4914      	ldr	r1, [pc, #80]	; (d6608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d65b8:	2206      	movs	r2, #6
   d65ba:	a801      	add	r0, sp, #4
   d65bc:	f7ff f800 	bl	d55c0 <_ZN5spark10JSONWriter4nameEPKcj>
   d65c0:	69e1      	ldr	r1, [r4, #28]
   d65c2:	f7ff f8c6 	bl	d5752 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d65c6:	a801      	add	r0, sp, #4
   d65c8:	f7fe ff5f 	bl	d548a <_ZN5spark10JSONWriter9endObjectEv>
   d65cc:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d65ce:	490f      	ldr	r1, [pc, #60]	; (d660c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d65d0:	6803      	ldr	r3, [r0, #0]
   d65d2:	2202      	movs	r2, #2
   d65d4:	68db      	ldr	r3, [r3, #12]
   d65d6:	4798      	blx	r3
}
   d65d8:	b005      	add	sp, #20
   d65da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d65de:	bf00      	nop
   d65e0:	2003e5c8 	.word	0x2003e5c8
   d65e4:	000d8298 	.word	0x000d8298
   d65e8:	000d82e2 	.word	0x000d82e2
   d65ec:	000d82f5 	.word	0x000d82f5
   d65f0:	000d83b0 	.word	0x000d83b0
   d65f4:	000d837d 	.word	0x000d837d
   d65f8:	000d837f 	.word	0x000d837f
   d65fc:	000d8382 	.word	0x000d8382
   d6600:	000d830a 	.word	0x000d830a
   d6604:	000d8385 	.word	0x000d8385
   d6608:	000d838a 	.word	0x000d838a
   d660c:	000d837a 	.word	0x000d837a

000d6610 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6610:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6612:	2301      	movs	r3, #1
   d6614:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6616:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6618:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d661a:	b10b      	cbz	r3, d6620 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d661c:	68c0      	ldr	r0, [r0, #12]
   d661e:	e006      	b.n	d662e <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6620:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6622:	b128      	cbz	r0, d6630 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6624:	6883      	ldr	r3, [r0, #8]
   d6626:	b90b      	cbnz	r3, d662c <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6628:	f001 faaf 	bl	d7b8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d662c:	68c3      	ldr	r3, [r0, #12]
   d662e:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6630:	2301      	movs	r3, #1
   d6632:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6634:	2000      	movs	r0, #0
    }
   d6636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d663a:	f7fd bfc5 	b.w	d45c8 <os_thread_exit>

000d663e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d663e:	2200      	movs	r2, #0
   d6640:	4611      	mov	r1, r2
   d6642:	6840      	ldr	r0, [r0, #4]
   d6644:	f7fe b9de 	b.w	d4a04 <network_listening>

000d6648 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6648:	2200      	movs	r2, #0
   d664a:	4611      	mov	r1, r2
   d664c:	6840      	ldr	r0, [r0, #4]
   d664e:	f7fe b9e9 	b.w	d4a24 <network_get_listen_timeout>

000d6652 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6652:	2200      	movs	r2, #0
   d6654:	6840      	ldr	r0, [r0, #4]
   d6656:	f7fe b9dd 	b.w	d4a14 <network_set_listen_timeout>

000d665a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d665a:	2200      	movs	r2, #0
   d665c:	f081 0101 	eor.w	r1, r1, #1
   d6660:	6840      	ldr	r0, [r0, #4]
   d6662:	f7fe b9c7 	b.w	d49f4 <network_listen>

000d6666 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6666:	2300      	movs	r3, #0
   d6668:	461a      	mov	r2, r3
   d666a:	2101      	movs	r1, #1
   d666c:	6840      	ldr	r0, [r0, #4]
   d666e:	f7fe b9b9 	b.w	d49e4 <network_off>

000d6672 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6672:	2300      	movs	r3, #0
   d6674:	461a      	mov	r2, r3
   d6676:	4619      	mov	r1, r3
   d6678:	6840      	ldr	r0, [r0, #4]
   d667a:	f7fe b9ab 	b.w	d49d4 <network_on>

000d667e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d667e:	2200      	movs	r2, #0
   d6680:	4611      	mov	r1, r2
   d6682:	6840      	ldr	r0, [r0, #4]
   d6684:	f7fe b99e 	b.w	d49c4 <network_ready>

000d6688 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6688:	2200      	movs	r2, #0
   d668a:	4611      	mov	r1, r2
   d668c:	6840      	ldr	r0, [r0, #4]
   d668e:	f7fe b989 	b.w	d49a4 <network_connecting>

000d6692 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6692:	2200      	movs	r2, #0
   d6694:	2102      	movs	r1, #2
   d6696:	6840      	ldr	r0, [r0, #4]
   d6698:	f7fe b98c 	b.w	d49b4 <network_disconnect>

000d669c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d669c:	2300      	movs	r3, #0
   d669e:	461a      	mov	r2, r3
   d66a0:	6840      	ldr	r0, [r0, #4]
   d66a2:	f7fe b977 	b.w	d4994 <network_connect>

000d66a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d66a6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66a8:	4605      	mov	r5, r0
   d66aa:	b188      	cbz	r0, d66d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d66ac:	6804      	ldr	r4, [r0, #0]
   d66ae:	b14c      	cbz	r4, d66c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d66b0:	68a3      	ldr	r3, [r4, #8]
   d66b2:	b11b      	cbz	r3, d66bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d66b4:	2203      	movs	r2, #3
   d66b6:	4621      	mov	r1, r4
   d66b8:	4620      	mov	r0, r4
   d66ba:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66bc:	2110      	movs	r1, #16
   d66be:	4620      	mov	r0, r4
   d66c0:	f001 fa47 	bl	d7b52 <_ZdlPvj>
   d66c4:	4628      	mov	r0, r5
   d66c6:	2114      	movs	r1, #20
      }
   d66c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d66cc:	f001 ba41 	b.w	d7b52 <_ZdlPvj>
   d66d0:	bd38      	pop	{r3, r4, r5, pc}

000d66d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d66d2:	b110      	cbz	r0, d66da <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d66d4:	6803      	ldr	r3, [r0, #0]
   d66d6:	685b      	ldr	r3, [r3, #4]
   d66d8:	4718      	bx	r3
   d66da:	4770      	bx	lr

000d66dc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d66dc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d66de:	6803      	ldr	r3, [r0, #0]
   d66e0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d66e2:	b1bb      	cbz	r3, d6714 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d66e4:	6858      	ldr	r0, [r3, #4]
   d66e6:	f7fd ff1f 	bl	d4528 <os_thread_is_current>
   d66ea:	b978      	cbnz	r0, d670c <_ZN6ThreadD1Ev+0x30>
   d66ec:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d66ee:	7c5a      	ldrb	r2, [r3, #17]
   d66f0:	b912      	cbnz	r2, d66f8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d66f2:	6858      	ldr	r0, [r3, #4]
   d66f4:	f7fd ff20 	bl	d4538 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d66f8:	6823      	ldr	r3, [r4, #0]
   d66fa:	6858      	ldr	r0, [r3, #4]
   d66fc:	f7fd ff24 	bl	d4548 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6700:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6702:	2300      	movs	r3, #0
   d6704:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6706:	b128      	cbz	r0, d6714 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6708:	f7ff ffcd 	bl	d66a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d670c:	6820      	ldr	r0, [r4, #0]
   d670e:	b108      	cbz	r0, d6714 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6710:	f7ff ffc9 	bl	d66a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6714:	4620      	mov	r0, r4
   d6716:	bd10      	pop	{r4, pc}

000d6718 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6718:	b538      	push	{r3, r4, r5, lr}
   d671a:	4b0c      	ldr	r3, [pc, #48]	; (d674c <_ZN5spark9MeshClassD1Ev+0x34>)
   d671c:	6003      	str	r3, [r0, #0]
   d671e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6720:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6724:	b108      	cbz	r0, d672a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6726:	f7fd fcbc 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d672a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d672e:	b135      	cbz	r5, d673e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6730:	4628      	mov	r0, r5
   d6732:	f7ff ffd3 	bl	d66dc <_ZN6ThreadD1Ev>
   d6736:	2104      	movs	r1, #4
   d6738:	4628      	mov	r0, r5
   d673a:	f001 fa0a 	bl	d7b52 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d673e:	68a0      	ldr	r0, [r4, #8]
   d6740:	b108      	cbz	r0, d6746 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6742:	f7ff ffc6 	bl	d66d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6746:	4620      	mov	r0, r4
   d6748:	bd38      	pop	{r3, r4, r5, pc}
   d674a:	bf00      	nop
   d674c:	000d83f0 	.word	0x000d83f0

000d6750 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6754:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6756:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d675a:	4606      	mov	r6, r0
   d675c:	4688      	mov	r8, r1
   d675e:	4691      	mov	r9, r2
   d6760:	469a      	mov	sl, r3
   d6762:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6764:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6766:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6768:	454b      	cmp	r3, r9
   d676a:	d129      	bne.n	d67c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d676c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d676e:	4553      	cmp	r3, sl
   d6770:	d126      	bne.n	d67c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d6772:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d6776:	455b      	cmp	r3, fp
   d6778:	d122      	bne.n	d67c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d677a:	2140      	movs	r1, #64	; 0x40
   d677c:	4640      	mov	r0, r8
   d677e:	f001 fc25 	bl	d7fcc <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d6782:	4641      	mov	r1, r8
   d6784:	4602      	mov	r2, r0
   d6786:	4620      	mov	r0, r4
   d6788:	f001 fc0b 	bl	d7fa2 <strncmp>
   d678c:	b9c0      	cbnz	r0, d67c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d678e:	b16f      	cbz	r7, d67ac <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d6790:	210c      	movs	r1, #12
   d6792:	4638      	mov	r0, r7
   d6794:	f001 fc1a 	bl	d7fcc <strnlen>
                if (id_len)
   d6798:	4602      	mov	r2, r0
   d679a:	b138      	cbz	r0, d67ac <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d679c:	2358      	movs	r3, #88	; 0x58
   d679e:	fb03 6005 	mla	r0, r3, r5, r6
   d67a2:	4639      	mov	r1, r7
   d67a4:	3049      	adds	r0, #73	; 0x49
   d67a6:	f001 fbfc 	bl	d7fa2 <strncmp>
   d67aa:	e004      	b.n	d67b6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d67ac:	2058      	movs	r0, #88	; 0x58
   d67ae:	fb00 6505 	mla	r5, r0, r5, r6
   d67b2:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d67b6:	fab0 f080 	clz	r0, r0
   d67ba:	0940      	lsrs	r0, r0, #5
   d67bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d67c0:	3501      	adds	r5, #1
   d67c2:	2d05      	cmp	r5, #5
   d67c4:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d67c8:	d1cd      	bne.n	d6766 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d67ca:	2000      	movs	r0, #0
}
   d67cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d67d0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d67d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67d4:	b085      	sub	sp, #20
   d67d6:	4607      	mov	r7, r0
   d67d8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d67dc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d67de:	9601      	str	r6, [sp, #4]
   d67e0:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d67e4:	4689      	mov	r9, r1
   d67e6:	9202      	str	r2, [sp, #8]
   d67e8:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d67ea:	f7ff ffb1 	bl	d6750 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d67ee:	2800      	cmp	r0, #0
   d67f0:	d13c      	bne.n	d686c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d67f2:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d67f4:	2358      	movs	r3, #88	; 0x58
   d67f6:	fb03 7504 	mla	r5, r3, r4, r7
   d67fa:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d67fe:	f1b8 0f00 	cmp.w	r8, #0
   d6802:	d12e      	bne.n	d6862 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d6804:	2140      	movs	r1, #64	; 0x40
   d6806:	4648      	mov	r0, r9
   d6808:	f001 fbe0 	bl	d7fcc <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d680c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d680e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d6810:	4602      	mov	r2, r0
   d6812:	4628      	mov	r0, r5
   d6814:	f001 fb21 	bl	d7e5a <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d6818:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d681c:	4641      	mov	r1, r8
   d681e:	eb05 000b 	add.w	r0, r5, fp
   d6822:	f001 fb40 	bl	d7ea6 <memset>
            event_handlers[i].handler = handler;
   d6826:	9b02      	ldr	r3, [sp, #8]
   d6828:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d682a:	9b03      	ldr	r3, [sp, #12]
   d682c:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d682e:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d6832:	b12e      	cbz	r6, d6840 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d6834:	210c      	movs	r1, #12
   d6836:	4630      	mov	r0, r6
   d6838:	f001 fbc8 	bl	d7fcc <strnlen>
   d683c:	4605      	mov	r5, r0
   d683e:	e000      	b.n	d6842 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d6840:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d6842:	2058      	movs	r0, #88	; 0x58
   d6844:	4344      	muls	r4, r0
   d6846:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d6848:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d684a:	462a      	mov	r2, r5
   d684c:	4631      	mov	r1, r6
   d684e:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d6850:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d6852:	f001 fb02 	bl	d7e5a <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d6856:	2000      	movs	r0, #0
   d6858:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d685c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d6860:	e005      	b.n	d686e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6862:	3401      	adds	r4, #1
   d6864:	2c05      	cmp	r4, #5
   d6866:	d1c6      	bne.n	d67f6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d6868:	4802      	ldr	r0, [pc, #8]	; (d6874 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d686a:	e000      	b.n	d686e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d686c:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d686e:	b005      	add	sp, #20
   d6870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6874:	fffffefc 	.word	0xfffffefc

000d6878 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d6878:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d687a:	2300      	movs	r3, #0
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	9300      	str	r3, [sp, #0]
   d6880:	f7ff ffa6 	bl	d67d0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d6884:	b003      	add	sp, #12
   d6886:	f85d fb04 	ldr.w	pc, [sp], #4

000d688a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d688a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d688e:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d6890:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d6892:	460d      	mov	r5, r1
   d6894:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d6896:	f001 fb7c 	bl	d7f92 <strlen>
   d689a:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d689e:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d68a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d68a2:	b1ab      	cbz	r3, d68d0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d68a4:	2140      	movs	r1, #64	; 0x40
   d68a6:	4620      	mov	r0, r4
   d68a8:	f001 fb90 	bl	d7fcc <strnlen>

        if (event_name_length < filter_length)
   d68ac:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d68ae:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d68b0:	d30b      	bcc.n	d68ca <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d68b2:	4629      	mov	r1, r5
   d68b4:	4620      	mov	r0, r4
   d68b6:	f001 fac1 	bl	d7e3c <memcmp>
        if (0 == cmp)
   d68ba:	b930      	cbnz	r0, d68ca <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d68bc:	9000      	str	r0, [sp, #0]
   d68be:	4643      	mov	r3, r8
   d68c0:	462a      	mov	r2, r5
   d68c2:	4621      	mov	r1, r4
   d68c4:	2058      	movs	r0, #88	; 0x58
   d68c6:	f7fe f833 	bl	d4930 <system_invoke_event_handler>
   d68ca:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d68cc:	42b4      	cmp	r4, r6
   d68ce:	d1e7      	bne.n	d68a0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d68d0:	b002      	add	sp, #8
   d68d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d68d8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d68d8:	b530      	push	{r4, r5, lr}
   d68da:	b08d      	sub	sp, #52	; 0x34
   d68dc:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d68de:	2211      	movs	r2, #17
   d68e0:	2100      	movs	r1, #0
   d68e2:	a801      	add	r0, sp, #4
   d68e4:	f001 fadf 	bl	d7ea6 <memset>
    addr.v = 6;
   d68e8:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d68ea:	aa01      	add	r2, sp, #4
   d68ec:	4909      	ldr	r1, [pc, #36]	; (d6914 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d68ee:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d68f2:	200a      	movs	r0, #10
   d68f4:	f7fd fec8 	bl	d4688 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d68f8:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d68fa:	a901      	add	r1, sp, #4
   d68fc:	a806      	add	r0, sp, #24
   d68fe:	f7fe fccb 	bl	d5298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6904:	3404      	adds	r4, #4
   d6906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6908:	682b      	ldr	r3, [r5, #0]
   d690a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d690c:	2000      	movs	r0, #0
   d690e:	b00d      	add	sp, #52	; 0x34
   d6910:	bd30      	pop	{r4, r5, pc}
   d6912:	bf00      	nop
   d6914:	000d841c 	.word	0x000d841c

000d6918 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d691c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d691e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d6922:	b08a      	sub	sp, #40	; 0x28
   d6924:	4630      	mov	r0, r6
   d6926:	f7fe ff21 	bl	d576c <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d692a:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d692c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6930:	f7fd fe2a 	bl	d4588 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d6934:	2c00      	cmp	r4, #0
   d6936:	d063      	beq.n	d6a00 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d6938:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d693c:	b163      	cbz	r3, d6958 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d693e:	6823      	ldr	r3, [r4, #0]
   d6940:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d6944:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d6946:	4620      	mov	r0, r4
   d6948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d694c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d6950:	47b8      	blx	r7
        if (len > 0) {
   d6952:	1e04      	subs	r4, r0, #0
   d6954:	dc13      	bgt.n	d697e <_ZN5spark11MeshPublish4pollEv+0x66>
   d6956:	e056      	b.n	d6a06 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d6958:	492d      	ldr	r1, [pc, #180]	; (d6a10 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d695a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d695e:	f001 f912 	bl	d7b86 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6962:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d6966:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d696a:	b113      	cbz	r3, d6972 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d696c:	4618      	mov	r0, r3
   d696e:	f7fd fb98 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d6972:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d6976:	2b00      	cmp	r3, #0
   d6978:	d1e1      	bne.n	d693e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d697a:	4826      	ldr	r0, [pc, #152]	; (d6a14 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d697c:	e044      	b.n	d6a08 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d697e:	2320      	movs	r3, #32
   d6980:	4a25      	ldr	r2, [pc, #148]	; (d6a18 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d6982:	9302      	str	r3, [sp, #8]
   d6984:	9200      	str	r2, [sp, #0]
   d6986:	2300      	movs	r3, #0
   d6988:	9401      	str	r4, [sp, #4]
   d698a:	aa02      	add	r2, sp, #8
   d698c:	4923      	ldr	r1, [pc, #140]	; (d6a1c <_ZN5spark11MeshPublish4pollEv+0x104>)
   d698e:	9303      	str	r3, [sp, #12]
   d6990:	2001      	movs	r0, #1
   d6992:	f7fd ff79 	bl	d4888 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6996:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d699a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d699c:	781b      	ldrb	r3, [r3, #0]
   d699e:	bb6b      	cbnz	r3, d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d69a0:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d69a2:	4621      	mov	r1, r4
   d69a4:	4638      	mov	r0, r7
   d69a6:	f001 fb11 	bl	d7fcc <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d69aa:	b338      	cbz	r0, d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d69ac:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d69ae:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d69b0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d69b4:	dd22      	ble.n	d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d69b6:	5c3b      	ldrb	r3, [r7, r0]
   d69b8:	bb03      	cbnz	r3, d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d69ba:	3c01      	subs	r4, #1
   d69bc:	d00e      	beq.n	d69dc <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d69be:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d69c2:	4621      	mov	r1, r4
   d69c4:	4640      	mov	r0, r8
   d69c6:	f001 fb01 	bl	d7fcc <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d69ca:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d69cc:	2c00      	cmp	r4, #0
   d69ce:	dd15      	ble.n	d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d69d0:	f818 3000 	ldrb.w	r3, [r8, r0]
   d69d4:	b993      	cbnz	r3, d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d69d6:	2c01      	cmp	r4, #1
   d69d8:	d002      	beq.n	d69e0 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d69da:	e00f      	b.n	d69fc <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d69dc:	f8df 8044 	ldr.w	r8, [pc, #68]	; d6a24 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d69e0:	4630      	mov	r0, r6
   d69e2:	f7fe fec3 	bl	d576c <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d69e6:	4642      	mov	r2, r8
   d69e8:	4639      	mov	r1, r7
   d69ea:	1d28      	adds	r0, r5, #4
   d69ec:	f7ff ff4d 	bl	d688a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d69f0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d69f4:	f7fd fdc8 	bl	d4588 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d69f8:	2000      	movs	r0, #0
   d69fa:	e005      	b.n	d6a08 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d69fc:	4808      	ldr	r0, [pc, #32]	; (d6a20 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d69fe:	e003      	b.n	d6a08 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d6a00:	2064      	movs	r0, #100	; 0x64
   d6a02:	f7fd fdf1 	bl	d45e8 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6a06:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d6a08:	b00a      	add	sp, #40	; 0x28
   d6a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a0e:	bf00      	nop
   d6a10:	000d858c 	.word	0x000d858c
   d6a14:	fffffefc 	.word	0xfffffefc
   d6a18:	000d8430 	.word	0x000d8430
   d6a1c:	000d8429 	.word	0x000d8429
   d6a20:	fffffee8 	.word	0xfffffee8
   d6a24:	000d837c 	.word	0x000d837c

000d6a28 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6a28:	b510      	push	{r4, lr}
   d6a2a:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6a2c:	f3bf 8f5f 	dmb	sy
   d6a30:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d6a34:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d6a38:	b91b      	cbnz	r3, d6a42 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	f7ff ff6c 	bl	d6918 <_ZN5spark11MeshPublish4pollEv>
   d6a40:	e7f4      	b.n	d6a2c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d6a42:	bd10      	pop	{r4, pc}

000d6a44 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d6a44:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a46:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6a48:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6a4a:	b144      	cbz	r4, d6a5e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	f7ff fe45 	bl	d66dc <_ZN6ThreadD1Ev>
   d6a52:	4620      	mov	r0, r4
   d6a54:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d6a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a5a:	f001 b87a 	b.w	d7b52 <_ZdlPvj>
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d6a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a64:	4605      	mov	r5, r0
   d6a66:	b08a      	sub	sp, #40	; 0x28
   d6a68:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6a6c:	f7fe fe7e 	bl	d576c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d6a70:	682c      	ldr	r4, [r5, #0]
   d6a72:	2c00      	cmp	r4, #0
   d6a74:	d17b      	bne.n	d6b6e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d6a76:	204c      	movs	r0, #76	; 0x4c
   d6a78:	f7fd fb0d 	bl	d4096 <_Znwj>
   d6a7c:	4606      	mov	r6, r0
   d6a7e:	2800      	cmp	r0, #0
   d6a80:	d073      	beq.n	d6b6a <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d6a82:	f000 fe17 	bl	d76b4 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6a86:	4622      	mov	r2, r4
   d6a88:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d6a8c:	4630      	mov	r0, r6
   d6a8e:	f000 fe41 	bl	d7714 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6a92:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d6a94:	483a      	ldr	r0, [pc, #232]	; (d6b80 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6a96:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d6a9a:	f7fd fdc5 	bl	d4628 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d6a9e:	6833      	ldr	r3, [r6, #0]
   d6aa0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6aa4:	6a1b      	ldr	r3, [r3, #32]
   d6aa6:	f249 0169 	movw	r1, #36969	; 0x9069
   d6aaa:	4630      	mov	r0, r6
   d6aac:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d6aae:	a804      	add	r0, sp, #16
   d6ab0:	f7fe fbe4 	bl	d527c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6ab4:	a804      	add	r0, sp, #16
   d6ab6:	f7ff ff0f 	bl	d68d8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6aba:	2800      	cmp	r0, #0
   d6abc:	db4a      	blt.n	d6b54 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d6abe:	a904      	add	r1, sp, #16
   d6ac0:	4630      	mov	r0, r6
   d6ac2:	f000 fe93 	bl	d77ec <_ZN3UDP13joinMulticastERK9IPAddress>
   d6ac6:	2800      	cmp	r0, #0
   d6ac8:	db44      	blt.n	d6b54 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6aca:	f3bf 8f5f 	dmb	sy
   d6ace:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d6ad2:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6ad6:	492b      	ldr	r1, [pc, #172]	; (d6b84 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6ad8:	2004      	movs	r0, #4
   d6ada:	f001 f845 	bl	d7b68 <_ZnwjRKSt9nothrow_t>
   d6ade:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d6ae2:	4607      	mov	r7, r0
   d6ae4:	b348      	cbz	r0, d6b3a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6ae6:	4927      	ldr	r1, [pc, #156]	; (d6b84 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d6ae8:	2014      	movs	r0, #20
   d6aea:	f001 f83d 	bl	d7b68 <_ZnwjRKSt9nothrow_t>
   d6aee:	b128      	cbz	r0, d6afc <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d6af0:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6af2:	6004      	str	r4, [r0, #0]
   d6af4:	6044      	str	r4, [r0, #4]
   d6af6:	6084      	str	r4, [r0, #8]
   d6af8:	60c4      	str	r4, [r0, #12]
   d6afa:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6afc:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d6afe:	b1b0      	cbz	r0, d6b2e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d6b00:	4b21      	ldr	r3, [pc, #132]	; (d6b88 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d6b02:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b04:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6b06:	4921      	ldr	r1, [pc, #132]	; (d6b8c <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d6b08:	60dd      	str	r5, [r3, #12]
   d6b0a:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d6b10:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6b14:	2203      	movs	r2, #3
   d6b16:	4b1e      	ldr	r3, [pc, #120]	; (d6b90 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d6b18:	3004      	adds	r0, #4
   d6b1a:	f7fd fcfd 	bl	d4518 <os_thread_create>
   d6b1e:	b930      	cbnz	r0, d6b2e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d6b20:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d6b22:	7c1b      	ldrb	r3, [r3, #16]
   d6b24:	b94b      	cbnz	r3, d6b3a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d6b26:	2001      	movs	r0, #1
   d6b28:	f7fd fd5e 	bl	d45e8 <HAL_Delay_Milliseconds>
   d6b2c:	e7f8      	b.n	d6b20 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b2e:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b30:	2300      	movs	r3, #0
   d6b32:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b34:	b108      	cbz	r0, d6b3a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d6b36:	f7ff fdb6 	bl	d66a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d6b3a:	4639      	mov	r1, r7
   d6b3c:	4640      	mov	r0, r8
   d6b3e:	f7ff ff81 	bl	d6a44 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d6b42:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d6b46:	b13b      	cbz	r3, d6b58 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b48:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b4a:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b4c:	b130      	cbz	r0, d6b5c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d6b4e:	f7ff fdc0 	bl	d66d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6b52:	e00c      	b.n	d6b6e <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d6b54:	4604      	mov	r4, r0
   d6b56:	e003      	b.n	d6b60 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d6b58:	4c0e      	ldr	r4, [pc, #56]	; (d6b94 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6b5a:	e001      	b.n	d6b60 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d6b5c:	4604      	mov	r4, r0
   d6b5e:	e007      	b.n	d6b70 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b60:	b136      	cbz	r6, d6b70 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d6b62:	4630      	mov	r0, r6
   d6b64:	f7ff fdb5 	bl	d66d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6b68:	e002      	b.n	d6b70 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d6b6a:	4c0a      	ldr	r4, [pc, #40]	; (d6b94 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d6b6c:	e000      	b.n	d6b70 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d6b6e:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b70:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6b74:	f7fd fd08 	bl	d4588 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d6b78:	4620      	mov	r0, r4
   d6b7a:	b00a      	add	sp, #40	; 0x28
   d6b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b80:	000d8440 	.word	0x000d8440
   d6b84:	000d858c 	.word	0x000d858c
   d6b88:	000d6a29 	.word	0x000d6a29
   d6b8c:	000d8444 	.word	0x000d8444
   d6b90:	000d6611 	.word	0x000d6611
   d6b94:	fffffefc 	.word	0xfffffefc

000d6b98 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b9c:	4605      	mov	r5, r0
   d6b9e:	b08c      	sub	sp, #48	; 0x30
   d6ba0:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d6ba2:	460f      	mov	r7, r1
   d6ba4:	b109      	cbz	r1, d6baa <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6ba6:	780b      	ldrb	r3, [r1, #0]
   d6ba8:	b90b      	cbnz	r3, d6bae <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d6baa:	4c35      	ldr	r4, [pc, #212]	; (d6c80 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d6bac:	e064      	b.n	d6c78 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d6bae:	4608      	mov	r0, r1
   d6bb0:	f001 f9ef 	bl	d7f92 <strlen>
   d6bb4:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6bb6:	2e00      	cmp	r6, #0
   d6bb8:	d05c      	beq.n	d6c74 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d6bba:	4630      	mov	r0, r6
   d6bbc:	f001 f9e9 	bl	d7f92 <strlen>
   d6bc0:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6bc2:	f108 0302 	add.w	r3, r8, #2
   d6bc6:	4423      	add	r3, r4
   d6bc8:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d6bcc:	d84f      	bhi.n	d6c6e <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d6bce:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d6bd2:	f7fe fdcb 	bl	d576c <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6bd6:	4628      	mov	r0, r5
   d6bd8:	f7ff ff42 	bl	d6a60 <_ZN5spark11MeshPublish13initializeUdpEv>
   d6bdc:	2800      	cmp	r0, #0
   d6bde:	db40      	blt.n	d6c62 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d6be0:	4668      	mov	r0, sp
   d6be2:	f7fe fb4b 	bl	d527c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6be6:	4668      	mov	r0, sp
   d6be8:	f7ff fe76 	bl	d68d8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6bec:	2800      	cmp	r0, #0
   d6bee:	db38      	blt.n	d6c62 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6bf0:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d6bf4:	f8da 3000 	ldr.w	r3, [sl]
   d6bf8:	f10d 0c04 	add.w	ip, sp, #4
   d6bfc:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d6c00:	4b20      	ldr	r3, [pc, #128]	; (d6c84 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d6c02:	9306      	str	r3, [sp, #24]
   d6c04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6c08:	f10d 0e1c 	add.w	lr, sp, #28
   d6c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6c10:	f8dc 3000 	ldr.w	r3, [ip]
   d6c14:	f88e 3000 	strb.w	r3, [lr]
   d6c18:	f249 0269 	movw	r2, #36969	; 0x9069
   d6c1c:	a906      	add	r1, sp, #24
   d6c1e:	4650      	mov	r0, sl
   d6c20:	47c8      	blx	r9
   d6c22:	2800      	cmp	r0, #0
   d6c24:	db1d      	blt.n	d6c62 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d6c26:	2300      	movs	r3, #0
   d6c28:	6828      	ldr	r0, [r5, #0]
   d6c2a:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d6c2e:	6803      	ldr	r3, [r0, #0]
   d6c30:	2201      	movs	r2, #1
   d6c32:	68db      	ldr	r3, [r3, #12]
   d6c34:	a906      	add	r1, sp, #24
   d6c36:	4798      	blx	r3
   d6c38:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d6c3a:	6803      	ldr	r3, [r0, #0]
   d6c3c:	f108 0201 	add.w	r2, r8, #1
   d6c40:	68db      	ldr	r3, [r3, #12]
   d6c42:	4639      	mov	r1, r7
   d6c44:	4798      	blx	r3
    if (dataLen > 0) {
   d6c46:	b12c      	cbz	r4, d6c54 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d6c48:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d6c4a:	6803      	ldr	r3, [r0, #0]
   d6c4c:	4622      	mov	r2, r4
   d6c4e:	68db      	ldr	r3, [r3, #12]
   d6c50:	4631      	mov	r1, r6
   d6c52:	4798      	blx	r3
   d6c54:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d6c56:	6803      	ldr	r3, [r0, #0]
   d6c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c5a:	4798      	blx	r3
   d6c5c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6c60:	e000      	b.n	d6c64 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6c62:	4604      	mov	r4, r0
   d6c64:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6c68:	f7fd fc8e 	bl	d4588 <os_mutex_recursive_unlock>
   d6c6c:	e004      	b.n	d6c78 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6c6e:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6c72:	e001      	b.n	d6c78 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6c74:	4634      	mov	r4, r6
   d6c76:	e7a4      	b.n	d6bc2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6c78:	4620      	mov	r0, r4
   d6c7a:	b00c      	add	sp, #48	; 0x30
   d6c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c80:	fffffef2 	.word	0xfffffef2
   d6c84:	000d8264 	.word	0x000d8264

000d6c88 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d6c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c8a:	4605      	mov	r5, r0
   d6c8c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6c90:	460e      	mov	r6, r1
   d6c92:	4617      	mov	r7, r2
   d6c94:	f7fe fd6a 	bl	d576c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d6c98:	4628      	mov	r0, r5
   d6c9a:	f7ff fee1 	bl	d6a60 <_ZN5spark11MeshPublish13initializeUdpEv>
   d6c9e:	2800      	cmp	r0, #0
   d6ca0:	db07      	blt.n	d6cb2 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d6ca2:	463a      	mov	r2, r7
   d6ca4:	4631      	mov	r1, r6
   d6ca6:	1d28      	adds	r0, r5, #4
   d6ca8:	f7ff fde6 	bl	d6878 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d6cac:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6cb0:	e000      	b.n	d6cb4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6cb8:	f7fd fc66 	bl	d4588 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cc0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6cc0:	b538      	push	{r3, r4, r5, lr}
   d6cc2:	4c0e      	ldr	r4, [pc, #56]	; (d6cfc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6cc4:	4b0e      	ldr	r3, [pc, #56]	; (d6d00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6cc6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6cc8:	2500      	movs	r5, #0
   d6cca:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6ccc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6cd0:	6063      	str	r3, [r4, #4]
   d6cd2:	60a5      	str	r5, [r4, #8]
   d6cd4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cd8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6cdc:	f7fd fc44 	bl	d4568 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6ce0:	4b08      	ldr	r3, [pc, #32]	; (d6d04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6ce2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6ce6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6cea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6cec:	4620      	mov	r0, r4
   d6cee:	4a06      	ldr	r2, [pc, #24]	; (d6d08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6cf0:	4906      	ldr	r1, [pc, #24]	; (d6d0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6cf6:	f000 bf27 	b.w	d7b48 <__aeabi_atexit>
   d6cfa:	bf00      	nop
   d6cfc:	2003e3f4 	.word	0x2003e3f4
   d6d00:	000d8454 	.word	0x000d8454
   d6d04:	000d83f0 	.word	0x000d83f0
   d6d08:	2003e344 	.word	0x2003e344
   d6d0c:	000d6719 	.word	0x000d6719

000d6d10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6d10:	2300      	movs	r3, #0
   d6d12:	461a      	mov	r2, r3
   d6d14:	6840      	ldr	r0, [r0, #4]
   d6d16:	f7fd be3d 	b.w	d4994 <network_connect>

000d6d1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6d1a:	2200      	movs	r2, #0
   d6d1c:	2102      	movs	r1, #2
   d6d1e:	6840      	ldr	r0, [r0, #4]
   d6d20:	f7fd be48 	b.w	d49b4 <network_disconnect>

000d6d24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6d24:	2200      	movs	r2, #0
   d6d26:	4611      	mov	r1, r2
   d6d28:	6840      	ldr	r0, [r0, #4]
   d6d2a:	f7fd be3b 	b.w	d49a4 <network_connecting>

000d6d2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6d2e:	2200      	movs	r2, #0
   d6d30:	4611      	mov	r1, r2
   d6d32:	6840      	ldr	r0, [r0, #4]
   d6d34:	f7fd be46 	b.w	d49c4 <network_ready>

000d6d38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6d38:	2300      	movs	r3, #0
   d6d3a:	461a      	mov	r2, r3
   d6d3c:	4619      	mov	r1, r3
   d6d3e:	6840      	ldr	r0, [r0, #4]
   d6d40:	f7fd be48 	b.w	d49d4 <network_on>

000d6d44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6d44:	2300      	movs	r3, #0
   d6d46:	461a      	mov	r2, r3
   d6d48:	4619      	mov	r1, r3
   d6d4a:	6840      	ldr	r0, [r0, #4]
   d6d4c:	f7fd be4a 	b.w	d49e4 <network_off>

000d6d50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6d50:	2200      	movs	r2, #0
   d6d52:	f081 0101 	eor.w	r1, r1, #1
   d6d56:	6840      	ldr	r0, [r0, #4]
   d6d58:	f7fd be4c 	b.w	d49f4 <network_listen>

000d6d5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6d5c:	2200      	movs	r2, #0
   d6d5e:	6840      	ldr	r0, [r0, #4]
   d6d60:	f7fd be58 	b.w	d4a14 <network_set_listen_timeout>

000d6d64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6d64:	2200      	movs	r2, #0
   d6d66:	4611      	mov	r1, r2
   d6d68:	6840      	ldr	r0, [r0, #4]
   d6d6a:	f7fd be5b 	b.w	d4a24 <network_get_listen_timeout>

000d6d6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6d6e:	2200      	movs	r2, #0
   d6d70:	4611      	mov	r1, r2
   d6d72:	6840      	ldr	r0, [r0, #4]
   d6d74:	f7fd be46 	b.w	d4a04 <network_listening>

000d6d78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d7c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d7e:	b095      	sub	sp, #84	; 0x54
   d6d80:	4616      	mov	r6, r2
   d6d82:	460d      	mov	r5, r1
   d6d84:	4607      	mov	r7, r0
    IPAddress addr;
   d6d86:	f7fe fa79 	bl	d527c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6d8a:	4621      	mov	r1, r4
   d6d8c:	2220      	movs	r2, #32
   d6d8e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d90:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6d92:	f001 f888 	bl	d7ea6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6d96:	2340      	movs	r3, #64	; 0x40
   d6d98:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6d9a:	4621      	mov	r1, r4
   d6d9c:	466b      	mov	r3, sp
   d6d9e:	aa0c      	add	r2, sp, #48	; 0x30
   d6da0:	4630      	mov	r0, r6
   d6da2:	f7fd fc99 	bl	d46d8 <netdb_getaddrinfo>
    if (!r) {
   d6da6:	4604      	mov	r4, r0
   d6da8:	2800      	cmp	r0, #0
   d6daa:	d144      	bne.n	d6e36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6dac:	4602      	mov	r2, r0
   d6dae:	2101      	movs	r1, #1
   d6db0:	6868      	ldr	r0, [r5, #4]
   d6db2:	f7fd fe07 	bl	d49c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6db6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6db8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6dba:	4622      	mov	r2, r4
   d6dbc:	6868      	ldr	r0, [r5, #4]
   d6dbe:	f7fd fe01 	bl	d49c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dc2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6dc4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6dc6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dc8:	2e00      	cmp	r6, #0
   d6dca:	d034      	beq.n	d6e36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6dcc:	2900      	cmp	r1, #0
   d6dce:	d132      	bne.n	d6e36 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6dd0:	6873      	ldr	r3, [r6, #4]
   d6dd2:	2b02      	cmp	r3, #2
   d6dd4:	d002      	beq.n	d6ddc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6dd6:	2b0a      	cmp	r3, #10
   d6dd8:	d009      	beq.n	d6dee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6dda:	e02a      	b.n	d6e32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6ddc:	f1b8 0f00 	cmp.w	r8, #0
   d6de0:	d027      	beq.n	d6e32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6de2:	6971      	ldr	r1, [r6, #20]
   d6de4:	4638      	mov	r0, r7
   d6de6:	3104      	adds	r1, #4
   d6de8:	f7fe fa8b 	bl	d5302 <_ZN9IPAddressaSEPKh>
   d6dec:	e020      	b.n	d6e30 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6dee:	f1b9 0f00 	cmp.w	r9, #0
   d6df2:	d01e      	beq.n	d6e32 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6df4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6df6:	2211      	movs	r2, #17
   d6df8:	a801      	add	r0, sp, #4
   d6dfa:	f001 f854 	bl	d7ea6 <memset>
                    a.v = 6;
   d6dfe:	2306      	movs	r3, #6
   d6e00:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e04:	ad01      	add	r5, sp, #4
   d6e06:	f104 0308 	add.w	r3, r4, #8
   d6e0a:	3418      	adds	r4, #24
   d6e0c:	6818      	ldr	r0, [r3, #0]
   d6e0e:	6859      	ldr	r1, [r3, #4]
   d6e10:	462a      	mov	r2, r5
   d6e12:	c203      	stmia	r2!, {r0, r1}
   d6e14:	3308      	adds	r3, #8
   d6e16:	42a3      	cmp	r3, r4
   d6e18:	4615      	mov	r5, r2
   d6e1a:	d1f7      	bne.n	d6e0c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6e1c:	a901      	add	r1, sp, #4
   d6e1e:	a806      	add	r0, sp, #24
   d6e20:	ad07      	add	r5, sp, #28
   d6e22:	f7fe fa39 	bl	d5298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e28:	1d3c      	adds	r4, r7, #4
   d6e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e2c:	682b      	ldr	r3, [r5, #0]
   d6e2e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6e30:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e32:	69f6      	ldr	r6, [r6, #28]
   d6e34:	e7c8      	b.n	d6dc8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6e36:	9800      	ldr	r0, [sp, #0]
   d6e38:	f7fd fc46 	bl	d46c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6e3c:	4638      	mov	r0, r7
   d6e3e:	b015      	add	sp, #84	; 0x54
   d6e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6e44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6e44:	4b02      	ldr	r3, [pc, #8]	; (d6e50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6e46:	4a03      	ldr	r2, [pc, #12]	; (d6e54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6e48:	601a      	str	r2, [r3, #0]
   d6e4a:	2200      	movs	r2, #0
   d6e4c:	605a      	str	r2, [r3, #4]
   d6e4e:	4770      	bx	lr
   d6e50:	2003e5c8 	.word	0x2003e5c8
   d6e54:	000d8454 	.word	0x000d8454

000d6e58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e5a:	4606      	mov	r6, r0
   d6e5c:	460d      	mov	r5, r1
   d6e5e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6e60:	2400      	movs	r4, #0
  while (size--) {
   d6e62:	42bd      	cmp	r5, r7
   d6e64:	d00c      	beq.n	d6e80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e66:	6833      	ldr	r3, [r6, #0]
   d6e68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e6c:	689b      	ldr	r3, [r3, #8]
   d6e6e:	4630      	mov	r0, r6
   d6e70:	4798      	blx	r3
     if (chunk>=0)
   d6e72:	2800      	cmp	r0, #0
   d6e74:	db01      	blt.n	d6e7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e76:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6e78:	e7f3      	b.n	d6e62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e7a:	2c00      	cmp	r4, #0
   d6e7c:	bf08      	it	eq
   d6e7e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e80:	4620      	mov	r0, r4
   d6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e84:	b570      	push	{r4, r5, r6, lr}
   d6e86:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6e88:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6e8a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6e8c:	b149      	cbz	r1, d6ea2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6e8e:	f001 f880 	bl	d7f92 <strlen>
   d6e92:	682b      	ldr	r3, [r5, #0]
   d6e94:	4602      	mov	r2, r0
   d6e96:	4621      	mov	r1, r4
   d6e98:	4628      	mov	r0, r5
   d6e9a:	68db      	ldr	r3, [r3, #12]
    }
   d6e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6ea0:	4718      	bx	r3
    }
   d6ea2:	bd70      	pop	{r4, r5, r6, pc}

000d6ea4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6ea4:	6803      	ldr	r3, [r0, #0]
   d6ea6:	689b      	ldr	r3, [r3, #8]
   d6ea8:	4718      	bx	r3

000d6eaa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6eaa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6eac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6eae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6eb0:	f7ff fff8 	bl	d6ea4 <_ZN5Print5printEc>
  n += print('\n');
   d6eb4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6eb6:	4604      	mov	r4, r0
  n += print('\n');
   d6eb8:	4628      	mov	r0, r5
   d6eba:	f7ff fff3 	bl	d6ea4 <_ZN5Print5printEc>
  return n;
}
   d6ebe:	4420      	add	r0, r4
   d6ec0:	bd38      	pop	{r3, r4, r5, pc}

000d6ec2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6ec2:	b530      	push	{r4, r5, lr}
   d6ec4:	b08b      	sub	sp, #44	; 0x2c
   d6ec6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6ec8:	2100      	movs	r1, #0
   d6eca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6ece:	2a01      	cmp	r2, #1
   d6ed0:	bf98      	it	ls
   d6ed2:	220a      	movls	r2, #10
   d6ed4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6ed8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6edc:	fb05 3312 	mls	r3, r5, r2, r3
   d6ee0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6ee4:	2b09      	cmp	r3, #9
   d6ee6:	bf94      	ite	ls
   d6ee8:	3330      	addls	r3, #48	; 0x30
   d6eea:	3337      	addhi	r3, #55	; 0x37
   d6eec:	b2db      	uxtb	r3, r3
   d6eee:	4621      	mov	r1, r4
   d6ef0:	f804 3901 	strb.w	r3, [r4], #-1
   d6ef4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6ef6:	2d00      	cmp	r5, #0
   d6ef8:	d1ee      	bne.n	d6ed8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6efa:	f7ff ffc3 	bl	d6e84 <_ZN5Print5writeEPKc>
}
   d6efe:	b00b      	add	sp, #44	; 0x2c
   d6f00:	bd30      	pop	{r4, r5, pc}

000d6f02 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6f02:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6f04:	b92a      	cbnz	r2, d6f12 <_ZN5Print5printEmi+0x10>
   d6f06:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6f08:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6f0c:	689b      	ldr	r3, [r3, #8]
   d6f0e:	b2c9      	uxtb	r1, r1
   d6f10:	4718      	bx	r3
  else return printNumber(n, base);
   d6f12:	b2d2      	uxtb	r2, r2
}
   d6f14:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6f18:	f7ff bfd3 	b.w	d6ec2 <_ZN5Print11printNumberEmh>

000d6f1c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6f1c:	f7ff bff1 	b.w	d6f02 <_ZN5Print5printEmi>

000d6f20 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6f20:	b40c      	push	{r2, r3}
   d6f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f26:	b087      	sub	sp, #28
   d6f28:	af00      	add	r7, sp, #0
   d6f2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6f2e:	4605      	mov	r5, r0
   d6f30:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6f34:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6f36:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6f38:	4623      	mov	r3, r4
   d6f3a:	464a      	mov	r2, r9
   d6f3c:	2114      	movs	r1, #20
   d6f3e:	1d38      	adds	r0, r7, #4
   d6f40:	f7fd fd90 	bl	d4a64 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6f44:	2813      	cmp	r0, #19
   d6f46:	d805      	bhi.n	d6f54 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f48:	1d39      	adds	r1, r7, #4
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	f7ff ff9a 	bl	d6e84 <_ZN5Print5writeEPKc>
   d6f50:	4604      	mov	r4, r0
   d6f52:	e013      	b.n	d6f7c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6f54:	f100 0308 	add.w	r3, r0, #8
   d6f58:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6f5c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6f5e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6f62:	1c41      	adds	r1, r0, #1
   d6f64:	4623      	mov	r3, r4
   d6f66:	464a      	mov	r2, r9
   d6f68:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6f6a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6f6c:	f7fd fd7a 	bl	d4a64 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f70:	4669      	mov	r1, sp
   d6f72:	4628      	mov	r0, r5
   d6f74:	f7ff ff86 	bl	d6e84 <_ZN5Print5writeEPKc>
   d6f78:	4604      	mov	r4, r0
   d6f7a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6f7c:	b11e      	cbz	r6, d6f86 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6f7e:	4628      	mov	r0, r5
   d6f80:	f7ff ff93 	bl	d6eaa <_ZN5Print7printlnEv>
   d6f84:	4404      	add	r4, r0
    return n;
}
   d6f86:	4620      	mov	r0, r4
   d6f88:	371c      	adds	r7, #28
   d6f8a:	46bd      	mov	sp, r7
   d6f8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f90:	b002      	add	sp, #8
   d6f92:	4770      	bx	lr

000d6f94 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f94:	b510      	push	{r4, lr}
   d6f96:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f98:	f7fd fe2b 	bl	d4bf2 <_ZNSt14_Function_baseD1Ev>
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	bd10      	pop	{r4, pc}

000d6fa0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6fa0:	4803      	ldr	r0, [pc, #12]	; (d6fb0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6fa2:	4a04      	ldr	r2, [pc, #16]	; (d6fb4 <_GLOBAL__sub_I_RGB+0x14>)
   d6fa4:	4904      	ldr	r1, [pc, #16]	; (d6fb8 <_GLOBAL__sub_I_RGB+0x18>)
   d6fa6:	2300      	movs	r3, #0
   d6fa8:	6083      	str	r3, [r0, #8]
   d6faa:	f000 bdcd 	b.w	d7b48 <__aeabi_atexit>
   d6fae:	bf00      	nop
   d6fb0:	2003e5d0 	.word	0x2003e5d0
   d6fb4:	2003e344 	.word	0x2003e344
   d6fb8:	000d6f95 	.word	0x000d6f95

000d6fbc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6fbc:	4770      	bx	lr

000d6fbe <_ZN8SPIClassD0Ev>:
   d6fbe:	b510      	push	{r4, lr}
   d6fc0:	2110      	movs	r1, #16
   d6fc2:	4604      	mov	r4, r0
   d6fc4:	f000 fdc5 	bl	d7b52 <_ZdlPvj>
   d6fc8:	4620      	mov	r0, r4
   d6fca:	bd10      	pop	{r4, pc}

000d6fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6fcc:	b570      	push	{r4, r5, r6, lr}
   d6fce:	4b08      	ldr	r3, [pc, #32]	; (d6ff0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6fd0:	6003      	str	r3, [r0, #0]
   d6fd2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6fd4:	2500      	movs	r5, #0
   d6fd6:	460e      	mov	r6, r1
   d6fd8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6fdc:	f7fd fabc 	bl	d4558 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6fe0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6fe2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6fe4:	f7fd fbb0 	bl	d4748 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6fe8:	60a5      	str	r5, [r4, #8]
}
   d6fea:	4620      	mov	r0, r4
   d6fec:	bd70      	pop	{r4, r5, r6, pc}
   d6fee:	bf00      	nop
   d6ff0:	000d8488 	.word	0x000d8488

000d6ff4 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ff8:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ffa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ffc:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6ffe:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d7000:	680c      	ldr	r4, [r1, #0]
   d7002:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7004:	684c      	ldr	r4, [r1, #4]
   d7006:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7008:	688c      	ldr	r4, [r1, #8]
   d700a:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d700c:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d700e:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d7010:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7012:	bd10      	pop	{r4, pc}

000d7014 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7014:	b510      	push	{r4, lr}
   d7016:	4604      	mov	r4, r0
{
	free(buffer);
   d7018:	6800      	ldr	r0, [r0, #0]
   d701a:	f7fd fd13 	bl	d4a44 <free>
}
   d701e:	4620      	mov	r0, r4
   d7020:	bd10      	pop	{r4, pc}

000d7022 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7022:	b510      	push	{r4, lr}
   d7024:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7026:	6800      	ldr	r0, [r0, #0]
   d7028:	b108      	cbz	r0, d702e <_ZN6String10invalidateEv+0xc>
   d702a:	f7fd fd0b 	bl	d4a44 <free>
	buffer = NULL;
   d702e:	2300      	movs	r3, #0
   d7030:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7032:	60a3      	str	r3, [r4, #8]
   d7034:	6063      	str	r3, [r4, #4]
   d7036:	bd10      	pop	{r4, pc}

000d7038 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7038:	b538      	push	{r3, r4, r5, lr}
   d703a:	4604      	mov	r4, r0
   d703c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d703e:	6800      	ldr	r0, [r0, #0]
   d7040:	3101      	adds	r1, #1
   d7042:	f7fd fd07 	bl	d4a54 <realloc>
	if (newbuffer) {
   d7046:	b110      	cbz	r0, d704e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7048:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d704c:	2001      	movs	r0, #1
	}
	return 0;
}
   d704e:	bd38      	pop	{r3, r4, r5, pc}

000d7050 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7050:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7052:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7054:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7056:	b113      	cbz	r3, d705e <_ZN6String7reserveEj+0xe>
   d7058:	6843      	ldr	r3, [r0, #4]
   d705a:	428b      	cmp	r3, r1
   d705c:	d207      	bcs.n	d706e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d705e:	4620      	mov	r0, r4
   d7060:	f7ff ffea 	bl	d7038 <_ZN6String12changeBufferEj>
   d7064:	b120      	cbz	r0, d7070 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7066:	68a3      	ldr	r3, [r4, #8]
   d7068:	b90b      	cbnz	r3, d706e <_ZN6String7reserveEj+0x1e>
   d706a:	6822      	ldr	r2, [r4, #0]
   d706c:	7013      	strb	r3, [r2, #0]
   d706e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7070:	bd10      	pop	{r4, pc}

000d7072 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7072:	b570      	push	{r4, r5, r6, lr}
   d7074:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7076:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7078:	4604      	mov	r4, r0
   d707a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d707c:	f7ff ffe8 	bl	d7050 <_ZN6String7reserveEj>
   d7080:	b918      	cbnz	r0, d708a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7082:	4620      	mov	r0, r4
   d7084:	f7ff ffcd 	bl	d7022 <_ZN6String10invalidateEv>
		return *this;
   d7088:	e009      	b.n	d709e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d708a:	462a      	mov	r2, r5
   d708c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d708e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7090:	6820      	ldr	r0, [r4, #0]
   d7092:	f000 fee2 	bl	d7e5a <memcpy>
	buffer[len] = 0;
   d7096:	6822      	ldr	r2, [r4, #0]
   d7098:	68a3      	ldr	r3, [r4, #8]
   d709a:	2100      	movs	r1, #0
   d709c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d709e:	4620      	mov	r0, r4
   d70a0:	bd70      	pop	{r4, r5, r6, pc}

000d70a2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d70a2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70a4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d70a6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70a8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d70aa:	6043      	str	r3, [r0, #4]
	len = 0;
   d70ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d70ae:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d70b0:	460d      	mov	r5, r1
   d70b2:	b139      	cbz	r1, d70c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d70b4:	4608      	mov	r0, r1
   d70b6:	f000 ff6c 	bl	d7f92 <strlen>
   d70ba:	4629      	mov	r1, r5
   d70bc:	4602      	mov	r2, r0
   d70be:	4620      	mov	r0, r4
   d70c0:	f7ff ffd7 	bl	d7072 <_ZN6String4copyEPKcj>
}
   d70c4:	4620      	mov	r0, r4
   d70c6:	bd38      	pop	{r3, r4, r5, pc}

000d70c8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d70c8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d70ca:	b510      	push	{r4, lr}
   d70cc:	460b      	mov	r3, r1
   d70ce:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d70d0:	d007      	beq.n	d70e2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d70d2:	6809      	ldr	r1, [r1, #0]
   d70d4:	b119      	cbz	r1, d70de <_ZN6StringaSERKS_+0x16>
   d70d6:	689a      	ldr	r2, [r3, #8]
   d70d8:	f7ff ffcb 	bl	d7072 <_ZN6String4copyEPKcj>
   d70dc:	e001      	b.n	d70e2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d70de:	f7ff ffa0 	bl	d7022 <_ZN6String10invalidateEv>

	return *this;
}
   d70e2:	4620      	mov	r0, r4
   d70e4:	bd10      	pop	{r4, pc}

000d70e6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d70e6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70e8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d70ea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d70ec:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d70ee:	6043      	str	r3, [r0, #4]
	len = 0;
   d70f0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d70f2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d70f4:	f7ff ffe8 	bl	d70c8 <_ZN6StringaSERKS_>
}
   d70f8:	4620      	mov	r0, r4
   d70fa:	bd10      	pop	{r4, pc}

000d70fc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d70fc:	b570      	push	{r4, r5, r6, lr}
   d70fe:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7100:	460e      	mov	r6, r1
   d7102:	b909      	cbnz	r1, d7108 <_ZN6String6concatEPKcj+0xc>
   d7104:	2000      	movs	r0, #0
   d7106:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7108:	b16a      	cbz	r2, d7126 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d710a:	6883      	ldr	r3, [r0, #8]
   d710c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d710e:	4629      	mov	r1, r5
   d7110:	f7ff ff9e 	bl	d7050 <_ZN6String7reserveEj>
   d7114:	2800      	cmp	r0, #0
   d7116:	d0f5      	beq.n	d7104 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7118:	6820      	ldr	r0, [r4, #0]
   d711a:	68a3      	ldr	r3, [r4, #8]
   d711c:	4631      	mov	r1, r6
   d711e:	4418      	add	r0, r3
   d7120:	f000 ff14 	bl	d7f4c <strcpy>
	len = newlen;
   d7124:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d7126:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7128:	bd70      	pop	{r4, r5, r6, pc}

000d712a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d712a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d712c:	688a      	ldr	r2, [r1, #8]
   d712e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d7130:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d7132:	f7ff ffe3 	bl	d70fc <_ZN6String6concatEPKcj>
   d7136:	b910      	cbnz	r0, d713e <_ZplRK15StringSumHelperRK6String+0x14>
   d7138:	4620      	mov	r0, r4
   d713a:	f7ff ff72 	bl	d7022 <_ZN6String10invalidateEv>
	return a;
}
   d713e:	4620      	mov	r0, r4
   d7140:	bd10      	pop	{r4, pc}
	...

000d7144 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7144:	4b04      	ldr	r3, [pc, #16]	; (d7158 <_GLOBAL__sub_I_System+0x14>)
   d7146:	2000      	movs	r0, #0
   d7148:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d714c:	7018      	strb	r0, [r3, #0]
   d714e:	8058      	strh	r0, [r3, #2]
   d7150:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7152:	f7fd bbb9 	b.w	d48c8 <set_system_mode>
   d7156:	bf00      	nop
   d7158:	2003e5e0 	.word	0x2003e5e0

000d715c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d715c:	4b02      	ldr	r3, [pc, #8]	; (d7168 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d715e:	681a      	ldr	r2, [r3, #0]
   d7160:	4b02      	ldr	r3, [pc, #8]	; (d716c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7162:	601a      	str	r2, [r3, #0]
   d7164:	4770      	bx	lr
   d7166:	bf00      	nop
   d7168:	2003e2d8 	.word	0x2003e2d8
   d716c:	2003e5e8 	.word	0x2003e5e8

000d7170 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7170:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7172:	6804      	ldr	r4, [r0, #0]
   d7174:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7176:	46a4      	mov	ip, r4
    }
   d7178:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d717c:	4760      	bx	ip

000d717e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d717e:	6803      	ldr	r3, [r0, #0]
   d7180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7182:	4718      	bx	r3

000d7184 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7184:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7186:	4770      	bx	lr

000d7188 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7188:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d718a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d718c:	1a10      	subs	r0, r2, r0
   d718e:	4770      	bx	lr

000d7190 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7190:	b513      	push	{r0, r1, r4, lr}
   d7192:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d7194:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7196:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d719a:	68d4      	ldr	r4, [r2, #12]
   d719c:	4619      	mov	r1, r3
   d719e:	2201      	movs	r2, #1
   d71a0:	47a0      	blx	r4
}
   d71a2:	b002      	add	sp, #8
   d71a4:	bd10      	pop	{r4, pc}

000d71a6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d71a6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d71a8:	6803      	ldr	r3, [r0, #0]
   d71aa:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d71ac:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d71ae:	4798      	blx	r3
   d71b0:	b128      	cbz	r0, d71be <_ZN3UDP4readEv+0x18>
   d71b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d71b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d71b6:	1c59      	adds	r1, r3, #1
   d71b8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d71ba:	5cd0      	ldrb	r0, [r2, r3]
   d71bc:	bd10      	pop	{r4, pc}
   d71be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d71c4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d71c6:	6803      	ldr	r3, [r0, #0]
   d71c8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d71ca:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d71cc:	4798      	blx	r3
   d71ce:	b118      	cbz	r0, d71d8 <_ZN3UDP4peekEv+0x14>
   d71d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d71d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d71d4:	5cd0      	ldrb	r0, [r2, r3]
   d71d6:	bd10      	pop	{r4, pc}
   d71d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d71dc:	bd10      	pop	{r4, pc}

000d71de <_ZN3UDP5flushEv>:

void UDP::flush() {
   d71de:	4770      	bx	lr

000d71e0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d71e0:	b410      	push	{r4}
   d71e2:	4603      	mov	r3, r0
   d71e4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d71e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d71e8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d71ea:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d71ec:	6803      	ldr	r3, [r0, #0]
   d71ee:	1a52      	subs	r2, r2, r1
   d71f0:	68db      	ldr	r3, [r3, #12]
   d71f2:	4421      	add	r1, r4
}
   d71f4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d71f8:	4718      	bx	r3

000d71fa <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d71fa:	f1a0 0010 	sub.w	r0, r0, #16
   d71fe:	f7ff bfef 	b.w	d71e0 <_ZNK3UDP7printToER5Print>

000d7202 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7202:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7204:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7206:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7208:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d720c:	4604      	mov	r4, r0
   d720e:	460f      	mov	r7, r1
   d7210:	4615      	mov	r5, r2
    stop();
   d7212:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7214:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7216:	4632      	mov	r2, r6
   d7218:	2100      	movs	r1, #0
   d721a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d721c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d721e:	f000 fe42 	bl	d7ea6 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7222:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7226:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7228:	260a      	movs	r6, #10
   d722a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d722e:	f7fd fa43 	bl	d46b8 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7232:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7234:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7238:	2102      	movs	r1, #2
   d723a:	4630      	mov	r0, r6
   d723c:	f7fd fa7c 	bl	d4738 <sock_socket>

    if (_sock < 0) {
   d7240:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7242:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7244:	db24      	blt.n	d7290 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7246:	2204      	movs	r2, #4
   d7248:	9200      	str	r2, [sp, #0]
   d724a:	ab02      	add	r3, sp, #8
   d724c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7250:	f7fd fa52 	bl	d46f8 <sock_setsockopt>
   d7254:	b9e0      	cbnz	r0, d7290 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7256:	b195      	cbz	r5, d727e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7258:	9003      	str	r0, [sp, #12]
   d725a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d725e:	a903      	add	r1, sp, #12
   d7260:	b2e8      	uxtb	r0, r5
   d7262:	f7fd f9e9 	bl	d4638 <if_index_to_name>
   d7266:	b998      	cbnz	r0, d7290 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7268:	2306      	movs	r3, #6
   d726a:	9300      	str	r3, [sp, #0]
   d726c:	f241 020b 	movw	r2, #4107	; 0x100b
   d7270:	ab03      	add	r3, sp, #12
   d7272:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7276:	6960      	ldr	r0, [r4, #20]
   d7278:	f7fd fa3e 	bl	d46f8 <sock_setsockopt>
   d727c:	b940      	cbnz	r0, d7290 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d727e:	221c      	movs	r2, #28
   d7280:	a905      	add	r1, sp, #20
   d7282:	6960      	ldr	r0, [r4, #20]
   d7284:	f7fd fa30 	bl	d46e8 <sock_bind>
   d7288:	b910      	cbnz	r0, d7290 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d728a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d728c:	2001      	movs	r0, #1
   d728e:	e004      	b.n	d729a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d7290:	6823      	ldr	r3, [r4, #0]
   d7292:	4620      	mov	r0, r4
   d7294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7296:	4798      	blx	r3
   d7298:	2000      	movs	r0, #0
    }
    return bound;
}
   d729a:	b00d      	add	sp, #52	; 0x34
   d729c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d729e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d729e:	b510      	push	{r4, lr}
   d72a0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d72a2:	6940      	ldr	r0, [r0, #20]
   d72a4:	2800      	cmp	r0, #0
   d72a6:	db01      	blt.n	d72ac <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d72a8:	f7fd fa2e 	bl	d4708 <sock_close>
    }

    _sock = -1;
   d72ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d72b0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d72b2:	2300      	movs	r3, #0
   d72b4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d72b6:	8723      	strh	r3, [r4, #56]	; 0x38
   d72b8:	bd10      	pop	{r4, pc}

000d72ba <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d72ba:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d72bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d72be:	4605      	mov	r5, r0
   d72c0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d72c2:	b113      	cbz	r3, d72ca <_ZN3UDP5writeEPKhj+0x10>
   d72c4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d72c6:	1a24      	subs	r4, r4, r0
   d72c8:	e000      	b.n	d72cc <_ZN3UDP5writeEPKhj+0x12>
   d72ca:	461c      	mov	r4, r3
   d72cc:	4294      	cmp	r4, r2
   d72ce:	bf28      	it	cs
   d72d0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d72d2:	4622      	mov	r2, r4
   d72d4:	4418      	add	r0, r3
   d72d6:	f000 fdc0 	bl	d7e5a <memcpy>
    _offset += size;
   d72da:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d72dc:	4423      	add	r3, r4
   d72de:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d72e0:	4620      	mov	r0, r4
   d72e2:	bd38      	pop	{r3, r4, r5, pc}

000d72e4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d72e4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d72e6:	6803      	ldr	r3, [r0, #0]
   d72e8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d72ea:	4604      	mov	r4, r0
   d72ec:	460e      	mov	r6, r1
   d72ee:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d72f0:	4798      	blx	r3
   d72f2:	b188      	cbz	r0, d7318 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d72f4:	6823      	ldr	r3, [r4, #0]
   d72f6:	4620      	mov	r0, r4
   d72f8:	691b      	ldr	r3, [r3, #16]
   d72fa:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d72fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d72fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7300:	4285      	cmp	r5, r0
   d7302:	bfa8      	it	ge
   d7304:	4605      	movge	r5, r0
   d7306:	4419      	add	r1, r3
   d7308:	462a      	mov	r2, r5
   d730a:	4630      	mov	r0, r6
   d730c:	f000 fda5 	bl	d7e5a <memcpy>
        _offset += read;
   d7310:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7312:	442b      	add	r3, r5
   d7314:	86e3      	strh	r3, [r4, #54]	; 0x36
   d7316:	e001      	b.n	d731c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d7318:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d731c:	4628      	mov	r0, r5
   d731e:	bd70      	pop	{r4, r5, r6, pc}

000d7320 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d7320:	b570      	push	{r4, r5, r6, lr}
   d7322:	4604      	mov	r4, r0
   d7324:	4b05      	ldr	r3, [pc, #20]	; (d733c <_ZN3UDP8remoteIPEv+0x1c>)
   d7326:	f844 3b04 	str.w	r3, [r4], #4
   d732a:	f101 0520 	add.w	r5, r1, #32
   d732e:	4606      	mov	r6, r0
   d7330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7334:	682b      	ldr	r3, [r5, #0]
   d7336:	7023      	strb	r3, [r4, #0]
   d7338:	4630      	mov	r0, r6
   d733a:	bd70      	pop	{r4, r5, r6, pc}
   d733c:	000d8264 	.word	0x000d8264

000d7340 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7340:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7342:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7344:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7346:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7348:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d734a:	4a0a      	ldr	r2, [pc, #40]	; (d7374 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d734c:	9202      	str	r2, [sp, #8]
   d734e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7350:	468e      	mov	lr, r1
   d7352:	4606      	mov	r6, r0
   d7354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7356:	ac03      	add	r4, sp, #12
   d7358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d735a:	682b      	ldr	r3, [r5, #0]
   d735c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d735e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7362:	9300      	str	r3, [sp, #0]
   d7364:	4662      	mov	r2, ip
   d7366:	ab02      	add	r3, sp, #8
   d7368:	4671      	mov	r1, lr
   d736a:	4630      	mov	r0, r6
   d736c:	47b8      	blx	r7
    }
   d736e:	b009      	add	sp, #36	; 0x24
   d7370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7372:	bf00      	nop
   d7374:	000d8264 	.word	0x000d8264

000d7378 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7378:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d737a:	6803      	ldr	r3, [r0, #0]
   d737c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d7380:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7382:	4b0d      	ldr	r3, [pc, #52]	; (d73b8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7384:	b089      	sub	sp, #36	; 0x24
   d7386:	f100 0620 	add.w	r6, r0, #32
   d738a:	4604      	mov	r4, r0
   d738c:	9302      	str	r3, [sp, #8]
   d738e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7390:	ad03      	add	r5, sp, #12
   d7392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7394:	6833      	ldr	r3, [r6, #0]
   d7396:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7398:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d739a:	9300      	str	r3, [sp, #0]
   d739c:	4672      	mov	r2, lr
   d739e:	ab02      	add	r3, sp, #8
   d73a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d73a2:	4620      	mov	r0, r4
   d73a4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d73a6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d73a8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d73aa:	69db      	ldr	r3, [r3, #28]
   d73ac:	4620      	mov	r0, r4
   d73ae:	4798      	blx	r3
    return result;
}
   d73b0:	4628      	mov	r0, r5
   d73b2:	b009      	add	sp, #36	; 0x24
   d73b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d73b6:	bf00      	nop
   d73b8:	000d8264 	.word	0x000d8264

000d73bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d73be:	7843      	ldrb	r3, [r0, #1]
   d73c0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d73c2:	b08d      	sub	sp, #52	; 0x34
   d73c4:	4605      	mov	r5, r0
   d73c6:	460c      	mov	r4, r1
   d73c8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d73ca:	d101      	bne.n	d73d0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d73cc:	1d01      	adds	r1, r0, #4
   d73ce:	e033      	b.n	d7438 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d73d0:	2b0a      	cmp	r3, #10
   d73d2:	d135      	bne.n	d7440 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d73d4:	2211      	movs	r2, #17
   d73d6:	2100      	movs	r1, #0
   d73d8:	a801      	add	r0, sp, #4
   d73da:	f000 fd64 	bl	d7ea6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d73de:	68ab      	ldr	r3, [r5, #8]
   d73e0:	b943      	cbnz	r3, d73f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d73e2:	68eb      	ldr	r3, [r5, #12]
   d73e4:	b933      	cbnz	r3, d73f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d73e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d73ea:	692e      	ldr	r6, [r5, #16]
   d73ec:	f7fd f954 	bl	d4698 <inet_htonl>
   d73f0:	4286      	cmp	r6, r0
   d73f2:	d01f      	beq.n	d7434 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d73f4:	f105 0308 	add.w	r3, r5, #8
   d73f8:	ae01      	add	r6, sp, #4
   d73fa:	f105 0e18 	add.w	lr, r5, #24
   d73fe:	6818      	ldr	r0, [r3, #0]
   d7400:	6859      	ldr	r1, [r3, #4]
   d7402:	4632      	mov	r2, r6
   d7404:	c203      	stmia	r2!, {r0, r1}
   d7406:	3308      	adds	r3, #8
   d7408:	4573      	cmp	r3, lr
   d740a:	4616      	mov	r6, r2
   d740c:	d1f7      	bne.n	d73fe <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d740e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7410:	a901      	add	r1, sp, #4
   d7412:	a806      	add	r0, sp, #24
   d7414:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7416:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d741a:	f7fd ff3d 	bl	d5298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d741e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7420:	3404      	adds	r4, #4
   d7422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7424:	6833      	ldr	r3, [r6, #0]
   d7426:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d7428:	b157      	cbz	r7, d7440 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d742a:	8868      	ldrh	r0, [r5, #2]
   d742c:	f7fd f93c 	bl	d46a8 <inet_ntohs>
   d7430:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d7432:	e005      	b.n	d7440 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7434:	f105 0114 	add.w	r1, r5, #20
   d7438:	4620      	mov	r0, r4
   d743a:	f7fd ff62 	bl	d5302 <_ZN9IPAddressaSEPKh>
   d743e:	e7f3      	b.n	d7428 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d7440:	b00d      	add	sp, #52	; 0x34
   d7442:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7444 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d7444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7448:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d744a:	ab0e      	add	r3, sp, #56	; 0x38
   d744c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d744e:	4606      	mov	r6, r0
   d7450:	4617      	mov	r7, r2
   d7452:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d7454:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7458:	462a      	mov	r2, r5
   d745a:	4629      	mov	r1, r5
   d745c:	f7fd f93c 	bl	d46d8 <netdb_getaddrinfo>
   d7460:	2800      	cmp	r0, #0
   d7462:	db1f      	blt.n	d74a4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7464:	9b01      	ldr	r3, [sp, #4]
   d7466:	b1fb      	cbz	r3, d74a8 <_ZN3UDP11beginPacketEPKct+0x64>
   d7468:	695b      	ldr	r3, [r3, #20]
   d746a:	b1eb      	cbz	r3, d74a8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d746c:	a802      	add	r0, sp, #8
   d746e:	f7fd ff05 	bl	d527c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7472:	9b01      	ldr	r3, [sp, #4]
   d7474:	462a      	mov	r2, r5
   d7476:	6958      	ldr	r0, [r3, #20]
   d7478:	a902      	add	r1, sp, #8
   d747a:	f7ff ff9f 	bl	d73bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d747e:	a802      	add	r0, sp, #8
   d7480:	f7fd ff1c 	bl	d52bc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7484:	b180      	cbz	r0, d74a8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d7486:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7488:	ad03      	add	r5, sp, #12
   d748a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d748e:	4b0b      	ldr	r3, [pc, #44]	; (d74bc <_ZN3UDP11beginPacketEPKct+0x78>)
   d7490:	9308      	str	r3, [sp, #32]
   d7492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7494:	ac09      	add	r4, sp, #36	; 0x24
   d7496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7498:	682b      	ldr	r3, [r5, #0]
   d749a:	7023      	strb	r3, [r4, #0]
   d749c:	463a      	mov	r2, r7
   d749e:	a908      	add	r1, sp, #32
   d74a0:	4630      	mov	r0, r6
   d74a2:	47c0      	blx	r8
   d74a4:	4604      	mov	r4, r0
   d74a6:	e001      	b.n	d74ac <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d74a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d74ac:	9801      	ldr	r0, [sp, #4]
   d74ae:	f7fd f90b 	bl	d46c8 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d74b2:	4620      	mov	r0, r4
   d74b4:	b00e      	add	sp, #56	; 0x38
   d74b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d74ba:	bf00      	nop
   d74bc:	000d8264 	.word	0x000d8264

000d74c0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d74c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d74c4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d74c8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d74cc:	b08c      	sub	sp, #48	; 0x30
   d74ce:	4605      	mov	r5, r0
   d74d0:	460c      	mov	r4, r1
   d74d2:	4617      	mov	r7, r2
   d74d4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d74d6:	db00      	blt.n	d74da <_ZN3UDP13receivePacketEPhjm+0x1a>
   d74d8:	b911      	cbnz	r1, d74e0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d74da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d74de:	e035      	b.n	d754c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d74e0:	f04f 0a1c 	mov.w	sl, #28
   d74e4:	ae05      	add	r6, sp, #20
   d74e6:	4652      	mov	r2, sl
   d74e8:	2100      	movs	r1, #0
   d74ea:	4630      	mov	r0, r6
   d74ec:	f000 fcdb 	bl	d7ea6 <memset>
        socklen_t slen = sizeof(saddr);
   d74f0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d74f4:	f1b9 0f00 	cmp.w	r9, #0
   d74f8:	d014      	beq.n	d7524 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d74fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74fe:	fbb9 f1f2 	udiv	r1, r9, r2
   d7502:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d7504:	fb02 9111 	mls	r1, r2, r1, r9
   d7508:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d750a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d750c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d750e:	9300      	str	r3, [sp, #0]
   d7510:	f241 0206 	movw	r2, #4102	; 0x1006
   d7514:	ab03      	add	r3, sp, #12
   d7516:	f640 71ff 	movw	r1, #4095	; 0xfff
   d751a:	4640      	mov	r0, r8
   d751c:	f7fd f8ec 	bl	d46f8 <sock_setsockopt>
            if (ret) {
   d7520:	b108      	cbz	r0, d7526 <_ZN3UDP13receivePacketEPhjm+0x66>
   d7522:	e013      	b.n	d754c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d7524:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d7526:	ab02      	add	r3, sp, #8
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	4621      	mov	r1, r4
   d752c:	4603      	mov	r3, r0
   d752e:	9600      	str	r6, [sp, #0]
   d7530:	463a      	mov	r2, r7
   d7532:	6968      	ldr	r0, [r5, #20]
   d7534:	f7fd f8f0 	bl	d4718 <sock_recvfrom>
        if (ret >= 0) {
   d7538:	1e04      	subs	r4, r0, #0
   d753a:	db06      	blt.n	d754a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d753c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d7540:	f105 011c 	add.w	r1, r5, #28
   d7544:	4630      	mov	r0, r6
   d7546:	f7ff ff39 	bl	d73bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d754a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d754c:	b00c      	add	sp, #48	; 0x30
   d754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d7552 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d7552:	b538      	push	{r3, r4, r5, lr}
   d7554:	4605      	mov	r5, r0
   d7556:	4614      	mov	r4, r2
   d7558:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d755a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d755c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d755e:	d111      	bne.n	d7584 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d7560:	231c      	movs	r3, #28
   d7562:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d7564:	230a      	movs	r3, #10
   d7566:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d7568:	f7fd f8a6 	bl	d46b8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d756c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d756e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d7572:	1d2b      	adds	r3, r5, #4
   d7574:	3514      	adds	r5, #20
   d7576:	f853 2b04 	ldr.w	r2, [r3], #4
   d757a:	f844 2b04 	str.w	r2, [r4], #4
   d757e:	42ab      	cmp	r3, r5
   d7580:	d1f9      	bne.n	d7576 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d7582:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d7584:	2b04      	cmp	r3, #4
   d7586:	d10a      	bne.n	d759e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d7588:	2310      	movs	r3, #16
   d758a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d758c:	2302      	movs	r3, #2
   d758e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d7590:	f7fd f892 	bl	d46b8 <inet_htons>
   d7594:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d7596:	6868      	ldr	r0, [r5, #4]
   d7598:	f7fd f87e 	bl	d4698 <inet_htonl>
   d759c:	6060      	str	r0, [r4, #4]
   d759e:	bd38      	pop	{r3, r4, r5, pc}

000d75a0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d75a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75a4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d75a6:	ac03      	add	r4, sp, #12
   d75a8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d75aa:	4699      	mov	r9, r3
   d75ac:	4606      	mov	r6, r0
   d75ae:	460f      	mov	r7, r1
   d75b0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d75b2:	2100      	movs	r1, #0
   d75b4:	462a      	mov	r2, r5
   d75b6:	4620      	mov	r0, r4
   d75b8:	f000 fc75 	bl	d7ea6 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d75bc:	4622      	mov	r2, r4
   d75be:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d75c2:	4648      	mov	r0, r9
   d75c4:	f7ff ffc5 	bl	d7552 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d75c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d75cc:	b143      	cbz	r3, d75e0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d75ce:	e88d 0030 	stmia.w	sp, {r4, r5}
   d75d2:	2300      	movs	r3, #0
   d75d4:	4642      	mov	r2, r8
   d75d6:	4639      	mov	r1, r7
   d75d8:	6970      	ldr	r0, [r6, #20]
   d75da:	f7fd f8a5 	bl	d4728 <sock_sendto>
   d75de:	e001      	b.n	d75e4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d75e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d75e4:	b00b      	add	sp, #44	; 0x2c
   d75e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d75ea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d75ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75ec:	b091      	sub	sp, #68	; 0x44
   d75ee:	460c      	mov	r4, r1
   d75f0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d75f2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d75f4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d75f6:	a809      	add	r0, sp, #36	; 0x24
   d75f8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d75fa:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d75fc:	f000 fc53 	bl	d7ea6 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d7600:	aa09      	add	r2, sp, #36	; 0x24
   d7602:	2100      	movs	r1, #0
   d7604:	4620      	mov	r0, r4
   d7606:	f7ff ffa4 	bl	d7552 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d760a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d760e:	2b02      	cmp	r3, #2
   d7610:	d12e      	bne.n	d7670 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d7612:	2300      	movs	r3, #0
   d7614:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d7616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7618:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d761a:	b1dd      	cbz	r5, d7654 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d761c:	a902      	add	r1, sp, #8
   d761e:	4628      	mov	r0, r5
   d7620:	f7fd f812 	bl	d4648 <if_get_by_index>
   d7624:	b9b0      	cbnz	r0, d7654 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d7626:	a910      	add	r1, sp, #64	; 0x40
   d7628:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d762c:	9802      	ldr	r0, [sp, #8]
   d762e:	f7fd f813 	bl	d4658 <if_get_addrs>
   d7632:	b960      	cbnz	r0, d764e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d7634:	9b03      	ldr	r3, [sp, #12]
   d7636:	b153      	cbz	r3, d764e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d7638:	68da      	ldr	r2, [r3, #12]
   d763a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d763c:	7851      	ldrb	r1, [r2, #1]
   d763e:	2902      	cmp	r1, #2
   d7640:	d103      	bne.n	d764a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d7642:	6852      	ldr	r2, [r2, #4]
   d7644:	b10a      	cbz	r2, d764a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d7646:	9205      	str	r2, [sp, #20]
   d7648:	e001      	b.n	d764e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d764a:	681b      	ldr	r3, [r3, #0]
   d764c:	e7f3      	b.n	d7636 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d764e:	9803      	ldr	r0, [sp, #12]
   d7650:	f7fd f80a 	bl	d4668 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d7654:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d7656:	f04f 0308 	mov.w	r3, #8
   d765a:	9300      	str	r3, [sp, #0]
   d765c:	bf18      	it	ne
   d765e:	2203      	movne	r2, #3
   d7660:	ab04      	add	r3, sp, #16
   d7662:	bf08      	it	eq
   d7664:	2204      	moveq	r2, #4
   d7666:	2100      	movs	r1, #0
   d7668:	4630      	mov	r0, r6
   d766a:	f7fd f845 	bl	d46f8 <sock_setsockopt>
   d766e:	e01e      	b.n	d76ae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d7670:	2b0a      	cmp	r3, #10
   d7672:	d11a      	bne.n	d76aa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d7674:	ac04      	add	r4, sp, #16
   d7676:	2214      	movs	r2, #20
   d7678:	2100      	movs	r1, #0
   d767a:	4620      	mov	r0, r4
   d767c:	f000 fc13 	bl	d7ea6 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d7680:	ab0b      	add	r3, sp, #44	; 0x2c
   d7682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d7684:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d7686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d768a:	f04f 0314 	mov.w	r3, #20
   d768e:	9300      	str	r3, [sp, #0]
   d7690:	bf18      	it	ne
   d7692:	220c      	movne	r2, #12
   d7694:	4623      	mov	r3, r4
   d7696:	bf08      	it	eq
   d7698:	220d      	moveq	r2, #13
   d769a:	2129      	movs	r1, #41	; 0x29
   d769c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d769e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d76a0:	f7fd f82a 	bl	d46f8 <sock_setsockopt>
   d76a4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d76a8:	e001      	b.n	d76ae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d76aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d76ae:	b011      	add	sp, #68	; 0x44
   d76b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d76b4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d76b4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d76b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76ba:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d76bc:	4b0b      	ldr	r3, [pc, #44]	; (d76ec <_ZN3UDPC1Ev+0x38>)
   d76be:	f103 0208 	add.w	r2, r3, #8
   d76c2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d76c4:	2500      	movs	r5, #0
   d76c6:	6103      	str	r3, [r0, #16]
   d76c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d76cc:	4604      	mov	r4, r0
   d76ce:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d76d0:	6002      	str	r2, [r0, #0]
   d76d2:	6143      	str	r3, [r0, #20]
   d76d4:	301c      	adds	r0, #28
   d76d6:	f7fd fdd1 	bl	d527c <_ZN9IPAddressC1Ev>
   d76da:	f44f 7300 	mov.w	r3, #512	; 0x200
   d76de:	86e5      	strh	r5, [r4, #54]	; 0x36
   d76e0:	8725      	strh	r5, [r4, #56]	; 0x38
   d76e2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d76e4:	6423      	str	r3, [r4, #64]	; 0x40
   d76e6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d76e8:	4620      	mov	r0, r4
   d76ea:	bd38      	pop	{r3, r4, r5, pc}
   d76ec:	000d84bc 	.word	0x000d84bc

000d76f0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d76f0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d76f2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d76f6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d76f8:	b123      	cbz	r3, d7704 <_ZN3UDP13releaseBufferEv+0x14>
   d76fa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d76fc:	b110      	cbz	r0, d7704 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d76fe:	2101      	movs	r1, #1
   d7700:	f000 fa27 	bl	d7b52 <_ZdlPvj>
    }
    _buffer = NULL;
   d7704:	2300      	movs	r3, #0
   d7706:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7708:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d770c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d770e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7710:	8723      	strh	r3, [r4, #56]	; 0x38
   d7712:	bd10      	pop	{r4, pc}

000d7714 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7714:	b570      	push	{r4, r5, r6, lr}
   d7716:	4604      	mov	r4, r0
   d7718:	4616      	mov	r6, r2
   d771a:	460d      	mov	r5, r1
    releaseBuffer();
   d771c:	f7ff ffe8 	bl	d76f0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d7720:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d7722:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7724:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7726:	b93e      	cbnz	r6, d7738 <_ZN3UDP9setBufferEjPh+0x24>
   d7728:	b135      	cbz	r5, d7738 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d772a:	4628      	mov	r0, r5
   d772c:	f7fc fcb5 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d7730:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d7732:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d7734:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d7738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d773a:	b103      	cbz	r3, d773e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d773c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d773e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d7740:	3000      	adds	r0, #0
   d7742:	bf18      	it	ne
   d7744:	2001      	movne	r0, #1
   d7746:	bd70      	pop	{r4, r5, r6, pc}

000d7748 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d774a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d774c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d774e:	4605      	mov	r5, r0
   d7750:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d7752:	b91a      	cbnz	r2, d775c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d7754:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7756:	b109      	cbz	r1, d775c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d7758:	f7ff ffdc 	bl	d7714 <_ZN3UDP9setBufferEjPh>
   d775c:	3404      	adds	r4, #4
   d775e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7760:	f105 0620 	add.w	r6, r5, #32
   d7764:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7766:	6823      	ldr	r3, [r4, #0]
   d7768:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d776a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d776c:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d776e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d7770:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d7772:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7776 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d7776:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d7778:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d777a:	4604      	mov	r4, r0
   d777c:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d777e:	b91a      	cbnz	r2, d7788 <_ZN3UDP11parsePacketEm+0x12>
   d7780:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d7782:	b109      	cbz	r1, d7788 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d7784:	f7ff ffc6 	bl	d7714 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d7788:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d778a:	2200      	movs	r2, #0
   d778c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d778e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d7790:	b149      	cbz	r1, d77a6 <_ZN3UDP11parsePacketEm+0x30>
   d7792:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d7794:	b13a      	cbz	r2, d77a6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d7796:	6823      	ldr	r3, [r4, #0]
   d7798:	4620      	mov	r0, r4
   d779a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d779c:	4633      	mov	r3, r6
   d779e:	47a8      	blx	r5
        if (result > 0) {
   d77a0:	2800      	cmp	r0, #0
            _total = result;
   d77a2:	bfc8      	it	gt
   d77a4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d77a6:	6823      	ldr	r3, [r4, #0]
   d77a8:	4620      	mov	r0, r4
   d77aa:	691b      	ldr	r3, [r3, #16]
}
   d77ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d77b0:	4718      	bx	r3
	...

000d77b4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d77b4:	b510      	push	{r4, lr}
   d77b6:	4b07      	ldr	r3, [pc, #28]	; (d77d4 <_ZN3UDPD1Ev+0x20>)
   d77b8:	f103 0208 	add.w	r2, r3, #8
   d77bc:	336c      	adds	r3, #108	; 0x6c
   d77be:	4604      	mov	r4, r0
   d77c0:	6002      	str	r2, [r0, #0]
   d77c2:	6103      	str	r3, [r0, #16]
   d77c4:	f7ff fd6b 	bl	d729e <_ZN3UDP4stopEv>
   d77c8:	4620      	mov	r0, r4
   d77ca:	f7ff ff91 	bl	d76f0 <_ZN3UDP13releaseBufferEv>
   d77ce:	4620      	mov	r0, r4
   d77d0:	bd10      	pop	{r4, pc}
   d77d2:	bf00      	nop
   d77d4:	000d84bc 	.word	0x000d84bc

000d77d8 <_ZN3UDPD0Ev>:
   d77d8:	b510      	push	{r4, lr}
   d77da:	4604      	mov	r4, r0
   d77dc:	f7ff ffea 	bl	d77b4 <_ZN3UDPD1Ev>
   d77e0:	4620      	mov	r0, r4
   d77e2:	214c      	movs	r1, #76	; 0x4c
   d77e4:	f000 f9b5 	bl	d7b52 <_ZdlPvj>
   d77e8:	4620      	mov	r0, r4
   d77ea:	bd10      	pop	{r4, pc}

000d77ec <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d77ec:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d77ee:	6940      	ldr	r0, [r0, #20]
   d77f0:	2800      	cmp	r0, #0
   d77f2:	db04      	blt.n	d77fe <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d77f4:	2301      	movs	r3, #1
   d77f6:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d77fa:	f7ff bef6 	b.w	d75ea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d77fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7802:	4770      	bx	lr

000d7804 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7804:	4770      	bx	lr

000d7806 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7806:	7441      	strb	r1, [r0, #17]
   d7808:	4770      	bx	lr

000d780a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d780a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d780c:	7c00      	ldrb	r0, [r0, #16]
   d780e:	f7fc ffdb 	bl	d47c8 <HAL_USART_Available_Data_For_Write>
}
   d7812:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7816:	bd08      	pop	{r3, pc}

000d7818 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7818:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d781a:	7c00      	ldrb	r0, [r0, #16]
   d781c:	f7fc ffb4 	bl	d4788 <HAL_USART_Available_Data>
}
   d7820:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7824:	bd08      	pop	{r3, pc}

000d7826 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7826:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7828:	7c00      	ldrb	r0, [r0, #16]
   d782a:	f7fc ffbd 	bl	d47a8 <HAL_USART_Peek_Data>
}
   d782e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7832:	bf28      	it	cs
   d7834:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7838:	bd08      	pop	{r3, pc}

000d783a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d783a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d783c:	7c00      	ldrb	r0, [r0, #16]
   d783e:	f7fc ffab 	bl	d4798 <HAL_USART_Read_Data>
}
   d7842:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7846:	bf28      	it	cs
   d7848:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d784c:	bd08      	pop	{r3, pc}

000d784e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d784e:	7c00      	ldrb	r0, [r0, #16]
   d7850:	f7fc bfb2 	b.w	d47b8 <HAL_USART_Flush_Data>

000d7854 <_ZN11USARTSerialD0Ev>:
   d7854:	b510      	push	{r4, lr}
   d7856:	2114      	movs	r1, #20
   d7858:	4604      	mov	r4, r0
   d785a:	f000 f97a 	bl	d7b52 <_ZdlPvj>
   d785e:	4620      	mov	r0, r4
   d7860:	bd10      	pop	{r4, pc}

000d7862 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7862:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7864:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7866:	4604      	mov	r4, r0
   d7868:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d786a:	b925      	cbnz	r5, d7876 <_ZN11USARTSerial5writeEh+0x14>
   d786c:	7c00      	ldrb	r0, [r0, #16]
   d786e:	f7fc ffab 	bl	d47c8 <HAL_USART_Available_Data_For_Write>
   d7872:	2800      	cmp	r0, #0
   d7874:	dd05      	ble.n	d7882 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7876:	4631      	mov	r1, r6
   d7878:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d787a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d787e:	f7fc bf7b 	b.w	d4778 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7882:	4628      	mov	r0, r5
   d7884:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7888:	b510      	push	{r4, lr}
   d788a:	4604      	mov	r4, r0
   d788c:	4608      	mov	r0, r1
   d788e:	4611      	mov	r1, r2
   d7890:	2200      	movs	r2, #0
   d7892:	6062      	str	r2, [r4, #4]
   d7894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7898:	60a2      	str	r2, [r4, #8]
   d789a:	4a05      	ldr	r2, [pc, #20]	; (d78b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d789c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d789e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d78a0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d78a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d78a4:	461a      	mov	r2, r3
   d78a6:	f7fc ff57 	bl	d4758 <HAL_USART_Init>
}
   d78aa:	4620      	mov	r0, r4
   d78ac:	bd10      	pop	{r4, pc}
   d78ae:	bf00      	nop
   d78b0:	000d8534 	.word	0x000d8534

000d78b4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d78b4:	2300      	movs	r3, #0
   d78b6:	7c00      	ldrb	r0, [r0, #16]
   d78b8:	f7fc bf8e 	b.w	d47d8 <HAL_USART_BeginConfig>

000d78bc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d78bc:	2200      	movs	r2, #0
   d78be:	f7ff bff9 	b.w	d78b4 <_ZN11USARTSerial5beginEmm>

000d78c2 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d78c2:	7c00      	ldrb	r0, [r0, #16]
   d78c4:	f7fc bf50 	b.w	d4768 <HAL_USART_End>

000d78c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78c8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78ca:	4d0c      	ldr	r5, [pc, #48]	; (d78fc <_Z22__fetch_global_Serial1v+0x34>)
   d78cc:	6829      	ldr	r1, [r5, #0]
   d78ce:	f011 0401 	ands.w	r4, r1, #1
   d78d2:	d111      	bne.n	d78f8 <_Z22__fetch_global_Serial1v+0x30>
   d78d4:	4628      	mov	r0, r5
   d78d6:	f7fc fbf1 	bl	d40bc <__cxa_guard_acquire>
   d78da:	b168      	cbz	r0, d78f8 <_Z22__fetch_global_Serial1v+0x30>
   d78dc:	4a08      	ldr	r2, [pc, #32]	; (d7900 <_Z22__fetch_global_Serial1v+0x38>)
   d78de:	4b09      	ldr	r3, [pc, #36]	; (d7904 <_Z22__fetch_global_Serial1v+0x3c>)
   d78e0:	4809      	ldr	r0, [pc, #36]	; (d7908 <_Z22__fetch_global_Serial1v+0x40>)
   d78e2:	4621      	mov	r1, r4
   d78e4:	f7ff ffd0 	bl	d7888 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d78e8:	4628      	mov	r0, r5
   d78ea:	f7fc fbec 	bl	d40c6 <__cxa_guard_release>
   d78ee:	4a07      	ldr	r2, [pc, #28]	; (d790c <_Z22__fetch_global_Serial1v+0x44>)
   d78f0:	4907      	ldr	r1, [pc, #28]	; (d7910 <_Z22__fetch_global_Serial1v+0x48>)
   d78f2:	4805      	ldr	r0, [pc, #20]	; (d7908 <_Z22__fetch_global_Serial1v+0x40>)
   d78f4:	f000 f928 	bl	d7b48 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78f8:	4803      	ldr	r0, [pc, #12]	; (d7908 <_Z22__fetch_global_Serial1v+0x40>)
   d78fa:	bd38      	pop	{r3, r4, r5, pc}
   d78fc:	2003e684 	.word	0x2003e684
   d7900:	2003e688 	.word	0x2003e688
   d7904:	2003e600 	.word	0x2003e600
   d7908:	2003e5ec 	.word	0x2003e5ec
   d790c:	2003e344 	.word	0x2003e344
   d7910:	000d7805 	.word	0x000d7805

000d7914 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7914:	7441      	strb	r1, [r0, #17]
   d7916:	4770      	bx	lr

000d7918 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7918:	4770      	bx	lr

000d791a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d791a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d791c:	2100      	movs	r1, #0
   d791e:	7c00      	ldrb	r0, [r0, #16]
   d7920:	f7fc ff8a 	bl	d4838 <HAL_USB_USART_Receive_Data>
}
   d7924:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7928:	bf28      	it	cs
   d792a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d792e:	bd08      	pop	{r3, pc}

000d7930 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7930:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7932:	2101      	movs	r1, #1
   d7934:	7c00      	ldrb	r0, [r0, #16]
   d7936:	f7fc ff7f 	bl	d4838 <HAL_USB_USART_Receive_Data>
}
   d793a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d793e:	bf28      	it	cs
   d7940:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7944:	bd08      	pop	{r3, pc}

000d7946 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7946:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7948:	7c00      	ldrb	r0, [r0, #16]
   d794a:	f7fc ff6d 	bl	d4828 <HAL_USB_USART_Available_Data_For_Write>
}
   d794e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7952:	bd08      	pop	{r3, pc}

000d7954 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7954:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7956:	7c00      	ldrb	r0, [r0, #16]
   d7958:	f7fc ff5e 	bl	d4818 <HAL_USB_USART_Available_Data>
}
   d795c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7960:	bd08      	pop	{r3, pc}

000d7962 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7962:	7c00      	ldrb	r0, [r0, #16]
   d7964:	f7fc bf78 	b.w	d4858 <HAL_USB_USART_Flush_Data>

000d7968 <_ZN9USBSerialD0Ev>:
   d7968:	b510      	push	{r4, lr}
   d796a:	2114      	movs	r1, #20
   d796c:	4604      	mov	r4, r0
   d796e:	f000 f8f0 	bl	d7b52 <_ZdlPvj>
   d7972:	4620      	mov	r0, r4
   d7974:	bd10      	pop	{r4, pc}

000d7976 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7976:	b538      	push	{r3, r4, r5, lr}
   d7978:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d797a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d797c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d797e:	f7fc ff53 	bl	d4828 <HAL_USB_USART_Available_Data_For_Write>
   d7982:	2800      	cmp	r0, #0
   d7984:	dc01      	bgt.n	d798a <_ZN9USBSerial5writeEh+0x14>
   d7986:	7c60      	ldrb	r0, [r4, #17]
   d7988:	b128      	cbz	r0, d7996 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d798a:	4629      	mov	r1, r5
   d798c:	7c20      	ldrb	r0, [r4, #16]
   d798e:	f7fc ff5b 	bl	d4848 <HAL_USB_USART_Send_Data>
   d7992:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7996:	bd38      	pop	{r3, r4, r5, pc}

000d7998 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7998:	b510      	push	{r4, lr}
   d799a:	4604      	mov	r4, r0
   d799c:	2300      	movs	r3, #0
   d799e:	6063      	str	r3, [r4, #4]
   d79a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d79a4:	60a3      	str	r3, [r4, #8]
   d79a6:	4b05      	ldr	r3, [pc, #20]	; (d79bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d79a8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d79aa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d79ac:	4608      	mov	r0, r1
{
  _serial = serial;
   d79ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d79b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d79b2:	4611      	mov	r1, r2
   d79b4:	f7fc ff18 	bl	d47e8 <HAL_USB_USART_Init>
}
   d79b8:	4620      	mov	r0, r4
   d79ba:	bd10      	pop	{r4, pc}
   d79bc:	000d8564 	.word	0x000d8564

000d79c0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d79c0:	2200      	movs	r2, #0
   d79c2:	7c00      	ldrb	r0, [r0, #16]
   d79c4:	f7fc bf18 	b.w	d47f8 <HAL_USB_USART_Begin>

000d79c8 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d79c8:	7c00      	ldrb	r0, [r0, #16]
   d79ca:	f7fc bf1d 	b.w	d4808 <HAL_USB_USART_End>

000d79ce <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d79ce:	7c00      	ldrb	r0, [r0, #16]
   d79d0:	f7fc bf4a 	b.w	d4868 <HAL_USB_USART_Is_Connected>

000d79d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d79d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d79d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d79da:	2100      	movs	r1, #0
   d79dc:	f000 fa63 	bl	d7ea6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d79e0:	4620      	mov	r0, r4
   d79e2:	bd10      	pop	{r4, pc}

000d79e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d79e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79e6:	4d0e      	ldr	r5, [pc, #56]	; (d7a20 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d79e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d79ea:	a801      	add	r0, sp, #4
   d79ec:	f7ff fff2 	bl	d79d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d79f0:	6829      	ldr	r1, [r5, #0]
   d79f2:	f011 0401 	ands.w	r4, r1, #1
   d79f6:	d110      	bne.n	d7a1a <_Z16_fetch_usbserialv+0x36>
   d79f8:	4628      	mov	r0, r5
   d79fa:	f7fc fb5f 	bl	d40bc <__cxa_guard_acquire>
   d79fe:	b160      	cbz	r0, d7a1a <_Z16_fetch_usbserialv+0x36>
   d7a00:	aa01      	add	r2, sp, #4
   d7a02:	4621      	mov	r1, r4
   d7a04:	4807      	ldr	r0, [pc, #28]	; (d7a24 <_Z16_fetch_usbserialv+0x40>)
   d7a06:	f7ff ffc7 	bl	d7998 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7a0a:	4628      	mov	r0, r5
   d7a0c:	f7fc fb5b 	bl	d40c6 <__cxa_guard_release>
   d7a10:	4a05      	ldr	r2, [pc, #20]	; (d7a28 <_Z16_fetch_usbserialv+0x44>)
   d7a12:	4906      	ldr	r1, [pc, #24]	; (d7a2c <_Z16_fetch_usbserialv+0x48>)
   d7a14:	4803      	ldr	r0, [pc, #12]	; (d7a24 <_Z16_fetch_usbserialv+0x40>)
   d7a16:	f000 f897 	bl	d7b48 <__aeabi_atexit>
	return _usbserial;
}
   d7a1a:	4802      	ldr	r0, [pc, #8]	; (d7a24 <_Z16_fetch_usbserialv+0x40>)
   d7a1c:	b007      	add	sp, #28
   d7a1e:	bd30      	pop	{r4, r5, pc}
   d7a20:	2003e70c 	.word	0x2003e70c
   d7a24:	2003e710 	.word	0x2003e710
   d7a28:	2003e344 	.word	0x2003e344
   d7a2c:	000d7919 	.word	0x000d7919

000d7a30 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7a30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7a32:	4b0c      	ldr	r3, [pc, #48]	; (d7a64 <serialEventRun+0x34>)
   d7a34:	b133      	cbz	r3, d7a44 <serialEventRun+0x14>
   d7a36:	f7ff ffd5 	bl	d79e4 <_Z16_fetch_usbserialv>
   d7a3a:	6803      	ldr	r3, [r0, #0]
   d7a3c:	691b      	ldr	r3, [r3, #16]
   d7a3e:	4798      	blx	r3
   d7a40:	2800      	cmp	r0, #0
   d7a42:	dc09      	bgt.n	d7a58 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7a44:	4b08      	ldr	r3, [pc, #32]	; (d7a68 <serialEventRun+0x38>)
   d7a46:	b163      	cbz	r3, d7a62 <serialEventRun+0x32>
   d7a48:	f7ff ff3e 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d7a4c:	6803      	ldr	r3, [r0, #0]
   d7a4e:	691b      	ldr	r3, [r3, #16]
   d7a50:	4798      	blx	r3
   d7a52:	2800      	cmp	r0, #0
   d7a54:	dc03      	bgt.n	d7a5e <serialEventRun+0x2e>
   d7a56:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7a58:	f3af 8000 	nop.w
   d7a5c:	e7f2      	b.n	d7a44 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7a5e:	f3af 8000 	nop.w
   d7a62:	bd08      	pop	{r3, pc}
	...

000d7a6c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7a6c:	b508      	push	{r3, lr}
	serialEventRun();
   d7a6e:	f7ff ffdf 	bl	d7a30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a72:	f7fc fdc9 	bl	d4608 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a76:	4b01      	ldr	r3, [pc, #4]	; (d7a7c <_post_loop+0x10>)
   d7a78:	6018      	str	r0, [r3, #0]
   d7a7a:	bd08      	pop	{r3, pc}
   d7a7c:	2003e728 	.word	0x2003e728

000d7a80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7a80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7a82:	2300      	movs	r3, #0
   d7a84:	9300      	str	r3, [sp, #0]
   d7a86:	461a      	mov	r2, r3
   d7a88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7a8c:	f7fc ff46 	bl	d491c <system_ctrl_set_result>
}
   d7a90:	b003      	add	sp, #12
   d7a92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a98 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7a98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7a9a:	8843      	ldrh	r3, [r0, #2]
   d7a9c:	2b0a      	cmp	r3, #10
   d7a9e:	d008      	beq.n	d7ab2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7aa0:	2b50      	cmp	r3, #80	; 0x50
   d7aa2:	d109      	bne.n	d7ab8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7aa4:	4b09      	ldr	r3, [pc, #36]	; (d7acc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7aa6:	681b      	ldr	r3, [r3, #0]
   d7aa8:	b13b      	cbz	r3, d7aba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7aaa:	b003      	add	sp, #12
   d7aac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7ab0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7ab2:	f7ff ffe5 	bl	d7a80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7ab6:	e006      	b.n	d7ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7ab8:	2300      	movs	r3, #0
   d7aba:	9300      	str	r3, [sp, #0]
   d7abc:	461a      	mov	r2, r3
   d7abe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ac2:	f7fc ff2b 	bl	d491c <system_ctrl_set_result>
        break;
    }
}
   d7ac6:	b003      	add	sp, #12
   d7ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   d7acc:	2003e724 	.word	0x2003e724

000d7ad0 <module_user_init_hook>:

void module_user_init_hook()
{
   d7ad0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ad2:	f7fc fd81 	bl	d45d8 <HAL_RNG_GetRandomNumber>
   d7ad6:	4604      	mov	r4, r0
    srand(seed);
   d7ad8:	f000 f9ee 	bl	d7eb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7adc:	4b07      	ldr	r3, [pc, #28]	; (d7afc <module_user_init_hook+0x2c>)
   d7ade:	b113      	cbz	r3, d7ae6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7ae0:	4620      	mov	r0, r4
   d7ae2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ae6:	2100      	movs	r1, #0
   d7ae8:	4804      	ldr	r0, [pc, #16]	; (d7afc <module_user_init_hook+0x2c>)
   d7aea:	f7fc ff4b 	bl	d4984 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7aee:	2100      	movs	r1, #0
   d7af0:	4803      	ldr	r0, [pc, #12]	; (d7b00 <module_user_init_hook+0x30>)
}
   d7af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7af6:	f7fc bf07 	b.w	d4908 <system_ctrl_set_app_request_handler>
   d7afa:	bf00      	nop
   d7afc:	00000000 	.word	0x00000000
   d7b00:	000d7a99 	.word	0x000d7a99

000d7b04 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b04:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b06:	4c0c      	ldr	r4, [pc, #48]	; (d7b38 <_GLOBAL__sub_I_SPI+0x34>)
   d7b08:	4e0c      	ldr	r6, [pc, #48]	; (d7b3c <_GLOBAL__sub_I_SPI+0x38>)
   d7b0a:	4d0d      	ldr	r5, [pc, #52]	; (d7b40 <_GLOBAL__sub_I_SPI+0x3c>)
   d7b0c:	2100      	movs	r1, #0
   d7b0e:	4620      	mov	r0, r4
   d7b10:	f7ff fa5c 	bl	d6fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b14:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b16:	4c0b      	ldr	r4, [pc, #44]	; (d7b44 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7b18:	4632      	mov	r2, r6
   d7b1a:	4629      	mov	r1, r5
   d7b1c:	f000 f814 	bl	d7b48 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7b20:	2101      	movs	r1, #1
   d7b22:	4620      	mov	r0, r4
   d7b24:	f7ff fa52 	bl	d6fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b28:	4632      	mov	r2, r6
   d7b2a:	4629      	mov	r1, r5
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7b32:	f000 b809 	b.w	d7b48 <__aeabi_atexit>
   d7b36:	bf00      	nop
   d7b38:	2003e72c 	.word	0x2003e72c
   d7b3c:	2003e344 	.word	0x2003e344
   d7b40:	000d6fbd 	.word	0x000d6fbd
   d7b44:	2003e73c 	.word	0x2003e73c

000d7b48 <__aeabi_atexit>:
   d7b48:	460b      	mov	r3, r1
   d7b4a:	4601      	mov	r1, r0
   d7b4c:	4618      	mov	r0, r3
   d7b4e:	f000 b967 	b.w	d7e20 <__cxa_atexit>

000d7b52 <_ZdlPvj>:
   d7b52:	f7fc baa4 	b.w	d409e <_ZdlPv>
	...

000d7b58 <_ZSt15get_new_handlerv>:
   d7b58:	4b02      	ldr	r3, [pc, #8]	; (d7b64 <_ZSt15get_new_handlerv+0xc>)
   d7b5a:	6818      	ldr	r0, [r3, #0]
   d7b5c:	f3bf 8f5f 	dmb	sy
   d7b60:	4770      	bx	lr
   d7b62:	bf00      	nop
   d7b64:	2003e74c 	.word	0x2003e74c

000d7b68 <_ZnwjRKSt9nothrow_t>:
   d7b68:	b510      	push	{r4, lr}
   d7b6a:	2800      	cmp	r0, #0
   d7b6c:	bf14      	ite	ne
   d7b6e:	4604      	movne	r4, r0
   d7b70:	2401      	moveq	r4, #1
   d7b72:	4620      	mov	r0, r4
   d7b74:	f7fc ff5e 	bl	d4a34 <malloc>
   d7b78:	b920      	cbnz	r0, d7b84 <_ZnwjRKSt9nothrow_t+0x1c>
   d7b7a:	f7ff ffed 	bl	d7b58 <_ZSt15get_new_handlerv>
   d7b7e:	b108      	cbz	r0, d7b84 <_ZnwjRKSt9nothrow_t+0x1c>
   d7b80:	4780      	blx	r0
   d7b82:	e7f6      	b.n	d7b72 <_ZnwjRKSt9nothrow_t+0xa>
   d7b84:	bd10      	pop	{r4, pc}

000d7b86 <_ZnajRKSt9nothrow_t>:
   d7b86:	f7ff bfef 	b.w	d7b68 <_ZnwjRKSt9nothrow_t>

000d7b8a <_ZSt25__throw_bad_function_callv>:
   d7b8a:	b508      	push	{r3, lr}
   d7b8c:	f7fc ff72 	bl	d4a74 <abort>

000d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7b90:	4b24      	ldr	r3, [pc, #144]	; (d7c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7b92:	681a      	ldr	r2, [r3, #0]
   d7b94:	07d0      	lsls	r0, r2, #31
   d7b96:	bf5c      	itt	pl
   d7b98:	2201      	movpl	r2, #1
   d7b9a:	601a      	strpl	r2, [r3, #0]
   d7b9c:	4b22      	ldr	r3, [pc, #136]	; (d7c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7b9e:	681a      	ldr	r2, [r3, #0]
   d7ba0:	07d1      	lsls	r1, r2, #31
   d7ba2:	bf5c      	itt	pl
   d7ba4:	2201      	movpl	r2, #1
   d7ba6:	601a      	strpl	r2, [r3, #0]
   d7ba8:	4b20      	ldr	r3, [pc, #128]	; (d7c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7baa:	681a      	ldr	r2, [r3, #0]
   d7bac:	07d2      	lsls	r2, r2, #31
   d7bae:	bf5c      	itt	pl
   d7bb0:	2201      	movpl	r2, #1
   d7bb2:	601a      	strpl	r2, [r3, #0]
   d7bb4:	4b1e      	ldr	r3, [pc, #120]	; (d7c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7bb6:	681a      	ldr	r2, [r3, #0]
   d7bb8:	07d0      	lsls	r0, r2, #31
   d7bba:	bf5c      	itt	pl
   d7bbc:	2201      	movpl	r2, #1
   d7bbe:	601a      	strpl	r2, [r3, #0]
   d7bc0:	4b1c      	ldr	r3, [pc, #112]	; (d7c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7bc2:	681a      	ldr	r2, [r3, #0]
   d7bc4:	07d1      	lsls	r1, r2, #31
   d7bc6:	bf5c      	itt	pl
   d7bc8:	2201      	movpl	r2, #1
   d7bca:	601a      	strpl	r2, [r3, #0]
   d7bcc:	4b1a      	ldr	r3, [pc, #104]	; (d7c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7bce:	681a      	ldr	r2, [r3, #0]
   d7bd0:	07d2      	lsls	r2, r2, #31
   d7bd2:	bf5c      	itt	pl
   d7bd4:	2201      	movpl	r2, #1
   d7bd6:	601a      	strpl	r2, [r3, #0]
   d7bd8:	4b18      	ldr	r3, [pc, #96]	; (d7c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7bda:	681a      	ldr	r2, [r3, #0]
   d7bdc:	07d0      	lsls	r0, r2, #31
   d7bde:	bf5c      	itt	pl
   d7be0:	2201      	movpl	r2, #1
   d7be2:	601a      	strpl	r2, [r3, #0]
   d7be4:	4b16      	ldr	r3, [pc, #88]	; (d7c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7be6:	681a      	ldr	r2, [r3, #0]
   d7be8:	07d1      	lsls	r1, r2, #31
   d7bea:	bf5c      	itt	pl
   d7bec:	2201      	movpl	r2, #1
   d7bee:	601a      	strpl	r2, [r3, #0]
   d7bf0:	4b14      	ldr	r3, [pc, #80]	; (d7c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7bf2:	681a      	ldr	r2, [r3, #0]
   d7bf4:	07d2      	lsls	r2, r2, #31
   d7bf6:	bf5c      	itt	pl
   d7bf8:	2201      	movpl	r2, #1
   d7bfa:	601a      	strpl	r2, [r3, #0]
   d7bfc:	4b12      	ldr	r3, [pc, #72]	; (d7c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7bfe:	681a      	ldr	r2, [r3, #0]
   d7c00:	07d0      	lsls	r0, r2, #31
   d7c02:	bf5c      	itt	pl
   d7c04:	2201      	movpl	r2, #1
   d7c06:	601a      	strpl	r2, [r3, #0]
   d7c08:	4b10      	ldr	r3, [pc, #64]	; (d7c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7c0a:	681a      	ldr	r2, [r3, #0]
   d7c0c:	07d1      	lsls	r1, r2, #31
   d7c0e:	bf5c      	itt	pl
   d7c10:	2201      	movpl	r2, #1
   d7c12:	601a      	strpl	r2, [r3, #0]
   d7c14:	4b0e      	ldr	r3, [pc, #56]	; (d7c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7c16:	681a      	ldr	r2, [r3, #0]
   d7c18:	07d2      	lsls	r2, r2, #31
   d7c1a:	bf5c      	itt	pl
   d7c1c:	2201      	movpl	r2, #1
   d7c1e:	601a      	strpl	r2, [r3, #0]
   d7c20:	4770      	bx	lr
   d7c22:	bf00      	nop
   d7c24:	2003e77c 	.word	0x2003e77c
   d7c28:	2003e778 	.word	0x2003e778
   d7c2c:	2003e774 	.word	0x2003e774
   d7c30:	2003e770 	.word	0x2003e770
   d7c34:	2003e76c 	.word	0x2003e76c
   d7c38:	2003e768 	.word	0x2003e768
   d7c3c:	2003e764 	.word	0x2003e764
   d7c40:	2003e760 	.word	0x2003e760
   d7c44:	2003e75c 	.word	0x2003e75c
   d7c48:	2003e758 	.word	0x2003e758
   d7c4c:	2003e754 	.word	0x2003e754
   d7c50:	2003e750 	.word	0x2003e750

000d7c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c54:	4b18      	ldr	r3, [pc, #96]	; (d7cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c56:	681a      	ldr	r2, [r3, #0]
   d7c58:	07d1      	lsls	r1, r2, #31
   d7c5a:	bf5c      	itt	pl
   d7c5c:	2201      	movpl	r2, #1
   d7c5e:	601a      	strpl	r2, [r3, #0]
   d7c60:	4b16      	ldr	r3, [pc, #88]	; (d7cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c62:	681a      	ldr	r2, [r3, #0]
   d7c64:	07d2      	lsls	r2, r2, #31
   d7c66:	bf5c      	itt	pl
   d7c68:	2201      	movpl	r2, #1
   d7c6a:	601a      	strpl	r2, [r3, #0]
   d7c6c:	4b14      	ldr	r3, [pc, #80]	; (d7cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c6e:	681a      	ldr	r2, [r3, #0]
   d7c70:	07d0      	lsls	r0, r2, #31
   d7c72:	bf5c      	itt	pl
   d7c74:	2201      	movpl	r2, #1
   d7c76:	601a      	strpl	r2, [r3, #0]
   d7c78:	4b12      	ldr	r3, [pc, #72]	; (d7cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c7a:	681a      	ldr	r2, [r3, #0]
   d7c7c:	07d1      	lsls	r1, r2, #31
   d7c7e:	bf5c      	itt	pl
   d7c80:	2201      	movpl	r2, #1
   d7c82:	601a      	strpl	r2, [r3, #0]
   d7c84:	4b10      	ldr	r3, [pc, #64]	; (d7cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c86:	681a      	ldr	r2, [r3, #0]
   d7c88:	07d2      	lsls	r2, r2, #31
   d7c8a:	bf5c      	itt	pl
   d7c8c:	2201      	movpl	r2, #1
   d7c8e:	601a      	strpl	r2, [r3, #0]
   d7c90:	4b0e      	ldr	r3, [pc, #56]	; (d7ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c92:	681a      	ldr	r2, [r3, #0]
   d7c94:	07d0      	lsls	r0, r2, #31
   d7c96:	bf5c      	itt	pl
   d7c98:	2201      	movpl	r2, #1
   d7c9a:	601a      	strpl	r2, [r3, #0]
   d7c9c:	4b0c      	ldr	r3, [pc, #48]	; (d7cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c9e:	681a      	ldr	r2, [r3, #0]
   d7ca0:	07d1      	lsls	r1, r2, #31
   d7ca2:	bf5c      	itt	pl
   d7ca4:	2201      	movpl	r2, #1
   d7ca6:	601a      	strpl	r2, [r3, #0]
   d7ca8:	4b0a      	ldr	r3, [pc, #40]	; (d7cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7caa:	681a      	ldr	r2, [r3, #0]
   d7cac:	07d2      	lsls	r2, r2, #31
   d7cae:	bf5c      	itt	pl
   d7cb0:	2201      	movpl	r2, #1
   d7cb2:	601a      	strpl	r2, [r3, #0]
   d7cb4:	4770      	bx	lr
   d7cb6:	bf00      	nop
   d7cb8:	2003e79c 	.word	0x2003e79c
   d7cbc:	2003e798 	.word	0x2003e798
   d7cc0:	2003e794 	.word	0x2003e794
   d7cc4:	2003e790 	.word	0x2003e790
   d7cc8:	2003e78c 	.word	0x2003e78c
   d7ccc:	2003e788 	.word	0x2003e788
   d7cd0:	2003e784 	.word	0x2003e784
   d7cd4:	2003e780 	.word	0x2003e780

000d7cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7cd8:	4b18      	ldr	r3, [pc, #96]	; (d7d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7cda:	681a      	ldr	r2, [r3, #0]
   d7cdc:	07d1      	lsls	r1, r2, #31
   d7cde:	bf5c      	itt	pl
   d7ce0:	2201      	movpl	r2, #1
   d7ce2:	601a      	strpl	r2, [r3, #0]
   d7ce4:	4b16      	ldr	r3, [pc, #88]	; (d7d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ce6:	681a      	ldr	r2, [r3, #0]
   d7ce8:	07d2      	lsls	r2, r2, #31
   d7cea:	bf5c      	itt	pl
   d7cec:	2201      	movpl	r2, #1
   d7cee:	601a      	strpl	r2, [r3, #0]
   d7cf0:	4b14      	ldr	r3, [pc, #80]	; (d7d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7cf2:	681a      	ldr	r2, [r3, #0]
   d7cf4:	07d0      	lsls	r0, r2, #31
   d7cf6:	bf5c      	itt	pl
   d7cf8:	2201      	movpl	r2, #1
   d7cfa:	601a      	strpl	r2, [r3, #0]
   d7cfc:	4b12      	ldr	r3, [pc, #72]	; (d7d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7cfe:	681a      	ldr	r2, [r3, #0]
   d7d00:	07d1      	lsls	r1, r2, #31
   d7d02:	bf5c      	itt	pl
   d7d04:	2201      	movpl	r2, #1
   d7d06:	601a      	strpl	r2, [r3, #0]
   d7d08:	4b10      	ldr	r3, [pc, #64]	; (d7d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7d0a:	681a      	ldr	r2, [r3, #0]
   d7d0c:	07d2      	lsls	r2, r2, #31
   d7d0e:	bf5c      	itt	pl
   d7d10:	2201      	movpl	r2, #1
   d7d12:	601a      	strpl	r2, [r3, #0]
   d7d14:	4b0e      	ldr	r3, [pc, #56]	; (d7d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7d16:	681a      	ldr	r2, [r3, #0]
   d7d18:	07d0      	lsls	r0, r2, #31
   d7d1a:	bf5c      	itt	pl
   d7d1c:	2201      	movpl	r2, #1
   d7d1e:	601a      	strpl	r2, [r3, #0]
   d7d20:	4b0c      	ldr	r3, [pc, #48]	; (d7d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7d22:	681a      	ldr	r2, [r3, #0]
   d7d24:	07d1      	lsls	r1, r2, #31
   d7d26:	bf5c      	itt	pl
   d7d28:	2201      	movpl	r2, #1
   d7d2a:	601a      	strpl	r2, [r3, #0]
   d7d2c:	4b0a      	ldr	r3, [pc, #40]	; (d7d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7d2e:	681a      	ldr	r2, [r3, #0]
   d7d30:	07d2      	lsls	r2, r2, #31
   d7d32:	bf5c      	itt	pl
   d7d34:	2201      	movpl	r2, #1
   d7d36:	601a      	strpl	r2, [r3, #0]
   d7d38:	4770      	bx	lr
   d7d3a:	bf00      	nop
   d7d3c:	2003e7bc 	.word	0x2003e7bc
   d7d40:	2003e7b8 	.word	0x2003e7b8
   d7d44:	2003e7b4 	.word	0x2003e7b4
   d7d48:	2003e7b0 	.word	0x2003e7b0
   d7d4c:	2003e7ac 	.word	0x2003e7ac
   d7d50:	2003e7a8 	.word	0x2003e7a8
   d7d54:	2003e7a4 	.word	0x2003e7a4
   d7d58:	2003e7a0 	.word	0x2003e7a0

000d7d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7d5c:	4b24      	ldr	r3, [pc, #144]	; (d7df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7d5e:	681a      	ldr	r2, [r3, #0]
   d7d60:	07d0      	lsls	r0, r2, #31
   d7d62:	bf5c      	itt	pl
   d7d64:	2201      	movpl	r2, #1
   d7d66:	601a      	strpl	r2, [r3, #0]
   d7d68:	4b22      	ldr	r3, [pc, #136]	; (d7df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7d6a:	681a      	ldr	r2, [r3, #0]
   d7d6c:	07d1      	lsls	r1, r2, #31
   d7d6e:	bf5c      	itt	pl
   d7d70:	2201      	movpl	r2, #1
   d7d72:	601a      	strpl	r2, [r3, #0]
   d7d74:	4b20      	ldr	r3, [pc, #128]	; (d7df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7d76:	681a      	ldr	r2, [r3, #0]
   d7d78:	07d2      	lsls	r2, r2, #31
   d7d7a:	bf5c      	itt	pl
   d7d7c:	2201      	movpl	r2, #1
   d7d7e:	601a      	strpl	r2, [r3, #0]
   d7d80:	4b1e      	ldr	r3, [pc, #120]	; (d7dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7d82:	681a      	ldr	r2, [r3, #0]
   d7d84:	07d0      	lsls	r0, r2, #31
   d7d86:	bf5c      	itt	pl
   d7d88:	2201      	movpl	r2, #1
   d7d8a:	601a      	strpl	r2, [r3, #0]
   d7d8c:	4b1c      	ldr	r3, [pc, #112]	; (d7e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7d8e:	681a      	ldr	r2, [r3, #0]
   d7d90:	07d1      	lsls	r1, r2, #31
   d7d92:	bf5c      	itt	pl
   d7d94:	2201      	movpl	r2, #1
   d7d96:	601a      	strpl	r2, [r3, #0]
   d7d98:	4b1a      	ldr	r3, [pc, #104]	; (d7e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7d9a:	681a      	ldr	r2, [r3, #0]
   d7d9c:	07d2      	lsls	r2, r2, #31
   d7d9e:	bf5c      	itt	pl
   d7da0:	2201      	movpl	r2, #1
   d7da2:	601a      	strpl	r2, [r3, #0]
   d7da4:	4b18      	ldr	r3, [pc, #96]	; (d7e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7da6:	681a      	ldr	r2, [r3, #0]
   d7da8:	07d0      	lsls	r0, r2, #31
   d7daa:	bf5c      	itt	pl
   d7dac:	2201      	movpl	r2, #1
   d7dae:	601a      	strpl	r2, [r3, #0]
   d7db0:	4b16      	ldr	r3, [pc, #88]	; (d7e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7db2:	681a      	ldr	r2, [r3, #0]
   d7db4:	07d1      	lsls	r1, r2, #31
   d7db6:	bf5c      	itt	pl
   d7db8:	2201      	movpl	r2, #1
   d7dba:	601a      	strpl	r2, [r3, #0]
   d7dbc:	4b14      	ldr	r3, [pc, #80]	; (d7e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7dbe:	681a      	ldr	r2, [r3, #0]
   d7dc0:	07d2      	lsls	r2, r2, #31
   d7dc2:	bf5c      	itt	pl
   d7dc4:	2201      	movpl	r2, #1
   d7dc6:	601a      	strpl	r2, [r3, #0]
   d7dc8:	4b12      	ldr	r3, [pc, #72]	; (d7e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7dca:	681a      	ldr	r2, [r3, #0]
   d7dcc:	07d0      	lsls	r0, r2, #31
   d7dce:	bf5c      	itt	pl
   d7dd0:	2201      	movpl	r2, #1
   d7dd2:	601a      	strpl	r2, [r3, #0]
   d7dd4:	4b10      	ldr	r3, [pc, #64]	; (d7e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7dd6:	681a      	ldr	r2, [r3, #0]
   d7dd8:	07d1      	lsls	r1, r2, #31
   d7dda:	bf5c      	itt	pl
   d7ddc:	2201      	movpl	r2, #1
   d7dde:	601a      	strpl	r2, [r3, #0]
   d7de0:	4b0e      	ldr	r3, [pc, #56]	; (d7e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7de2:	681a      	ldr	r2, [r3, #0]
   d7de4:	07d2      	lsls	r2, r2, #31
   d7de6:	bf5c      	itt	pl
   d7de8:	2201      	movpl	r2, #1
   d7dea:	601a      	strpl	r2, [r3, #0]
   d7dec:	4770      	bx	lr
   d7dee:	bf00      	nop
   d7df0:	2003e7ec 	.word	0x2003e7ec
   d7df4:	2003e7e8 	.word	0x2003e7e8
   d7df8:	2003e7e4 	.word	0x2003e7e4
   d7dfc:	2003e7e0 	.word	0x2003e7e0
   d7e00:	2003e7dc 	.word	0x2003e7dc
   d7e04:	2003e7d8 	.word	0x2003e7d8
   d7e08:	2003e7d4 	.word	0x2003e7d4
   d7e0c:	2003e7d0 	.word	0x2003e7d0
   d7e10:	2003e7cc 	.word	0x2003e7cc
   d7e14:	2003e7c8 	.word	0x2003e7c8
   d7e18:	2003e7c4 	.word	0x2003e7c4
   d7e1c:	2003e7c0 	.word	0x2003e7c0

000d7e20 <__cxa_atexit>:
   d7e20:	b510      	push	{r4, lr}
   d7e22:	4c05      	ldr	r4, [pc, #20]	; (d7e38 <__cxa_atexit+0x18>)
   d7e24:	4613      	mov	r3, r2
   d7e26:	b12c      	cbz	r4, d7e34 <__cxa_atexit+0x14>
   d7e28:	460a      	mov	r2, r1
   d7e2a:	4601      	mov	r1, r0
   d7e2c:	2002      	movs	r0, #2
   d7e2e:	f3af 8000 	nop.w
   d7e32:	bd10      	pop	{r4, pc}
   d7e34:	4620      	mov	r0, r4
   d7e36:	bd10      	pop	{r4, pc}
   d7e38:	00000000 	.word	0x00000000

000d7e3c <memcmp>:
   d7e3c:	b510      	push	{r4, lr}
   d7e3e:	3901      	subs	r1, #1
   d7e40:	4402      	add	r2, r0
   d7e42:	4290      	cmp	r0, r2
   d7e44:	d007      	beq.n	d7e56 <memcmp+0x1a>
   d7e46:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7e4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7e4e:	42a3      	cmp	r3, r4
   d7e50:	d0f7      	beq.n	d7e42 <memcmp+0x6>
   d7e52:	1b18      	subs	r0, r3, r4
   d7e54:	bd10      	pop	{r4, pc}
   d7e56:	2000      	movs	r0, #0
   d7e58:	bd10      	pop	{r4, pc}

000d7e5a <memcpy>:
   d7e5a:	b510      	push	{r4, lr}
   d7e5c:	1e43      	subs	r3, r0, #1
   d7e5e:	440a      	add	r2, r1
   d7e60:	4291      	cmp	r1, r2
   d7e62:	d004      	beq.n	d7e6e <memcpy+0x14>
   d7e64:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e68:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e6c:	e7f8      	b.n	d7e60 <memcpy+0x6>
   d7e6e:	bd10      	pop	{r4, pc}

000d7e70 <memmove>:
   d7e70:	4288      	cmp	r0, r1
   d7e72:	b510      	push	{r4, lr}
   d7e74:	eb01 0302 	add.w	r3, r1, r2
   d7e78:	d801      	bhi.n	d7e7e <memmove+0xe>
   d7e7a:	1e42      	subs	r2, r0, #1
   d7e7c:	e00b      	b.n	d7e96 <memmove+0x26>
   d7e7e:	4298      	cmp	r0, r3
   d7e80:	d2fb      	bcs.n	d7e7a <memmove+0xa>
   d7e82:	1881      	adds	r1, r0, r2
   d7e84:	1ad2      	subs	r2, r2, r3
   d7e86:	42d3      	cmn	r3, r2
   d7e88:	d004      	beq.n	d7e94 <memmove+0x24>
   d7e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7e8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7e92:	e7f8      	b.n	d7e86 <memmove+0x16>
   d7e94:	bd10      	pop	{r4, pc}
   d7e96:	4299      	cmp	r1, r3
   d7e98:	d004      	beq.n	d7ea4 <memmove+0x34>
   d7e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e9e:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7ea2:	e7f8      	b.n	d7e96 <memmove+0x26>
   d7ea4:	bd10      	pop	{r4, pc}

000d7ea6 <memset>:
   d7ea6:	4402      	add	r2, r0
   d7ea8:	4603      	mov	r3, r0
   d7eaa:	4293      	cmp	r3, r2
   d7eac:	d002      	beq.n	d7eb4 <memset+0xe>
   d7eae:	f803 1b01 	strb.w	r1, [r3], #1
   d7eb2:	e7fa      	b.n	d7eaa <memset+0x4>
   d7eb4:	4770      	bx	lr
	...

000d7eb8 <srand>:
   d7eb8:	b538      	push	{r3, r4, r5, lr}
   d7eba:	4b12      	ldr	r3, [pc, #72]	; (d7f04 <srand+0x4c>)
   d7ebc:	681c      	ldr	r4, [r3, #0]
   d7ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ec0:	4605      	mov	r5, r0
   d7ec2:	b9d3      	cbnz	r3, d7efa <srand+0x42>
   d7ec4:	2018      	movs	r0, #24
   d7ec6:	f7fc fdb5 	bl	d4a34 <malloc>
   d7eca:	f243 330e 	movw	r3, #13070	; 0x330e
   d7ece:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ed0:	8003      	strh	r3, [r0, #0]
   d7ed2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7ed6:	8043      	strh	r3, [r0, #2]
   d7ed8:	f241 2334 	movw	r3, #4660	; 0x1234
   d7edc:	8083      	strh	r3, [r0, #4]
   d7ede:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7ee2:	80c3      	strh	r3, [r0, #6]
   d7ee4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ee8:	8103      	strh	r3, [r0, #8]
   d7eea:	2305      	movs	r3, #5
   d7eec:	8143      	strh	r3, [r0, #10]
   d7eee:	230b      	movs	r3, #11
   d7ef0:	8183      	strh	r3, [r0, #12]
   d7ef2:	2201      	movs	r2, #1
   d7ef4:	2300      	movs	r3, #0
   d7ef6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7efc:	2200      	movs	r2, #0
   d7efe:	611d      	str	r5, [r3, #16]
   d7f00:	615a      	str	r2, [r3, #20]
   d7f02:	bd38      	pop	{r3, r4, r5, pc}
   d7f04:	2003e340 	.word	0x2003e340

000d7f08 <strchr>:
   d7f08:	b2c9      	uxtb	r1, r1
   d7f0a:	4603      	mov	r3, r0
   d7f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f10:	b11a      	cbz	r2, d7f1a <strchr+0x12>
   d7f12:	4291      	cmp	r1, r2
   d7f14:	d1f9      	bne.n	d7f0a <strchr+0x2>
   d7f16:	4618      	mov	r0, r3
   d7f18:	4770      	bx	lr
   d7f1a:	2900      	cmp	r1, #0
   d7f1c:	bf0c      	ite	eq
   d7f1e:	4618      	moveq	r0, r3
   d7f20:	2000      	movne	r0, #0
   d7f22:	4770      	bx	lr

000d7f24 <strchrnul>:
   d7f24:	b510      	push	{r4, lr}
   d7f26:	4604      	mov	r4, r0
   d7f28:	f7ff ffee 	bl	d7f08 <strchr>
   d7f2c:	b918      	cbnz	r0, d7f36 <strchrnul+0x12>
   d7f2e:	4620      	mov	r0, r4
   d7f30:	f000 f82f 	bl	d7f92 <strlen>
   d7f34:	4420      	add	r0, r4
   d7f36:	bd10      	pop	{r4, pc}

000d7f38 <strcmp>:
   d7f38:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f40:	2a01      	cmp	r2, #1
   d7f42:	bf28      	it	cs
   d7f44:	429a      	cmpcs	r2, r3
   d7f46:	d0f7      	beq.n	d7f38 <strcmp>
   d7f48:	1ad0      	subs	r0, r2, r3
   d7f4a:	4770      	bx	lr

000d7f4c <strcpy>:
   d7f4c:	4603      	mov	r3, r0
   d7f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f52:	f803 2b01 	strb.w	r2, [r3], #1
   d7f56:	2a00      	cmp	r2, #0
   d7f58:	d1f9      	bne.n	d7f4e <strcpy+0x2>
   d7f5a:	4770      	bx	lr

000d7f5c <strdup>:
   d7f5c:	4b02      	ldr	r3, [pc, #8]	; (d7f68 <strdup+0xc>)
   d7f5e:	4601      	mov	r1, r0
   d7f60:	6818      	ldr	r0, [r3, #0]
   d7f62:	f000 b803 	b.w	d7f6c <_strdup_r>
   d7f66:	bf00      	nop
   d7f68:	2003e340 	.word	0x2003e340

000d7f6c <_strdup_r>:
   d7f6c:	b570      	push	{r4, r5, r6, lr}
   d7f6e:	4606      	mov	r6, r0
   d7f70:	4608      	mov	r0, r1
   d7f72:	460c      	mov	r4, r1
   d7f74:	f000 f80d 	bl	d7f92 <strlen>
   d7f78:	1c45      	adds	r5, r0, #1
   d7f7a:	4629      	mov	r1, r5
   d7f7c:	4630      	mov	r0, r6
   d7f7e:	f7fc fd81 	bl	d4a84 <_malloc_r>
   d7f82:	4606      	mov	r6, r0
   d7f84:	b118      	cbz	r0, d7f8e <_strdup_r+0x22>
   d7f86:	462a      	mov	r2, r5
   d7f88:	4621      	mov	r1, r4
   d7f8a:	f7ff ff66 	bl	d7e5a <memcpy>
   d7f8e:	4630      	mov	r0, r6
   d7f90:	bd70      	pop	{r4, r5, r6, pc}

000d7f92 <strlen>:
   d7f92:	4603      	mov	r3, r0
   d7f94:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f98:	2a00      	cmp	r2, #0
   d7f9a:	d1fb      	bne.n	d7f94 <strlen+0x2>
   d7f9c:	1a18      	subs	r0, r3, r0
   d7f9e:	3801      	subs	r0, #1
   d7fa0:	4770      	bx	lr

000d7fa2 <strncmp>:
   d7fa2:	b530      	push	{r4, r5, lr}
   d7fa4:	b182      	cbz	r2, d7fc8 <strncmp+0x26>
   d7fa6:	1e45      	subs	r5, r0, #1
   d7fa8:	3901      	subs	r1, #1
   d7faa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7fae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7fb2:	42a3      	cmp	r3, r4
   d7fb4:	d106      	bne.n	d7fc4 <strncmp+0x22>
   d7fb6:	43ec      	mvns	r4, r5
   d7fb8:	4414      	add	r4, r2
   d7fba:	42e0      	cmn	r0, r4
   d7fbc:	d001      	beq.n	d7fc2 <strncmp+0x20>
   d7fbe:	2b00      	cmp	r3, #0
   d7fc0:	d1f3      	bne.n	d7faa <strncmp+0x8>
   d7fc2:	461c      	mov	r4, r3
   d7fc4:	1b18      	subs	r0, r3, r4
   d7fc6:	bd30      	pop	{r4, r5, pc}
   d7fc8:	4610      	mov	r0, r2
   d7fca:	bd30      	pop	{r4, r5, pc}

000d7fcc <strnlen>:
   d7fcc:	b510      	push	{r4, lr}
   d7fce:	4603      	mov	r3, r0
   d7fd0:	4401      	add	r1, r0
   d7fd2:	428b      	cmp	r3, r1
   d7fd4:	d004      	beq.n	d7fe0 <strnlen+0x14>
   d7fd6:	781a      	ldrb	r2, [r3, #0]
   d7fd8:	1c5c      	adds	r4, r3, #1
   d7fda:	b10a      	cbz	r2, d7fe0 <strnlen+0x14>
   d7fdc:	4623      	mov	r3, r4
   d7fde:	e7f8      	b.n	d7fd2 <strnlen+0x6>
   d7fe0:	1a18      	subs	r0, r3, r0
   d7fe2:	bd10      	pop	{r4, pc}

000d7fe4 <strrchr>:
   d7fe4:	b538      	push	{r3, r4, r5, lr}
   d7fe6:	4603      	mov	r3, r0
   d7fe8:	460d      	mov	r5, r1
   d7fea:	b141      	cbz	r1, d7ffe <strrchr+0x1a>
   d7fec:	2400      	movs	r4, #0
   d7fee:	4629      	mov	r1, r5
   d7ff0:	4618      	mov	r0, r3
   d7ff2:	f7ff ff89 	bl	d7f08 <strchr>
   d7ff6:	b130      	cbz	r0, d8006 <strrchr+0x22>
   d7ff8:	1c43      	adds	r3, r0, #1
   d7ffa:	4604      	mov	r4, r0
   d7ffc:	e7f7      	b.n	d7fee <strrchr+0xa>
   d7ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8002:	f7ff bf81 	b.w	d7f08 <strchr>
   d8006:	4620      	mov	r0, r4
   d8008:	bd38      	pop	{r3, r4, r5, pc}
	...

000d800c <_strtol_r>:
   d800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8010:	4680      	mov	r8, r0
   d8012:	4840      	ldr	r0, [pc, #256]	; (d8114 <_strtol_r+0x108>)
   d8014:	f8d0 9000 	ldr.w	r9, [r0]
   d8018:	460f      	mov	r7, r1
   d801a:	463d      	mov	r5, r7
   d801c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8020:	eb09 0004 	add.w	r0, r9, r4
   d8024:	7840      	ldrb	r0, [r0, #1]
   d8026:	f000 0008 	and.w	r0, r0, #8
   d802a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d802e:	b108      	cbz	r0, d8034 <_strtol_r+0x28>
   d8030:	462f      	mov	r7, r5
   d8032:	e7f2      	b.n	d801a <_strtol_r+0xe>
   d8034:	2c2d      	cmp	r4, #45	; 0x2d
   d8036:	d103      	bne.n	d8040 <_strtol_r+0x34>
   d8038:	1cbd      	adds	r5, r7, #2
   d803a:	787c      	ldrb	r4, [r7, #1]
   d803c:	2601      	movs	r6, #1
   d803e:	e003      	b.n	d8048 <_strtol_r+0x3c>
   d8040:	2c2b      	cmp	r4, #43	; 0x2b
   d8042:	bf04      	itt	eq
   d8044:	787c      	ldrbeq	r4, [r7, #1]
   d8046:	1cbd      	addeq	r5, r7, #2
   d8048:	b113      	cbz	r3, d8050 <_strtol_r+0x44>
   d804a:	2b10      	cmp	r3, #16
   d804c:	d10a      	bne.n	d8064 <_strtol_r+0x58>
   d804e:	e05b      	b.n	d8108 <_strtol_r+0xfc>
   d8050:	2c30      	cmp	r4, #48	; 0x30
   d8052:	d157      	bne.n	d8104 <_strtol_r+0xf8>
   d8054:	7828      	ldrb	r0, [r5, #0]
   d8056:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d805a:	2858      	cmp	r0, #88	; 0x58
   d805c:	d14d      	bne.n	d80fa <_strtol_r+0xee>
   d805e:	786c      	ldrb	r4, [r5, #1]
   d8060:	2310      	movs	r3, #16
   d8062:	3502      	adds	r5, #2
   d8064:	2e00      	cmp	r6, #0
   d8066:	bf14      	ite	ne
   d8068:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d806c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8070:	2700      	movs	r7, #0
   d8072:	fbbc faf3 	udiv	sl, ip, r3
   d8076:	4638      	mov	r0, r7
   d8078:	fb03 cc1a 	mls	ip, r3, sl, ip
   d807c:	eb09 0e04 	add.w	lr, r9, r4
   d8080:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8084:	f01e 0f04 	tst.w	lr, #4
   d8088:	d001      	beq.n	d808e <_strtol_r+0x82>
   d808a:	3c30      	subs	r4, #48	; 0x30
   d808c:	e00b      	b.n	d80a6 <_strtol_r+0x9a>
   d808e:	f01e 0e03 	ands.w	lr, lr, #3
   d8092:	d01b      	beq.n	d80cc <_strtol_r+0xc0>
   d8094:	f1be 0f01 	cmp.w	lr, #1
   d8098:	bf0c      	ite	eq
   d809a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d809e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d80a2:	ebce 0404 	rsb	r4, lr, r4
   d80a6:	42a3      	cmp	r3, r4
   d80a8:	dd10      	ble.n	d80cc <_strtol_r+0xc0>
   d80aa:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d80ae:	d00a      	beq.n	d80c6 <_strtol_r+0xba>
   d80b0:	4550      	cmp	r0, sl
   d80b2:	d806      	bhi.n	d80c2 <_strtol_r+0xb6>
   d80b4:	d101      	bne.n	d80ba <_strtol_r+0xae>
   d80b6:	4564      	cmp	r4, ip
   d80b8:	dc03      	bgt.n	d80c2 <_strtol_r+0xb6>
   d80ba:	fb03 4000 	mla	r0, r3, r0, r4
   d80be:	2701      	movs	r7, #1
   d80c0:	e001      	b.n	d80c6 <_strtol_r+0xba>
   d80c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d80c6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d80ca:	e7d7      	b.n	d807c <_strtol_r+0x70>
   d80cc:	1c7b      	adds	r3, r7, #1
   d80ce:	d10c      	bne.n	d80ea <_strtol_r+0xde>
   d80d0:	2e00      	cmp	r6, #0
   d80d2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d80d6:	bf14      	ite	ne
   d80d8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d80dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d80e0:	f8c8 3000 	str.w	r3, [r8]
   d80e4:	b92a      	cbnz	r2, d80f2 <_strtol_r+0xe6>
   d80e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80ea:	b106      	cbz	r6, d80ee <_strtol_r+0xe2>
   d80ec:	4240      	negs	r0, r0
   d80ee:	b172      	cbz	r2, d810e <_strtol_r+0x102>
   d80f0:	b107      	cbz	r7, d80f4 <_strtol_r+0xe8>
   d80f2:	1e69      	subs	r1, r5, #1
   d80f4:	6011      	str	r1, [r2, #0]
   d80f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80fa:	2430      	movs	r4, #48	; 0x30
   d80fc:	2b00      	cmp	r3, #0
   d80fe:	d1b1      	bne.n	d8064 <_strtol_r+0x58>
   d8100:	2308      	movs	r3, #8
   d8102:	e7af      	b.n	d8064 <_strtol_r+0x58>
   d8104:	230a      	movs	r3, #10
   d8106:	e7ad      	b.n	d8064 <_strtol_r+0x58>
   d8108:	2c30      	cmp	r4, #48	; 0x30
   d810a:	d0a3      	beq.n	d8054 <_strtol_r+0x48>
   d810c:	e7aa      	b.n	d8064 <_strtol_r+0x58>
   d810e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8112:	bf00      	nop
   d8114:	2003e2dc 	.word	0x2003e2dc

000d8118 <strtol>:
   d8118:	4613      	mov	r3, r2
   d811a:	460a      	mov	r2, r1
   d811c:	4601      	mov	r1, r0
   d811e:	4802      	ldr	r0, [pc, #8]	; (d8128 <strtol+0x10>)
   d8120:	6800      	ldr	r0, [r0, #0]
   d8122:	f7ff bf73 	b.w	d800c <_strtol_r>
   d8126:	bf00      	nop
   d8128:	2003e340 	.word	0x2003e340

000d812c <dynalib_user>:
   d812c:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d813c:	00000000                                ....

000d8140 <_ZTVN5spark10LogHandlerE>:
	...
   d8150:	000d40a9 000d40cd                       .@...@..

000d8158 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8160:	000d40f9 000d412d 000d62e5 000d40cf     .@..-A...b...@..
   d8170:	676e6970 63657220 65766965 6f430064     ping received.Co
   d8180:	63656e6e 676e6974 206f7420 6873656d     nnecting to mesh
   d8190:	726f6200 6e69705f 65530067 6e69646e     .bor_ping.Sendin
   d81a0:	65722067 6e6f7073 70206573 20676e6f     g response pong 
   d81b0:	25206f74 6f620073 6f705f72 003a676e     to %s.bor_pong:.
   d81c0:	6f6e6578 75702d6e 6f620062 6e6f5f72     xenon-pub.bor_on
   d81d0:	656e696c 00000000                       line....

000d81d8 <_ZTVN5spark13CellularClassE>:
	...
   d81e0:	000d4b9b 000d4b91 000d4b87 000d4b3d     .K...K...K..=K..
   d81f0:	000d4b7b 000d4b6f 000d4b63 000d4b5b     {K..oK..cK..[K..
   d8200:	000d4b51 000d4b47 000d6d79              QK..GK..ym..

000d820c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8214:	000d4bd5 000d4bdb 000d4c31 000d4be9     .K...K..1L...K..
   d8224:	000d4bd7                                .K..

000d8228 <_ZTVN5spark13EthernetClassE>:
	...
   d8230:	000d51eb 000d51e1 000d51d7 000d51cd     .Q...Q...Q...Q..
   d8240:	000d51c1 000d51b5 000d51a9 000d51a1     .Q...Q...Q...Q..
   d8250:	000d5197 000d518d 000d6d79              .Q...Q..ym..

000d825c <_ZTV9IPAddress>:
	...
   d8264:	000d5219 000d5209 000d520b 00302e30     .R...R...R..0.0.
   d8274:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d8284:	6c756e00 2575006c 00783430              .null.u%04x.

000d8290 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8298:	000d56c9 000d56ef 000d56a3 000d5347     .V...V...V..GS..

000d82a8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d82b0:	000d5b45 000d5b59 000d6499 000d56ab     E[..Y[...d...V..

000d82c0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d82c8:	000d56c5 000d570b 000d5a5d 000d5719     .V...W..]Z...W..
   d82d8:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d82e8:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d82f8:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d8308:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d8318:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d8328:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d8338:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d8348:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d8358:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d8368:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d8378:	0a0d0020 6c006600 6e66006e 646f6300      ....f.ln.fn.cod
   d8388:	65640065 6c696174 6e6f6e00 72740065     e.detail.none.tr
   d8398:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
   d83a8:	00726f72 696e6170 6c610063 0000006c     ror.panic.all...

000d83b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d83c0:	000d5b19 000d5b31 000d62e5 000d40cf     .[..1[...b...@..

000d83d0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d83d8:	000d56c7 000d56fd 000d620d 000d56ad     .V...V...b...V..

000d83e8 <_ZTVN5spark9MeshClassE>:
	...
   d83f0:	000d669d 000d6693 000d6689 000d667f     .f...f...f...f..
   d8400:	000d6673 000d6667 000d665b 000d6653     sf..gf..[f..Sf..
   d8410:	000d6649 000d663f 000d6d79 33306666     If..?f..ym..ff03
   d8420:	3a313a3a 31303031 72697700 00676e69     ::1:1001.wiring.
   d8430:	73726170 61702065 74656b63 00642520     parse packet %d.
   d8440:	00316874 6873656d 00627570              th1.meshpub.

000d844c <_ZTVN5spark12NetworkClassE>:
	...
   d8454:	000d6d11 000d6d1b 000d6d25 000d6d2f     .m...m..%m../m..
   d8464:	000d6d39 000d6d45 000d6d51 000d6d5d     9m..Em..Qm..]m..
   d8474:	000d6d65 000d6d6f 000d6d79              em..om..ym..

000d8480 <_ZTV8SPIClass>:
	...
   d8488:	000d6fbd 000d6fbf 2b25005a 3a643330     .o...o..Z.%+03d:
   d8498:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d84a8:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d84b8:	00000000                                ....

000d84bc <_ZTV3UDP>:
	...
   d84c4:	000d77b5 000d77d9 000d7191 000d72bb     .w...w...q...r..
   d84d4:	000d7189 000d71a7 000d71c5 000d71df     .q...q...q...q..
   d84e4:	000d7203 000d729f 000d75a1 000d7341     .r...r...u..As..
   d84f4:	000d74c1 000d7171 000d7749 000d7445     .t..qq..Iw..Et..
   d8504:	000d7379 000d7777 000d72e5 000d717f     ys..ww...r...q..
   d8514:	000d7321 000d7185 000d71e1 fffffff0     !s...q...q......
   d8524:	00000000 000d71fb                       .....q..

000d852c <_ZTV11USARTSerial>:
	...
   d8534:	000d7805 000d7855 000d7863 000d6e59     .x..Ux..cx..Yn..
   d8544:	000d7819 000d783b 000d7827 000d784f     .x..;x..'x..Ox..
   d8554:	000d7807 000d780b                       .x...x..

000d855c <_ZTV9USBSerial>:
	...
   d8564:	000d7919 000d7969 000d7977 000d6e59     .y..iy..wy..Yn..
   d8574:	000d7955 000d791b 000d7931 000d7963     Uy...y..1y..cy..
   d8584:	000d7947 000d7915                       Gy...y..

000d858c <_ZSt7nothrow>:
	...

000d858d <_ctype_>:
   d858d:	20202000 20202020 28282020 20282828     .         ((((( 
   d859d:	20202020 20202020 20202020 20202020                     
   d85ad:	10108820 10101010 10101010 10101010      ...............
   d85bd:	04040410 04040404 10040404 10101010     ................
   d85cd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d85dd:	01010101 01010101 01010101 10101010     ................
   d85ed:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d85fd:	02020202 02020202 02020202 10101010     ................
   d860d:	00000020 00000000 00000000 00000000      ...............
	...

000d8690 <__sf_fake_stdin>:
	...

000d86b0 <__sf_fake_stdout>:
	...

000d86d0 <__sf_fake_stderr>:
	...
   d86f0:	00000043                                         C.

000d86f2 <link_const_variable_data_end>:
	...

000d86f4 <link_constructors_location>:
   d86f4:	000d4451 	.word	0x000d4451
   d86f8:	000d4b2d 	.word	0x000d4b2d
   d86fc:	000d4ba5 	.word	0x000d4ba5
   d8700:	000d51f5 	.word	0x000d51f5
   d8704:	000d62d5 	.word	0x000d62d5
   d8708:	000d6cc1 	.word	0x000d6cc1
   d870c:	000d6e45 	.word	0x000d6e45
   d8710:	000d6fa1 	.word	0x000d6fa1
   d8714:	000d7145 	.word	0x000d7145
   d8718:	000d715d 	.word	0x000d715d
   d871c:	000d7b05 	.word	0x000d7b05
   d8720:	000d7b91 	.word	0x000d7b91
   d8724:	000d7c55 	.word	0x000d7c55
   d8728:	000d7cd9 	.word	0x000d7cd9
   d872c:	000d7d5d 	.word	0x000d7d5d
