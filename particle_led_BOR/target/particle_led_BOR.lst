
/Users/simonxu/Projects/Github-simjxu/partiscripts/particle_led_BOR/target/particle_led_BOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d72a0  000d72a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00017308  2**0
                  CONTENTS
  4 .data         00000034  2003e330  000d72a8  0000e330  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000490  2003e368  2003e368  0001e368  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d72dc  000d72dc  000172dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7304  000d7304  00017304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a93cc  00000000  00000000  00017308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f8f2  00000000  00000000  000c06d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015610  00000000  00000000  000cffc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002168  00000000  00000000  000e55d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000036a0  00000000  00000000  000e773e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031fb7  00000000  00000000  000eadde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024bd9  00000000  00000000  0011cd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d4ac5  00000000  00000000  0014196e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb64  00000000  00000000  00216434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	84 6e 0d 00                                         .n..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fefb 	bl	d6e28 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff00 	bl	d6e3e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e330 	.word	0x2003e330
   d4048:	000d72a8 	.word	0x000d72a8
   d404c:	2003e364 	.word	0x2003e364
   d4050:	2003e368 	.word	0x2003e368
   d4054:	2003e7f8 	.word	0x2003e7f8

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe89 	bl	d5d70 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7294 	.word	0x000d7294
   d4080:	000d725c 	.word	0x000d725c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f88d 	bl	d41a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be3b 	b.w	d5d0c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbb3 	b.w	d4800 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bbb1 	b.w	d4800 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbb7 	b.w	d4810 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bbb5 	b.w	d4810 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9ledToggle6String>:
}


// Finally, we will write out our ledToggle function, which is referenced by the Particle.function() called "led"

int ledToggle(String command) {
   d40b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	490e      	ldr	r1, [pc, #56]	; (d40f4 <_Z9ledToggle6String+0x3c>)
   d40bc:	4605      	mov	r5, r0
   d40be:	f001 f914 	bl	d52ea <_ZNK6String6equalsEPKc>

	if (command=="on") {
   d40c2:	4604      	mov	r4, r0
   d40c4:	b130      	cbz	r0, d40d4 <_Z9ledToggle6String+0x1c>
		digitalWrite(boardled,HIGH);
   d40c6:	4b0c      	ldr	r3, [pc, #48]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40c8:	2101      	movs	r1, #1
   d40ca:	8818      	ldrh	r0, [r3, #0]
   d40cc:	f001 fe95 	bl	d5dfa <digitalWrite>
   d40d0:	2001      	movs	r0, #1
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	4909      	ldr	r1, [pc, #36]	; (d40fc <_Z9ledToggle6String+0x44>)
   d40d6:	4628      	mov	r0, r5
   d40d8:	f001 f907 	bl	d52ea <_ZNK6String6equalsEPKc>
		return 1;
	}
	else if (command=="off") {
   d40dc:	b130      	cbz	r0, d40ec <_Z9ledToggle6String+0x34>
		digitalWrite(boardled,LOW);
   d40de:	4b06      	ldr	r3, [pc, #24]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40e0:	4621      	mov	r1, r4
   d40e2:	8818      	ldrh	r0, [r3, #0]
   d40e4:	f001 fe89 	bl	d5dfa <digitalWrite>
		return 0;
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		return -1;
   d40ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

   d40f0:	bd38      	pop	{r3, r4, r5, pc}
   d40f2:	bf00      	nop
   d40f4:	000d6e98 	.word	0x000d6e98
   d40f8:	2003e358 	.word	0x2003e358
   d40fc:	000d6e9b 	.word	0x000d6e9b

000d4100 <setup>:
  Serial.print(", data: ");
  Serial.println(data);
  analogWrite(pwm, 250);
}

void setup() {
   d4100:	b510      	push	{r4, lr}

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4102:	4b1b      	ldr	r3, [pc, #108]	; (d4170 <setup+0x70>)
	pinMode(boardled,OUTPUT);		// This is the onboard led
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4104:	4c1b      	ldr	r4, [pc, #108]	; (d4174 <setup+0x74>)

void setup() {

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4106:	8818      	ldrh	r0, [r3, #0]
   d4108:	2101      	movs	r1, #1
   d410a:	f001 fe65 	bl	d5dd8 <pinMode>
	pinMode(boardled,OUTPUT);		// This is the onboard led
   d410e:	4b1a      	ldr	r3, [pc, #104]	; (d4178 <setup+0x78>)
   d4110:	2101      	movs	r1, #1
   d4112:	8818      	ldrh	r0, [r3, #0]
   d4114:	f001 fe60 	bl	d5dd8 <pinMode>
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
   d4118:	4b18      	ldr	r3, [pc, #96]	; (d417c <setup+0x7c>)
   d411a:	2100      	movs	r1, #0
   d411c:	8818      	ldrh	r0, [r3, #0]
   d411e:	f001 fe5b 	bl	d5dd8 <pinMode>
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4122:	8820      	ldrh	r0, [r4, #0]
   d4124:	2101      	movs	r1, #1
   d4126:	f001 fe57 	bl	d5dd8 <pinMode>
												 // (sending out consistent power)
	pinMode(pwm, OUTPUT); // Pin for the pwm output
   d412a:	4b15      	ldr	r3, [pc, #84]	; (d4180 <setup+0x80>)
   d412c:	2101      	movs	r1, #1
   d412e:	8818      	ldrh	r0, [r3, #0]
   d4130:	f001 fe52 	bl	d5dd8 <pinMode>

	// Next, write one pin of the photoresistor to be the maximum possible, so that 
	// we can use this for power.
	digitalWrite(power,HIGH);
   d4134:	8820      	ldrh	r0, [r4, #0]
   d4136:	2101      	movs	r1, #1
   d4138:	f001 fe5f 	bl	d5dfa <digitalWrite>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d413c:	2300      	movs	r3, #0
   d413e:	2209      	movs	r2, #9
   d4140:	4910      	ldr	r1, [pc, #64]	; (d4184 <setup+0x84>)
   d4142:	4811      	ldr	r0, [pc, #68]	; (d4188 <setup+0x88>)
   d4144:	f000 faf4 	bl	d4730 <spark_variable>
   d4148:	2300      	movs	r3, #0
   d414a:	2209      	movs	r2, #9
   d414c:	490f      	ldr	r1, [pc, #60]	; (d418c <setup+0x8c>)
   d414e:	4810      	ldr	r0, [pc, #64]	; (d4190 <setup+0x90>)
   d4150:	f000 faee 	bl	d4730 <spark_variable>
   d4154:	2209      	movs	r2, #9
   d4156:	490f      	ldr	r1, [pc, #60]	; (d4194 <setup+0x94>)
   d4158:	480f      	ldr	r0, [pc, #60]	; (d4198 <setup+0x98>)
   d415a:	2300      	movs	r3, #0
   d415c:	f000 fae8 	bl	d4730 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4160:	4a0e      	ldr	r2, [pc, #56]	; (d419c <setup+0x9c>)
   d4162:	490f      	ldr	r1, [pc, #60]	; (d41a0 <setup+0xa0>)
   d4164:	480f      	ldr	r0, [pc, #60]	; (d41a4 <setup+0xa4>)
	// This is saying that when we ask the cloud for the function "led", it will employ 
	//the function ledToggle() from this app.

	// // Subscribe to the light_level and point to Handler
  // Mesh.subscribe("light_level", myHandler);
}
   d4166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d416a:	f000 bbd8 	b.w	d491e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d416e:	bf00      	nop
   d4170:	2003e35c 	.word	0x2003e35c
   d4174:	2003e334 	.word	0x2003e334
   d4178:	2003e358 	.word	0x2003e358
   d417c:	2003e348 	.word	0x2003e348
   d4180:	2003e330 	.word	0x2003e330
   d4184:	2003e380 	.word	0x2003e380
   d4188:	000d6ea8 	.word	0x000d6ea8
   d418c:	2003e370 	.word	0x2003e370
   d4190:	000d6eb4 	.word	0x000d6eb4
   d4194:	2003e378 	.word	0x2003e378
   d4198:	000d6ebf 	.word	0x000d6ebf
   d419c:	000d6ec8 	.word	0x000d6ec8
   d41a0:	000d40b9 	.word	0x000d40b9
   d41a4:	000d48f3 	.word	0x000d48f3

000d41a8 <loop>:


// Next is the loop function...

void loop() {
   d41a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// check to see what the value of the photoresistor is and store it in the int variable analogvalue
	analogvalue = analogRead(photoresistor);
   d41ac:	4b5a      	ldr	r3, [pc, #360]	; (d4318 <loop+0x170>)
   d41ae:	4c5b      	ldr	r4, [pc, #364]	; (d431c <loop+0x174>)
   d41b0:	8818      	ldrh	r0, [r3, #0]
   d41b2:	4e5b      	ldr	r6, [pc, #364]	; (d4320 <loop+0x178>)
}


// Next is the loop function...

void loop() {
   d41b4:	b085      	sub	sp, #20

	// check to see what the value of the photoresistor is and store it in the int variable analogvalue
	analogvalue = analogRead(photoresistor);
   d41b6:	f001 fe39 	bl	d5e2c <analogRead>
   d41ba:	f002 f957 	bl	d646c <__aeabi_i2d>
   d41be:	e9c4 0100 	strd	r0, r1, [r4]
	delay(5);
   d41c2:	2005      	movs	r0, #5
   d41c4:	f000 fb34 	bl	d4830 <delay>
	// else if (analogvalue > 2500) {
	//     digitalWrite(led,LOW);
	// }

	// min is 40, max is 340
	if (analogvalue > minim && analogvalue < maxim) {
   d41c8:	4b56      	ldr	r3, [pc, #344]	; (d4324 <loop+0x17c>)
   d41ca:	e9d4 4500 	ldrd	r4, r5, [r4]
   d41ce:	e9d3 8900 	ldrd	r8, r9, [r3]
   d41d2:	4620      	mov	r0, r4
   d41d4:	4642      	mov	r2, r8
   d41d6:	464b      	mov	r3, r9
   d41d8:	4629      	mov	r1, r5
   d41da:	f002 fc3d 	bl	d6a58 <__aeabi_dcmpgt>
   d41de:	b308      	cbz	r0, d4224 <loop+0x7c>
   d41e0:	4b51      	ldr	r3, [pc, #324]	; (d4328 <loop+0x180>)
   d41e2:	4620      	mov	r0, r4
   d41e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41e8:	4629      	mov	r1, r5
   d41ea:	f002 fc17 	bl	d6a1c <__aeabi_dcmplt>
   d41ee:	b1c8      	cbz	r0, d4224 <loop+0x7c>
			setpoint = 255-(analogvalue-minim)/300*255;
   d41f0:	4642      	mov	r2, r8
   d41f2:	464b      	mov	r3, r9
   d41f4:	4620      	mov	r0, r4
   d41f6:	4629      	mov	r1, r5
   d41f8:	f001 ffea 	bl	d61d0 <__aeabi_dsub>
   d41fc:	a33e      	add	r3, pc, #248	; (adr r3, d42f8 <loop+0x150>)
   d41fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4202:	f002 fac3 	bl	d678c <__aeabi_ddiv>
   d4206:	a33e      	add	r3, pc, #248	; (adr r3, d4300 <loop+0x158>)
   d4208:	e9d3 2300 	ldrd	r2, r3, [r3]
   d420c:	f002 f994 	bl	d6538 <__aeabi_dmul>
   d4210:	4602      	mov	r2, r0
   d4212:	460b      	mov	r3, r1
   d4214:	a13a      	add	r1, pc, #232	; (adr r1, d4300 <loop+0x158>)
   d4216:	e9d1 0100 	ldrd	r0, r1, [r1]
   d421a:	f001 ffd9 	bl	d61d0 <__aeabi_dsub>
   d421e:	e9c6 0100 	strd	r0, r1, [r6]
   d4222:	e00e      	b.n	d4242 <loop+0x9a>
	} else if (analogvalue <= minim) {
   d4224:	4642      	mov	r2, r8
   d4226:	464b      	mov	r3, r9
   d4228:	4620      	mov	r0, r4
   d422a:	4629      	mov	r1, r5
   d422c:	f002 fc00 	bl	d6a30 <__aeabi_dcmple>
   d4230:	b118      	cbz	r0, d423a <loop+0x92>
	setpoint = 254;
   d4232:	a335      	add	r3, pc, #212	; (adr r3, d4308 <loop+0x160>)
   d4234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4238:	e001      	b.n	d423e <loop+0x96>
	} else if (analogvalue >= maxim) {
		setpoint = 0;
   d423a:	2200      	movs	r2, #0
   d423c:	2300      	movs	r3, #0
   d423e:	e9c6 2300 	strd	r2, r3, [r6]
	} else {
		setpoint = 0;
	}
	pinMode(pwm, OUTPUT);
   d4242:	4f3a      	ldr	r7, [pc, #232]	; (d432c <loop+0x184>)
	// } else {
	// 	digitalWrite(boardled, HIGH);
	// }

	// Check the setpoint vs the brightness
	if (brightness < setpoint && brightness < 252) {
   d4244:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d4338 <loop+0x190>
	} else if (analogvalue >= maxim) {
		setpoint = 0;
	} else {
		setpoint = 0;
	}
	pinMode(pwm, OUTPUT);
   d4248:	8838      	ldrh	r0, [r7, #0]
   d424a:	2101      	movs	r1, #1
   d424c:	f001 fdc4 	bl	d5dd8 <pinMode>
	// } else {
	// 	digitalWrite(boardled, HIGH);
	// }

	// Check the setpoint vs the brightness
	if (brightness < setpoint && brightness < 252) {
   d4250:	e9d8 4500 	ldrd	r4, r5, [r8]
   d4254:	e9d6 ab00 	ldrd	sl, fp, [r6]
   d4258:	4620      	mov	r0, r4
   d425a:	4652      	mov	r2, sl
   d425c:	465b      	mov	r3, fp
   d425e:	4629      	mov	r1, r5
   d4260:	f002 fbdc 	bl	d6a1c <__aeabi_dcmplt>
   d4264:	46b9      	mov	r9, r7
   d4266:	b1a0      	cbz	r0, d4292 <loop+0xea>
   d4268:	2200      	movs	r2, #0
   d426a:	4b31      	ldr	r3, [pc, #196]	; (d4330 <loop+0x188>)
   d426c:	4620      	mov	r0, r4
   d426e:	4629      	mov	r1, r5
   d4270:	f002 fbd4 	bl	d6a1c <__aeabi_dcmplt>
   d4274:	b168      	cbz	r0, d4292 <loop+0xea>
		brightness = brightness + fadeamount;
   d4276:	4b2f      	ldr	r3, [pc, #188]	; (d4334 <loop+0x18c>)
   d4278:	4620      	mov	r0, r4
   d427a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d427e:	4629      	mov	r1, r5
   d4280:	f001 ffa8 	bl	d61d4 <__adddf3>
   d4284:	e9c8 0100 	strd	r0, r1, [r8]
		analogWrite(pwm, brightness);
   d4288:	f002 fbf0 	bl	d6a6c <__aeabi_d2uiz>
   d428c:	4601      	mov	r1, r0
   d428e:	8838      	ldrh	r0, [r7, #0]
   d4290:	e01d      	b.n	d42ce <loop+0x126>
	} else if (brightness > setpoint && brightness > 1.3) {
   d4292:	4652      	mov	r2, sl
   d4294:	465b      	mov	r3, fp
   d4296:	4620      	mov	r0, r4
   d4298:	4629      	mov	r1, r5
   d429a:	f002 fbdd 	bl	d6a58 <__aeabi_dcmpgt>
   d429e:	b1c0      	cbz	r0, d42d2 <loop+0x12a>
   d42a0:	a31b      	add	r3, pc, #108	; (adr r3, d4310 <loop+0x168>)
   d42a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a6:	4620      	mov	r0, r4
   d42a8:	4629      	mov	r1, r5
   d42aa:	f002 fbd5 	bl	d6a58 <__aeabi_dcmpgt>
   d42ae:	b180      	cbz	r0, d42d2 <loop+0x12a>
		brightness = brightness - fadeamount;
   d42b0:	4b20      	ldr	r3, [pc, #128]	; (d4334 <loop+0x18c>)
   d42b2:	4620      	mov	r0, r4
   d42b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b8:	4629      	mov	r1, r5
   d42ba:	f001 ff89 	bl	d61d0 <__aeabi_dsub>
   d42be:	4b1e      	ldr	r3, [pc, #120]	; (d4338 <loop+0x190>)
   d42c0:	e9c3 0100 	strd	r0, r1, [r3]
		analogWrite(pwm, brightness);
   d42c4:	f002 fbd2 	bl	d6a6c <__aeabi_d2uiz>
   d42c8:	4601      	mov	r1, r0
   d42ca:	f8b9 0000 	ldrh.w	r0, [r9]
   d42ce:	f001 fdc4 	bl	d5e5a <_Z11analogWritetm>
	} else {
		brightness = brightness;
	}


	Mesh.publish("low_light", String(setpoint));
   d42d2:	ed96 0b00 	vldr	d0, [r6]
   d42d6:	2106      	movs	r1, #6
   d42d8:	4668      	mov	r0, sp
   d42da:	f000 ffc0 	bl	d525e <_ZN6StringC1Edi>
   d42de:	9a00      	ldr	r2, [sp, #0]
   d42e0:	4916      	ldr	r1, [pc, #88]	; (d433c <loop+0x194>)
   d42e2:	4817      	ldr	r0, [pc, #92]	; (d4340 <loop+0x198>)
   d42e4:	f000 fd22 	bl	d4d2c <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42e8:	4668      	mov	r0, sp
   d42ea:	f000 ff33 	bl	d5154 <_ZN6StringD1Ev>
	
//   Mesh.publish("light_level", "test");

	// // Make sure it doesn't publish too much
	// delay(2000);
}
   d42ee:	b005      	add	sp, #20
   d42f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d42f4:	f3af 8000 	nop.w
   d42f8:	00000000 	.word	0x00000000
   d42fc:	4072c000 	.word	0x4072c000
   d4300:	00000000 	.word	0x00000000
   d4304:	406fe000 	.word	0x406fe000
   d4308:	00000000 	.word	0x00000000
   d430c:	406fc000 	.word	0x406fc000
   d4310:	cccccccd 	.word	0xcccccccd
   d4314:	3ff4cccc 	.word	0x3ff4cccc
   d4318:	2003e348 	.word	0x2003e348
   d431c:	2003e380 	.word	0x2003e380
   d4320:	2003e378 	.word	0x2003e378
   d4324:	2003e340 	.word	0x2003e340
   d4328:	2003e350 	.word	0x2003e350
   d432c:	2003e330 	.word	0x2003e330
   d4330:	406f8000 	.word	0x406f8000
   d4334:	2003e338 	.word	0x2003e338
   d4338:	2003e370 	.word	0x2003e370
   d433c:	000d6ecc 	.word	0x000d6ecc
   d4340:	2003e3f4 	.word	0x2003e3f4

000d4344 <_GLOBAL__sub_I_led>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4344:	f000 b840 	b.w	d43c8 <HAL_Pin_Map>

000d4348 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <os_thread_is_current+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	689b      	ldr	r3, [r3, #8]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030248 	.word	0x00030248

000d4358 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <os_thread_join+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	691b      	ldr	r3, [r3, #16]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030248 	.word	0x00030248

000d4368 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <os_thread_cleanup+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	695b      	ldr	r3, [r3, #20]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030248 	.word	0x00030248

000d4378 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <os_mutex_create+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030248 	.word	0x00030248

000d4388 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <os_mutex_recursive_create+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030248 	.word	0x00030248

000d4398 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <os_mutex_recursive_lock+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030248 	.word	0x00030248

000d43a8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <os_mutex_recursive_unlock+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030248 	.word	0x00030248

000d43b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	695b      	ldr	r3, [r3, #20]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030218 	.word	0x00030218

000d43c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_Pin_Map+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	681b      	ldr	r3, [r3, #0]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003022c 	.word	0x0003022c

000d43d8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_Validate_Pin_Function+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	685b      	ldr	r3, [r3, #4]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003022c 	.word	0x0003022c

000d43e8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_Pin_Mode+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	689b      	ldr	r3, [r3, #8]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003022c 	.word	0x0003022c

000d43f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_Get_Pin_Mode+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003022c 	.word	0x0003022c

000d4408 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_GPIO_Write+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	691b      	ldr	r3, [r3, #16]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003022c 	.word	0x0003022c

000d4418 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_DAC_Write+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003022c 	.word	0x0003022c

000d4428 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_ADC_Read+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003022c 	.word	0x0003022c

000d4438 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_PWM_Write_Ext+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003022c 	.word	0x0003022c

000d4448 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_I2C_Write_Data+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6a1b      	ldr	r3, [r3, #32]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030228 	.word	0x00030228

000d4458 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_I2C_Available_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030228 	.word	0x00030228

000d4468 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_I2C_Read_Data+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030228 	.word	0x00030228

000d4478 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_I2C_Peek_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030228 	.word	0x00030228

000d4488 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_I2C_Flush_Data+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030228 	.word	0x00030228

000d4498 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_I2C_Is_Enabled+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030228 	.word	0x00030228

000d44a8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_I2C_Init+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030228 	.word	0x00030228

000d44b8 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <if_name_to_index+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	691b      	ldr	r3, [r3, #16]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003026c 	.word	0x0003026c

000d44c8 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <if_index_to_name+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	695b      	ldr	r3, [r3, #20]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003026c 	.word	0x0003026c

000d44d8 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <if_get_by_index+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	699b      	ldr	r3, [r3, #24]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003026c 	.word	0x0003026c

000d44e8 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <if_get_addrs+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003026c 	.word	0x0003026c

000d44f8 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <if_free_if_addrs+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003026c 	.word	0x0003026c

000d4508 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <inet_inet_ntop+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	695b      	ldr	r3, [r3, #20]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030264 	.word	0x00030264

000d4518 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <inet_inet_pton+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	699b      	ldr	r3, [r3, #24]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030264 	.word	0x00030264

000d4528 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <inet_htonl+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6a1b      	ldr	r3, [r3, #32]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030264 	.word	0x00030264

000d4538 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <inet_ntohs+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030264 	.word	0x00030264

000d4548 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <inet_htons+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030264 	.word	0x00030264

000d4558 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <netdb_freeaddrinfo+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	689b      	ldr	r3, [r3, #8]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030268 	.word	0x00030268

000d4568 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <netdb_getaddrinfo+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	68db      	ldr	r3, [r3, #12]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030268 	.word	0x00030268

000d4578 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <sock_bind+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	685b      	ldr	r3, [r3, #4]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030238 	.word	0x00030238

000d4588 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <sock_setsockopt+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	699b      	ldr	r3, [r3, #24]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030238 	.word	0x00030238

000d4598 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <sock_close+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	69db      	ldr	r3, [r3, #28]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030238 	.word	0x00030238

000d45a8 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <sock_recvfrom+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030238 	.word	0x00030238

000d45b8 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <sock_sendto+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030238 	.word	0x00030238

000d45c8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <sock_socket+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030238 	.word	0x00030238

000d45d8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_SPI_Init+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	69db      	ldr	r3, [r3, #28]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030230 	.word	0x00030230

000d45e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_SPI_Is_Enabled+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a1b      	ldr	r3, [r3, #32]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030230 	.word	0x00030230

000d45f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USART_Init+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	681b      	ldr	r3, [r3, #0]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003023c 	.word	0x0003023c

000d4608 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USART_Write_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	68db      	ldr	r3, [r3, #12]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Available_Data+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	691b      	ldr	r3, [r3, #16]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USART_Read_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	695b      	ldr	r3, [r3, #20]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USART_Peek_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	699b      	ldr	r3, [r3, #24]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USART_Flush_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	69db      	ldr	r3, [r3, #28]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003023c 	.word	0x0003023c

000d4658 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USART_Is_Enabled+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6a1b      	ldr	r3, [r3, #32]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003023c 	.word	0x0003023c

000d4668 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USART_Available_Data_For_Write+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003023c 	.word	0x0003023c

000d4678 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USB_USART_Init+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	681b      	ldr	r3, [r3, #0]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003024c 	.word	0x0003024c

000d4688 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <HAL_USB_USART_Available_Data+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	691b      	ldr	r3, [r3, #16]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003024c 	.word	0x0003024c

000d4698 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	695b      	ldr	r3, [r3, #20]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003024c 	.word	0x0003024c

000d46a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_USB_USART_Receive_Data+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	699b      	ldr	r3, [r3, #24]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003024c 	.word	0x0003024c

000d46b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_USB_USART_Send_Data+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	69db      	ldr	r3, [r3, #28]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003024c 	.word	0x0003024c

000d46c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_USB_USART_Flush_Data+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6a1b      	ldr	r3, [r3, #32]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003024c 	.word	0x0003024c

000d46d8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <log_message+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030260 	.word	0x00030260

000d46e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <set_system_mode+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	685b      	ldr	r3, [r3, #4]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030220 	.word	0x00030220

000d46f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <system_delay_ms+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	695b      	ldr	r3, [r3, #20]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030220 	.word	0x00030220

000d4708 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b03      	ldr	r3, [pc, #12]	; (d4718 <system_ctrl_set_app_request_handler+0x10>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4712:	9301      	str	r3, [sp, #4]
   d4714:	bd08      	pop	{r3, pc}
   d4716:	0000      	.short	0x0000
   d4718:	00030220 	.word	0x00030220

000d471c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b03      	ldr	r3, [pc, #12]	; (d472c <system_ctrl_set_result+0x10>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4726:	9301      	str	r3, [sp, #4]
   d4728:	bd08      	pop	{r3, pc}
   d472a:	0000      	.short	0x0000
   d472c:	00030220 	.word	0x00030220

000d4730 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <spark_variable+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	681b      	ldr	r3, [r3, #0]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030244 	.word	0x00030244

000d4740 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <spark_function+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	685b      	ldr	r3, [r3, #4]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030244 	.word	0x00030244

000d4750 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030244 	.word	0x00030244

000d4760 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <network_connect+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	685b      	ldr	r3, [r3, #4]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030240 	.word	0x00030240

000d4770 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_connecting+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	689b      	ldr	r3, [r3, #8]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_disconnect+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	68db      	ldr	r3, [r3, #12]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_ready+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	691b      	ldr	r3, [r3, #16]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_on+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	695b      	ldr	r3, [r3, #20]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_off+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	699b      	ldr	r3, [r3, #24]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_listen+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	69db      	ldr	r3, [r3, #28]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_listening+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6a1b      	ldr	r3, [r3, #32]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_set_listen_timeout+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_get_listen_timeout+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <malloc>:
#include <errno.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <malloc+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	681b      	ldr	r3, [r3, #0]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003021c 	.word	0x0003021c

000d4810 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <free+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	685b      	ldr	r3, [r3, #4]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003021c 	.word	0x0003021c

000d4820 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <realloc+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	689b      	ldr	r3, [r3, #8]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4830:	2100      	movs	r1, #0
   d4832:	f7ff bf61 	b.w	d46f8 <system_delay_ms>

000d4836 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4836:	2200      	movs	r2, #0
   d4838:	4611      	mov	r1, r2
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	f7ff bfa8 	b.w	d4790 <network_ready>

000d4840 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4840:	2200      	movs	r2, #0
   d4842:	4611      	mov	r1, r2
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	f7ff bfc3 	b.w	d47d0 <network_listening>

000d484a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d484a:	2200      	movs	r2, #0
   d484c:	4611      	mov	r1, r2
   d484e:	6840      	ldr	r0, [r0, #4]
   d4850:	f7ff bfce 	b.w	d47f0 <network_get_listen_timeout>

000d4854 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4854:	2200      	movs	r2, #0
   d4856:	6840      	ldr	r0, [r0, #4]
   d4858:	f7ff bfc2 	b.w	d47e0 <network_set_listen_timeout>

000d485c <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d485c:	2200      	movs	r2, #0
   d485e:	f081 0101 	eor.w	r1, r1, #1
   d4862:	6840      	ldr	r0, [r0, #4]
   d4864:	f7ff bfac 	b.w	d47c0 <network_listen>

000d4868 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4868:	2300      	movs	r3, #0
   d486a:	461a      	mov	r2, r3
   d486c:	4619      	mov	r1, r3
   d486e:	6840      	ldr	r0, [r0, #4]
   d4870:	f7ff bf9e 	b.w	d47b0 <network_off>

000d4874 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4874:	2300      	movs	r3, #0
   d4876:	461a      	mov	r2, r3
   d4878:	4619      	mov	r1, r3
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	f7ff bf90 	b.w	d47a0 <network_on>

000d4880 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4880:	2200      	movs	r2, #0
   d4882:	4611      	mov	r1, r2
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	f7ff bf73 	b.w	d4770 <network_connecting>

000d488a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d488a:	2200      	movs	r2, #0
   d488c:	2102      	movs	r1, #2
   d488e:	6840      	ldr	r0, [r0, #4]
   d4890:	f7ff bf76 	b.w	d4780 <network_disconnect>

000d4894 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4894:	2300      	movs	r3, #0
   d4896:	461a      	mov	r2, r3
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	f7ff bf61 	b.w	d4760 <network_connect>
	...

000d48a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d48a0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d48a2:	4d0c      	ldr	r5, [pc, #48]	; (d48d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d48a4:	2428      	movs	r4, #40	; 0x28
   d48a6:	4622      	mov	r2, r4
   d48a8:	2100      	movs	r1, #0
   d48aa:	4628      	mov	r0, r5
   d48ac:	f002 fac7 	bl	d6e3e <memset>
        cid = -1;
   d48b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d48b4:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d48b6:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48b8:	4d07      	ldr	r5, [pc, #28]	; (d48d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d48ba:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d48bc:	4628      	mov	r0, r5
   d48be:	606b      	str	r3, [r5, #4]
   d48c0:	4b06      	ldr	r3, [pc, #24]	; (d48dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d48c2:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d48c6:	4622      	mov	r2, r4
   d48c8:	2100      	movs	r1, #0
   d48ca:	f002 fab8 	bl	d6e3e <memset>
        size = sizeof(*this);
   d48ce:	812c      	strh	r4, [r5, #8]
   d48d0:	bd38      	pop	{r3, r4, r5, pc}
   d48d2:	bf00      	nop
   d48d4:	2003e3b8 	.word	0x2003e3b8
   d48d8:	2003e388 	.word	0x2003e388
   d48dc:	000d6ee0 	.word	0x000d6ee0

000d48e0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48e0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48e2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48e4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48e6:	b113      	cbz	r3, d48ee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48e8:	2203      	movs	r2, #3
   d48ea:	4601      	mov	r1, r0
   d48ec:	4798      	blx	r3
    }
   d48ee:	4620      	mov	r0, r4
   d48f0:	bd10      	pop	{r4, pc}

000d48f2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d48f2:	b510      	push	{r4, lr}
   d48f4:	b088      	sub	sp, #32
   d48f6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d48f8:	4668      	mov	r0, sp
   d48fa:	f000 fc72 	bl	d51e2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d48fe:	4669      	mov	r1, sp
   d4900:	a804      	add	r0, sp, #16
   d4902:	f000 fc90 	bl	d5226 <_ZN6StringC1ERKS_>
   d4906:	a804      	add	r0, sp, #16
   d4908:	47a0      	blx	r4
   d490a:	4604      	mov	r4, r0
   d490c:	a804      	add	r0, sp, #16
   d490e:	f000 fc21 	bl	d5154 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4912:	4668      	mov	r0, sp
   d4914:	f000 fc1e 	bl	d5154 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4918:	4620      	mov	r0, r4
   d491a:	b008      	add	sp, #32
   d491c:	bd10      	pop	{r4, pc}

000d491e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d491e:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4920:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4922:	b085      	sub	sp, #20
   d4924:	4607      	mov	r7, r0
   d4926:	460e      	mov	r6, r1
   d4928:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d492a:	2100      	movs	r1, #0
   d492c:	4622      	mov	r2, r4
   d492e:	4668      	mov	r0, sp
   d4930:	f002 fa85 	bl	d6e3e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4934:	2200      	movs	r2, #0
   d4936:	4669      	mov	r1, sp
   d4938:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d493a:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d493e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4940:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4942:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4944:	f7ff fefc 	bl	d4740 <spark_function>
}
   d4948:	b005      	add	sp, #20
   d494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d494c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d494c:	2200      	movs	r2, #0
   d494e:	4611      	mov	r1, r2
   d4950:	6840      	ldr	r0, [r0, #4]
   d4952:	f7ff bf3d 	b.w	d47d0 <network_listening>

000d4956 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4956:	2200      	movs	r2, #0
   d4958:	4611      	mov	r1, r2
   d495a:	6840      	ldr	r0, [r0, #4]
   d495c:	f7ff bf48 	b.w	d47f0 <network_get_listen_timeout>

000d4960 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4960:	2200      	movs	r2, #0
   d4962:	6840      	ldr	r0, [r0, #4]
   d4964:	f7ff bf3c 	b.w	d47e0 <network_set_listen_timeout>

000d4968 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4968:	2200      	movs	r2, #0
   d496a:	f081 0101 	eor.w	r1, r1, #1
   d496e:	6840      	ldr	r0, [r0, #4]
   d4970:	f7ff bf26 	b.w	d47c0 <network_listen>

000d4974 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4974:	2300      	movs	r3, #0
   d4976:	461a      	mov	r2, r3
   d4978:	4619      	mov	r1, r3
   d497a:	6840      	ldr	r0, [r0, #4]
   d497c:	f7ff bf18 	b.w	d47b0 <network_off>

000d4980 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4980:	2300      	movs	r3, #0
   d4982:	461a      	mov	r2, r3
   d4984:	4619      	mov	r1, r3
   d4986:	6840      	ldr	r0, [r0, #4]
   d4988:	f7ff bf0a 	b.w	d47a0 <network_on>

000d498c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d498c:	2200      	movs	r2, #0
   d498e:	4611      	mov	r1, r2
   d4990:	6840      	ldr	r0, [r0, #4]
   d4992:	f7ff befd 	b.w	d4790 <network_ready>

000d4996 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4996:	2200      	movs	r2, #0
   d4998:	4611      	mov	r1, r2
   d499a:	6840      	ldr	r0, [r0, #4]
   d499c:	f7ff bee8 	b.w	d4770 <network_connecting>

000d49a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49a0:	2200      	movs	r2, #0
   d49a2:	2102      	movs	r1, #2
   d49a4:	6840      	ldr	r0, [r0, #4]
   d49a6:	f7ff beeb 	b.w	d4780 <network_disconnect>

000d49aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49aa:	2300      	movs	r3, #0
   d49ac:	461a      	mov	r2, r3
   d49ae:	6840      	ldr	r0, [r0, #4]
   d49b0:	f7ff bed6 	b.w	d4760 <network_connect>

000d49b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d49b4:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d49b6:	2203      	movs	r2, #3
   d49b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d49ba:	4a02      	ldr	r2, [pc, #8]	; (d49c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d49bc:	601a      	str	r2, [r3, #0]
   d49be:	4770      	bx	lr
   d49c0:	2003e3e0 	.word	0x2003e3e0
   d49c4:	000d6f14 	.word	0x000d6f14

000d49c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d49c8:	4770      	bx	lr

000d49ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d49ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49cc:	4606      	mov	r6, r0
   d49ce:	4615      	mov	r5, r2
   d49d0:	460c      	mov	r4, r1
   d49d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d49d4:	42bc      	cmp	r4, r7
   d49d6:	d006      	beq.n	d49e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d49d8:	6833      	ldr	r3, [r6, #0]
   d49da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	4630      	mov	r0, r6
   d49e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d49e4:	e7f6      	b.n	d49d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d49e6:	4628      	mov	r0, r5
   d49e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d49ea:	2200      	movs	r2, #0
   d49ec:	7c00      	ldrb	r0, [r0, #16]
   d49ee:	f7ff bd2b 	b.w	d4448 <HAL_I2C_Write_Data>

000d49f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d49f2:	2100      	movs	r1, #0
   d49f4:	7c00      	ldrb	r0, [r0, #16]
   d49f6:	f7ff bd2f 	b.w	d4458 <HAL_I2C_Available_Data>

000d49fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d49fa:	2100      	movs	r1, #0
   d49fc:	7c00      	ldrb	r0, [r0, #16]
   d49fe:	f7ff bd33 	b.w	d4468 <HAL_I2C_Read_Data>

000d4a02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4a02:	2100      	movs	r1, #0
   d4a04:	7c00      	ldrb	r0, [r0, #16]
   d4a06:	f7ff bd37 	b.w	d4478 <HAL_I2C_Peek_Data>

000d4a0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4a0a:	2100      	movs	r1, #0
   d4a0c:	7c00      	ldrb	r0, [r0, #16]
   d4a0e:	f7ff bd3b 	b.w	d4488 <HAL_I2C_Flush_Data>

000d4a12 <_ZN7TwoWireD0Ev>:
   d4a12:	b510      	push	{r4, lr}
   d4a14:	4604      	mov	r4, r0
   d4a16:	f7ff fb42 	bl	d409e <_ZdlPv>
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	bd10      	pop	{r4, pc}
	...

000d4a20 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4a20:	b510      	push	{r4, lr}
   d4a22:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a28:	4608      	mov	r0, r1
   d4a2a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a2c:	2100      	movs	r1, #0
   d4a2e:	4b04      	ldr	r3, [pc, #16]	; (d4a40 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4a30:	7420      	strb	r0, [r4, #16]
   d4a32:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4a34:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4a36:	f7ff fd37 	bl	d44a8 <HAL_I2C_Init>

}
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	bd10      	pop	{r4, pc}
   d4a3e:	bf00      	nop
   d4a40:	000d6f48 	.word	0x000d6f48

000d4a44 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4a44:	2100      	movs	r1, #0
   d4a46:	7c00      	ldrb	r0, [r0, #16]
   d4a48:	f7ff bd26 	b.w	d4498 <HAL_I2C_Is_Enabled>

000d4a4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a4c:	4770      	bx	lr

000d4a4e <_ZN9IPAddressD0Ev>:
   d4a4e:	b510      	push	{r4, lr}
   d4a50:	4604      	mov	r4, r0
   d4a52:	f7ff fb24 	bl	d409e <_ZdlPv>
   d4a56:	4620      	mov	r0, r4
   d4a58:	bd10      	pop	{r4, pc}

000d4a5a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4a5c:	7d03      	ldrb	r3, [r0, #20]
   d4a5e:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a60:	b08d      	sub	sp, #52	; 0x34
   d4a62:	460e      	mov	r6, r1
   d4a64:	f100 0704 	add.w	r7, r0, #4
   d4a68:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4a6c:	d002      	beq.n	d4a74 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a6e:	f100 0508 	add.w	r5, r0, #8
   d4a72:	e018      	b.n	d4aa6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a74:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a76:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a78:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a7c:	232f      	movs	r3, #47	; 0x2f
   d4a7e:	462a      	mov	r2, r5
   d4a80:	200a      	movs	r0, #10
   d4a82:	f7ff fd41 	bl	d4508 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a86:	4628      	mov	r0, r5
   d4a88:	f002 f9f3 	bl	d6e72 <strlen>
   d4a8c:	6833      	ldr	r3, [r6, #0]
   d4a8e:	4602      	mov	r2, r0
   d4a90:	68db      	ldr	r3, [r3, #12]
   d4a92:	4629      	mov	r1, r5
   d4a94:	4630      	mov	r0, r6
   d4a96:	4798      	blx	r3
   d4a98:	e00f      	b.n	d4aba <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a9a:	b124      	cbz	r4, d4aa6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a9c:	212e      	movs	r1, #46	; 0x2e
   d4a9e:	4630      	mov	r0, r6
   d4aa0:	f000 fa88 	bl	d4fb4 <_ZN5Print5printEc>
   d4aa4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4aa6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4aaa:	220a      	movs	r2, #10
   d4aac:	4630      	mov	r0, r6
   d4aae:	f000 fab1 	bl	d5014 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ab2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab4:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ab6:	d1f0      	bne.n	d4a9a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab8:	4620      	mov	r0, r4
    }
    return n;
}
   d4aba:	b00d      	add	sp, #52	; 0x34
   d4abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4ac0 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"
#include "ifapi.h"
#include <arpa/inet.h>

IPAddress::IPAddress()
   d4ac0:	b510      	push	{r4, lr}
   d4ac2:	4b05      	ldr	r3, [pc, #20]	; (d4ad8 <_ZN9IPAddressC1Ev+0x18>)
   d4ac4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ac6:	2211      	movs	r2, #17
   d4ac8:	f840 3b04 	str.w	r3, [r0], #4
   d4acc:	2100      	movs	r1, #0
   d4ace:	f002 f9b6 	bl	d6e3e <memset>
{
    clear();
}
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	bd10      	pop	{r4, pc}
   d4ad6:	bf00      	nop
   d4ad8:	000d6f70 	.word	0x000d6f70

000d4adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4adc:	4603      	mov	r3, r0
   d4ade:	4a07      	ldr	r2, [pc, #28]	; (d4afc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ae0:	b510      	push	{r4, lr}
   d4ae2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ae6:	f101 0210 	add.w	r2, r1, #16
   d4aea:	f851 4b04 	ldr.w	r4, [r1], #4
   d4aee:	f843 4b04 	str.w	r4, [r3], #4
   d4af2:	4291      	cmp	r1, r2
   d4af4:	d1f9      	bne.n	d4aea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4af6:	780a      	ldrb	r2, [r1, #0]
   d4af8:	701a      	strb	r2, [r3, #0]
}
   d4afa:	bd10      	pop	{r4, pc}
   d4afc:	000d6f70 	.word	0x000d6f70

000d4b00 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4b00:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4b02:	2b04      	cmp	r3, #4
   d4b04:	d101      	bne.n	d4b0a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	e008      	b.n	d4b1c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4b0a:	2b06      	cmp	r3, #6
   d4b0c:	d10a      	bne.n	d4b24 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4b0e:	6843      	ldr	r3, [r0, #4]
   d4b10:	b153      	cbz	r3, d4b28 <_ZNK9IPAddresscvbEv+0x28>
   d4b12:	6883      	ldr	r3, [r0, #8]
   d4b14:	b143      	cbz	r3, d4b28 <_ZNK9IPAddresscvbEv+0x28>
   d4b16:	68c3      	ldr	r3, [r0, #12]
   d4b18:	b133      	cbz	r3, d4b28 <_ZNK9IPAddresscvbEv+0x28>
   d4b1a:	6900      	ldr	r0, [r0, #16]
   d4b1c:	3000      	adds	r0, #0
   d4b1e:	bf18      	it	ne
   d4b20:	2001      	movne	r0, #1
   d4b22:	4770      	bx	lr
   d4b24:	2000      	movs	r0, #0
   d4b26:	4770      	bx	lr
   d4b28:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4b2a:	4770      	bx	lr

000d4b2c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4b2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b3e:	2304      	movs	r3, #4
   d4b40:	6041      	str	r1, [r0, #4]
   d4b42:	7503      	strb	r3, [r0, #20]
   d4b44:	bd10      	pop	{r4, pc}

000d4b46 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b48:	780d      	ldrb	r5, [r1, #0]
   d4b4a:	788b      	ldrb	r3, [r1, #2]
   d4b4c:	784a      	ldrb	r2, [r1, #1]
   d4b4e:	78c9      	ldrb	r1, [r1, #3]
   d4b50:	9100      	str	r1, [sp, #0]
   d4b52:	4629      	mov	r1, r5
   d4b54:	f7ff ffea 	bl	d4b2c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b58:	b003      	add	sp, #12
   d4b5a:	bd30      	pop	{r4, r5, pc}

000d4b5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b5c:	4b01      	ldr	r3, [pc, #4]	; (d4b64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b5e:	4a02      	ldr	r2, [pc, #8]	; (d4b68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b60:	601a      	str	r2, [r3, #0]
   d4b62:	4770      	bx	lr
   d4b64:	2003e3e8 	.word	0x2003e3e8
   d4b68:	000d702f 	.word	0x000d702f

000d4b6c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b6c:	2200      	movs	r2, #0
   d4b6e:	4611      	mov	r1, r2
   d4b70:	6840      	ldr	r0, [r0, #4]
   d4b72:	f7ff be2d 	b.w	d47d0 <network_listening>

000d4b76 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b76:	2200      	movs	r2, #0
   d4b78:	4611      	mov	r1, r2
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	f7ff be38 	b.w	d47f0 <network_get_listen_timeout>

000d4b80 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b80:	2200      	movs	r2, #0
   d4b82:	6840      	ldr	r0, [r0, #4]
   d4b84:	f7ff be2c 	b.w	d47e0 <network_set_listen_timeout>

000d4b88 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b88:	2200      	movs	r2, #0
   d4b8a:	f081 0101 	eor.w	r1, r1, #1
   d4b8e:	6840      	ldr	r0, [r0, #4]
   d4b90:	f7ff be16 	b.w	d47c0 <network_listen>

000d4b94 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b94:	2300      	movs	r3, #0
   d4b96:	461a      	mov	r2, r3
   d4b98:	4619      	mov	r1, r3
   d4b9a:	6840      	ldr	r0, [r0, #4]
   d4b9c:	f7ff be08 	b.w	d47b0 <network_off>

000d4ba0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ba0:	2300      	movs	r3, #0
   d4ba2:	461a      	mov	r2, r3
   d4ba4:	4619      	mov	r1, r3
   d4ba6:	6840      	ldr	r0, [r0, #4]
   d4ba8:	f7ff bdfa 	b.w	d47a0 <network_on>

000d4bac <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bac:	2200      	movs	r2, #0
   d4bae:	4611      	mov	r1, r2
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	f7ff bded 	b.w	d4790 <network_ready>

000d4bb6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bb6:	2200      	movs	r2, #0
   d4bb8:	4611      	mov	r1, r2
   d4bba:	6840      	ldr	r0, [r0, #4]
   d4bbc:	f7ff bdd8 	b.w	d4770 <network_connecting>

000d4bc0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	2102      	movs	r1, #2
   d4bc4:	6840      	ldr	r0, [r0, #4]
   d4bc6:	f7ff bddb 	b.w	d4780 <network_disconnect>

000d4bca <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4bca:	2300      	movs	r3, #0
   d4bcc:	461a      	mov	r2, r3
   d4bce:	6840      	ldr	r0, [r0, #4]
   d4bd0:	f7ff bdc6 	b.w	d4760 <network_connect>

000d4bd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bd4:	b110      	cbz	r0, d4bdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4bd6:	6803      	ldr	r3, [r0, #0]
   d4bd8:	685b      	ldr	r3, [r3, #4]
   d4bda:	4718      	bx	r3
   d4bdc:	4770      	bx	lr

000d4bde <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4bde:	b538      	push	{r3, r4, r5, lr}
   d4be0:	4604      	mov	r4, r0
   d4be2:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4be4:	b1d0      	cbz	r0, d4c1c <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4be6:	f7ff fbaf 	bl	d4348 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4bea:	b9b8      	cbnz	r0, d4c1c <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4bec:	7c23      	ldrb	r3, [r4, #16]
   d4bee:	b91b      	cbnz	r3, d4bf8 <_ZN6Thread7disposeEv+0x1a>
   d4bf0:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4bf2:	b108      	cbz	r0, d4bf8 <_ZN6Thread7disposeEv+0x1a>
   d4bf4:	f7ff fbb0 	bl	d4358 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4bf8:	6865      	ldr	r5, [r4, #4]
   d4bfa:	b155      	cbz	r5, d4c12 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4bfc:	68ab      	ldr	r3, [r5, #8]
   d4bfe:	b11b      	cbz	r3, d4c08 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c00:	2203      	movs	r2, #3
   d4c02:	4629      	mov	r1, r5
   d4c04:	4628      	mov	r0, r5
   d4c06:	4798      	blx	r3
            delete wrapper;
   d4c08:	4628      	mov	r0, r5
   d4c0a:	f7ff fa48 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d4c0e:	2300      	movs	r3, #0
   d4c10:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4c12:	6820      	ldr	r0, [r4, #0]
   d4c14:	f7ff fba8 	bl	d4368 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4c18:	2300      	movs	r3, #0
   d4c1a:	6023      	str	r3, [r4, #0]
   d4c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c20 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4c20:	b538      	push	{r3, r4, r5, lr}
   d4c22:	4b0b      	ldr	r3, [pc, #44]	; (d4c50 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4c24:	6003      	str	r3, [r0, #0]
   d4c26:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c28:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4c2c:	b108      	cbz	r0, d4c32 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4c2e:	f7ff fa38 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c32:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4c36:	b12d      	cbz	r5, d4c44 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4c38:	4628      	mov	r0, r5
   d4c3a:	f7ff ffd0 	bl	d4bde <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c3e:	4628      	mov	r0, r5
   d4c40:	f7ff fa2d 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c44:	68a0      	ldr	r0, [r4, #8]
   d4c46:	b108      	cbz	r0, d4c4c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4c48:	f7ff ffc4 	bl	d4bd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4c4c:	4620      	mov	r0, r4
   d4c4e:	bd38      	pop	{r3, r4, r5, pc}
   d4c50:	000d7060 	.word	0x000d7060

000d4c54 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4c54:	6800      	ldr	r0, [r0, #0]
   d4c56:	f7ff bb9f 	b.w	d4398 <os_mutex_recursive_lock>
	...

000d4c5c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d4c5c:	b530      	push	{r4, r5, lr}
   d4c5e:	b08d      	sub	sp, #52	; 0x34
   d4c60:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d4c62:	2211      	movs	r2, #17
   d4c64:	2100      	movs	r1, #0
   d4c66:	a801      	add	r0, sp, #4
   d4c68:	f002 f8e9 	bl	d6e3e <memset>
    addr.v = 6;
   d4c6c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4c6e:	aa01      	add	r2, sp, #4
   d4c70:	4909      	ldr	r1, [pc, #36]	; (d4c98 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d4c72:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4c76:	200a      	movs	r0, #10
   d4c78:	f7ff fc4e 	bl	d4518 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c7c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d4c7e:	a901      	add	r1, sp, #4
   d4c80:	a806      	add	r0, sp, #24
   d4c82:	f7ff ff2b 	bl	d4adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c88:	3404      	adds	r4, #4
   d4c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c8c:	682b      	ldr	r3, [r5, #0]
   d4c8e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d4c90:	2000      	movs	r0, #0
   d4c92:	b00d      	add	sp, #52	; 0x34
   d4c94:	bd30      	pop	{r4, r5, pc}
   d4c96:	bf00      	nop
   d4c98:	000d708c 	.word	0x000d708c

000d4c9c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d4c9c:	b530      	push	{r4, r5, lr}
   d4c9e:	4604      	mov	r4, r0
   d4ca0:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4ca2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d4ca6:	f7ff ffd5 	bl	d4c54 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d4caa:	6823      	ldr	r3, [r4, #0]
   d4cac:	bb83      	cbnz	r3, d4d10 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d4cae:	204c      	movs	r0, #76	; 0x4c
   d4cb0:	f7ff f9f1 	bl	d4096 <_Znwj>
   d4cb4:	4605      	mov	r5, r0
   d4cb6:	b108      	cbz	r0, d4cbc <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d4cb8:	f000 fe38 	bl	d592c <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cbc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4cbe:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cc0:	b108      	cbz	r0, d4cc6 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d4cc2:	f7ff ff87 	bl	d4bd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cc6:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d4cc8:	b320      	cbz	r0, d4d14 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d4cca:	2200      	movs	r2, #0
   d4ccc:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4cd0:	f000 fe5b 	bl	d598a <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4cd4:	a908      	add	r1, sp, #32
   d4cd6:	2500      	movs	r5, #0
   d4cd8:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4cdc:	4811      	ldr	r0, [pc, #68]	; (d4d24 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d4cde:	f7ff fbeb 	bl	d44b8 <if_name_to_index>
   d4ce2:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d4ce4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4ce8:	6803      	ldr	r3, [r0, #0]
   d4cea:	f249 0169 	movw	r1, #36969	; 0x9069
   d4cee:	6a1b      	ldr	r3, [r3, #32]
   d4cf0:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d4cf2:	a802      	add	r0, sp, #8
   d4cf4:	f7ff fee4 	bl	d4ac0 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4cf8:	a802      	add	r0, sp, #8
   d4cfa:	f7ff ffaf 	bl	d4c5c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4cfe:	2800      	cmp	r0, #0
   d4d00:	db04      	blt.n	d4d0c <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d4d02:	a902      	add	r1, sp, #8
   d4d04:	6820      	ldr	r0, [r4, #0]
   d4d06:	f000 fec6 	bl	d5a96 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d4d0a:	e004      	b.n	d4d16 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d4d0c:	4605      	mov	r5, r0
   d4d0e:	e002      	b.n	d4d16 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d4d10:	2500      	movs	r5, #0
   d4d12:	e000      	b.n	d4d16 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d4d14:	4d04      	ldr	r5, [pc, #16]	; (d4d28 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4d16:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4d1a:	f7ff fb45 	bl	d43a8 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d4d1e:	4628      	mov	r0, r5
   d4d20:	b009      	add	sp, #36	; 0x24
   d4d22:	bd30      	pop	{r4, r5, pc}
   d4d24:	000d7099 	.word	0x000d7099
   d4d28:	fffffefc 	.word	0xfffffefc

000d4d2c <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d4d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d30:	4605      	mov	r5, r0
   d4d32:	b08c      	sub	sp, #48	; 0x30
   d4d34:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d4d36:	460f      	mov	r7, r1
   d4d38:	b109      	cbz	r1, d4d3e <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d4d3a:	780b      	ldrb	r3, [r1, #0]
   d4d3c:	b90b      	cbnz	r3, d4d42 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d4d3e:	4c35      	ldr	r4, [pc, #212]	; (d4e14 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d4d40:	e064      	b.n	d4e0c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d4d42:	4608      	mov	r0, r1
   d4d44:	f002 f895 	bl	d6e72 <strlen>
   d4d48:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4d4a:	2e00      	cmp	r6, #0
   d4d4c:	d05c      	beq.n	d4e08 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d4d4e:	4630      	mov	r0, r6
   d4d50:	f002 f88f 	bl	d6e72 <strlen>
   d4d54:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4d56:	f108 0302 	add.w	r3, r8, #2
   d4d5a:	4423      	add	r3, r4
   d4d5c:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d4d60:	d84f      	bhi.n	d4e02 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d4d62:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d4d66:	f7ff ff75 	bl	d4c54 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d4d6a:	4628      	mov	r0, r5
   d4d6c:	f7ff ff96 	bl	d4c9c <_ZN5spark11MeshPublish14initialize_udpEv>
   d4d70:	2800      	cmp	r0, #0
   d4d72:	db40      	blt.n	d4df6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d4d74:	4668      	mov	r0, sp
   d4d76:	f7ff fea3 	bl	d4ac0 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4d7a:	4668      	mov	r0, sp
   d4d7c:	f7ff ff6e 	bl	d4c5c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4d80:	2800      	cmp	r0, #0
   d4d82:	db38      	blt.n	d4df6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d4d84:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d4d88:	f8da 3000 	ldr.w	r3, [sl]
   d4d8c:	f10d 0c04 	add.w	ip, sp, #4
   d4d90:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d4d94:	4b20      	ldr	r3, [pc, #128]	; (d4e18 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d4d96:	9306      	str	r3, [sp, #24]
   d4d98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4d9c:	f10d 0e1c 	add.w	lr, sp, #28
   d4da0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4da4:	f8dc 3000 	ldr.w	r3, [ip]
   d4da8:	f88e 3000 	strb.w	r3, [lr]
   d4dac:	f249 0269 	movw	r2, #36969	; 0x9069
   d4db0:	a906      	add	r1, sp, #24
   d4db2:	4650      	mov	r0, sl
   d4db4:	47c8      	blx	r9
   d4db6:	2800      	cmp	r0, #0
   d4db8:	db1d      	blt.n	d4df6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d4dba:	2300      	movs	r3, #0
   d4dbc:	6828      	ldr	r0, [r5, #0]
   d4dbe:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d4dc2:	6803      	ldr	r3, [r0, #0]
   d4dc4:	2201      	movs	r2, #1
   d4dc6:	68db      	ldr	r3, [r3, #12]
   d4dc8:	a906      	add	r1, sp, #24
   d4dca:	4798      	blx	r3
   d4dcc:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d4dce:	6803      	ldr	r3, [r0, #0]
   d4dd0:	f108 0201 	add.w	r2, r8, #1
   d4dd4:	68db      	ldr	r3, [r3, #12]
   d4dd6:	4639      	mov	r1, r7
   d4dd8:	4798      	blx	r3
    if (dataLen > 0) {
   d4dda:	b12c      	cbz	r4, d4de8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d4ddc:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d4dde:	6803      	ldr	r3, [r0, #0]
   d4de0:	4622      	mov	r2, r4
   d4de2:	68db      	ldr	r3, [r3, #12]
   d4de4:	4631      	mov	r1, r6
   d4de6:	4798      	blx	r3
   d4de8:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d4dea:	6803      	ldr	r3, [r0, #0]
   d4dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dee:	4798      	blx	r3
   d4df0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d4df4:	e000      	b.n	d4df8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d4df6:	4604      	mov	r4, r0
   d4df8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4dfc:	f7ff fad4 	bl	d43a8 <os_mutex_recursive_unlock>
   d4e00:	e004      	b.n	d4e0c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4e02:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d4e06:	e001      	b.n	d4e0c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4e08:	4634      	mov	r4, r6
   d4e0a:	e7a4      	b.n	d4d56 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	b00c      	add	sp, #48	; 0x30
   d4e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4e14:	fffffef2 	.word	0xfffffef2
   d4e18:	000d6f70 	.word	0x000d6f70

000d4e1c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4e1c:	b538      	push	{r3, r4, r5, lr}
   d4e1e:	4c0d      	ldr	r4, [pc, #52]	; (d4e54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4e20:	4b0d      	ldr	r3, [pc, #52]	; (d4e58 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4e22:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4e24:	2500      	movs	r5, #0
   d4e26:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4e28:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4e2c:	6063      	str	r3, [r4, #4]
   d4e2e:	60a5      	str	r5, [r4, #8]
   d4e30:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e34:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4e38:	f7ff faa6 	bl	d4388 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4e3c:	4b07      	ldr	r3, [pc, #28]	; (d4e5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4e3e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4e42:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4e44:	4620      	mov	r0, r4
   d4e46:	4a06      	ldr	r2, [pc, #24]	; (d4e60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4e48:	4906      	ldr	r1, [pc, #24]	; (d4e64 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4e4e:	f001 b86d 	b.w	d5f2c <__aeabi_atexit>
   d4e52:	bf00      	nop
   d4e54:	2003e3ec 	.word	0x2003e3ec
   d4e58:	000d70c4 	.word	0x000d70c4
   d4e5c:	000d7060 	.word	0x000d7060
   d4e60:	2003e368 	.word	0x2003e368
   d4e64:	000d4c21 	.word	0x000d4c21

000d4e68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4e68:	2300      	movs	r3, #0
   d4e6a:	461a      	mov	r2, r3
   d4e6c:	6840      	ldr	r0, [r0, #4]
   d4e6e:	f7ff bc77 	b.w	d4760 <network_connect>

000d4e72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4e72:	2200      	movs	r2, #0
   d4e74:	2102      	movs	r1, #2
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff bc82 	b.w	d4780 <network_disconnect>

000d4e7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4e7c:	2200      	movs	r2, #0
   d4e7e:	4611      	mov	r1, r2
   d4e80:	6840      	ldr	r0, [r0, #4]
   d4e82:	f7ff bc75 	b.w	d4770 <network_connecting>

000d4e86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4e86:	2200      	movs	r2, #0
   d4e88:	4611      	mov	r1, r2
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff bc80 	b.w	d4790 <network_ready>

000d4e90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e90:	2300      	movs	r3, #0
   d4e92:	461a      	mov	r2, r3
   d4e94:	4619      	mov	r1, r3
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	f7ff bc82 	b.w	d47a0 <network_on>

000d4e9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e9c:	2300      	movs	r3, #0
   d4e9e:	461a      	mov	r2, r3
   d4ea0:	4619      	mov	r1, r3
   d4ea2:	6840      	ldr	r0, [r0, #4]
   d4ea4:	f7ff bc84 	b.w	d47b0 <network_off>

000d4ea8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	f081 0101 	eor.w	r1, r1, #1
   d4eae:	6840      	ldr	r0, [r0, #4]
   d4eb0:	f7ff bc86 	b.w	d47c0 <network_listen>

000d4eb4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4eb4:	2200      	movs	r2, #0
   d4eb6:	6840      	ldr	r0, [r0, #4]
   d4eb8:	f7ff bc92 	b.w	d47e0 <network_set_listen_timeout>

000d4ebc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ebc:	2200      	movs	r2, #0
   d4ebe:	4611      	mov	r1, r2
   d4ec0:	6840      	ldr	r0, [r0, #4]
   d4ec2:	f7ff bc95 	b.w	d47f0 <network_get_listen_timeout>

000d4ec6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ec6:	2200      	movs	r2, #0
   d4ec8:	4611      	mov	r1, r2
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	f7ff bc80 	b.w	d47d0 <network_listening>

000d4ed0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4ed0:	b570      	push	{r4, r5, r6, lr}
   d4ed2:	b08c      	sub	sp, #48	; 0x30
   d4ed4:	4614      	mov	r4, r2
   d4ed6:	4606      	mov	r6, r0
    IPAddress addr;
   d4ed8:	f7ff fdf2 	bl	d4ac0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4edc:	ab0c      	add	r3, sp, #48	; 0x30
   d4ede:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4ee0:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4ee2:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	f7ff fb3e 	bl	d4568 <netdb_getaddrinfo>
    if (!r && ai) {
   d4eec:	4601      	mov	r1, r0
   d4eee:	bb58      	cbnz	r0, d4f48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d4ef0:	9b00      	ldr	r3, [sp, #0]
   d4ef2:	b34b      	cbz	r3, d4f48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d4ef4:	685a      	ldr	r2, [r3, #4]
   d4ef6:	2a02      	cmp	r2, #2
   d4ef8:	d00e      	beq.n	d4f18 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d4efa:	2a0a      	cmp	r2, #10
   d4efc:	d124      	bne.n	d4f48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d4efe:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d4f00:	2211      	movs	r2, #17
   d4f02:	a801      	add	r0, sp, #4
   d4f04:	f001 ff9b 	bl	d6e3e <memset>
                a.v = 6;
   d4f08:	2306      	movs	r3, #6
   d4f0a:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4f0e:	ad01      	add	r5, sp, #4
   d4f10:	f104 0308 	add.w	r3, r4, #8
   d4f14:	3418      	adds	r4, #24
   d4f16:	e005      	b.n	d4f24 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4f18:	6959      	ldr	r1, [r3, #20]
   d4f1a:	4630      	mov	r0, r6
   d4f1c:	3104      	adds	r1, #4
   d4f1e:	f7ff fe12 	bl	d4b46 <_ZN9IPAddressaSEPKh>
                break;
   d4f22:	e011      	b.n	d4f48 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4f24:	6818      	ldr	r0, [r3, #0]
   d4f26:	6859      	ldr	r1, [r3, #4]
   d4f28:	462a      	mov	r2, r5
   d4f2a:	c203      	stmia	r2!, {r0, r1}
   d4f2c:	3308      	adds	r3, #8
   d4f2e:	42a3      	cmp	r3, r4
   d4f30:	4615      	mov	r5, r2
   d4f32:	d1f7      	bne.n	d4f24 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d4f34:	a901      	add	r1, sp, #4
   d4f36:	a806      	add	r0, sp, #24
   d4f38:	ad07      	add	r5, sp, #28
   d4f3a:	f7ff fdcf 	bl	d4adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f40:	1d34      	adds	r4, r6, #4
   d4f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f44:	682b      	ldr	r3, [r5, #0]
   d4f46:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4f48:	9800      	ldr	r0, [sp, #0]
   d4f4a:	f7ff fb05 	bl	d4558 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4f4e:	4630      	mov	r0, r6
   d4f50:	b00c      	add	sp, #48	; 0x30
   d4f52:	bd70      	pop	{r4, r5, r6, pc}

000d4f54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4f54:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f56:	4a03      	ldr	r2, [pc, #12]	; (d4f64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f58:	601a      	str	r2, [r3, #0]
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	605a      	str	r2, [r3, #4]
   d4f5e:	4770      	bx	lr
   d4f60:	2003e5bc 	.word	0x2003e5bc
   d4f64:	000d70c4 	.word	0x000d70c4

000d4f68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f6a:	4606      	mov	r6, r0
   d4f6c:	460d      	mov	r5, r1
   d4f6e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4f70:	2400      	movs	r4, #0
  while (size--) {
   d4f72:	42bd      	cmp	r5, r7
   d4f74:	d00c      	beq.n	d4f90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4f76:	6833      	ldr	r3, [r6, #0]
   d4f78:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f7c:	689b      	ldr	r3, [r3, #8]
   d4f7e:	4630      	mov	r0, r6
   d4f80:	4798      	blx	r3
     if (chunk>=0)
   d4f82:	2800      	cmp	r0, #0
   d4f84:	db01      	blt.n	d4f8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4f86:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4f88:	e7f3      	b.n	d4f72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4f8a:	2c00      	cmp	r4, #0
   d4f8c:	bf08      	it	eq
   d4f8e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f90:	4620      	mov	r0, r4
   d4f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f94:	b570      	push	{r4, r5, r6, lr}
   d4f96:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f98:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f9a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4f9c:	b149      	cbz	r1, d4fb2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4f9e:	f001 ff68 	bl	d6e72 <strlen>
   d4fa2:	682b      	ldr	r3, [r5, #0]
   d4fa4:	4602      	mov	r2, r0
   d4fa6:	4621      	mov	r1, r4
   d4fa8:	4628      	mov	r0, r5
   d4faa:	68db      	ldr	r3, [r3, #12]
    }
   d4fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fb0:	4718      	bx	r3
    }
   d4fb2:	bd70      	pop	{r4, r5, r6, pc}

000d4fb4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4fb4:	6803      	ldr	r3, [r0, #0]
   d4fb6:	689b      	ldr	r3, [r3, #8]
   d4fb8:	4718      	bx	r3

000d4fba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4fba:	b530      	push	{r4, r5, lr}
   d4fbc:	b08b      	sub	sp, #44	; 0x2c
   d4fbe:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4fc0:	2100      	movs	r1, #0
   d4fc2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4fc6:	2a01      	cmp	r2, #1
   d4fc8:	bf98      	it	ls
   d4fca:	220a      	movls	r2, #10
   d4fcc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4fd0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4fd4:	fb05 3312 	mls	r3, r5, r2, r3
   d4fd8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4fdc:	2b09      	cmp	r3, #9
   d4fde:	bf94      	ite	ls
   d4fe0:	3330      	addls	r3, #48	; 0x30
   d4fe2:	3337      	addhi	r3, #55	; 0x37
   d4fe4:	b2db      	uxtb	r3, r3
   d4fe6:	4621      	mov	r1, r4
   d4fe8:	f804 3901 	strb.w	r3, [r4], #-1
   d4fec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4fee:	2d00      	cmp	r5, #0
   d4ff0:	d1ee      	bne.n	d4fd0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4ff2:	f7ff ffcf 	bl	d4f94 <_ZN5Print5writeEPKc>
}
   d4ff6:	b00b      	add	sp, #44	; 0x2c
   d4ff8:	bd30      	pop	{r4, r5, pc}

000d4ffa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4ffa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4ffc:	b92a      	cbnz	r2, d500a <_ZN5Print5printEmi+0x10>
   d4ffe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5000:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5004:	689b      	ldr	r3, [r3, #8]
   d5006:	b2c9      	uxtb	r1, r1
   d5008:	4718      	bx	r3
  else return printNumber(n, base);
   d500a:	b2d2      	uxtb	r2, r2
}
   d500c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5010:	f7ff bfd3 	b.w	d4fba <_ZN5Print11printNumberEmh>

000d5014 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5014:	f7ff bff1 	b.w	d4ffa <_ZN5Print5printEmi>

000d5018 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5018:	b510      	push	{r4, lr}
   d501a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d501c:	f7ff fc60 	bl	d48e0 <_ZNSt14_Function_baseD1Ev>
   d5020:	4620      	mov	r0, r4
   d5022:	bd10      	pop	{r4, pc}

000d5024 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5024:	4803      	ldr	r0, [pc, #12]	; (d5034 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5026:	4a04      	ldr	r2, [pc, #16]	; (d5038 <_GLOBAL__sub_I_RGB+0x14>)
   d5028:	4904      	ldr	r1, [pc, #16]	; (d503c <_GLOBAL__sub_I_RGB+0x18>)
   d502a:	2300      	movs	r3, #0
   d502c:	6083      	str	r3, [r0, #8]
   d502e:	f000 bf7d 	b.w	d5f2c <__aeabi_atexit>
   d5032:	bf00      	nop
   d5034:	2003e5c4 	.word	0x2003e5c4
   d5038:	2003e368 	.word	0x2003e368
   d503c:	000d5019 	.word	0x000d5019

000d5040 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5040:	4770      	bx	lr

000d5042 <_ZN8SPIClassD0Ev>:
   d5042:	b510      	push	{r4, lr}
   d5044:	4604      	mov	r4, r0
   d5046:	f7ff f82a 	bl	d409e <_ZdlPv>
   d504a:	4620      	mov	r0, r4
   d504c:	bd10      	pop	{r4, pc}
	...

000d5050 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5050:	b570      	push	{r4, r5, r6, lr}
   d5052:	4b08      	ldr	r3, [pc, #32]	; (d5074 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5054:	6003      	str	r3, [r0, #0]
   d5056:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5058:	2500      	movs	r5, #0
   d505a:	460e      	mov	r6, r1
   d505c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5060:	f7ff f98a 	bl	d4378 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5064:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5066:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5068:	f7ff fab6 	bl	d45d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d506c:	60a5      	str	r5, [r4, #8]
}
   d506e:	4620      	mov	r0, r4
   d5070:	bd70      	pop	{r4, r5, r6, pc}
   d5072:	bf00      	nop
   d5074:	000d70f8 	.word	0x000d70f8

000d5078 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5078:	7900      	ldrb	r0, [r0, #4]
   d507a:	f7ff bab5 	b.w	d45e8 <HAL_SPI_Is_Enabled>

000d507e <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d507e:	4770      	bx	lr

000d5080 <_ZN21StringPrintableHelperD0Ev>:
   d5080:	b510      	push	{r4, lr}
   d5082:	4604      	mov	r4, r0
   d5084:	f7ff f80b 	bl	d409e <_ZdlPv>
   d5088:	4620      	mov	r0, r4
   d508a:	bd10      	pop	{r4, pc}

000d508c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d508c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5090:	ec59 8b10 	vmov	r8, r9, d0
   d5094:	4607      	mov	r7, r0
   d5096:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5098:	2200      	movs	r2, #0
   d509a:	2300      	movs	r3, #0
   d509c:	ee10 0a10 	vmov	r0, s0
   d50a0:	4649      	mov	r1, r9
   d50a2:	f001 fcbb 	bl	d6a1c <__aeabi_dcmplt>
   d50a6:	b128      	cbz	r0, d50b4 <_Z4dtoadhPc+0x28>
        val = -val;
   d50a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d50ac:	4699      	mov	r9, r3
        *sout++ = '-';
   d50ae:	232d      	movs	r3, #45	; 0x2d
   d50b0:	7033      	strb	r3, [r6, #0]
   d50b2:	3601      	adds	r6, #1
   d50b4:	2300      	movs	r3, #0
    }
    long scale = 1;
   d50b6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d50b8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d50ba:	b2d9      	uxtb	r1, r3
   d50bc:	428f      	cmp	r7, r1
   d50be:	d902      	bls.n	d50c6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d50c0:	4354      	muls	r4, r2
   d50c2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d50c4:	e7f9      	b.n	d50ba <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d50c6:	4620      	mov	r0, r4
   d50c8:	f001 f9d0 	bl	d646c <__aeabi_i2d>
   d50cc:	4642      	mov	r2, r8
   d50ce:	464b      	mov	r3, r9
   d50d0:	f001 fa32 	bl	d6538 <__aeabi_dmul>
   d50d4:	4682      	mov	sl, r0
   d50d6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d50d8:	f001 fd00 	bl	d6adc <__aeabi_d2ulz>
   d50dc:	4680      	mov	r8, r0
   d50de:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d50e0:	f001 f9f4 	bl	d64cc <__aeabi_ul2d>
   d50e4:	4602      	mov	r2, r0
   d50e6:	460b      	mov	r3, r1
   d50e8:	4650      	mov	r0, sl
   d50ea:	4659      	mov	r1, fp
   d50ec:	f001 f870 	bl	d61d0 <__aeabi_dsub>
   d50f0:	2200      	movs	r2, #0
   d50f2:	4b17      	ldr	r3, [pc, #92]	; (d5150 <_Z4dtoadhPc+0xc4>)
   d50f4:	f001 fca6 	bl	d6a44 <__aeabi_dcmpge>
   d50f8:	b118      	cbz	r0, d5102 <_Z4dtoadhPc+0x76>
        fixed++;
   d50fa:	f118 0801 	adds.w	r8, r8, #1
   d50fe:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5102:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5104:	4622      	mov	r2, r4
   d5106:	462b      	mov	r3, r5
   d5108:	4640      	mov	r0, r8
   d510a:	4649      	mov	r1, r9
   d510c:	f001 fcce 	bl	d6aac <__aeabi_uldivmod>
   d5110:	2301      	movs	r3, #1
   d5112:	220a      	movs	r2, #10
   d5114:	4631      	mov	r1, r6
   d5116:	f000 fdb2 	bl	d5c7e <ultoa>
    if (prec) {
   d511a:	b1af      	cbz	r7, d5148 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d511c:	4630      	mov	r0, r6
   d511e:	f001 fea8 	bl	d6e72 <strlen>
        *sout++ = '.';
   d5122:	232e      	movs	r3, #46	; 0x2e
   d5124:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5126:	3001      	adds	r0, #1
   d5128:	4406      	add	r6, r0
   d512a:	4622      	mov	r2, r4
   d512c:	462b      	mov	r3, r5
   d512e:	4640      	mov	r0, r8
   d5130:	4649      	mov	r1, r9
   d5132:	f001 fcbb 	bl	d6aac <__aeabi_uldivmod>
   d5136:	463b      	mov	r3, r7
   d5138:	4610      	mov	r0, r2
   d513a:	4631      	mov	r1, r6
   d513c:	220a      	movs	r2, #10
    }
}
   d513e:	b001      	add	sp, #4
   d5140:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5144:	f000 bd9b 	b.w	d5c7e <ultoa>
    }
}
   d5148:	b001      	add	sp, #4
   d514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d514e:	bf00      	nop
   d5150:	3fe00000 	.word	0x3fe00000

000d5154 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5154:	b510      	push	{r4, lr}
   d5156:	4604      	mov	r4, r0
{
	free(buffer);
   d5158:	6800      	ldr	r0, [r0, #0]
   d515a:	f7ff fb59 	bl	d4810 <free>
}
   d515e:	4620      	mov	r0, r4
   d5160:	bd10      	pop	{r4, pc}

000d5162 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5162:	b510      	push	{r4, lr}
   d5164:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5166:	6800      	ldr	r0, [r0, #0]
   d5168:	b108      	cbz	r0, d516e <_ZN6String10invalidateEv+0xc>
   d516a:	f7ff fb51 	bl	d4810 <free>
	buffer = NULL;
   d516e:	2300      	movs	r3, #0
   d5170:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5172:	60a3      	str	r3, [r4, #8]
   d5174:	6063      	str	r3, [r4, #4]
   d5176:	bd10      	pop	{r4, pc}

000d5178 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5178:	b538      	push	{r3, r4, r5, lr}
   d517a:	4604      	mov	r4, r0
   d517c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d517e:	6800      	ldr	r0, [r0, #0]
   d5180:	3101      	adds	r1, #1
   d5182:	f7ff fb4d 	bl	d4820 <realloc>
	if (newbuffer) {
   d5186:	b110      	cbz	r0, d518e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5188:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d518c:	2001      	movs	r0, #1
	}
	return 0;
}
   d518e:	bd38      	pop	{r3, r4, r5, pc}

000d5190 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5190:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5192:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5194:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5196:	b113      	cbz	r3, d519e <_ZN6String7reserveEj+0xe>
   d5198:	6843      	ldr	r3, [r0, #4]
   d519a:	428b      	cmp	r3, r1
   d519c:	d207      	bcs.n	d51ae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d519e:	4620      	mov	r0, r4
   d51a0:	f7ff ffea 	bl	d5178 <_ZN6String12changeBufferEj>
   d51a4:	b120      	cbz	r0, d51b0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d51a6:	68a3      	ldr	r3, [r4, #8]
   d51a8:	b90b      	cbnz	r3, d51ae <_ZN6String7reserveEj+0x1e>
   d51aa:	6822      	ldr	r2, [r4, #0]
   d51ac:	7013      	strb	r3, [r2, #0]
   d51ae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d51b0:	bd10      	pop	{r4, pc}

000d51b2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d51b2:	b570      	push	{r4, r5, r6, lr}
   d51b4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d51b6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d51b8:	4604      	mov	r4, r0
   d51ba:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d51bc:	f7ff ffe8 	bl	d5190 <_ZN6String7reserveEj>
   d51c0:	b918      	cbnz	r0, d51ca <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d51c2:	4620      	mov	r0, r4
   d51c4:	f7ff ffcd 	bl	d5162 <_ZN6String10invalidateEv>
		return *this;
   d51c8:	e009      	b.n	d51de <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d51ca:	462a      	mov	r2, r5
   d51cc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d51ce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d51d0:	6820      	ldr	r0, [r4, #0]
   d51d2:	f001 fe29 	bl	d6e28 <memcpy>
	buffer[len] = 0;
   d51d6:	6822      	ldr	r2, [r4, #0]
   d51d8:	68a3      	ldr	r3, [r4, #8]
   d51da:	2100      	movs	r1, #0
   d51dc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d51de:	4620      	mov	r0, r4
   d51e0:	bd70      	pop	{r4, r5, r6, pc}

000d51e2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d51e2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51e4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d51e6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51ea:	6043      	str	r3, [r0, #4]
	len = 0;
   d51ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51ee:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d51f0:	460d      	mov	r5, r1
   d51f2:	b139      	cbz	r1, d5204 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d51f4:	4608      	mov	r0, r1
   d51f6:	f001 fe3c 	bl	d6e72 <strlen>
   d51fa:	4629      	mov	r1, r5
   d51fc:	4602      	mov	r2, r0
   d51fe:	4620      	mov	r0, r4
   d5200:	f7ff ffd7 	bl	d51b2 <_ZN6String4copyEPKcj>
}
   d5204:	4620      	mov	r0, r4
   d5206:	bd38      	pop	{r3, r4, r5, pc}

000d5208 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5208:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d520a:	b510      	push	{r4, lr}
   d520c:	460b      	mov	r3, r1
   d520e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5210:	d007      	beq.n	d5222 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5212:	6809      	ldr	r1, [r1, #0]
   d5214:	b119      	cbz	r1, d521e <_ZN6StringaSERKS_+0x16>
   d5216:	689a      	ldr	r2, [r3, #8]
   d5218:	f7ff ffcb 	bl	d51b2 <_ZN6String4copyEPKcj>
   d521c:	e001      	b.n	d5222 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d521e:	f7ff ffa0 	bl	d5162 <_ZN6String10invalidateEv>

	return *this;
}
   d5222:	4620      	mov	r0, r4
   d5224:	bd10      	pop	{r4, pc}

000d5226 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5226:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5228:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d522a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d522c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d522e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5230:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5232:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5234:	f7ff ffe8 	bl	d5208 <_ZN6StringaSERKS_>
}
   d5238:	4620      	mov	r0, r4
   d523a:	bd10      	pop	{r4, pc}

000d523c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d523c:	b538      	push	{r3, r4, r5, lr}
   d523e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5240:	460c      	mov	r4, r1
   d5242:	b141      	cbz	r1, d5256 <_ZN6StringaSEPKc+0x1a>
   d5244:	4608      	mov	r0, r1
   d5246:	f001 fe14 	bl	d6e72 <strlen>
   d524a:	4621      	mov	r1, r4
   d524c:	4602      	mov	r2, r0
   d524e:	4628      	mov	r0, r5
   d5250:	f7ff ffaf 	bl	d51b2 <_ZN6String4copyEPKcj>
   d5254:	e001      	b.n	d525a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5256:	f7ff ff84 	bl	d5162 <_ZN6String10invalidateEv>

	return *this;
}
   d525a:	4628      	mov	r0, r5
   d525c:	bd38      	pop	{r3, r4, r5, pc}

000d525e <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d525e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5260:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5262:	b08a      	sub	sp, #40	; 0x28
   d5264:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5266:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5268:	6043      	str	r3, [r0, #4]
	len = 0;
   d526a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d526c:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d526e:	b2c8      	uxtb	r0, r1
   d5270:	a901      	add	r1, sp, #4
   d5272:	f7ff ff0b 	bl	d508c <_Z4dtoadhPc>
        *this = buf;
   d5276:	a901      	add	r1, sp, #4
   d5278:	4620      	mov	r0, r4
   d527a:	f7ff ffdf 	bl	d523c <_ZN6StringaSEPKc>
}
   d527e:	4620      	mov	r0, r4
   d5280:	b00a      	add	sp, #40	; 0x28
   d5282:	bd10      	pop	{r4, pc}

000d5284 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5284:	b570      	push	{r4, r5, r6, lr}
   d5286:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5288:	460e      	mov	r6, r1
   d528a:	b909      	cbnz	r1, d5290 <_ZN6String6concatEPKcj+0xc>
   d528c:	2000      	movs	r0, #0
   d528e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5290:	b16a      	cbz	r2, d52ae <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5292:	6883      	ldr	r3, [r0, #8]
   d5294:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5296:	4629      	mov	r1, r5
   d5298:	f7ff ff7a 	bl	d5190 <_ZN6String7reserveEj>
   d529c:	2800      	cmp	r0, #0
   d529e:	d0f5      	beq.n	d528c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d52a0:	6820      	ldr	r0, [r4, #0]
   d52a2:	68a3      	ldr	r3, [r4, #8]
   d52a4:	4631      	mov	r1, r6
   d52a6:	4418      	add	r0, r3
   d52a8:	f001 fddb 	bl	d6e62 <strcpy>
	len = newlen;
   d52ac:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d52ae:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d52b0:	bd70      	pop	{r4, r5, r6, pc}

000d52b2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d52b2:	b538      	push	{r3, r4, r5, lr}
   d52b4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d52b6:	6880      	ldr	r0, [r0, #8]
   d52b8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d52ba:	f7ff ffe3 	bl	d5284 <_ZN6String6concatEPKcj>
   d52be:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d52c0:	6898      	ldr	r0, [r3, #8]
    }
   d52c2:	1b40      	subs	r0, r0, r5
   d52c4:	bd38      	pop	{r3, r4, r5, pc}

000d52c6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d52c6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d52c8:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d52ca:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d52ce:	2201      	movs	r2, #1
   d52d0:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d52d2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d52d6:	f7ff ffd5 	bl	d5284 <_ZN6String6concatEPKcj>
}
   d52da:	b003      	add	sp, #12
   d52dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d52e0 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d52e0:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d52e2:	6880      	ldr	r0, [r0, #8]
   d52e4:	f7ff ffef 	bl	d52c6 <_ZN6String6concatEc>
    }
   d52e8:	bd08      	pop	{r3, pc}

000d52ea <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d52ea:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d52ec:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d52ee:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d52f0:	b912      	cbnz	r2, d52f8 <_ZNK6String6equalsEPKc+0xe>
   d52f2:	b919      	cbnz	r1, d52fc <_ZNK6String6equalsEPKc+0x12>
   d52f4:	2001      	movs	r0, #1
   d52f6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d52f8:	b911      	cbnz	r1, d5300 <_ZNK6String6equalsEPKc+0x16>
   d52fa:	6803      	ldr	r3, [r0, #0]
   d52fc:	7818      	ldrb	r0, [r3, #0]
   d52fe:	e002      	b.n	d5306 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5300:	6800      	ldr	r0, [r0, #0]
   d5302:	f001 fda4 	bl	d6e4e <strcmp>
   d5306:	fab0 f080 	clz	r0, r0
   d530a:	0940      	lsrs	r0, r0, #5
}
   d530c:	bd08      	pop	{r3, pc}
	...

000d5310 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5310:	b530      	push	{r4, r5, lr}
   d5312:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5314:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5316:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5318:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d531a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d531c:	6043      	str	r3, [r0, #4]
	len = 0;
   d531e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5320:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d5322:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5324:	4b06      	ldr	r3, [pc, #24]	; (d5340 <_ZN6StringC1ERK9Printable+0x30>)
   d5326:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5328:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d532a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d532c:	f7ff ff30 	bl	d5190 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d5330:	682b      	ldr	r3, [r5, #0]
   d5332:	a901      	add	r1, sp, #4
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	4628      	mov	r0, r5
   d5338:	4798      	blx	r3
}
   d533a:	4620      	mov	r0, r4
   d533c:	b005      	add	sp, #20
   d533e:	bd30      	pop	{r4, r5, pc}
   d5340:	000d7108 	.word	0x000d7108

000d5344 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5344:	4b05      	ldr	r3, [pc, #20]	; (d535c <_GLOBAL__sub_I_System+0x18>)
   d5346:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d534a:	2000      	movs	r0, #0
   d534c:	805a      	strh	r2, [r3, #2]
   d534e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5352:	7018      	strb	r0, [r3, #0]
   d5354:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5356:	f7ff b9c7 	b.w	d46e8 <set_system_mode>
   d535a:	bf00      	nop
   d535c:	2003e5d4 	.word	0x2003e5d4

000d5360 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5360:	4b02      	ldr	r3, [pc, #8]	; (d536c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5362:	681a      	ldr	r2, [r3, #0]
   d5364:	4b02      	ldr	r3, [pc, #8]	; (d5370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5366:	601a      	str	r2, [r3, #0]
   d5368:	4770      	bx	lr
   d536a:	bf00      	nop
   d536c:	2003e360 	.word	0x2003e360
   d5370:	2003e5dc 	.word	0x2003e5dc

000d5374 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5374:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5376:	6804      	ldr	r4, [r0, #0]
   d5378:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d537a:	46a4      	mov	ip, r4
    }
   d537c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5380:	4760      	bx	ip

000d5382 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5382:	6803      	ldr	r3, [r0, #0]
   d5384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5386:	4718      	bx	r3

000d5388 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5388:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d538a:	4770      	bx	lr

000d538c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d538c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d538e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5390:	1a10      	subs	r0, r2, r0
   d5392:	4770      	bx	lr

000d5394 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5394:	b513      	push	{r0, r1, r4, lr}
   d5396:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5398:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d539a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d539e:	68d4      	ldr	r4, [r2, #12]
   d53a0:	4619      	mov	r1, r3
   d53a2:	2201      	movs	r2, #1
   d53a4:	47a0      	blx	r4
}
   d53a6:	b002      	add	sp, #8
   d53a8:	bd10      	pop	{r4, pc}

000d53aa <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d53aa:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d53ac:	6803      	ldr	r3, [r0, #0]
   d53ae:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d53b0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d53b2:	4798      	blx	r3
   d53b4:	b128      	cbz	r0, d53c2 <_ZN3UDP4readEv+0x18>
   d53b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d53b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d53ba:	1c59      	adds	r1, r3, #1
   d53bc:	86e1      	strh	r1, [r4, #54]	; 0x36
   d53be:	5cd0      	ldrb	r0, [r2, r3]
   d53c0:	bd10      	pop	{r4, pc}
   d53c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d53c6:	bd10      	pop	{r4, pc}

000d53c8 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d53c8:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d53ca:	6803      	ldr	r3, [r0, #0]
   d53cc:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d53ce:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d53d0:	4798      	blx	r3
   d53d2:	b118      	cbz	r0, d53dc <_ZN3UDP4peekEv+0x14>
   d53d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d53d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d53d8:	5cd0      	ldrb	r0, [r2, r3]
   d53da:	bd10      	pop	{r4, pc}
   d53dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d53e0:	bd10      	pop	{r4, pc}

000d53e2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d53e2:	4770      	bx	lr

000d53e4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d53e4:	b410      	push	{r4}
   d53e6:	4603      	mov	r3, r0
   d53e8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d53ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d53ec:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d53ee:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d53f0:	6803      	ldr	r3, [r0, #0]
   d53f2:	1a52      	subs	r2, r2, r1
   d53f4:	68db      	ldr	r3, [r3, #12]
   d53f6:	4421      	add	r1, r4
}
   d53f8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d53fc:	4718      	bx	r3

000d53fe <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d53fe:	f1a0 0010 	sub.w	r0, r0, #16
   d5402:	f7ff bfef 	b.w	d53e4 <_ZNK3UDP7printToER5Print>

000d5406 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5406:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5408:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d540a:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d540c:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5410:	4604      	mov	r4, r0
   d5412:	460f      	mov	r7, r1
   d5414:	4615      	mov	r5, r2
    stop();
   d5416:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5418:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d541a:	4632      	mov	r2, r6
   d541c:	2100      	movs	r1, #0
   d541e:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5420:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5422:	f001 fd0c 	bl	d6e3e <memset>
    saddr.sin6_len = sizeof(saddr);
   d5426:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d542a:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d542c:	260a      	movs	r6, #10
   d542e:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5432:	f7ff f889 	bl	d4548 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5436:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5438:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d543c:	2102      	movs	r1, #2
   d543e:	4630      	mov	r0, r6
   d5440:	f7ff f8c2 	bl	d45c8 <sock_socket>

    if (_sock < 0) {
   d5444:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5446:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5448:	db24      	blt.n	d5494 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d544a:	2204      	movs	r2, #4
   d544c:	9200      	str	r2, [sp, #0]
   d544e:	ab02      	add	r3, sp, #8
   d5450:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5454:	f7ff f898 	bl	d4588 <sock_setsockopt>
   d5458:	b9e0      	cbnz	r0, d5494 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d545a:	b195      	cbz	r5, d5482 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d545c:	9003      	str	r0, [sp, #12]
   d545e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5462:	a903      	add	r1, sp, #12
   d5464:	b2e8      	uxtb	r0, r5
   d5466:	f7ff f82f 	bl	d44c8 <if_index_to_name>
   d546a:	b998      	cbnz	r0, d5494 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d546c:	2306      	movs	r3, #6
   d546e:	9300      	str	r3, [sp, #0]
   d5470:	f241 020b 	movw	r2, #4107	; 0x100b
   d5474:	ab03      	add	r3, sp, #12
   d5476:	f640 71ff 	movw	r1, #4095	; 0xfff
   d547a:	6960      	ldr	r0, [r4, #20]
   d547c:	f7ff f884 	bl	d4588 <sock_setsockopt>
   d5480:	b940      	cbnz	r0, d5494 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5482:	221c      	movs	r2, #28
   d5484:	a905      	add	r1, sp, #20
   d5486:	6960      	ldr	r0, [r4, #20]
   d5488:	f7ff f876 	bl	d4578 <sock_bind>
   d548c:	b910      	cbnz	r0, d5494 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d548e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5490:	2001      	movs	r0, #1
   d5492:	e004      	b.n	d549e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5494:	6823      	ldr	r3, [r4, #0]
   d5496:	4620      	mov	r0, r4
   d5498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d549a:	4798      	blx	r3
   d549c:	2000      	movs	r0, #0
    }
    return bound;
}
   d549e:	b00d      	add	sp, #52	; 0x34
   d54a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54a2 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d54a2:	b510      	push	{r4, lr}
   d54a4:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d54a6:	6940      	ldr	r0, [r0, #20]
   d54a8:	2800      	cmp	r0, #0
   d54aa:	db01      	blt.n	d54b0 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d54ac:	f7ff f874 	bl	d4598 <sock_close>
    }

    _sock = -1;
   d54b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d54b4:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d54b6:	2300      	movs	r3, #0
   d54b8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d54ba:	8723      	strh	r3, [r4, #56]	; 0x38
   d54bc:	bd10      	pop	{r4, pc}

000d54be <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d54be:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d54c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d54c2:	4605      	mov	r5, r0
   d54c4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d54c6:	b113      	cbz	r3, d54ce <_ZN3UDP5writeEPKhj+0x10>
   d54c8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d54ca:	1a24      	subs	r4, r4, r0
   d54cc:	e000      	b.n	d54d0 <_ZN3UDP5writeEPKhj+0x12>
   d54ce:	461c      	mov	r4, r3
   d54d0:	4294      	cmp	r4, r2
   d54d2:	bf28      	it	cs
   d54d4:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d54d6:	4622      	mov	r2, r4
   d54d8:	4418      	add	r0, r3
   d54da:	f001 fca5 	bl	d6e28 <memcpy>
    _offset += size;
   d54de:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d54e0:	4423      	add	r3, r4
   d54e2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd38      	pop	{r3, r4, r5, pc}

000d54e8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d54e8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d54ea:	6803      	ldr	r3, [r0, #0]
   d54ec:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d54ee:	4604      	mov	r4, r0
   d54f0:	460e      	mov	r6, r1
   d54f2:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d54f4:	4798      	blx	r3
   d54f6:	b188      	cbz	r0, d551c <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d54f8:	6823      	ldr	r3, [r4, #0]
   d54fa:	4620      	mov	r0, r4
   d54fc:	691b      	ldr	r3, [r3, #16]
   d54fe:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5500:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5502:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5504:	4285      	cmp	r5, r0
   d5506:	bfa8      	it	ge
   d5508:	4605      	movge	r5, r0
   d550a:	4419      	add	r1, r3
   d550c:	462a      	mov	r2, r5
   d550e:	4630      	mov	r0, r6
   d5510:	f001 fc8a 	bl	d6e28 <memcpy>
        _offset += read;
   d5514:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5516:	442b      	add	r3, r5
   d5518:	86e3      	strh	r3, [r4, #54]	; 0x36
   d551a:	e001      	b.n	d5520 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d551c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5520:	4628      	mov	r0, r5
   d5522:	bd70      	pop	{r4, r5, r6, pc}

000d5524 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5524:	b570      	push	{r4, r5, r6, lr}
   d5526:	4604      	mov	r4, r0
   d5528:	4b05      	ldr	r3, [pc, #20]	; (d5540 <_ZN3UDP8remoteIPEv+0x1c>)
   d552a:	f844 3b04 	str.w	r3, [r4], #4
   d552e:	f101 0520 	add.w	r5, r1, #32
   d5532:	4606      	mov	r6, r0
   d5534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5538:	682b      	ldr	r3, [r5, #0]
   d553a:	7023      	strb	r3, [r4, #0]
   d553c:	4630      	mov	r0, r6
   d553e:	bd70      	pop	{r4, r5, r6, pc}
   d5540:	000d6f70 	.word	0x000d6f70

000d5544 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5544:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5546:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5548:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d554a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d554c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d554e:	4a0a      	ldr	r2, [pc, #40]	; (d5578 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5550:	9202      	str	r2, [sp, #8]
   d5552:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5554:	468e      	mov	lr, r1
   d5556:	4606      	mov	r6, r0
   d5558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d555a:	ac03      	add	r4, sp, #12
   d555c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d555e:	682b      	ldr	r3, [r5, #0]
   d5560:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5562:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5566:	9300      	str	r3, [sp, #0]
   d5568:	4662      	mov	r2, ip
   d556a:	ab02      	add	r3, sp, #8
   d556c:	4671      	mov	r1, lr
   d556e:	4630      	mov	r0, r6
   d5570:	47b8      	blx	r7
    }
   d5572:	b009      	add	sp, #36	; 0x24
   d5574:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5576:	bf00      	nop
   d5578:	000d6f70 	.word	0x000d6f70

000d557c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d557c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d557e:	6803      	ldr	r3, [r0, #0]
   d5580:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5584:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5586:	4b0d      	ldr	r3, [pc, #52]	; (d55bc <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5588:	b089      	sub	sp, #36	; 0x24
   d558a:	f100 0620 	add.w	r6, r0, #32
   d558e:	4604      	mov	r4, r0
   d5590:	9302      	str	r3, [sp, #8]
   d5592:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5594:	ad03      	add	r5, sp, #12
   d5596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5598:	6833      	ldr	r3, [r6, #0]
   d559a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d559c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d559e:	9300      	str	r3, [sp, #0]
   d55a0:	4672      	mov	r2, lr
   d55a2:	ab02      	add	r3, sp, #8
   d55a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d55a6:	4620      	mov	r0, r4
   d55a8:	47b8      	blx	r7
    flush(); // wait for send to complete
   d55aa:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d55ac:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d55ae:	69db      	ldr	r3, [r3, #28]
   d55b0:	4620      	mov	r0, r4
   d55b2:	4798      	blx	r3
    return result;
}
   d55b4:	4628      	mov	r0, r5
   d55b6:	b009      	add	sp, #36	; 0x24
   d55b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55ba:	bf00      	nop
   d55bc:	000d6f70 	.word	0x000d6f70

000d55c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d55c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d55c2:	7843      	ldrb	r3, [r0, #1]
   d55c4:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d55c6:	b08d      	sub	sp, #52	; 0x34
   d55c8:	4605      	mov	r5, r0
   d55ca:	460c      	mov	r4, r1
   d55cc:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d55ce:	d101      	bne.n	d55d4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d55d0:	1d01      	adds	r1, r0, #4
   d55d2:	e033      	b.n	d563c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d55d4:	2b0a      	cmp	r3, #10
   d55d6:	d135      	bne.n	d5644 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d55d8:	2211      	movs	r2, #17
   d55da:	2100      	movs	r1, #0
   d55dc:	a801      	add	r0, sp, #4
   d55de:	f001 fc2e 	bl	d6e3e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d55e2:	68ab      	ldr	r3, [r5, #8]
   d55e4:	b943      	cbnz	r3, d55f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d55e6:	68eb      	ldr	r3, [r5, #12]
   d55e8:	b933      	cbnz	r3, d55f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d55ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d55ee:	692e      	ldr	r6, [r5, #16]
   d55f0:	f7fe ff9a 	bl	d4528 <inet_htonl>
   d55f4:	4286      	cmp	r6, r0
   d55f6:	d01f      	beq.n	d5638 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55f8:	f105 0308 	add.w	r3, r5, #8
   d55fc:	ae01      	add	r6, sp, #4
   d55fe:	f105 0e18 	add.w	lr, r5, #24
   d5602:	6818      	ldr	r0, [r3, #0]
   d5604:	6859      	ldr	r1, [r3, #4]
   d5606:	4632      	mov	r2, r6
   d5608:	c203      	stmia	r2!, {r0, r1}
   d560a:	3308      	adds	r3, #8
   d560c:	4573      	cmp	r3, lr
   d560e:	4616      	mov	r6, r2
   d5610:	d1f7      	bne.n	d5602 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5612:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5614:	a901      	add	r1, sp, #4
   d5616:	a806      	add	r0, sp, #24
   d5618:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d561a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d561e:	f7ff fa5d 	bl	d4adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5622:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5624:	3404      	adds	r4, #4
   d5626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5628:	6833      	ldr	r3, [r6, #0]
   d562a:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d562c:	b157      	cbz	r7, d5644 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d562e:	8868      	ldrh	r0, [r5, #2]
   d5630:	f7fe ff82 	bl	d4538 <inet_ntohs>
   d5634:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5636:	e005      	b.n	d5644 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5638:	f105 0114 	add.w	r1, r5, #20
   d563c:	4620      	mov	r0, r4
   d563e:	f7ff fa82 	bl	d4b46 <_ZN9IPAddressaSEPKh>
   d5642:	e7f3      	b.n	d562c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5644:	b00d      	add	sp, #52	; 0x34
   d5646:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5648 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d564c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d564e:	ab0e      	add	r3, sp, #56	; 0x38
   d5650:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5652:	4606      	mov	r6, r0
   d5654:	4617      	mov	r7, r2
   d5656:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5658:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d565c:	462a      	mov	r2, r5
   d565e:	4629      	mov	r1, r5
   d5660:	f7fe ff82 	bl	d4568 <netdb_getaddrinfo>
   d5664:	2800      	cmp	r0, #0
   d5666:	db1f      	blt.n	d56a8 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5668:	9b01      	ldr	r3, [sp, #4]
   d566a:	b1fb      	cbz	r3, d56ac <_ZN3UDP11beginPacketEPKct+0x64>
   d566c:	695b      	ldr	r3, [r3, #20]
   d566e:	b1eb      	cbz	r3, d56ac <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5670:	a802      	add	r0, sp, #8
   d5672:	f7ff fa25 	bl	d4ac0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5676:	9b01      	ldr	r3, [sp, #4]
   d5678:	462a      	mov	r2, r5
   d567a:	6958      	ldr	r0, [r3, #20]
   d567c:	a902      	add	r1, sp, #8
   d567e:	f7ff ff9f 	bl	d55c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5682:	a802      	add	r0, sp, #8
   d5684:	f7ff fa3c 	bl	d4b00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5688:	b180      	cbz	r0, d56ac <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d568a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d568c:	ad03      	add	r5, sp, #12
   d568e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5692:	4b0b      	ldr	r3, [pc, #44]	; (d56c0 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5694:	9308      	str	r3, [sp, #32]
   d5696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5698:	ac09      	add	r4, sp, #36	; 0x24
   d569a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d569c:	682b      	ldr	r3, [r5, #0]
   d569e:	7023      	strb	r3, [r4, #0]
   d56a0:	463a      	mov	r2, r7
   d56a2:	a908      	add	r1, sp, #32
   d56a4:	4630      	mov	r0, r6
   d56a6:	47c0      	blx	r8
   d56a8:	4604      	mov	r4, r0
   d56aa:	e001      	b.n	d56b0 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d56ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d56b0:	9801      	ldr	r0, [sp, #4]
   d56b2:	f7fe ff51 	bl	d4558 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d56b6:	4620      	mov	r0, r4
   d56b8:	b00e      	add	sp, #56	; 0x38
   d56ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56be:	bf00      	nop
   d56c0:	000d6f70 	.word	0x000d6f70

000d56c4 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d56c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d56c8:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d56cc:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d56d0:	b098      	sub	sp, #96	; 0x60
   d56d2:	4605      	mov	r5, r0
   d56d4:	460c      	mov	r4, r1
   d56d6:	4617      	mov	r7, r2
   d56d8:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d56da:	db00      	blt.n	d56de <_ZN3UDP13receivePacketEPhjm+0x1a>
   d56dc:	b911      	cbnz	r1, d56e4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d56de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d56e2:	e04e      	b.n	d5782 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d56e4:	f04f 0a1c 	mov.w	sl, #28
   d56e8:	ae09      	add	r6, sp, #36	; 0x24
   d56ea:	4652      	mov	r2, sl
   d56ec:	2100      	movs	r1, #0
   d56ee:	4630      	mov	r0, r6
   d56f0:	f001 fba5 	bl	d6e3e <memset>
        socklen_t slen = sizeof(saddr);
   d56f4:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d56f8:	f1b9 0f00 	cmp.w	r9, #0
   d56fc:	d014      	beq.n	d5728 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d56fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5702:	fbb9 f1f2 	udiv	r1, r9, r2
   d5706:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d5708:	fb02 9111 	mls	r1, r2, r1, r9
   d570c:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d570e:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5710:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5712:	9300      	str	r3, [sp, #0]
   d5714:	f241 0206 	movw	r2, #4102	; 0x1006
   d5718:	ab10      	add	r3, sp, #64	; 0x40
   d571a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d571e:	4640      	mov	r0, r8
   d5720:	f7fe ff32 	bl	d4588 <sock_setsockopt>
            if (ret) {
   d5724:	b108      	cbz	r0, d572a <_ZN3UDP13receivePacketEPhjm+0x66>
   d5726:	e02c      	b.n	d5782 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5728:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d572a:	ab04      	add	r3, sp, #16
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	4621      	mov	r1, r4
   d5730:	4603      	mov	r3, r0
   d5732:	9600      	str	r6, [sp, #0]
   d5734:	463a      	mov	r2, r7
   d5736:	6968      	ldr	r0, [r5, #20]
   d5738:	f7fe ff36 	bl	d45a8 <sock_recvfrom>
        if (ret >= 0) {
   d573c:	1e04      	subs	r4, r0, #0
   d573e:	db1f      	blt.n	d5780 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5740:	f105 071c 	add.w	r7, r5, #28
   d5744:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5748:	4630      	mov	r0, r6
   d574a:	4639      	mov	r1, r7
   d574c:	f7ff ff38 	bl	d55c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5750:	2600      	movs	r6, #0
   d5752:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d5754:	4639      	mov	r1, r7
   d5756:	a805      	add	r0, sp, #20
   d5758:	9310      	str	r3, [sp, #64]	; 0x40
   d575a:	9611      	str	r6, [sp, #68]	; 0x44
   d575c:	f7ff fdd8 	bl	d5310 <_ZN6StringC1ERK9Printable>
   d5760:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d5762:	9303      	str	r3, [sp, #12]
   d5764:	9b05      	ldr	r3, [sp, #20]
   d5766:	9302      	str	r3, [sp, #8]
   d5768:	4b07      	ldr	r3, [pc, #28]	; (d5788 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d576a:	9300      	str	r3, [sp, #0]
   d576c:	2001      	movs	r0, #1
   d576e:	9401      	str	r4, [sp, #4]
   d5770:	4633      	mov	r3, r6
   d5772:	aa10      	add	r2, sp, #64	; 0x40
   d5774:	4905      	ldr	r1, [pc, #20]	; (d578c <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d5776:	f7fe ffaf 	bl	d46d8 <log_message>
   d577a:	a805      	add	r0, sp, #20
   d577c:	f7ff fcea 	bl	d5154 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5780:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5782:	b018      	add	sp, #96	; 0x60
   d5784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5788:	000d7141 	.word	0x000d7141
   d578c:	000d70a5 	.word	0x000d70a5

000d5790 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5790:	b538      	push	{r3, r4, r5, lr}
   d5792:	4605      	mov	r5, r0
   d5794:	4614      	mov	r4, r2
   d5796:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5798:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d579a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d579c:	d111      	bne.n	d57c2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d579e:	231c      	movs	r3, #28
   d57a0:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d57a2:	230a      	movs	r3, #10
   d57a4:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d57a6:	f7fe fecf 	bl	d4548 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d57aa:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d57ac:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d57b0:	1d2b      	adds	r3, r5, #4
   d57b2:	3514      	adds	r5, #20
   d57b4:	f853 2b04 	ldr.w	r2, [r3], #4
   d57b8:	f844 2b04 	str.w	r2, [r4], #4
   d57bc:	42ab      	cmp	r3, r5
   d57be:	d1f9      	bne.n	d57b4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d57c0:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d57c2:	2b04      	cmp	r3, #4
   d57c4:	d108      	bne.n	d57d8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x48>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d57c6:	2310      	movs	r3, #16
   d57c8:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d57ca:	2302      	movs	r3, #2
   d57cc:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d57ce:	f7fe febb 	bl	d4548 <inet_htons>
   d57d2:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   d57d4:	686b      	ldr	r3, [r5, #4]
   d57d6:	6063      	str	r3, [r4, #4]
   d57d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57dc <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d57dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57e0:	4698      	mov	r8, r3
   d57e2:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d57e4:	2320      	movs	r3, #32
   d57e6:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d57e8:	4682      	mov	sl, r0
   d57ea:	468b      	mov	fp, r1
   d57ec:	a804      	add	r0, sp, #16
   d57ee:	4641      	mov	r1, r8
   d57f0:	4616      	mov	r6, r2
   d57f2:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d57f6:	9308      	str	r3, [sp, #32]
   d57f8:	9409      	str	r4, [sp, #36]	; 0x24
   d57fa:	f7ff fd89 	bl	d5310 <_ZN6StringC1ERK9Printable>
   d57fe:	9b04      	ldr	r3, [sp, #16]
   d5800:	9302      	str	r3, [sp, #8]
   d5802:	ad08      	add	r5, sp, #32
   d5804:	4b15      	ldr	r3, [pc, #84]	; (d585c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d5806:	4916      	ldr	r1, [pc, #88]	; (d5860 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d5808:	9300      	str	r3, [sp, #0]
   d580a:	462a      	mov	r2, r5
   d580c:	4623      	mov	r3, r4
   d580e:	2001      	movs	r0, #1
   d5810:	f8cd 900c 	str.w	r9, [sp, #12]
   d5814:	9601      	str	r6, [sp, #4]
   d5816:	f7fe ff5f 	bl	d46d8 <log_message>
	sockaddr_storage s = {};
   d581a:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d581c:	a804      	add	r0, sp, #16
   d581e:	f7ff fc99 	bl	d5154 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5822:	463a      	mov	r2, r7
   d5824:	4621      	mov	r1, r4
   d5826:	4628      	mov	r0, r5
   d5828:	f001 fb09 	bl	d6e3e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d582c:	462a      	mov	r2, r5
   d582e:	4649      	mov	r1, r9
   d5830:	4640      	mov	r0, r8
   d5832:	f7ff ffad 	bl	d5790 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5836:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d583a:	b14b      	cbz	r3, d5850 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d583c:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d5840:	4623      	mov	r3, r4
   d5842:	4632      	mov	r2, r6
   d5844:	4659      	mov	r1, fp
   d5846:	f8da 0014 	ldr.w	r0, [sl, #20]
   d584a:	f7fe feb5 	bl	d45b8 <sock_sendto>
   d584e:	e001      	b.n	d5854 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5854:	b011      	add	sp, #68	; 0x44
   d5856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d585a:	bf00      	nop
   d585c:	000d715e 	.word	0x000d715e
   d5860:	000d70a5 	.word	0x000d70a5

000d5864 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5864:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5866:	b091      	sub	sp, #68	; 0x44
   d5868:	460c      	mov	r4, r1
   d586a:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d586c:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d586e:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5870:	a809      	add	r0, sp, #36	; 0x24
   d5872:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5874:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5876:	f001 fae2 	bl	d6e3e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d587a:	aa09      	add	r2, sp, #36	; 0x24
   d587c:	2100      	movs	r1, #0
   d587e:	4620      	mov	r0, r4
   d5880:	f7ff ff86 	bl	d5790 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5884:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5888:	2b02      	cmp	r3, #2
   d588a:	d12e      	bne.n	d58ea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d588c:	2300      	movs	r3, #0
   d588e:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5892:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5894:	b1dd      	cbz	r5, d58ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5896:	a902      	add	r1, sp, #8
   d5898:	4628      	mov	r0, r5
   d589a:	f7fe fe1d 	bl	d44d8 <if_get_by_index>
   d589e:	b9b0      	cbnz	r0, d58ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d58a0:	a910      	add	r1, sp, #64	; 0x40
   d58a2:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d58a6:	9802      	ldr	r0, [sp, #8]
   d58a8:	f7fe fe1e 	bl	d44e8 <if_get_addrs>
   d58ac:	b960      	cbnz	r0, d58c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d58ae:	9b03      	ldr	r3, [sp, #12]
   d58b0:	b153      	cbz	r3, d58c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d58b2:	68da      	ldr	r2, [r3, #12]
   d58b4:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d58b6:	7851      	ldrb	r1, [r2, #1]
   d58b8:	2902      	cmp	r1, #2
   d58ba:	d103      	bne.n	d58c4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d58bc:	6852      	ldr	r2, [r2, #4]
   d58be:	b10a      	cbz	r2, d58c4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d58c0:	9205      	str	r2, [sp, #20]
   d58c2:	e001      	b.n	d58c8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	e7f3      	b.n	d58b0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d58c8:	9803      	ldr	r0, [sp, #12]
   d58ca:	f7fe fe15 	bl	d44f8 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d58ce:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d58d0:	f04f 0308 	mov.w	r3, #8
   d58d4:	9300      	str	r3, [sp, #0]
   d58d6:	bf18      	it	ne
   d58d8:	2203      	movne	r2, #3
   d58da:	ab04      	add	r3, sp, #16
   d58dc:	bf08      	it	eq
   d58de:	2204      	moveq	r2, #4
   d58e0:	2100      	movs	r1, #0
   d58e2:	4630      	mov	r0, r6
   d58e4:	f7fe fe50 	bl	d4588 <sock_setsockopt>
   d58e8:	e01e      	b.n	d5928 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d58ea:	2b0a      	cmp	r3, #10
   d58ec:	d11a      	bne.n	d5924 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d58ee:	ac04      	add	r4, sp, #16
   d58f0:	2214      	movs	r2, #20
   d58f2:	2100      	movs	r1, #0
   d58f4:	4620      	mov	r0, r4
   d58f6:	f001 faa2 	bl	d6e3e <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d58fa:	ab0b      	add	r3, sp, #44	; 0x2c
   d58fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d58fe:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5904:	f04f 0314 	mov.w	r3, #20
   d5908:	9300      	str	r3, [sp, #0]
   d590a:	bf18      	it	ne
   d590c:	220c      	movne	r2, #12
   d590e:	4623      	mov	r3, r4
   d5910:	bf08      	it	eq
   d5912:	220d      	moveq	r2, #13
   d5914:	2129      	movs	r1, #41	; 0x29
   d5916:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5918:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d591a:	f7fe fe35 	bl	d4588 <sock_setsockopt>
   d591e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5922:	e001      	b.n	d5928 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5928:	b011      	add	sp, #68	; 0x44
   d592a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d592c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d592c:	b538      	push	{r3, r4, r5, lr}
   d592e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5932:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5934:	4b0b      	ldr	r3, [pc, #44]	; (d5964 <_ZN3UDPC1Ev+0x38>)
   d5936:	f103 0208 	add.w	r2, r3, #8
   d593a:	336c      	adds	r3, #108	; 0x6c
   d593c:	2500      	movs	r5, #0
   d593e:	6103      	str	r3, [r0, #16]
   d5940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5944:	4604      	mov	r4, r0
   d5946:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5948:	6002      	str	r2, [r0, #0]
   d594a:	6143      	str	r3, [r0, #20]
   d594c:	301c      	adds	r0, #28
   d594e:	f7ff f8b7 	bl	d4ac0 <_ZN9IPAddressC1Ev>
   d5952:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5956:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5958:	8725      	strh	r5, [r4, #56]	; 0x38
   d595a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d595c:	6423      	str	r3, [r4, #64]	; 0x40
   d595e:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5960:	4620      	mov	r0, r4
   d5962:	bd38      	pop	{r3, r4, r5, pc}
   d5964:	000d718c 	.word	0x000d718c

000d5968 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5968:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d596a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d596e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5970:	b11b      	cbz	r3, d597a <_ZN3UDP13releaseBufferEv+0x12>
   d5972:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5974:	b108      	cbz	r0, d597a <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5976:	f7fe fb92 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d597a:	2300      	movs	r3, #0
   d597c:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d597e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5982:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5984:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5986:	8723      	strh	r3, [r4, #56]	; 0x38
   d5988:	bd10      	pop	{r4, pc}

000d598a <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d598a:	b570      	push	{r4, r5, r6, lr}
   d598c:	4604      	mov	r4, r0
   d598e:	4616      	mov	r6, r2
   d5990:	460d      	mov	r5, r1
    releaseBuffer();
   d5992:	f7ff ffe9 	bl	d5968 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5996:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5998:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d599a:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d599c:	b93e      	cbnz	r6, d59ae <_ZN3UDP9setBufferEjPh+0x24>
   d599e:	b135      	cbz	r5, d59ae <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d59a0:	4628      	mov	r0, r5
   d59a2:	f7fe fb7a 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d59a6:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d59a8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d59aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d59ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d59b0:	b103      	cbz	r3, d59b4 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d59b2:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d59b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d59b6:	3000      	adds	r0, #0
   d59b8:	bf18      	it	ne
   d59ba:	2001      	movne	r0, #1
   d59bc:	bd70      	pop	{r4, r5, r6, pc}

000d59be <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d59be:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d59c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d59c2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d59c4:	b91a      	cbnz	r2, d59ce <_ZN3UDP11parsePacketEm+0x10>
   d59c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d59c8:	b109      	cbz	r1, d59ce <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d59ca:	f7ff ffde 	bl	d598a <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d59ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d59d0:	2300      	movs	r3, #0
   d59d2:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d59d4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d59d6:	b141      	cbz	r1, d59ea <_ZN3UDP11parsePacketEm+0x2c>
   d59d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d59da:	b132      	cbz	r2, d59ea <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d59dc:	6820      	ldr	r0, [r4, #0]
   d59de:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d59e0:	4620      	mov	r0, r4
   d59e2:	47a8      	blx	r5
        if (result > 0) {
   d59e4:	2800      	cmp	r0, #0
            _total = result;
   d59e6:	bfc8      	it	gt
   d59e8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d59ea:	6823      	ldr	r3, [r4, #0]
   d59ec:	4620      	mov	r0, r4
   d59ee:	691b      	ldr	r3, [r3, #16]
}
   d59f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d59f4:	4718      	bx	r3
	...

000d59f8 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d59f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59fa:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d59fc:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d59fe:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5a00:	2600      	movs	r6, #0
   d5a02:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5a04:	4617      	mov	r7, r2
   d5a06:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5a08:	9308      	str	r3, [sp, #32]
   d5a0a:	9609      	str	r6, [sp, #36]	; 0x24
   d5a0c:	f7ff fc80 	bl	d5310 <_ZN6StringC1ERK9Printable>
   d5a10:	9b04      	ldr	r3, [sp, #16]
   d5a12:	9301      	str	r3, [sp, #4]
   d5a14:	4b10      	ldr	r3, [pc, #64]	; (d5a58 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d5a16:	9300      	str	r3, [sp, #0]
   d5a18:	aa08      	add	r2, sp, #32
   d5a1a:	4633      	mov	r3, r6
   d5a1c:	490f      	ldr	r1, [pc, #60]	; (d5a5c <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5a1e:	9702      	str	r7, [sp, #8]
   d5a20:	2001      	movs	r0, #1
   d5a22:	f7fe fe59 	bl	d46d8 <log_message>
   d5a26:	a804      	add	r0, sp, #16
   d5a28:	f7ff fb94 	bl	d5154 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5a2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d5a2e:	b922      	cbnz	r2, d5a3a <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d5a30:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d5a32:	b111      	cbz	r1, d5a3a <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d5a34:	4628      	mov	r0, r5
   d5a36:	f7ff ffa8 	bl	d598a <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a3a:	3404      	adds	r4, #4
   d5a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5a3e:	f105 0620 	add.w	r6, r5, #32
   d5a42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5a44:	6823      	ldr	r3, [r4, #0]
   d5a46:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5a48:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5a4a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5a4c:	2300      	movs	r3, #0
   d5a4e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5a50:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5a52:	b011      	add	sp, #68	; 0x44
   d5a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a56:	bf00      	nop
   d5a58:	000d7178 	.word	0x000d7178
   d5a5c:	000d70a5 	.word	0x000d70a5

000d5a60 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5a60:	b510      	push	{r4, lr}
   d5a62:	4b07      	ldr	r3, [pc, #28]	; (d5a80 <_ZN3UDPD1Ev+0x20>)
   d5a64:	f103 0208 	add.w	r2, r3, #8
   d5a68:	336c      	adds	r3, #108	; 0x6c
   d5a6a:	4604      	mov	r4, r0
   d5a6c:	6002      	str	r2, [r0, #0]
   d5a6e:	6103      	str	r3, [r0, #16]
   d5a70:	f7ff fd17 	bl	d54a2 <_ZN3UDP4stopEv>
   d5a74:	4620      	mov	r0, r4
   d5a76:	f7ff ff77 	bl	d5968 <_ZN3UDP13releaseBufferEv>
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	bd10      	pop	{r4, pc}
   d5a7e:	bf00      	nop
   d5a80:	000d718c 	.word	0x000d718c

000d5a84 <_ZN3UDPD0Ev>:
   d5a84:	b510      	push	{r4, lr}
   d5a86:	4604      	mov	r4, r0
   d5a88:	f7ff ffea 	bl	d5a60 <_ZN3UDPD1Ev>
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	f7fe fb06 	bl	d409e <_ZdlPv>
   d5a92:	4620      	mov	r0, r4
   d5a94:	bd10      	pop	{r4, pc}

000d5a96 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5a96:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5a98:	6940      	ldr	r0, [r0, #20]
   d5a9a:	2800      	cmp	r0, #0
   d5a9c:	db04      	blt.n	d5aa8 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5a9e:	2301      	movs	r3, #1
   d5aa0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5aa4:	f7ff bede 	b.w	d5864 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5aac:	4770      	bx	lr

000d5aae <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5aae:	4770      	bx	lr

000d5ab0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ab0:	7441      	strb	r1, [r0, #17]
   d5ab2:	4770      	bx	lr

000d5ab4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5ab4:	7c00      	ldrb	r0, [r0, #16]
   d5ab6:	f7fe bdd7 	b.w	d4668 <HAL_USART_Available_Data_For_Write>

000d5aba <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5aba:	7c00      	ldrb	r0, [r0, #16]
   d5abc:	f7fe bdac 	b.w	d4618 <HAL_USART_Available_Data>

000d5ac0 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5ac0:	7c00      	ldrb	r0, [r0, #16]
   d5ac2:	f7fe bdb9 	b.w	d4638 <HAL_USART_Peek_Data>

000d5ac6 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5ac6:	7c00      	ldrb	r0, [r0, #16]
   d5ac8:	f7fe bdae 	b.w	d4628 <HAL_USART_Read_Data>

000d5acc <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7fe bdbb 	b.w	d4648 <HAL_USART_Flush_Data>

000d5ad2 <_ZN11USARTSerialD0Ev>:
   d5ad2:	b510      	push	{r4, lr}
   d5ad4:	4604      	mov	r4, r0
   d5ad6:	f7fe fae2 	bl	d409e <_ZdlPv>
   d5ada:	4620      	mov	r0, r4
   d5adc:	bd10      	pop	{r4, pc}

000d5ade <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5ade:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ae0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5ae2:	4604      	mov	r4, r0
   d5ae4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ae6:	b925      	cbnz	r5, d5af2 <_ZN11USARTSerial5writeEh+0x14>
   d5ae8:	7c00      	ldrb	r0, [r0, #16]
   d5aea:	f7fe fdbd 	bl	d4668 <HAL_USART_Available_Data_For_Write>
   d5aee:	2800      	cmp	r0, #0
   d5af0:	dd05      	ble.n	d5afe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5af2:	4631      	mov	r1, r6
   d5af4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5afa:	f7fe bd85 	b.w	d4608 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5afe:	4628      	mov	r0, r5
   d5b00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b04:	b510      	push	{r4, lr}
   d5b06:	4604      	mov	r4, r0
   d5b08:	4608      	mov	r0, r1
   d5b0a:	4611      	mov	r1, r2
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	6062      	str	r2, [r4, #4]
   d5b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b14:	60a2      	str	r2, [r4, #8]
   d5b16:	4a05      	ldr	r2, [pc, #20]	; (d5b2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b18:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b1a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b1c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b20:	461a      	mov	r2, r3
   d5b22:	f7fe fd69 	bl	d45f8 <HAL_USART_Init>
}
   d5b26:	4620      	mov	r0, r4
   d5b28:	bd10      	pop	{r4, pc}
   d5b2a:	bf00      	nop
   d5b2c:	000d7204 	.word	0x000d7204

000d5b30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b30:	7c00      	ldrb	r0, [r0, #16]
   d5b32:	f7fe bd91 	b.w	d4658 <HAL_USART_Is_Enabled>
	...

000d5b38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b38:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b3a:	4d0c      	ldr	r5, [pc, #48]	; (d5b6c <_Z22__fetch_global_Serial1v+0x34>)
   d5b3c:	6829      	ldr	r1, [r5, #0]
   d5b3e:	f011 0401 	ands.w	r4, r1, #1
   d5b42:	d111      	bne.n	d5b68 <_Z22__fetch_global_Serial1v+0x30>
   d5b44:	4628      	mov	r0, r5
   d5b46:	f7fe faae 	bl	d40a6 <__cxa_guard_acquire>
   d5b4a:	b168      	cbz	r0, d5b68 <_Z22__fetch_global_Serial1v+0x30>
   d5b4c:	4a08      	ldr	r2, [pc, #32]	; (d5b70 <_Z22__fetch_global_Serial1v+0x38>)
   d5b4e:	4b09      	ldr	r3, [pc, #36]	; (d5b74 <_Z22__fetch_global_Serial1v+0x3c>)
   d5b50:	4809      	ldr	r0, [pc, #36]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b52:	4621      	mov	r1, r4
   d5b54:	f7ff ffd6 	bl	d5b04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b58:	4628      	mov	r0, r5
   d5b5a:	f7fe faa9 	bl	d40b0 <__cxa_guard_release>
   d5b5e:	4a07      	ldr	r2, [pc, #28]	; (d5b7c <_Z22__fetch_global_Serial1v+0x44>)
   d5b60:	4907      	ldr	r1, [pc, #28]	; (d5b80 <_Z22__fetch_global_Serial1v+0x48>)
   d5b62:	4805      	ldr	r0, [pc, #20]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b64:	f000 f9e2 	bl	d5f2c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b68:	4803      	ldr	r0, [pc, #12]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b6a:	bd38      	pop	{r3, r4, r5, pc}
   d5b6c:	2003e678 	.word	0x2003e678
   d5b70:	2003e67c 	.word	0x2003e67c
   d5b74:	2003e5f4 	.word	0x2003e5f4
   d5b78:	2003e5e0 	.word	0x2003e5e0
   d5b7c:	2003e368 	.word	0x2003e368
   d5b80:	000d5aaf 	.word	0x000d5aaf

000d5b84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b84:	7441      	strb	r1, [r0, #17]
   d5b86:	4770      	bx	lr

000d5b88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b88:	4770      	bx	lr

000d5b8a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5b8a:	2100      	movs	r1, #0
   d5b8c:	7c00      	ldrb	r0, [r0, #16]
   d5b8e:	f7fe bd8b 	b.w	d46a8 <HAL_USB_USART_Receive_Data>

000d5b92 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5b92:	2101      	movs	r1, #1
   d5b94:	7c00      	ldrb	r0, [r0, #16]
   d5b96:	f7fe bd87 	b.w	d46a8 <HAL_USB_USART_Receive_Data>

000d5b9a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5b9a:	7c00      	ldrb	r0, [r0, #16]
   d5b9c:	f7fe bd7c 	b.w	d4698 <HAL_USB_USART_Available_Data_For_Write>

000d5ba0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
   d5ba2:	f7fe bd71 	b.w	d4688 <HAL_USB_USART_Available_Data>

000d5ba6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5ba6:	b538      	push	{r3, r4, r5, lr}
   d5ba8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5baa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5bac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bae:	f7fe fd73 	bl	d4698 <HAL_USB_USART_Available_Data_For_Write>
   d5bb2:	2800      	cmp	r0, #0
   d5bb4:	dc01      	bgt.n	d5bba <_ZN9USBSerial5writeEh+0x14>
   d5bb6:	7c60      	ldrb	r0, [r4, #17]
   d5bb8:	b120      	cbz	r0, d5bc4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5bba:	4629      	mov	r1, r5
   d5bbc:	7c20      	ldrb	r0, [r4, #16]
   d5bbe:	f7fe fd7b 	bl	d46b8 <HAL_USB_USART_Send_Data>
    return 1;
   d5bc2:	2001      	movs	r0, #1
  }
  return 0;
}
   d5bc4:	bd38      	pop	{r3, r4, r5, pc}

000d5bc6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bc6:	7c00      	ldrb	r0, [r0, #16]
   d5bc8:	f7fe bd7e 	b.w	d46c8 <HAL_USB_USART_Flush_Data>

000d5bcc <_ZN9USBSerialD0Ev>:
   d5bcc:	b510      	push	{r4, lr}
   d5bce:	4604      	mov	r4, r0
   d5bd0:	f7fe fa65 	bl	d409e <_ZdlPv>
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	bd10      	pop	{r4, pc}

000d5bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bd8:	b510      	push	{r4, lr}
   d5bda:	4604      	mov	r4, r0
   d5bdc:	2300      	movs	r3, #0
   d5bde:	6063      	str	r3, [r4, #4]
   d5be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5be4:	60a3      	str	r3, [r4, #8]
   d5be6:	4b05      	ldr	r3, [pc, #20]	; (d5bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5be8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5bea:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bec:	4608      	mov	r0, r1
{
  _serial = serial;
   d5bee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5bf0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	f7fe fd40 	bl	d4678 <HAL_USB_USART_Init>
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	000d7234 	.word	0x000d7234

000d5c00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c02:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c06:	2100      	movs	r1, #0
   d5c08:	f001 f919 	bl	d6e3e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c0c:	4620      	mov	r0, r4
   d5c0e:	bd10      	pop	{r4, pc}

000d5c10 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c10:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c12:	4d0e      	ldr	r5, [pc, #56]	; (d5c4c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c14:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c16:	a801      	add	r0, sp, #4
   d5c18:	f7ff fff2 	bl	d5c00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c1c:	6829      	ldr	r1, [r5, #0]
   d5c1e:	f011 0401 	ands.w	r4, r1, #1
   d5c22:	d110      	bne.n	d5c46 <_Z16_fetch_usbserialv+0x36>
   d5c24:	4628      	mov	r0, r5
   d5c26:	f7fe fa3e 	bl	d40a6 <__cxa_guard_acquire>
   d5c2a:	b160      	cbz	r0, d5c46 <_Z16_fetch_usbserialv+0x36>
   d5c2c:	aa01      	add	r2, sp, #4
   d5c2e:	4621      	mov	r1, r4
   d5c30:	4807      	ldr	r0, [pc, #28]	; (d5c50 <_Z16_fetch_usbserialv+0x40>)
   d5c32:	f7ff ffd1 	bl	d5bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7fe fa3a 	bl	d40b0 <__cxa_guard_release>
   d5c3c:	4a05      	ldr	r2, [pc, #20]	; (d5c54 <_Z16_fetch_usbserialv+0x44>)
   d5c3e:	4906      	ldr	r1, [pc, #24]	; (d5c58 <_Z16_fetch_usbserialv+0x48>)
   d5c40:	4803      	ldr	r0, [pc, #12]	; (d5c50 <_Z16_fetch_usbserialv+0x40>)
   d5c42:	f000 f973 	bl	d5f2c <__aeabi_atexit>
	return _usbserial;
}
   d5c46:	4802      	ldr	r0, [pc, #8]	; (d5c50 <_Z16_fetch_usbserialv+0x40>)
   d5c48:	b007      	add	sp, #28
   d5c4a:	bd30      	pop	{r4, r5, pc}
   d5c4c:	2003e700 	.word	0x2003e700
   d5c50:	2003e704 	.word	0x2003e704
   d5c54:	2003e368 	.word	0x2003e368
   d5c58:	000d5b89 	.word	0x000d5b89

000d5c5c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5c5c:	b510      	push	{r4, lr}
   d5c5e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5c60:	f001 f907 	bl	d6e72 <strlen>
   d5c64:	3801      	subs	r0, #1
   d5c66:	1823      	adds	r3, r4, r0
   d5c68:	4620      	mov	r0, r4
	while(i<j){
   d5c6a:	4298      	cmp	r0, r3
   d5c6c:	d206      	bcs.n	d5c7c <_Z11str_reversePc+0x20>
		c = *i;
   d5c6e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5c70:	7819      	ldrb	r1, [r3, #0]
   d5c72:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5c76:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5c7a:	e7f6      	b.n	d5c6a <_Z11str_reversePc+0xe>
   d5c7c:	bd10      	pop	{r4, pc}

000d5c7e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5c7e:	b570      	push	{r4, r5, r6, lr}
   d5c80:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5c82:	1e91      	subs	r1, r2, #2
   d5c84:	2922      	cmp	r1, #34	; 0x22
   d5c86:	d820      	bhi.n	d5cca <ultoa+0x4c>
   d5c88:	4625      	mov	r5, r4
   d5c8a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c8c:	b910      	cbnz	r0, d5c94 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c8e:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c90:	2230      	movs	r2, #48	; 0x30
   d5c92:	e00e      	b.n	d5cb2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5c94:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5c98:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5c9c:	b2c1      	uxtb	r1, r0
   d5c9e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5ca2:	2809      	cmp	r0, #9
                *ptr += '0';
   d5ca4:	bf94      	ite	ls
   d5ca6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5ca8:	3157      	addhi	r1, #87	; 0x57
   d5caa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5cae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5cb0:	e7eb      	b.n	d5c8a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5cb2:	4299      	cmp	r1, r3
   d5cb4:	d202      	bcs.n	d5cbc <ultoa+0x3e>
            *ptr++ = '0';
   d5cb6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5cba:	e7fa      	b.n	d5cb2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5cbc:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5cbe:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5cc0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5cc2:	f7ff ffcb 	bl	d5c5c <_Z11str_reversePc>
	return buffer;
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5cca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5ccc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5cd0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5cd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5cd2:	4b0c      	ldr	r3, [pc, #48]	; (d5d04 <serialEventRun+0x34>)
   d5cd4:	b133      	cbz	r3, d5ce4 <serialEventRun+0x14>
   d5cd6:	f7ff ff9b 	bl	d5c10 <_Z16_fetch_usbserialv>
   d5cda:	6803      	ldr	r3, [r0, #0]
   d5cdc:	691b      	ldr	r3, [r3, #16]
   d5cde:	4798      	blx	r3
   d5ce0:	2800      	cmp	r0, #0
   d5ce2:	dc09      	bgt.n	d5cf8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ce4:	4b08      	ldr	r3, [pc, #32]	; (d5d08 <serialEventRun+0x38>)
   d5ce6:	b163      	cbz	r3, d5d02 <serialEventRun+0x32>
   d5ce8:	f7ff ff26 	bl	d5b38 <_Z22__fetch_global_Serial1v>
   d5cec:	6803      	ldr	r3, [r0, #0]
   d5cee:	691b      	ldr	r3, [r3, #16]
   d5cf0:	4798      	blx	r3
   d5cf2:	2800      	cmp	r0, #0
   d5cf4:	dc03      	bgt.n	d5cfe <serialEventRun+0x2e>
   d5cf6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5cf8:	f3af 8000 	nop.w
   d5cfc:	e7f2      	b.n	d5ce4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5cfe:	f3af 8000 	nop.w
   d5d02:	bd08      	pop	{r3, pc}
	...

000d5d0c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5d0c:	b508      	push	{r3, lr}
	serialEventRun();
   d5d0e:	f7ff ffdf 	bl	d5cd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d12:	f7fe fb51 	bl	d43b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d16:	4b01      	ldr	r3, [pc, #4]	; (d5d1c <_post_loop+0x10>)
   d5d18:	6018      	str	r0, [r3, #0]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	2003e71c 	.word	0x2003e71c

000d5d20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d20:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d22:	2300      	movs	r3, #0
   d5d24:	9300      	str	r3, [sp, #0]
   d5d26:	461a      	mov	r2, r3
   d5d28:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d2c:	f7fe fcf6 	bl	d471c <system_ctrl_set_result>
}
   d5d30:	b003      	add	sp, #12
   d5d32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d38 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5d38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5d3a:	8843      	ldrh	r3, [r0, #2]
   d5d3c:	2b0a      	cmp	r3, #10
   d5d3e:	d008      	beq.n	d5d52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5d40:	2b50      	cmp	r3, #80	; 0x50
   d5d42:	d109      	bne.n	d5d58 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5d44:	4b09      	ldr	r3, [pc, #36]	; (d5d6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5d46:	681b      	ldr	r3, [r3, #0]
   d5d48:	b13b      	cbz	r3, d5d5a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5d4a:	b003      	add	sp, #12
   d5d4c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5d50:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5d52:	f7ff ffe5 	bl	d5d20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5d56:	e006      	b.n	d5d66 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	9300      	str	r3, [sp, #0]
   d5d5c:	461a      	mov	r2, r3
   d5d5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d62:	f7fe fcdb 	bl	d471c <system_ctrl_set_result>
        break;
    }
}
   d5d66:	b003      	add	sp, #12
   d5d68:	f85d fb04 	ldr.w	pc, [sp], #4
   d5d6c:	2003e718 	.word	0x2003e718

000d5d70 <module_user_init_hook>:

void module_user_init_hook()
{
   d5d70:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d72:	2100      	movs	r1, #0
   d5d74:	4804      	ldr	r0, [pc, #16]	; (d5d88 <module_user_init_hook+0x18>)
   d5d76:	f7fe fceb 	bl	d4750 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d7a:	2100      	movs	r1, #0
   d5d7c:	4803      	ldr	r0, [pc, #12]	; (d5d8c <module_user_init_hook+0x1c>)
}
   d5d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d82:	f7fe bcc1 	b.w	d4708 <system_ctrl_set_app_request_handler>
   d5d86:	bf00      	nop
   d5d88:	00000000 	.word	0x00000000
   d5d8c:	000d5d39 	.word	0x000d5d39

000d5d90 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5d90:	b510      	push	{r4, lr}
   d5d92:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5d94:	480f      	ldr	r0, [pc, #60]	; (d5dd4 <pinAvailable+0x44>)
   d5d96:	f7ff f96f 	bl	d5078 <_ZN8SPIClass9isEnabledEv>
   d5d9a:	b128      	cbz	r0, d5da8 <pinAvailable+0x18>
   d5d9c:	f1a4 030b 	sub.w	r3, r4, #11
   d5da0:	2b02      	cmp	r3, #2
   d5da2:	d801      	bhi.n	d5da8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5da4:	2000      	movs	r0, #0
   d5da6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5da8:	f000 f87e 	bl	d5ea8 <_Z19__fetch_global_Wirev>
   d5dac:	f7fe fe4a 	bl	d4a44 <_ZN7TwoWire9isEnabledEv>
   d5db0:	b108      	cbz	r0, d5db6 <pinAvailable+0x26>
   d5db2:	2c01      	cmp	r4, #1
   d5db4:	d9f6      	bls.n	d5da4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5db6:	f7ff febf 	bl	d5b38 <_Z22__fetch_global_Serial1v>
   d5dba:	f7ff feb9 	bl	d5b30 <_ZN11USARTSerial9isEnabledEv>
   d5dbe:	b118      	cbz	r0, d5dc8 <pinAvailable+0x38>
   d5dc0:	f1a4 0309 	sub.w	r3, r4, #9
   d5dc4:	2b01      	cmp	r3, #1
   d5dc6:	d9ed      	bls.n	d5da4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5dc8:	2c23      	cmp	r4, #35	; 0x23
   d5dca:	bf8c      	ite	hi
   d5dcc:	2000      	movhi	r0, #0
   d5dce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5dd0:	bd10      	pop	{r4, pc}
   d5dd2:	bf00      	nop
   d5dd4:	2003e738 	.word	0x2003e738

000d5dd8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dd8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5dda:	b538      	push	{r3, r4, r5, lr}
   d5ddc:	4604      	mov	r4, r0
   d5dde:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5de0:	d80a      	bhi.n	d5df8 <pinMode+0x20>
   d5de2:	29ff      	cmp	r1, #255	; 0xff
   d5de4:	d008      	beq.n	d5df8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5de6:	f7ff ffd3 	bl	d5d90 <pinAvailable>
   d5dea:	b128      	cbz	r0, d5df8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5dec:	4629      	mov	r1, r5
   d5dee:	4620      	mov	r0, r4
}
   d5df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5df4:	f7fe baf8 	b.w	d43e8 <HAL_Pin_Mode>
   d5df8:	bd38      	pop	{r3, r4, r5, pc}

000d5dfa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5dfa:	b538      	push	{r3, r4, r5, lr}
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e00:	f7fe fafa 	bl	d43f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e04:	28ff      	cmp	r0, #255	; 0xff
   d5e06:	d010      	beq.n	d5e2a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5e08:	2806      	cmp	r0, #6
   d5e0a:	d804      	bhi.n	d5e16 <digitalWrite+0x1c>
   d5e0c:	234d      	movs	r3, #77	; 0x4d
   d5e0e:	fa23 f000 	lsr.w	r0, r3, r0
   d5e12:	07c3      	lsls	r3, r0, #31
   d5e14:	d409      	bmi.n	d5e2a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e16:	4620      	mov	r0, r4
   d5e18:	f7ff ffba 	bl	d5d90 <pinAvailable>
   d5e1c:	b128      	cbz	r0, d5e2a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e1e:	4629      	mov	r1, r5
   d5e20:	4620      	mov	r0, r4
}
   d5e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e26:	f7fe baef 	b.w	d4408 <HAL_GPIO_Write>
   d5e2a:	bd38      	pop	{r3, r4, r5, pc}

000d5e2c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5e2c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5e2e:	b510      	push	{r4, lr}
   d5e30:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5e32:	bf9c      	itt	ls
   d5e34:	340e      	addls	r4, #14
   d5e36:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e38:	4620      	mov	r0, r4
   d5e3a:	f7ff ffa9 	bl	d5d90 <pinAvailable>
   d5e3e:	b150      	cbz	r0, d5e56 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5e40:	2103      	movs	r1, #3
   d5e42:	4620      	mov	r0, r4
   d5e44:	f7fe fac8 	bl	d43d8 <HAL_Validate_Pin_Function>
   d5e48:	2803      	cmp	r0, #3
   d5e4a:	d104      	bne.n	d5e56 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e4c:	4620      	mov	r0, r4
}
   d5e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e52:	f7fe bae9 	b.w	d4428 <HAL_ADC_Read>
}
   d5e56:	2000      	movs	r0, #0
   d5e58:	bd10      	pop	{r4, pc}

000d5e5a <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5e5a:	b538      	push	{r3, r4, r5, lr}
   d5e5c:	4604      	mov	r4, r0
   d5e5e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5e60:	f7ff ff96 	bl	d5d90 <pinAvailable>
   d5e64:	b1f0      	cbz	r0, d5ea4 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d5e66:	2104      	movs	r1, #4
   d5e68:	4620      	mov	r0, r4
   d5e6a:	f7fe fab5 	bl	d43d8 <HAL_Validate_Pin_Function>
   d5e6e:	2804      	cmp	r0, #4
   d5e70:	d105      	bne.n	d5e7e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d5e72:	b2a9      	uxth	r1, r5
   d5e74:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d5e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5e7a:	f7fe bacd 	b.w	d4418 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5e7e:	2102      	movs	r1, #2
   d5e80:	4620      	mov	r0, r4
   d5e82:	f7fe faa9 	bl	d43d8 <HAL_Validate_Pin_Function>
   d5e86:	2802      	cmp	r0, #2
   d5e88:	d10c      	bne.n	d5ea4 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	f7fe fab4 	bl	d43f8 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5e90:	2801      	cmp	r0, #1
   d5e92:	d001      	beq.n	d5e98 <_Z11analogWritetm+0x3e>
   d5e94:	2804      	cmp	r0, #4
   d5e96:	d105      	bne.n	d5ea4 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5e98:	4629      	mov	r1, r5
   d5e9a:	4620      	mov	r0, r4
    }
}
   d5e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5ea0:	f7fe baca 	b.w	d4438 <HAL_PWM_Write_Ext>
   d5ea4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ea8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5ea8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5eaa:	4d0b      	ldr	r5, [pc, #44]	; (d5ed8 <_Z19__fetch_global_Wirev+0x30>)
   d5eac:	6829      	ldr	r1, [r5, #0]
   d5eae:	f011 0401 	ands.w	r4, r1, #1
   d5eb2:	d10f      	bne.n	d5ed4 <_Z19__fetch_global_Wirev+0x2c>
   d5eb4:	4628      	mov	r0, r5
   d5eb6:	f7fe f8f6 	bl	d40a6 <__cxa_guard_acquire>
   d5eba:	b158      	cbz	r0, d5ed4 <_Z19__fetch_global_Wirev+0x2c>
   d5ebc:	4621      	mov	r1, r4
   d5ebe:	4807      	ldr	r0, [pc, #28]	; (d5edc <_Z19__fetch_global_Wirev+0x34>)
   d5ec0:	f7fe fdae 	bl	d4a20 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5ec4:	4628      	mov	r0, r5
   d5ec6:	f7fe f8f3 	bl	d40b0 <__cxa_guard_release>
   d5eca:	4a05      	ldr	r2, [pc, #20]	; (d5ee0 <_Z19__fetch_global_Wirev+0x38>)
   d5ecc:	4905      	ldr	r1, [pc, #20]	; (d5ee4 <_Z19__fetch_global_Wirev+0x3c>)
   d5ece:	4803      	ldr	r0, [pc, #12]	; (d5edc <_Z19__fetch_global_Wirev+0x34>)
   d5ed0:	f000 f82c 	bl	d5f2c <__aeabi_atexit>
	return wire;
}
   d5ed4:	4801      	ldr	r0, [pc, #4]	; (d5edc <_Z19__fetch_global_Wirev+0x34>)
   d5ed6:	bd38      	pop	{r3, r4, r5, pc}
   d5ed8:	2003e720 	.word	0x2003e720
   d5edc:	2003e724 	.word	0x2003e724
   d5ee0:	2003e368 	.word	0x2003e368
   d5ee4:	000d49c9 	.word	0x000d49c9

000d5ee8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ee8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5eea:	4c0c      	ldr	r4, [pc, #48]	; (d5f1c <_GLOBAL__sub_I_SPI+0x34>)
   d5eec:	4e0c      	ldr	r6, [pc, #48]	; (d5f20 <_GLOBAL__sub_I_SPI+0x38>)
   d5eee:	4d0d      	ldr	r5, [pc, #52]	; (d5f24 <_GLOBAL__sub_I_SPI+0x3c>)
   d5ef0:	2100      	movs	r1, #0
   d5ef2:	4620      	mov	r0, r4
   d5ef4:	f7ff f8ac 	bl	d5050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ef8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5efa:	4c0b      	ldr	r4, [pc, #44]	; (d5f28 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5efc:	4632      	mov	r2, r6
   d5efe:	4629      	mov	r1, r5
   d5f00:	f000 f814 	bl	d5f2c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f04:	2101      	movs	r1, #1
   d5f06:	4620      	mov	r0, r4
   d5f08:	f7ff f8a2 	bl	d5050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f0c:	4632      	mov	r2, r6
   d5f0e:	4629      	mov	r1, r5
   d5f10:	4620      	mov	r0, r4
   d5f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f16:	f000 b809 	b.w	d5f2c <__aeabi_atexit>
   d5f1a:	bf00      	nop
   d5f1c:	2003e738 	.word	0x2003e738
   d5f20:	2003e368 	.word	0x2003e368
   d5f24:	000d5041 	.word	0x000d5041
   d5f28:	2003e748 	.word	0x2003e748

000d5f2c <__aeabi_atexit>:
   d5f2c:	460b      	mov	r3, r1
   d5f2e:	4601      	mov	r1, r0
   d5f30:	4618      	mov	r0, r3
   d5f32:	f000 bf6b 	b.w	d6e0c <__cxa_atexit>
	...

000d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5f38:	4b24      	ldr	r3, [pc, #144]	; (d5fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	07d0      	lsls	r0, r2, #31
   d5f3e:	bf5c      	itt	pl
   d5f40:	2201      	movpl	r2, #1
   d5f42:	601a      	strpl	r2, [r3, #0]
   d5f44:	4b22      	ldr	r3, [pc, #136]	; (d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5f46:	681a      	ldr	r2, [r3, #0]
   d5f48:	07d1      	lsls	r1, r2, #31
   d5f4a:	bf5c      	itt	pl
   d5f4c:	2201      	movpl	r2, #1
   d5f4e:	601a      	strpl	r2, [r3, #0]
   d5f50:	4b20      	ldr	r3, [pc, #128]	; (d5fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	07d2      	lsls	r2, r2, #31
   d5f56:	bf5c      	itt	pl
   d5f58:	2201      	movpl	r2, #1
   d5f5a:	601a      	strpl	r2, [r3, #0]
   d5f5c:	4b1e      	ldr	r3, [pc, #120]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	07d0      	lsls	r0, r2, #31
   d5f62:	bf5c      	itt	pl
   d5f64:	2201      	movpl	r2, #1
   d5f66:	601a      	strpl	r2, [r3, #0]
   d5f68:	4b1c      	ldr	r3, [pc, #112]	; (d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d1      	lsls	r1, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b1a      	ldr	r3, [pc, #104]	; (d5fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d2      	lsls	r2, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b18      	ldr	r3, [pc, #96]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d0      	lsls	r0, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b16      	ldr	r3, [pc, #88]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d1      	lsls	r1, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b14      	ldr	r3, [pc, #80]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d2      	lsls	r2, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b12      	ldr	r3, [pc, #72]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d0      	lsls	r0, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b10      	ldr	r3, [pc, #64]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b0e      	ldr	r3, [pc, #56]	; (d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4770      	bx	lr
   d5fca:	bf00      	nop
   d5fcc:	2003e784 	.word	0x2003e784
   d5fd0:	2003e780 	.word	0x2003e780
   d5fd4:	2003e77c 	.word	0x2003e77c
   d5fd8:	2003e778 	.word	0x2003e778
   d5fdc:	2003e774 	.word	0x2003e774
   d5fe0:	2003e770 	.word	0x2003e770
   d5fe4:	2003e76c 	.word	0x2003e76c
   d5fe8:	2003e768 	.word	0x2003e768
   d5fec:	2003e764 	.word	0x2003e764
   d5ff0:	2003e760 	.word	0x2003e760
   d5ff4:	2003e75c 	.word	0x2003e75c
   d5ff8:	2003e758 	.word	0x2003e758

000d5ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ffc:	4b18      	ldr	r3, [pc, #96]	; (d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ffe:	681a      	ldr	r2, [r3, #0]
   d6000:	07d1      	lsls	r1, r2, #31
   d6002:	bf5c      	itt	pl
   d6004:	2201      	movpl	r2, #1
   d6006:	601a      	strpl	r2, [r3, #0]
   d6008:	4b16      	ldr	r3, [pc, #88]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d600a:	681a      	ldr	r2, [r3, #0]
   d600c:	07d2      	lsls	r2, r2, #31
   d600e:	bf5c      	itt	pl
   d6010:	2201      	movpl	r2, #1
   d6012:	601a      	strpl	r2, [r3, #0]
   d6014:	4b14      	ldr	r3, [pc, #80]	; (d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6016:	681a      	ldr	r2, [r3, #0]
   d6018:	07d0      	lsls	r0, r2, #31
   d601a:	bf5c      	itt	pl
   d601c:	2201      	movpl	r2, #1
   d601e:	601a      	strpl	r2, [r3, #0]
   d6020:	4b12      	ldr	r3, [pc, #72]	; (d606c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6022:	681a      	ldr	r2, [r3, #0]
   d6024:	07d1      	lsls	r1, r2, #31
   d6026:	bf5c      	itt	pl
   d6028:	2201      	movpl	r2, #1
   d602a:	601a      	strpl	r2, [r3, #0]
   d602c:	4b10      	ldr	r3, [pc, #64]	; (d6070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d602e:	681a      	ldr	r2, [r3, #0]
   d6030:	07d2      	lsls	r2, r2, #31
   d6032:	bf5c      	itt	pl
   d6034:	2201      	movpl	r2, #1
   d6036:	601a      	strpl	r2, [r3, #0]
   d6038:	4b0e      	ldr	r3, [pc, #56]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d603a:	681a      	ldr	r2, [r3, #0]
   d603c:	07d0      	lsls	r0, r2, #31
   d603e:	bf5c      	itt	pl
   d6040:	2201      	movpl	r2, #1
   d6042:	601a      	strpl	r2, [r3, #0]
   d6044:	4b0c      	ldr	r3, [pc, #48]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6046:	681a      	ldr	r2, [r3, #0]
   d6048:	07d1      	lsls	r1, r2, #31
   d604a:	bf5c      	itt	pl
   d604c:	2201      	movpl	r2, #1
   d604e:	601a      	strpl	r2, [r3, #0]
   d6050:	4b0a      	ldr	r3, [pc, #40]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6052:	681a      	ldr	r2, [r3, #0]
   d6054:	07d2      	lsls	r2, r2, #31
   d6056:	bf5c      	itt	pl
   d6058:	2201      	movpl	r2, #1
   d605a:	601a      	strpl	r2, [r3, #0]
   d605c:	4770      	bx	lr
   d605e:	bf00      	nop
   d6060:	2003e7a4 	.word	0x2003e7a4
   d6064:	2003e7a0 	.word	0x2003e7a0
   d6068:	2003e79c 	.word	0x2003e79c
   d606c:	2003e798 	.word	0x2003e798
   d6070:	2003e794 	.word	0x2003e794
   d6074:	2003e790 	.word	0x2003e790
   d6078:	2003e78c 	.word	0x2003e78c
   d607c:	2003e788 	.word	0x2003e788

000d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6080:	4b18      	ldr	r3, [pc, #96]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d1      	lsls	r1, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b16      	ldr	r3, [pc, #88]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d2      	lsls	r2, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b14      	ldr	r3, [pc, #80]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d0      	lsls	r0, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b12      	ldr	r3, [pc, #72]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d1      	lsls	r1, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4b10      	ldr	r3, [pc, #64]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d2      	lsls	r2, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b0e      	ldr	r3, [pc, #56]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d0      	lsls	r0, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4b0c      	ldr	r3, [pc, #48]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d1      	lsls	r1, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b0a      	ldr	r3, [pc, #40]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d2      	lsls	r2, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4770      	bx	lr
   d60e2:	bf00      	nop
   d60e4:	2003e7c4 	.word	0x2003e7c4
   d60e8:	2003e7c0 	.word	0x2003e7c0
   d60ec:	2003e7bc 	.word	0x2003e7bc
   d60f0:	2003e7b8 	.word	0x2003e7b8
   d60f4:	2003e7b4 	.word	0x2003e7b4
   d60f8:	2003e7b0 	.word	0x2003e7b0
   d60fc:	2003e7ac 	.word	0x2003e7ac
   d6100:	2003e7a8 	.word	0x2003e7a8

000d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6104:	4b24      	ldr	r3, [pc, #144]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d0      	lsls	r0, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b22      	ldr	r3, [pc, #136]	; (d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d1      	lsls	r1, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b20      	ldr	r3, [pc, #128]	; (d61a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d2      	lsls	r2, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b1e      	ldr	r3, [pc, #120]	; (d61a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d0      	lsls	r0, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b1c      	ldr	r3, [pc, #112]	; (d61a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d1      	lsls	r1, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b1a      	ldr	r3, [pc, #104]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d2      	lsls	r2, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4b18      	ldr	r3, [pc, #96]	; (d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d614e:	681a      	ldr	r2, [r3, #0]
   d6150:	07d0      	lsls	r0, r2, #31
   d6152:	bf5c      	itt	pl
   d6154:	2201      	movpl	r2, #1
   d6156:	601a      	strpl	r2, [r3, #0]
   d6158:	4b16      	ldr	r3, [pc, #88]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d615a:	681a      	ldr	r2, [r3, #0]
   d615c:	07d1      	lsls	r1, r2, #31
   d615e:	bf5c      	itt	pl
   d6160:	2201      	movpl	r2, #1
   d6162:	601a      	strpl	r2, [r3, #0]
   d6164:	4b14      	ldr	r3, [pc, #80]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6166:	681a      	ldr	r2, [r3, #0]
   d6168:	07d2      	lsls	r2, r2, #31
   d616a:	bf5c      	itt	pl
   d616c:	2201      	movpl	r2, #1
   d616e:	601a      	strpl	r2, [r3, #0]
   d6170:	4b12      	ldr	r3, [pc, #72]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d0      	lsls	r0, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b10      	ldr	r3, [pc, #64]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d1      	lsls	r1, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b0e      	ldr	r3, [pc, #56]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d2      	lsls	r2, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4770      	bx	lr
   d6196:	bf00      	nop
   d6198:	2003e7f4 	.word	0x2003e7f4
   d619c:	2003e7f0 	.word	0x2003e7f0
   d61a0:	2003e7ec 	.word	0x2003e7ec
   d61a4:	2003e7e8 	.word	0x2003e7e8
   d61a8:	2003e7e4 	.word	0x2003e7e4
   d61ac:	2003e7e0 	.word	0x2003e7e0
   d61b0:	2003e7dc 	.word	0x2003e7dc
   d61b4:	2003e7d8 	.word	0x2003e7d8
   d61b8:	2003e7d4 	.word	0x2003e7d4
   d61bc:	2003e7d0 	.word	0x2003e7d0
   d61c0:	2003e7cc 	.word	0x2003e7cc
   d61c4:	2003e7c8 	.word	0x2003e7c8

000d61c8 <__aeabi_drsub>:
   d61c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d61cc:	e002      	b.n	d61d4 <__adddf3>
   d61ce:	bf00      	nop

000d61d0 <__aeabi_dsub>:
   d61d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d61d4 <__adddf3>:
   d61d4:	b530      	push	{r4, r5, lr}
   d61d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d61da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d61de:	ea94 0f05 	teq	r4, r5
   d61e2:	bf08      	it	eq
   d61e4:	ea90 0f02 	teqeq	r0, r2
   d61e8:	bf1f      	itttt	ne
   d61ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d61ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d61f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d61f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61fa:	f000 80e2 	beq.w	d63c2 <__adddf3+0x1ee>
   d61fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6206:	bfb8      	it	lt
   d6208:	426d      	neglt	r5, r5
   d620a:	dd0c      	ble.n	d6226 <__adddf3+0x52>
   d620c:	442c      	add	r4, r5
   d620e:	ea80 0202 	eor.w	r2, r0, r2
   d6212:	ea81 0303 	eor.w	r3, r1, r3
   d6216:	ea82 0000 	eor.w	r0, r2, r0
   d621a:	ea83 0101 	eor.w	r1, r3, r1
   d621e:	ea80 0202 	eor.w	r2, r0, r2
   d6222:	ea81 0303 	eor.w	r3, r1, r3
   d6226:	2d36      	cmp	r5, #54	; 0x36
   d6228:	bf88      	it	hi
   d622a:	bd30      	pophi	{r4, r5, pc}
   d622c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6230:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d623c:	d002      	beq.n	d6244 <__adddf3+0x70>
   d623e:	4240      	negs	r0, r0
   d6240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6248:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d624c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6250:	d002      	beq.n	d6258 <__adddf3+0x84>
   d6252:	4252      	negs	r2, r2
   d6254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6258:	ea94 0f05 	teq	r4, r5
   d625c:	f000 80a7 	beq.w	d63ae <__adddf3+0x1da>
   d6260:	f1a4 0401 	sub.w	r4, r4, #1
   d6264:	f1d5 0e20 	rsbs	lr, r5, #32
   d6268:	db0d      	blt.n	d6286 <__adddf3+0xb2>
   d626a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d626e:	fa22 f205 	lsr.w	r2, r2, r5
   d6272:	1880      	adds	r0, r0, r2
   d6274:	f141 0100 	adc.w	r1, r1, #0
   d6278:	fa03 f20e 	lsl.w	r2, r3, lr
   d627c:	1880      	adds	r0, r0, r2
   d627e:	fa43 f305 	asr.w	r3, r3, r5
   d6282:	4159      	adcs	r1, r3
   d6284:	e00e      	b.n	d62a4 <__adddf3+0xd0>
   d6286:	f1a5 0520 	sub.w	r5, r5, #32
   d628a:	f10e 0e20 	add.w	lr, lr, #32
   d628e:	2a01      	cmp	r2, #1
   d6290:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6294:	bf28      	it	cs
   d6296:	f04c 0c02 	orrcs.w	ip, ip, #2
   d629a:	fa43 f305 	asr.w	r3, r3, r5
   d629e:	18c0      	adds	r0, r0, r3
   d62a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d62a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62a8:	d507      	bpl.n	d62ba <__adddf3+0xe6>
   d62aa:	f04f 0e00 	mov.w	lr, #0
   d62ae:	f1dc 0c00 	rsbs	ip, ip, #0
   d62b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d62b6:	eb6e 0101 	sbc.w	r1, lr, r1
   d62ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d62be:	d31b      	bcc.n	d62f8 <__adddf3+0x124>
   d62c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d62c4:	d30c      	bcc.n	d62e0 <__adddf3+0x10c>
   d62c6:	0849      	lsrs	r1, r1, #1
   d62c8:	ea5f 0030 	movs.w	r0, r0, rrx
   d62cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d62d0:	f104 0401 	add.w	r4, r4, #1
   d62d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d62d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d62dc:	f080 809a 	bcs.w	d6414 <__adddf3+0x240>
   d62e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d62e4:	bf08      	it	eq
   d62e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d62ea:	f150 0000 	adcs.w	r0, r0, #0
   d62ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62f2:	ea41 0105 	orr.w	r1, r1, r5
   d62f6:	bd30      	pop	{r4, r5, pc}
   d62f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d62fc:	4140      	adcs	r0, r0
   d62fe:	eb41 0101 	adc.w	r1, r1, r1
   d6302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6306:	f1a4 0401 	sub.w	r4, r4, #1
   d630a:	d1e9      	bne.n	d62e0 <__adddf3+0x10c>
   d630c:	f091 0f00 	teq	r1, #0
   d6310:	bf04      	itt	eq
   d6312:	4601      	moveq	r1, r0
   d6314:	2000      	moveq	r0, #0
   d6316:	fab1 f381 	clz	r3, r1
   d631a:	bf08      	it	eq
   d631c:	3320      	addeq	r3, #32
   d631e:	f1a3 030b 	sub.w	r3, r3, #11
   d6322:	f1b3 0220 	subs.w	r2, r3, #32
   d6326:	da0c      	bge.n	d6342 <__adddf3+0x16e>
   d6328:	320c      	adds	r2, #12
   d632a:	dd08      	ble.n	d633e <__adddf3+0x16a>
   d632c:	f102 0c14 	add.w	ip, r2, #20
   d6330:	f1c2 020c 	rsb	r2, r2, #12
   d6334:	fa01 f00c 	lsl.w	r0, r1, ip
   d6338:	fa21 f102 	lsr.w	r1, r1, r2
   d633c:	e00c      	b.n	d6358 <__adddf3+0x184>
   d633e:	f102 0214 	add.w	r2, r2, #20
   d6342:	bfd8      	it	le
   d6344:	f1c2 0c20 	rsble	ip, r2, #32
   d6348:	fa01 f102 	lsl.w	r1, r1, r2
   d634c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6350:	bfdc      	itt	le
   d6352:	ea41 010c 	orrle.w	r1, r1, ip
   d6356:	4090      	lslle	r0, r2
   d6358:	1ae4      	subs	r4, r4, r3
   d635a:	bfa2      	ittt	ge
   d635c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6360:	4329      	orrge	r1, r5
   d6362:	bd30      	popge	{r4, r5, pc}
   d6364:	ea6f 0404 	mvn.w	r4, r4
   d6368:	3c1f      	subs	r4, #31
   d636a:	da1c      	bge.n	d63a6 <__adddf3+0x1d2>
   d636c:	340c      	adds	r4, #12
   d636e:	dc0e      	bgt.n	d638e <__adddf3+0x1ba>
   d6370:	f104 0414 	add.w	r4, r4, #20
   d6374:	f1c4 0220 	rsb	r2, r4, #32
   d6378:	fa20 f004 	lsr.w	r0, r0, r4
   d637c:	fa01 f302 	lsl.w	r3, r1, r2
   d6380:	ea40 0003 	orr.w	r0, r0, r3
   d6384:	fa21 f304 	lsr.w	r3, r1, r4
   d6388:	ea45 0103 	orr.w	r1, r5, r3
   d638c:	bd30      	pop	{r4, r5, pc}
   d638e:	f1c4 040c 	rsb	r4, r4, #12
   d6392:	f1c4 0220 	rsb	r2, r4, #32
   d6396:	fa20 f002 	lsr.w	r0, r0, r2
   d639a:	fa01 f304 	lsl.w	r3, r1, r4
   d639e:	ea40 0003 	orr.w	r0, r0, r3
   d63a2:	4629      	mov	r1, r5
   d63a4:	bd30      	pop	{r4, r5, pc}
   d63a6:	fa21 f004 	lsr.w	r0, r1, r4
   d63aa:	4629      	mov	r1, r5
   d63ac:	bd30      	pop	{r4, r5, pc}
   d63ae:	f094 0f00 	teq	r4, #0
   d63b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d63b6:	bf06      	itte	eq
   d63b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d63bc:	3401      	addeq	r4, #1
   d63be:	3d01      	subne	r5, #1
   d63c0:	e74e      	b.n	d6260 <__adddf3+0x8c>
   d63c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63c6:	bf18      	it	ne
   d63c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d63cc:	d029      	beq.n	d6422 <__adddf3+0x24e>
   d63ce:	ea94 0f05 	teq	r4, r5
   d63d2:	bf08      	it	eq
   d63d4:	ea90 0f02 	teqeq	r0, r2
   d63d8:	d005      	beq.n	d63e6 <__adddf3+0x212>
   d63da:	ea54 0c00 	orrs.w	ip, r4, r0
   d63de:	bf04      	itt	eq
   d63e0:	4619      	moveq	r1, r3
   d63e2:	4610      	moveq	r0, r2
   d63e4:	bd30      	pop	{r4, r5, pc}
   d63e6:	ea91 0f03 	teq	r1, r3
   d63ea:	bf1e      	ittt	ne
   d63ec:	2100      	movne	r1, #0
   d63ee:	2000      	movne	r0, #0
   d63f0:	bd30      	popne	{r4, r5, pc}
   d63f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d63f6:	d105      	bne.n	d6404 <__adddf3+0x230>
   d63f8:	0040      	lsls	r0, r0, #1
   d63fa:	4149      	adcs	r1, r1
   d63fc:	bf28      	it	cs
   d63fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6402:	bd30      	pop	{r4, r5, pc}
   d6404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6408:	bf3c      	itt	cc
   d640a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d640e:	bd30      	popcc	{r4, r5, pc}
   d6410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d641c:	f04f 0000 	mov.w	r0, #0
   d6420:	bd30      	pop	{r4, r5, pc}
   d6422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6426:	bf1a      	itte	ne
   d6428:	4619      	movne	r1, r3
   d642a:	4610      	movne	r0, r2
   d642c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6430:	bf1c      	itt	ne
   d6432:	460b      	movne	r3, r1
   d6434:	4602      	movne	r2, r0
   d6436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d643a:	bf06      	itte	eq
   d643c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6440:	ea91 0f03 	teqeq	r1, r3
   d6444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6448:	bd30      	pop	{r4, r5, pc}
   d644a:	bf00      	nop

000d644c <__aeabi_ui2d>:
   d644c:	f090 0f00 	teq	r0, #0
   d6450:	bf04      	itt	eq
   d6452:	2100      	moveq	r1, #0
   d6454:	4770      	bxeq	lr
   d6456:	b530      	push	{r4, r5, lr}
   d6458:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d645c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6460:	f04f 0500 	mov.w	r5, #0
   d6464:	f04f 0100 	mov.w	r1, #0
   d6468:	e750      	b.n	d630c <__adddf3+0x138>
   d646a:	bf00      	nop

000d646c <__aeabi_i2d>:
   d646c:	f090 0f00 	teq	r0, #0
   d6470:	bf04      	itt	eq
   d6472:	2100      	moveq	r1, #0
   d6474:	4770      	bxeq	lr
   d6476:	b530      	push	{r4, r5, lr}
   d6478:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d647c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6484:	bf48      	it	mi
   d6486:	4240      	negmi	r0, r0
   d6488:	f04f 0100 	mov.w	r1, #0
   d648c:	e73e      	b.n	d630c <__adddf3+0x138>
   d648e:	bf00      	nop

000d6490 <__aeabi_f2d>:
   d6490:	0042      	lsls	r2, r0, #1
   d6492:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6496:	ea4f 0131 	mov.w	r1, r1, rrx
   d649a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d649e:	bf1f      	itttt	ne
   d64a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d64a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d64ac:	4770      	bxne	lr
   d64ae:	f092 0f00 	teq	r2, #0
   d64b2:	bf14      	ite	ne
   d64b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64b8:	4770      	bxeq	lr
   d64ba:	b530      	push	{r4, r5, lr}
   d64bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d64c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64c8:	e720      	b.n	d630c <__adddf3+0x138>
   d64ca:	bf00      	nop

000d64cc <__aeabi_ul2d>:
   d64cc:	ea50 0201 	orrs.w	r2, r0, r1
   d64d0:	bf08      	it	eq
   d64d2:	4770      	bxeq	lr
   d64d4:	b530      	push	{r4, r5, lr}
   d64d6:	f04f 0500 	mov.w	r5, #0
   d64da:	e00a      	b.n	d64f2 <__aeabi_l2d+0x16>

000d64dc <__aeabi_l2d>:
   d64dc:	ea50 0201 	orrs.w	r2, r0, r1
   d64e0:	bf08      	it	eq
   d64e2:	4770      	bxeq	lr
   d64e4:	b530      	push	{r4, r5, lr}
   d64e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d64ea:	d502      	bpl.n	d64f2 <__aeabi_l2d+0x16>
   d64ec:	4240      	negs	r0, r0
   d64ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d64f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d64fe:	f43f aedc 	beq.w	d62ba <__adddf3+0xe6>
   d6502:	f04f 0203 	mov.w	r2, #3
   d6506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d650a:	bf18      	it	ne
   d650c:	3203      	addne	r2, #3
   d650e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6512:	bf18      	it	ne
   d6514:	3203      	addne	r2, #3
   d6516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d651a:	f1c2 0320 	rsb	r3, r2, #32
   d651e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6522:	fa20 f002 	lsr.w	r0, r0, r2
   d6526:	fa01 fe03 	lsl.w	lr, r1, r3
   d652a:	ea40 000e 	orr.w	r0, r0, lr
   d652e:	fa21 f102 	lsr.w	r1, r1, r2
   d6532:	4414      	add	r4, r2
   d6534:	e6c1      	b.n	d62ba <__adddf3+0xe6>
   d6536:	bf00      	nop

000d6538 <__aeabi_dmul>:
   d6538:	b570      	push	{r4, r5, r6, lr}
   d653a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d653e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6546:	bf1d      	ittte	ne
   d6548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d654c:	ea94 0f0c 	teqne	r4, ip
   d6550:	ea95 0f0c 	teqne	r5, ip
   d6554:	f000 f8de 	bleq	d6714 <__aeabi_dmul+0x1dc>
   d6558:	442c      	add	r4, r5
   d655a:	ea81 0603 	eor.w	r6, r1, r3
   d655e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d656a:	bf18      	it	ne
   d656c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6578:	d038      	beq.n	d65ec <__aeabi_dmul+0xb4>
   d657a:	fba0 ce02 	umull	ip, lr, r0, r2
   d657e:	f04f 0500 	mov.w	r5, #0
   d6582:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d658a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d658e:	f04f 0600 	mov.w	r6, #0
   d6592:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6596:	f09c 0f00 	teq	ip, #0
   d659a:	bf18      	it	ne
   d659c:	f04e 0e01 	orrne.w	lr, lr, #1
   d65a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d65a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d65a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d65ac:	d204      	bcs.n	d65b8 <__aeabi_dmul+0x80>
   d65ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d65b2:	416d      	adcs	r5, r5
   d65b4:	eb46 0606 	adc.w	r6, r6, r6
   d65b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d65bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d65c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d65c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d65c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d65cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d65d0:	bf88      	it	hi
   d65d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d65d6:	d81e      	bhi.n	d6616 <__aeabi_dmul+0xde>
   d65d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d65dc:	bf08      	it	eq
   d65de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d65e2:	f150 0000 	adcs.w	r0, r0, #0
   d65e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65ea:	bd70      	pop	{r4, r5, r6, pc}
   d65ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d65f0:	ea46 0101 	orr.w	r1, r6, r1
   d65f4:	ea40 0002 	orr.w	r0, r0, r2
   d65f8:	ea81 0103 	eor.w	r1, r1, r3
   d65fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6600:	bfc2      	ittt	gt
   d6602:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d660a:	bd70      	popgt	{r4, r5, r6, pc}
   d660c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6610:	f04f 0e00 	mov.w	lr, #0
   d6614:	3c01      	subs	r4, #1
   d6616:	f300 80ab 	bgt.w	d6770 <__aeabi_dmul+0x238>
   d661a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d661e:	bfde      	ittt	le
   d6620:	2000      	movle	r0, #0
   d6622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6626:	bd70      	pople	{r4, r5, r6, pc}
   d6628:	f1c4 0400 	rsb	r4, r4, #0
   d662c:	3c20      	subs	r4, #32
   d662e:	da35      	bge.n	d669c <__aeabi_dmul+0x164>
   d6630:	340c      	adds	r4, #12
   d6632:	dc1b      	bgt.n	d666c <__aeabi_dmul+0x134>
   d6634:	f104 0414 	add.w	r4, r4, #20
   d6638:	f1c4 0520 	rsb	r5, r4, #32
   d663c:	fa00 f305 	lsl.w	r3, r0, r5
   d6640:	fa20 f004 	lsr.w	r0, r0, r4
   d6644:	fa01 f205 	lsl.w	r2, r1, r5
   d6648:	ea40 0002 	orr.w	r0, r0, r2
   d664c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6658:	fa21 f604 	lsr.w	r6, r1, r4
   d665c:	eb42 0106 	adc.w	r1, r2, r6
   d6660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6664:	bf08      	it	eq
   d6666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d666a:	bd70      	pop	{r4, r5, r6, pc}
   d666c:	f1c4 040c 	rsb	r4, r4, #12
   d6670:	f1c4 0520 	rsb	r5, r4, #32
   d6674:	fa00 f304 	lsl.w	r3, r0, r4
   d6678:	fa20 f005 	lsr.w	r0, r0, r5
   d667c:	fa01 f204 	lsl.w	r2, r1, r4
   d6680:	ea40 0002 	orr.w	r0, r0, r2
   d6684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d668c:	f141 0100 	adc.w	r1, r1, #0
   d6690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6694:	bf08      	it	eq
   d6696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d669a:	bd70      	pop	{r4, r5, r6, pc}
   d669c:	f1c4 0520 	rsb	r5, r4, #32
   d66a0:	fa00 f205 	lsl.w	r2, r0, r5
   d66a4:	ea4e 0e02 	orr.w	lr, lr, r2
   d66a8:	fa20 f304 	lsr.w	r3, r0, r4
   d66ac:	fa01 f205 	lsl.w	r2, r1, r5
   d66b0:	ea43 0302 	orr.w	r3, r3, r2
   d66b4:	fa21 f004 	lsr.w	r0, r1, r4
   d66b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66bc:	fa21 f204 	lsr.w	r2, r1, r4
   d66c0:	ea20 0002 	bic.w	r0, r0, r2
   d66c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d66c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66cc:	bf08      	it	eq
   d66ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66d2:	bd70      	pop	{r4, r5, r6, pc}
   d66d4:	f094 0f00 	teq	r4, #0
   d66d8:	d10f      	bne.n	d66fa <__aeabi_dmul+0x1c2>
   d66da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d66de:	0040      	lsls	r0, r0, #1
   d66e0:	eb41 0101 	adc.w	r1, r1, r1
   d66e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66e8:	bf08      	it	eq
   d66ea:	3c01      	subeq	r4, #1
   d66ec:	d0f7      	beq.n	d66de <__aeabi_dmul+0x1a6>
   d66ee:	ea41 0106 	orr.w	r1, r1, r6
   d66f2:	f095 0f00 	teq	r5, #0
   d66f6:	bf18      	it	ne
   d66f8:	4770      	bxne	lr
   d66fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d66fe:	0052      	lsls	r2, r2, #1
   d6700:	eb43 0303 	adc.w	r3, r3, r3
   d6704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6708:	bf08      	it	eq
   d670a:	3d01      	subeq	r5, #1
   d670c:	d0f7      	beq.n	d66fe <__aeabi_dmul+0x1c6>
   d670e:	ea43 0306 	orr.w	r3, r3, r6
   d6712:	4770      	bx	lr
   d6714:	ea94 0f0c 	teq	r4, ip
   d6718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d671c:	bf18      	it	ne
   d671e:	ea95 0f0c 	teqne	r5, ip
   d6722:	d00c      	beq.n	d673e <__aeabi_dmul+0x206>
   d6724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6728:	bf18      	it	ne
   d672a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d672e:	d1d1      	bne.n	d66d4 <__aeabi_dmul+0x19c>
   d6730:	ea81 0103 	eor.w	r1, r1, r3
   d6734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6738:	f04f 0000 	mov.w	r0, #0
   d673c:	bd70      	pop	{r4, r5, r6, pc}
   d673e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6742:	bf06      	itte	eq
   d6744:	4610      	moveq	r0, r2
   d6746:	4619      	moveq	r1, r3
   d6748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d674c:	d019      	beq.n	d6782 <__aeabi_dmul+0x24a>
   d674e:	ea94 0f0c 	teq	r4, ip
   d6752:	d102      	bne.n	d675a <__aeabi_dmul+0x222>
   d6754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6758:	d113      	bne.n	d6782 <__aeabi_dmul+0x24a>
   d675a:	ea95 0f0c 	teq	r5, ip
   d675e:	d105      	bne.n	d676c <__aeabi_dmul+0x234>
   d6760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6764:	bf1c      	itt	ne
   d6766:	4610      	movne	r0, r2
   d6768:	4619      	movne	r1, r3
   d676a:	d10a      	bne.n	d6782 <__aeabi_dmul+0x24a>
   d676c:	ea81 0103 	eor.w	r1, r1, r3
   d6770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d677c:	f04f 0000 	mov.w	r0, #0
   d6780:	bd70      	pop	{r4, r5, r6, pc}
   d6782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d678a:	bd70      	pop	{r4, r5, r6, pc}

000d678c <__aeabi_ddiv>:
   d678c:	b570      	push	{r4, r5, r6, lr}
   d678e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d679a:	bf1d      	ittte	ne
   d679c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d67a0:	ea94 0f0c 	teqne	r4, ip
   d67a4:	ea95 0f0c 	teqne	r5, ip
   d67a8:	f000 f8a7 	bleq	d68fa <__aeabi_ddiv+0x16e>
   d67ac:	eba4 0405 	sub.w	r4, r4, r5
   d67b0:	ea81 0e03 	eor.w	lr, r1, r3
   d67b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67bc:	f000 8088 	beq.w	d68d0 <__aeabi_ddiv+0x144>
   d67c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d67c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d67cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d67d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d67d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d67d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d67dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d67e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d67e4:	429d      	cmp	r5, r3
   d67e6:	bf08      	it	eq
   d67e8:	4296      	cmpeq	r6, r2
   d67ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d67ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d67f2:	d202      	bcs.n	d67fa <__aeabi_ddiv+0x6e>
   d67f4:	085b      	lsrs	r3, r3, #1
   d67f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d67fa:	1ab6      	subs	r6, r6, r2
   d67fc:	eb65 0503 	sbc.w	r5, r5, r3
   d6800:	085b      	lsrs	r3, r3, #1
   d6802:	ea4f 0232 	mov.w	r2, r2, rrx
   d6806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d680a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d680e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6812:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6816:	bf22      	ittt	cs
   d6818:	1ab6      	subcs	r6, r6, r2
   d681a:	4675      	movcs	r5, lr
   d681c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6820:	085b      	lsrs	r3, r3, #1
   d6822:	ea4f 0232 	mov.w	r2, r2, rrx
   d6826:	ebb6 0e02 	subs.w	lr, r6, r2
   d682a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d682e:	bf22      	ittt	cs
   d6830:	1ab6      	subcs	r6, r6, r2
   d6832:	4675      	movcs	r5, lr
   d6834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6838:	085b      	lsrs	r3, r3, #1
   d683a:	ea4f 0232 	mov.w	r2, r2, rrx
   d683e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6842:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6846:	bf22      	ittt	cs
   d6848:	1ab6      	subcs	r6, r6, r2
   d684a:	4675      	movcs	r5, lr
   d684c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6850:	085b      	lsrs	r3, r3, #1
   d6852:	ea4f 0232 	mov.w	r2, r2, rrx
   d6856:	ebb6 0e02 	subs.w	lr, r6, r2
   d685a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d685e:	bf22      	ittt	cs
   d6860:	1ab6      	subcs	r6, r6, r2
   d6862:	4675      	movcs	r5, lr
   d6864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6868:	ea55 0e06 	orrs.w	lr, r5, r6
   d686c:	d018      	beq.n	d68a0 <__aeabi_ddiv+0x114>
   d686e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6876:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d687a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d687e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d688a:	d1c0      	bne.n	d680e <__aeabi_ddiv+0x82>
   d688c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6890:	d10b      	bne.n	d68aa <__aeabi_ddiv+0x11e>
   d6892:	ea41 0100 	orr.w	r1, r1, r0
   d6896:	f04f 0000 	mov.w	r0, #0
   d689a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d689e:	e7b6      	b.n	d680e <__aeabi_ddiv+0x82>
   d68a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68a4:	bf04      	itt	eq
   d68a6:	4301      	orreq	r1, r0
   d68a8:	2000      	moveq	r0, #0
   d68aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68ae:	bf88      	it	hi
   d68b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68b4:	f63f aeaf 	bhi.w	d6616 <__aeabi_dmul+0xde>
   d68b8:	ebb5 0c03 	subs.w	ip, r5, r3
   d68bc:	bf04      	itt	eq
   d68be:	ebb6 0c02 	subseq.w	ip, r6, r2
   d68c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68c6:	f150 0000 	adcs.w	r0, r0, #0
   d68ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68ce:	bd70      	pop	{r4, r5, r6, pc}
   d68d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d68d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d68d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d68dc:	bfc2      	ittt	gt
   d68de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d68e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d68e6:	bd70      	popgt	{r4, r5, r6, pc}
   d68e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68ec:	f04f 0e00 	mov.w	lr, #0
   d68f0:	3c01      	subs	r4, #1
   d68f2:	e690      	b.n	d6616 <__aeabi_dmul+0xde>
   d68f4:	ea45 0e06 	orr.w	lr, r5, r6
   d68f8:	e68d      	b.n	d6616 <__aeabi_dmul+0xde>
   d68fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d68fe:	ea94 0f0c 	teq	r4, ip
   d6902:	bf08      	it	eq
   d6904:	ea95 0f0c 	teqeq	r5, ip
   d6908:	f43f af3b 	beq.w	d6782 <__aeabi_dmul+0x24a>
   d690c:	ea94 0f0c 	teq	r4, ip
   d6910:	d10a      	bne.n	d6928 <__aeabi_ddiv+0x19c>
   d6912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6916:	f47f af34 	bne.w	d6782 <__aeabi_dmul+0x24a>
   d691a:	ea95 0f0c 	teq	r5, ip
   d691e:	f47f af25 	bne.w	d676c <__aeabi_dmul+0x234>
   d6922:	4610      	mov	r0, r2
   d6924:	4619      	mov	r1, r3
   d6926:	e72c      	b.n	d6782 <__aeabi_dmul+0x24a>
   d6928:	ea95 0f0c 	teq	r5, ip
   d692c:	d106      	bne.n	d693c <__aeabi_ddiv+0x1b0>
   d692e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6932:	f43f aefd 	beq.w	d6730 <__aeabi_dmul+0x1f8>
   d6936:	4610      	mov	r0, r2
   d6938:	4619      	mov	r1, r3
   d693a:	e722      	b.n	d6782 <__aeabi_dmul+0x24a>
   d693c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6940:	bf18      	it	ne
   d6942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6946:	f47f aec5 	bne.w	d66d4 <__aeabi_dmul+0x19c>
   d694a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d694e:	f47f af0d 	bne.w	d676c <__aeabi_dmul+0x234>
   d6952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6956:	f47f aeeb 	bne.w	d6730 <__aeabi_dmul+0x1f8>
   d695a:	e712      	b.n	d6782 <__aeabi_dmul+0x24a>

000d695c <__gedf2>:
   d695c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6960:	e006      	b.n	d6970 <__cmpdf2+0x4>
   d6962:	bf00      	nop

000d6964 <__ledf2>:
   d6964:	f04f 0c01 	mov.w	ip, #1
   d6968:	e002      	b.n	d6970 <__cmpdf2+0x4>
   d696a:	bf00      	nop

000d696c <__cmpdf2>:
   d696c:	f04f 0c01 	mov.w	ip, #1
   d6970:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d697c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6980:	bf18      	it	ne
   d6982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6986:	d01b      	beq.n	d69c0 <__cmpdf2+0x54>
   d6988:	b001      	add	sp, #4
   d698a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d698e:	bf0c      	ite	eq
   d6990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6994:	ea91 0f03 	teqne	r1, r3
   d6998:	bf02      	ittt	eq
   d699a:	ea90 0f02 	teqeq	r0, r2
   d699e:	2000      	moveq	r0, #0
   d69a0:	4770      	bxeq	lr
   d69a2:	f110 0f00 	cmn.w	r0, #0
   d69a6:	ea91 0f03 	teq	r1, r3
   d69aa:	bf58      	it	pl
   d69ac:	4299      	cmppl	r1, r3
   d69ae:	bf08      	it	eq
   d69b0:	4290      	cmpeq	r0, r2
   d69b2:	bf2c      	ite	cs
   d69b4:	17d8      	asrcs	r0, r3, #31
   d69b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d69ba:	f040 0001 	orr.w	r0, r0, #1
   d69be:	4770      	bx	lr
   d69c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69c8:	d102      	bne.n	d69d0 <__cmpdf2+0x64>
   d69ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d69ce:	d107      	bne.n	d69e0 <__cmpdf2+0x74>
   d69d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69d8:	d1d6      	bne.n	d6988 <__cmpdf2+0x1c>
   d69da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d69de:	d0d3      	beq.n	d6988 <__cmpdf2+0x1c>
   d69e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d69e4:	4770      	bx	lr
   d69e6:	bf00      	nop

000d69e8 <__aeabi_cdrcmple>:
   d69e8:	4684      	mov	ip, r0
   d69ea:	4610      	mov	r0, r2
   d69ec:	4662      	mov	r2, ip
   d69ee:	468c      	mov	ip, r1
   d69f0:	4619      	mov	r1, r3
   d69f2:	4663      	mov	r3, ip
   d69f4:	e000      	b.n	d69f8 <__aeabi_cdcmpeq>
   d69f6:	bf00      	nop

000d69f8 <__aeabi_cdcmpeq>:
   d69f8:	b501      	push	{r0, lr}
   d69fa:	f7ff ffb7 	bl	d696c <__cmpdf2>
   d69fe:	2800      	cmp	r0, #0
   d6a00:	bf48      	it	mi
   d6a02:	f110 0f00 	cmnmi.w	r0, #0
   d6a06:	bd01      	pop	{r0, pc}

000d6a08 <__aeabi_dcmpeq>:
   d6a08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a0c:	f7ff fff4 	bl	d69f8 <__aeabi_cdcmpeq>
   d6a10:	bf0c      	ite	eq
   d6a12:	2001      	moveq	r0, #1
   d6a14:	2000      	movne	r0, #0
   d6a16:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a1a:	bf00      	nop

000d6a1c <__aeabi_dcmplt>:
   d6a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a20:	f7ff ffea 	bl	d69f8 <__aeabi_cdcmpeq>
   d6a24:	bf34      	ite	cc
   d6a26:	2001      	movcc	r0, #1
   d6a28:	2000      	movcs	r0, #0
   d6a2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a2e:	bf00      	nop

000d6a30 <__aeabi_dcmple>:
   d6a30:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a34:	f7ff ffe0 	bl	d69f8 <__aeabi_cdcmpeq>
   d6a38:	bf94      	ite	ls
   d6a3a:	2001      	movls	r0, #1
   d6a3c:	2000      	movhi	r0, #0
   d6a3e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a42:	bf00      	nop

000d6a44 <__aeabi_dcmpge>:
   d6a44:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a48:	f7ff ffce 	bl	d69e8 <__aeabi_cdrcmple>
   d6a4c:	bf94      	ite	ls
   d6a4e:	2001      	movls	r0, #1
   d6a50:	2000      	movhi	r0, #0
   d6a52:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a56:	bf00      	nop

000d6a58 <__aeabi_dcmpgt>:
   d6a58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a5c:	f7ff ffc4 	bl	d69e8 <__aeabi_cdrcmple>
   d6a60:	bf34      	ite	cc
   d6a62:	2001      	movcc	r0, #1
   d6a64:	2000      	movcs	r0, #0
   d6a66:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a6a:	bf00      	nop

000d6a6c <__aeabi_d2uiz>:
   d6a6c:	004a      	lsls	r2, r1, #1
   d6a6e:	d211      	bcs.n	d6a94 <__aeabi_d2uiz+0x28>
   d6a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6a74:	d211      	bcs.n	d6a9a <__aeabi_d2uiz+0x2e>
   d6a76:	d50d      	bpl.n	d6a94 <__aeabi_d2uiz+0x28>
   d6a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6a80:	d40e      	bmi.n	d6aa0 <__aeabi_d2uiz+0x34>
   d6a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a8e:	fa23 f002 	lsr.w	r0, r3, r2
   d6a92:	4770      	bx	lr
   d6a94:	f04f 0000 	mov.w	r0, #0
   d6a98:	4770      	bx	lr
   d6a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a9e:	d102      	bne.n	d6aa6 <__aeabi_d2uiz+0x3a>
   d6aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6aa4:	4770      	bx	lr
   d6aa6:	f04f 0000 	mov.w	r0, #0
   d6aaa:	4770      	bx	lr

000d6aac <__aeabi_uldivmod>:
   d6aac:	b953      	cbnz	r3, d6ac4 <__aeabi_uldivmod+0x18>
   d6aae:	b94a      	cbnz	r2, d6ac4 <__aeabi_uldivmod+0x18>
   d6ab0:	2900      	cmp	r1, #0
   d6ab2:	bf08      	it	eq
   d6ab4:	2800      	cmpeq	r0, #0
   d6ab6:	bf1c      	itt	ne
   d6ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6ac0:	f000 b9a2 	b.w	d6e08 <__aeabi_idiv0>
   d6ac4:	f1ad 0c08 	sub.w	ip, sp, #8
   d6ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6acc:	f000 f82a 	bl	d6b24 <__udivmoddi4>
   d6ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6ad8:	b004      	add	sp, #16
   d6ada:	4770      	bx	lr

000d6adc <__aeabi_d2ulz>:
   d6adc:	b5d0      	push	{r4, r6, r7, lr}
   d6ade:	2200      	movs	r2, #0
   d6ae0:	4b0e      	ldr	r3, [pc, #56]	; (d6b1c <__aeabi_d2ulz+0x40>)
   d6ae2:	4606      	mov	r6, r0
   d6ae4:	460f      	mov	r7, r1
   d6ae6:	f7ff fd27 	bl	d6538 <__aeabi_dmul>
   d6aea:	f7ff ffbf 	bl	d6a6c <__aeabi_d2uiz>
   d6aee:	4604      	mov	r4, r0
   d6af0:	f7ff fcac 	bl	d644c <__aeabi_ui2d>
   d6af4:	2200      	movs	r2, #0
   d6af6:	4b0a      	ldr	r3, [pc, #40]	; (d6b20 <__aeabi_d2ulz+0x44>)
   d6af8:	f7ff fd1e 	bl	d6538 <__aeabi_dmul>
   d6afc:	4602      	mov	r2, r0
   d6afe:	460b      	mov	r3, r1
   d6b00:	4630      	mov	r0, r6
   d6b02:	4639      	mov	r1, r7
   d6b04:	f7ff fb64 	bl	d61d0 <__aeabi_dsub>
   d6b08:	f7ff ffb0 	bl	d6a6c <__aeabi_d2uiz>
   d6b0c:	4623      	mov	r3, r4
   d6b0e:	2200      	movs	r2, #0
   d6b10:	ea42 0200 	orr.w	r2, r2, r0
   d6b14:	4610      	mov	r0, r2
   d6b16:	4619      	mov	r1, r3
   d6b18:	bdd0      	pop	{r4, r6, r7, pc}
   d6b1a:	bf00      	nop
   d6b1c:	3df00000 	.word	0x3df00000
   d6b20:	41f00000 	.word	0x41f00000

000d6b24 <__udivmoddi4>:
   d6b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b28:	468c      	mov	ip, r1
   d6b2a:	460e      	mov	r6, r1
   d6b2c:	4604      	mov	r4, r0
   d6b2e:	9d08      	ldr	r5, [sp, #32]
   d6b30:	2b00      	cmp	r3, #0
   d6b32:	d150      	bne.n	d6bd6 <__udivmoddi4+0xb2>
   d6b34:	428a      	cmp	r2, r1
   d6b36:	4617      	mov	r7, r2
   d6b38:	d96c      	bls.n	d6c14 <__udivmoddi4+0xf0>
   d6b3a:	fab2 fe82 	clz	lr, r2
   d6b3e:	f1be 0f00 	cmp.w	lr, #0
   d6b42:	d00b      	beq.n	d6b5c <__udivmoddi4+0x38>
   d6b44:	f1ce 0420 	rsb	r4, lr, #32
   d6b48:	fa20 f404 	lsr.w	r4, r0, r4
   d6b4c:	fa01 f60e 	lsl.w	r6, r1, lr
   d6b50:	ea44 0c06 	orr.w	ip, r4, r6
   d6b54:	fa02 f70e 	lsl.w	r7, r2, lr
   d6b58:	fa00 f40e 	lsl.w	r4, r0, lr
   d6b5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6b60:	0c22      	lsrs	r2, r4, #16
   d6b62:	fbbc f0f9 	udiv	r0, ip, r9
   d6b66:	fa1f f887 	uxth.w	r8, r7
   d6b6a:	fb09 c610 	mls	r6, r9, r0, ip
   d6b6e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6b72:	fb00 f308 	mul.w	r3, r0, r8
   d6b76:	42b3      	cmp	r3, r6
   d6b78:	d909      	bls.n	d6b8e <__udivmoddi4+0x6a>
   d6b7a:	19f6      	adds	r6, r6, r7
   d6b7c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6b80:	f080 8122 	bcs.w	d6dc8 <__udivmoddi4+0x2a4>
   d6b84:	42b3      	cmp	r3, r6
   d6b86:	f240 811f 	bls.w	d6dc8 <__udivmoddi4+0x2a4>
   d6b8a:	3802      	subs	r0, #2
   d6b8c:	443e      	add	r6, r7
   d6b8e:	1af6      	subs	r6, r6, r3
   d6b90:	b2a2      	uxth	r2, r4
   d6b92:	fbb6 f3f9 	udiv	r3, r6, r9
   d6b96:	fb09 6613 	mls	r6, r9, r3, r6
   d6b9a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6b9e:	fb03 f808 	mul.w	r8, r3, r8
   d6ba2:	45a0      	cmp	r8, r4
   d6ba4:	d909      	bls.n	d6bba <__udivmoddi4+0x96>
   d6ba6:	19e4      	adds	r4, r4, r7
   d6ba8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6bac:	f080 810a 	bcs.w	d6dc4 <__udivmoddi4+0x2a0>
   d6bb0:	45a0      	cmp	r8, r4
   d6bb2:	f240 8107 	bls.w	d6dc4 <__udivmoddi4+0x2a0>
   d6bb6:	3b02      	subs	r3, #2
   d6bb8:	443c      	add	r4, r7
   d6bba:	ebc8 0404 	rsb	r4, r8, r4
   d6bbe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6bc2:	2100      	movs	r1, #0
   d6bc4:	2d00      	cmp	r5, #0
   d6bc6:	d062      	beq.n	d6c8e <__udivmoddi4+0x16a>
   d6bc8:	fa24 f40e 	lsr.w	r4, r4, lr
   d6bcc:	2300      	movs	r3, #0
   d6bce:	602c      	str	r4, [r5, #0]
   d6bd0:	606b      	str	r3, [r5, #4]
   d6bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bd6:	428b      	cmp	r3, r1
   d6bd8:	d907      	bls.n	d6bea <__udivmoddi4+0xc6>
   d6bda:	2d00      	cmp	r5, #0
   d6bdc:	d055      	beq.n	d6c8a <__udivmoddi4+0x166>
   d6bde:	2100      	movs	r1, #0
   d6be0:	e885 0041 	stmia.w	r5, {r0, r6}
   d6be4:	4608      	mov	r0, r1
   d6be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bea:	fab3 f183 	clz	r1, r3
   d6bee:	2900      	cmp	r1, #0
   d6bf0:	f040 8090 	bne.w	d6d14 <__udivmoddi4+0x1f0>
   d6bf4:	42b3      	cmp	r3, r6
   d6bf6:	d302      	bcc.n	d6bfe <__udivmoddi4+0xda>
   d6bf8:	4282      	cmp	r2, r0
   d6bfa:	f200 80f8 	bhi.w	d6dee <__udivmoddi4+0x2ca>
   d6bfe:	1a84      	subs	r4, r0, r2
   d6c00:	eb66 0603 	sbc.w	r6, r6, r3
   d6c04:	2001      	movs	r0, #1
   d6c06:	46b4      	mov	ip, r6
   d6c08:	2d00      	cmp	r5, #0
   d6c0a:	d040      	beq.n	d6c8e <__udivmoddi4+0x16a>
   d6c0c:	e885 1010 	stmia.w	r5, {r4, ip}
   d6c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c14:	b912      	cbnz	r2, d6c1c <__udivmoddi4+0xf8>
   d6c16:	2701      	movs	r7, #1
   d6c18:	fbb7 f7f2 	udiv	r7, r7, r2
   d6c1c:	fab7 fe87 	clz	lr, r7
   d6c20:	f1be 0f00 	cmp.w	lr, #0
   d6c24:	d135      	bne.n	d6c92 <__udivmoddi4+0x16e>
   d6c26:	1bf3      	subs	r3, r6, r7
   d6c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6c2c:	fa1f fc87 	uxth.w	ip, r7
   d6c30:	2101      	movs	r1, #1
   d6c32:	fbb3 f0f8 	udiv	r0, r3, r8
   d6c36:	0c22      	lsrs	r2, r4, #16
   d6c38:	fb08 3610 	mls	r6, r8, r0, r3
   d6c3c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6c40:	fb0c f300 	mul.w	r3, ip, r0
   d6c44:	42b3      	cmp	r3, r6
   d6c46:	d907      	bls.n	d6c58 <__udivmoddi4+0x134>
   d6c48:	19f6      	adds	r6, r6, r7
   d6c4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6c4e:	d202      	bcs.n	d6c56 <__udivmoddi4+0x132>
   d6c50:	42b3      	cmp	r3, r6
   d6c52:	f200 80ce 	bhi.w	d6df2 <__udivmoddi4+0x2ce>
   d6c56:	4610      	mov	r0, r2
   d6c58:	1af6      	subs	r6, r6, r3
   d6c5a:	b2a2      	uxth	r2, r4
   d6c5c:	fbb6 f3f8 	udiv	r3, r6, r8
   d6c60:	fb08 6613 	mls	r6, r8, r3, r6
   d6c64:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6c68:	fb0c fc03 	mul.w	ip, ip, r3
   d6c6c:	45a4      	cmp	ip, r4
   d6c6e:	d907      	bls.n	d6c80 <__udivmoddi4+0x15c>
   d6c70:	19e4      	adds	r4, r4, r7
   d6c72:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6c76:	d202      	bcs.n	d6c7e <__udivmoddi4+0x15a>
   d6c78:	45a4      	cmp	ip, r4
   d6c7a:	f200 80b5 	bhi.w	d6de8 <__udivmoddi4+0x2c4>
   d6c7e:	4613      	mov	r3, r2
   d6c80:	ebcc 0404 	rsb	r4, ip, r4
   d6c84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6c88:	e79c      	b.n	d6bc4 <__udivmoddi4+0xa0>
   d6c8a:	4629      	mov	r1, r5
   d6c8c:	4628      	mov	r0, r5
   d6c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c92:	f1ce 0120 	rsb	r1, lr, #32
   d6c96:	fa06 f30e 	lsl.w	r3, r6, lr
   d6c9a:	fa07 f70e 	lsl.w	r7, r7, lr
   d6c9e:	fa20 f901 	lsr.w	r9, r0, r1
   d6ca2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6ca6:	40ce      	lsrs	r6, r1
   d6ca8:	ea49 0903 	orr.w	r9, r9, r3
   d6cac:	fbb6 faf8 	udiv	sl, r6, r8
   d6cb0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6cb4:	fb08 661a 	mls	r6, r8, sl, r6
   d6cb8:	fa1f fc87 	uxth.w	ip, r7
   d6cbc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6cc0:	fb0a f20c 	mul.w	r2, sl, ip
   d6cc4:	429a      	cmp	r2, r3
   d6cc6:	fa00 f40e 	lsl.w	r4, r0, lr
   d6cca:	d90a      	bls.n	d6ce2 <__udivmoddi4+0x1be>
   d6ccc:	19db      	adds	r3, r3, r7
   d6cce:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d6cd2:	f080 8087 	bcs.w	d6de4 <__udivmoddi4+0x2c0>
   d6cd6:	429a      	cmp	r2, r3
   d6cd8:	f240 8084 	bls.w	d6de4 <__udivmoddi4+0x2c0>
   d6cdc:	f1aa 0a02 	sub.w	sl, sl, #2
   d6ce0:	443b      	add	r3, r7
   d6ce2:	1a9b      	subs	r3, r3, r2
   d6ce4:	fa1f f989 	uxth.w	r9, r9
   d6ce8:	fbb3 f1f8 	udiv	r1, r3, r8
   d6cec:	fb08 3311 	mls	r3, r8, r1, r3
   d6cf0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6cf4:	fb01 f60c 	mul.w	r6, r1, ip
   d6cf8:	429e      	cmp	r6, r3
   d6cfa:	d907      	bls.n	d6d0c <__udivmoddi4+0x1e8>
   d6cfc:	19db      	adds	r3, r3, r7
   d6cfe:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d6d02:	d26b      	bcs.n	d6ddc <__udivmoddi4+0x2b8>
   d6d04:	429e      	cmp	r6, r3
   d6d06:	d969      	bls.n	d6ddc <__udivmoddi4+0x2b8>
   d6d08:	3902      	subs	r1, #2
   d6d0a:	443b      	add	r3, r7
   d6d0c:	1b9b      	subs	r3, r3, r6
   d6d0e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6d12:	e78e      	b.n	d6c32 <__udivmoddi4+0x10e>
   d6d14:	f1c1 0e20 	rsb	lr, r1, #32
   d6d18:	fa22 f40e 	lsr.w	r4, r2, lr
   d6d1c:	408b      	lsls	r3, r1
   d6d1e:	4323      	orrs	r3, r4
   d6d20:	fa20 f70e 	lsr.w	r7, r0, lr
   d6d24:	fa06 f401 	lsl.w	r4, r6, r1
   d6d28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6d2c:	fa26 f60e 	lsr.w	r6, r6, lr
   d6d30:	433c      	orrs	r4, r7
   d6d32:	fbb6 f9fc 	udiv	r9, r6, ip
   d6d36:	0c27      	lsrs	r7, r4, #16
   d6d38:	fb0c 6619 	mls	r6, ip, r9, r6
   d6d3c:	fa1f f883 	uxth.w	r8, r3
   d6d40:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6d44:	fb09 f708 	mul.w	r7, r9, r8
   d6d48:	42b7      	cmp	r7, r6
   d6d4a:	fa02 f201 	lsl.w	r2, r2, r1
   d6d4e:	fa00 fa01 	lsl.w	sl, r0, r1
   d6d52:	d908      	bls.n	d6d66 <__udivmoddi4+0x242>
   d6d54:	18f6      	adds	r6, r6, r3
   d6d56:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6d5a:	d241      	bcs.n	d6de0 <__udivmoddi4+0x2bc>
   d6d5c:	42b7      	cmp	r7, r6
   d6d5e:	d93f      	bls.n	d6de0 <__udivmoddi4+0x2bc>
   d6d60:	f1a9 0902 	sub.w	r9, r9, #2
   d6d64:	441e      	add	r6, r3
   d6d66:	1bf6      	subs	r6, r6, r7
   d6d68:	b2a0      	uxth	r0, r4
   d6d6a:	fbb6 f4fc 	udiv	r4, r6, ip
   d6d6e:	fb0c 6614 	mls	r6, ip, r4, r6
   d6d72:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6d76:	fb04 f808 	mul.w	r8, r4, r8
   d6d7a:	45b8      	cmp	r8, r7
   d6d7c:	d907      	bls.n	d6d8e <__udivmoddi4+0x26a>
   d6d7e:	18ff      	adds	r7, r7, r3
   d6d80:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d6d84:	d228      	bcs.n	d6dd8 <__udivmoddi4+0x2b4>
   d6d86:	45b8      	cmp	r8, r7
   d6d88:	d926      	bls.n	d6dd8 <__udivmoddi4+0x2b4>
   d6d8a:	3c02      	subs	r4, #2
   d6d8c:	441f      	add	r7, r3
   d6d8e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6d92:	ebc8 0707 	rsb	r7, r8, r7
   d6d96:	fba0 8902 	umull	r8, r9, r0, r2
   d6d9a:	454f      	cmp	r7, r9
   d6d9c:	4644      	mov	r4, r8
   d6d9e:	464e      	mov	r6, r9
   d6da0:	d314      	bcc.n	d6dcc <__udivmoddi4+0x2a8>
   d6da2:	d029      	beq.n	d6df8 <__udivmoddi4+0x2d4>
   d6da4:	b365      	cbz	r5, d6e00 <__udivmoddi4+0x2dc>
   d6da6:	ebba 0304 	subs.w	r3, sl, r4
   d6daa:	eb67 0706 	sbc.w	r7, r7, r6
   d6dae:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6db2:	40cb      	lsrs	r3, r1
   d6db4:	40cf      	lsrs	r7, r1
   d6db6:	ea4e 0303 	orr.w	r3, lr, r3
   d6dba:	e885 0088 	stmia.w	r5, {r3, r7}
   d6dbe:	2100      	movs	r1, #0
   d6dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dc4:	4613      	mov	r3, r2
   d6dc6:	e6f8      	b.n	d6bba <__udivmoddi4+0x96>
   d6dc8:	4610      	mov	r0, r2
   d6dca:	e6e0      	b.n	d6b8e <__udivmoddi4+0x6a>
   d6dcc:	ebb8 0402 	subs.w	r4, r8, r2
   d6dd0:	eb69 0603 	sbc.w	r6, r9, r3
   d6dd4:	3801      	subs	r0, #1
   d6dd6:	e7e5      	b.n	d6da4 <__udivmoddi4+0x280>
   d6dd8:	4604      	mov	r4, r0
   d6dda:	e7d8      	b.n	d6d8e <__udivmoddi4+0x26a>
   d6ddc:	4611      	mov	r1, r2
   d6dde:	e795      	b.n	d6d0c <__udivmoddi4+0x1e8>
   d6de0:	4681      	mov	r9, r0
   d6de2:	e7c0      	b.n	d6d66 <__udivmoddi4+0x242>
   d6de4:	468a      	mov	sl, r1
   d6de6:	e77c      	b.n	d6ce2 <__udivmoddi4+0x1be>
   d6de8:	3b02      	subs	r3, #2
   d6dea:	443c      	add	r4, r7
   d6dec:	e748      	b.n	d6c80 <__udivmoddi4+0x15c>
   d6dee:	4608      	mov	r0, r1
   d6df0:	e70a      	b.n	d6c08 <__udivmoddi4+0xe4>
   d6df2:	3802      	subs	r0, #2
   d6df4:	443e      	add	r6, r7
   d6df6:	e72f      	b.n	d6c58 <__udivmoddi4+0x134>
   d6df8:	45c2      	cmp	sl, r8
   d6dfa:	d3e7      	bcc.n	d6dcc <__udivmoddi4+0x2a8>
   d6dfc:	463e      	mov	r6, r7
   d6dfe:	e7d1      	b.n	d6da4 <__udivmoddi4+0x280>
   d6e00:	4629      	mov	r1, r5
   d6e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e06:	bf00      	nop

000d6e08 <__aeabi_idiv0>:
   d6e08:	4770      	bx	lr
   d6e0a:	bf00      	nop

000d6e0c <__cxa_atexit>:
   d6e0c:	b510      	push	{r4, lr}
   d6e0e:	4c05      	ldr	r4, [pc, #20]	; (d6e24 <__cxa_atexit+0x18>)
   d6e10:	4613      	mov	r3, r2
   d6e12:	b12c      	cbz	r4, d6e20 <__cxa_atexit+0x14>
   d6e14:	460a      	mov	r2, r1
   d6e16:	4601      	mov	r1, r0
   d6e18:	2002      	movs	r0, #2
   d6e1a:	f3af 8000 	nop.w
   d6e1e:	bd10      	pop	{r4, pc}
   d6e20:	4620      	mov	r0, r4
   d6e22:	bd10      	pop	{r4, pc}
   d6e24:	00000000 	.word	0x00000000

000d6e28 <memcpy>:
   d6e28:	b510      	push	{r4, lr}
   d6e2a:	1e43      	subs	r3, r0, #1
   d6e2c:	440a      	add	r2, r1
   d6e2e:	4291      	cmp	r1, r2
   d6e30:	d004      	beq.n	d6e3c <memcpy+0x14>
   d6e32:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e36:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e3a:	e7f8      	b.n	d6e2e <memcpy+0x6>
   d6e3c:	bd10      	pop	{r4, pc}

000d6e3e <memset>:
   d6e3e:	4402      	add	r2, r0
   d6e40:	4603      	mov	r3, r0
   d6e42:	4293      	cmp	r3, r2
   d6e44:	d002      	beq.n	d6e4c <memset+0xe>
   d6e46:	f803 1b01 	strb.w	r1, [r3], #1
   d6e4a:	e7fa      	b.n	d6e42 <memset+0x4>
   d6e4c:	4770      	bx	lr

000d6e4e <strcmp>:
   d6e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6e52:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6e56:	2a01      	cmp	r2, #1
   d6e58:	bf28      	it	cs
   d6e5a:	429a      	cmpcs	r2, r3
   d6e5c:	d0f7      	beq.n	d6e4e <strcmp>
   d6e5e:	1ad0      	subs	r0, r2, r3
   d6e60:	4770      	bx	lr

000d6e62 <strcpy>:
   d6e62:	4603      	mov	r3, r0
   d6e64:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6e68:	f803 2b01 	strb.w	r2, [r3], #1
   d6e6c:	2a00      	cmp	r2, #0
   d6e6e:	d1f9      	bne.n	d6e64 <strcpy+0x2>
   d6e70:	4770      	bx	lr

000d6e72 <strlen>:
   d6e72:	4603      	mov	r3, r0
   d6e74:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e78:	2a00      	cmp	r2, #0
   d6e7a:	d1fb      	bne.n	d6e74 <strlen+0x2>
   d6e7c:	1a18      	subs	r0, r3, r0
   d6e7e:	3801      	subs	r0, #1
   d6e80:	4770      	bx	lr

000d6e82 <link_code_end>:
	...

000d6e84 <dynalib_user>:
   d6e84:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6e94:	0000 0000 6e6f 6f00 6666 2c00 6420 7461     ....on.off., dat
   d6ea4:	3a61 0020 6e61 6c61 676f 6176 756c 0065     a: .analogvalue.
   d6eb4:	7262 6769 7468 656e 7373 7300 7465 6f70     brightness.setpo
   d6ec4:	6e69 0074 656c 0064 6f6c 5f77 696c 6867     int.led.low_ligh
   d6ed4:	0074 0000                                   t...

000d6ed8 <_ZTVN5spark13CellularClassE>:
	...
   d6ee0:	4895 000d 488b 000d 4881 000d 4837 000d     .H...H...H..7H..
   d6ef0:	4875 000d 4869 000d 485d 000d 4855 000d     uH..iH..]H..UH..
   d6f00:	484b 000d 4841 000d 4ed1 000d               KH..AH...N..

000d6f0c <_ZTVN5spark13EthernetClassE>:
	...
   d6f14:	49ab 000d 49a1 000d 4997 000d 498d 000d     .I...I...I...I..
   d6f24:	4981 000d 4975 000d 4969 000d 4961 000d     .I..uI..iI..aI..
   d6f34:	4957 000d 494d 000d 4ed1 000d               WI..MI...N..

000d6f40 <_ZTV7TwoWire>:
	...
   d6f48:	49c9 000d 4a13 000d 49eb 000d 49cb 000d     .I...J...I...I..
   d6f58:	49f3 000d 49fb 000d 4a03 000d 4a0b 000d     .I...I...J...J..

000d6f68 <_ZTV9IPAddress>:
	...
   d6f70:	4a5b 000d 4a4d 000d 4a4f 000d 6e6c 6600     [J..MJ..OJ..ln.f
   d6f80:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d6f90:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   d6fa0:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   d6fb0:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   d6fc0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6fd0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6fe0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6ff0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7000:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7010:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7020:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7030:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   d7040:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7050:	696e 0063 6c61 006c                         nic.all.

000d7058 <_ZTVN5spark9MeshClassE>:
	...
   d7060:	4bcb 000d 4bc1 000d 4bb7 000d 4bad 000d     .K...K...K...K..
   d7070:	4ba1 000d 4b95 000d 4b89 000d 4b81 000d     .K...K...K...K..
   d7080:	4b77 000d 4b6d 000d 4ed1 000d 6666 3330     wK..mK...N..ff03
   d7090:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d70a0:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d70b0:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d70bc <_ZTVN5spark12NetworkClassE>:
	...
   d70c4:	4e69 000d 4e73 000d 4e7d 000d 4e87 000d     iN..sN..}N...N..
   d70d4:	4e91 000d 4e9d 000d 4ea9 000d 4eb5 000d     .N...N...N...N..
   d70e4:	4ebd 000d 4ec7 000d 4ed1 000d               .N...N...N..

000d70f0 <_ZTV8SPIClass>:
	...
   d70f8:	5041 000d 5043 000d                         AP..CP..

000d7100 <_ZTV21StringPrintableHelper>:
	...
   d7108:	507f 000d 5081 000d 52e1 000d 52b3 000d     .P...P...R...R..
   d7118:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d7128:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d7138:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   d7148:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   d7158:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   d7168:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   d7178:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   d7188:	6425 0000                                   %d..

000d718c <_ZTV3UDP>:
	...
   d7194:	5a61 000d 5a85 000d 5395 000d 54bf 000d     aZ...Z...S...T..
   d71a4:	538d 000d 53ab 000d 53c9 000d 53e3 000d     .S...S...S...S..
   d71b4:	5407 000d 54a3 000d 57dd 000d 5545 000d     .T...T...W..EU..
   d71c4:	56c5 000d 5375 000d 59f9 000d 5649 000d     .V..uS...Y..IV..
   d71d4:	557d 000d 59bf 000d 54e9 000d 5383 000d     }U...Y...T...S..
   d71e4:	5525 000d 5389 000d 53e5 000d fff0 ffff     %U...S...S......
   d71f4:	0000 0000 53ff 000d                         .....S..

000d71fc <_ZTV11USARTSerial>:
	...
   d7204:	5aaf 000d 5ad3 000d 5adf 000d 4f69 000d     .Z...Z...Z..iO..
   d7214:	5abb 000d 5ac7 000d 5ac1 000d 5acd 000d     .Z...Z...Z...Z..
   d7224:	5ab1 000d 5ab5 000d                         .Z...Z..

000d722c <_ZTV9USBSerial>:
	...
   d7234:	5b89 000d 5bcd 000d 5ba7 000d 4f69 000d     .[...[...[..iO..
   d7244:	5ba1 000d 5b8b 000d 5b93 000d 5bc7 000d     .[...[...[...[..
   d7254:	5b9b 000d 5b85 000d                         .[...[..

000d725c <link_const_variable_data_end>:
   d725c:	000d4345 	.word	0x000d4345
   d7260:	000d48a1 	.word	0x000d48a1
   d7264:	000d49b5 	.word	0x000d49b5
   d7268:	000d4b5d 	.word	0x000d4b5d
   d726c:	000d4e1d 	.word	0x000d4e1d
   d7270:	000d4f55 	.word	0x000d4f55
   d7274:	000d5025 	.word	0x000d5025
   d7278:	000d5345 	.word	0x000d5345
   d727c:	000d5361 	.word	0x000d5361
   d7280:	000d5ee9 	.word	0x000d5ee9
   d7284:	000d5f39 	.word	0x000d5f39
   d7288:	000d5ffd 	.word	0x000d5ffd
   d728c:	000d6081 	.word	0x000d6081
   d7290:	000d6105 	.word	0x000d6105

000d7294 <link_constructors_end>:
	...
