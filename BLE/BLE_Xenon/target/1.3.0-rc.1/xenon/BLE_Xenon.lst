
/Users/simonxu/Projects/Github-simjxu/partiscripts/BLE/BLE_Xenon/target/1.3.0-rc.1/xenon/BLE_Xenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f98  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016044  2**0
                  CONTENTS
  3 .data         00000068  2003e34c  000d5fb0  0000e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000043c  2003e3b4  2003e3b4  0001e3b4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6018  000d6018  00016018  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6040  000d6040  00016040  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bb9f0  00000000  00000000  00016044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000dbb6  00000000  00000000  000d1a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001793c  00000000  00000000  000df5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f40  00000000  00000000  000f6f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003ba0  00000000  00000000  000f8e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031107  00000000  00000000  000fca06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000202b1  00000000  00000000  0012db0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00104585  00000000  00000000  0014ddbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b954  00000000  00000000  00252344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	84 5c 0d 00                                         .\..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdca 	bl	d5bc6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdea 	bl	d5c12 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e34c 	.word	0x2003e34c
   d4048:	000d5fb0 	.word	0x000d5fb0
   d404c:	2003e3b4 	.word	0x2003e3b4
   d4050:	2003e3b4 	.word	0x2003e3b4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbf3 	bl	d5844 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5fac 	.word	0x000d5fac
   d4080:	000d5f74 	.word	0x000d5f74

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f869 	bl	d4160 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bba5 	b.w	d57e0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba29 	b.w	d44ec <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba2f 	b.w	d44fc <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba2d 	b.w	d44fc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:

// Adjust this value to measure the average power consumption for different connection interval.
// To measure the power consumption during connected,uses mobile App to connect to this device once it starts advertising.
#define CONENCTION_INTERVAL_MS     20

void setup() {
   d40b4:	b570      	push	{r4, r5, r6, lr}
   d40b6:	b092      	sub	sp, #72	; 0x48
    BleAdvertisingParams params = {};
   d40b8:	2400      	movs	r4, #0
    params.size = sizeof(BleAdvertisingParams);
   d40ba:	230c      	movs	r3, #12
    params.interval = BLE_MSEC_TO_UNITS(ADVERTISING_INTERVAL_MS, BLE_UNIT_0_625_MS);
   d40bc:	2520      	movs	r5, #32
// Adjust this value to measure the average power consumption for different connection interval.
// To measure the power consumption during connected,uses mobile App to connect to this device once it starts advertising.
#define CONENCTION_INTERVAL_MS     20

void setup() {
    BleAdvertisingParams params = {};
   d40be:	9408      	str	r4, [sp, #32]
   d40c0:	9409      	str	r4, [sp, #36]	; 0x24
    params.size = sizeof(BleAdvertisingParams);
   d40c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    params.interval = BLE_MSEC_TO_UNITS(ADVERTISING_INTERVAL_MS, BLE_UNIT_0_625_MS);
   d40c6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
// Adjust this value to measure the average power consumption for different connection interval.
// To measure the power consumption during connected,uses mobile App to connect to this device once it starts advertising.
#define CONENCTION_INTERVAL_MS     20

void setup() {
    BleAdvertisingParams params = {};
   d40ca:	940a      	str	r4, [sp, #40]	; 0x28
    params.interval = BLE_MSEC_TO_UNITS(ADVERTISING_INTERVAL_MS, BLE_UNIT_0_625_MS);
    params.timeout = 0;
    params.type = BLE_ADV_CONNECTABLE_SCANNABLE_UNDIRECRED_EVT;
    params.filter_policy = BLE_ADV_FP_ANY;
    params.inc_tx_power = false;
    BLE.setAdvertisingParameters(&params);
   d40cc:	f000 fe40 	bl	d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40d0:	eb0d 0105 	add.w	r1, sp, r5
   d40d4:	f000 fc1f 	bl	d4916 <_ZNK8particle14BleLocalDevice24setAdvertisingParametersEPKNS_20BleAdvertisingParamsE>

    BLE.setPPCP(BLE_MSEC_TO_UNITS(CONENCTION_INTERVAL_MS, BLE_UNIT_1_25_MS),
   d40d8:	f000 fe3a 	bl	d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>
                BLE_MSEC_TO_UNITS(CONENCTION_INTERVAL_MS + 20, BLE_UNIT_1_25_MS),
                0,
                BLE_MSEC_TO_UNITS(6000, BLE_UNIT_10_MS));
   d40dc:	f44f 7316 	mov.w	r3, #600	; 0x258
   d40e0:	462a      	mov	r2, r5
   d40e2:	9300      	str	r3, [sp, #0]
   d40e4:	2110      	movs	r1, #16
   d40e6:	4623      	mov	r3, r4
   d40e8:	f000 fc58 	bl	d499c <_ZNK8particle14BleLocalDevice7setPPCPEtttt>

    BLE.setTxPower(TX_POWER);
   d40ec:	f000 fe30 	bl	d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d40f0:	2108      	movs	r1, #8
   d40f2:	f000 fbe0 	bl	d48b6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    template<typename T>
    iBeacon(uint16_t major, uint16_t minor, T uuid, int8_t measurePower)
            : major(major),
              minor(minor),
              uuid(uuid),
              measurePower(measurePower) {
   d40f6:	2501      	movs	r5, #1
   d40f8:	2602      	movs	r6, #2
   d40fa:	4917      	ldr	r1, [pc, #92]	; (d4158 <setup+0xa4>)
   d40fc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
   d4100:	a80c      	add	r0, sp, #48	; 0x30
   d4102:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
   d4106:	f000 fa51 	bl	d45ac <_ZN8particle7BleUuidC1EPKc>
   d410a:	23c9      	movs	r3, #201	; 0xc9
   d410c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44

    iBeacon beacon(1, 2, "9c1b8bdc-5548-4e32-8a78-b9f524131206", -55);
    BLE.advertise(beacon);
   d4110:	f000 fe1e 	bl	d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4114:	a90b      	add	r1, sp, #44	; 0x2c
   d4116:	f000 fc11 	bl	d493c <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE>
    BLE.setAdvertisingType(BleAdvertisingEventType::CONNECTABLE_SCANNABLE_UNDIRECRED);
   d411a:	f000 fe19 	bl	d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d411e:	4621      	mov	r1, r4
   d4120:	f000 fbd9 	bl	d48d6 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>

    // After 15 seconds, device enters sleep mode.
    delay(15000);
   d4124:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4128:	f000 f9f0 	bl	d450c <delay>
   d412c:	4b0b      	ldr	r3, [pc, #44]	; (d415c <setup+0xa8>)
   d412e:	f88d 6015 	strb.w	r6, [sp, #21]
   d4132:	681b      	ldr	r3, [r3, #0]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4134:	9302      	str	r3, [sp, #8]
   d4136:	2208      	movs	r2, #8
   d4138:	231e      	movs	r3, #30
   d413a:	f8ad 2016 	strh.w	r2, [sp, #22]
   d413e:	9301      	str	r3, [sp, #4]
   d4140:	9500      	str	r5, [sp, #0]
   d4142:	f10d 0315 	add.w	r3, sp, #21
   d4146:	462a      	mov	r2, r5
   d4148:	f10d 0116 	add.w	r1, sp, #22
   d414c:	a806      	add	r0, sp, #24
   d414e:	f001 f9e3 	bl	d5518 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>

    // We usually measure the power consumption during device in sleep mode.
    System.sleep(D8, FALLING, 30, SLEEP_NETWORK_STANDBY); // Sleep for 30 seconds
}
   d4152:	b012      	add	sp, #72	; 0x48
   d4154:	bd70      	pop	{r4, r5, r6, pc}
   d4156:	bf00      	nop
   d4158:	000d5c98 	.word	0x000d5c98
   d415c:	2003e3c0 	.word	0x2003e3c0

000d4160 <loop>:

void loop() {
   d4160:	4770      	bx	lr
	...

000d4164 <_GLOBAL__sub_I_SystemMode>:

}
   d4164:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4166:	4b08      	ldr	r3, [pc, #32]	; (d4188 <_GLOBAL__sub_I_SystemMode+0x24>)
   d4168:	2201      	movs	r2, #1
   d416a:	601a      	str	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d416c:	f000 f8a0 	bl	d42b0 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4170:	4b06      	ldr	r3, [pc, #24]	; (d418c <_GLOBAL__sub_I_SystemMode+0x28>)
   d4172:	2200      	movs	r2, #0
   d4174:	701a      	strb	r2, [r3, #0]
   d4176:	805a      	strh	r2, [r3, #2]
   d4178:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d417c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d417e:	2003      	movs	r0, #3
   d4180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4184:	f000 b92c 	b.w	d43e0 <set_system_mode>
   d4188:	2003e3c0 	.word	0x2003e3c0
   d418c:	2003e3b8 	.word	0x2003e3b8

000d4190 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <hal_ble_stack_init+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030274 	.word	0x00030274

000d41a0 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <hal_ble_set_callback_on_events+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	695b      	ldr	r3, [r3, #20]
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030274 	.word	0x00030274

000d41b0 <hal_ble_gap_set_ppcp>:
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
DYNALIB_FN(9, hal_ble, hal_ble_gap_get_device_name, int(char*, size_t, void*))
DYNALIB_FN(10, hal_ble, hal_ble_gap_set_appearance, int(ble_sig_appearance_t, void*))
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <hal_ble_gap_set_ppcp+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030274 	.word	0x00030274

000d41c0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <hal_ble_gap_set_tx_power+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030274 	.word	0x00030274

000d41d0 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <hal_ble_gap_set_advertising_parameters+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030274 	.word	0x00030274

000d41e0 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <hal_ble_gap_get_advertising_parameters+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030274 	.word	0x00030274

000d41f0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <hal_ble_gap_set_advertising_data+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030274 	.word	0x00030274

000d4200 <hal_ble_gap_start_advertising>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <hal_ble_gap_start_advertising+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030274 	.word	0x00030274

000d4210 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <os_thread_is_current+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	689b      	ldr	r3, [r3, #8]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030248 	.word	0x00030248

000d4220 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <os_thread_join+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	691b      	ldr	r3, [r3, #16]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030248 	.word	0x00030248

000d4230 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <os_thread_cleanup+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	695b      	ldr	r3, [r3, #20]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030248 	.word	0x00030248

000d4240 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_mutex_create+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <os_mutex_recursive_create+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030248 	.word	0x00030248

000d4260 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <os_mutex_recursive_lock+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030248 	.word	0x00030248

000d4270 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <os_mutex_recursive_unlock+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030248 	.word	0x00030248

000d4280 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_RNG_GetRandomNumber+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	685b      	ldr	r3, [r3, #4]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030218 	.word	0x00030218

000d4290 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_Delay_Microseconds+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	68db      	ldr	r3, [r3, #12]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030218 	.word	0x00030218

000d42a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	695b      	ldr	r3, [r3, #20]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030218 	.word	0x00030218

000d42b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_Pin_Map+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	681b      	ldr	r3, [r3, #0]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003022c 	.word	0x0003022c

000d42c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <inet_inet_ntop+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	695b      	ldr	r3, [r3, #20]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030264 	.word	0x00030264

000d42d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <netdb_freeaddrinfo+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	689b      	ldr	r3, [r3, #8]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030268 	.word	0x00030268

000d42e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <netdb_getaddrinfo+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	68db      	ldr	r3, [r3, #12]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030268 	.word	0x00030268

000d42f0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_SPI_Init+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	69db      	ldr	r3, [r3, #28]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030230 	.word	0x00030230

000d4300 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_USART_Init+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	681b      	ldr	r3, [r3, #0]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003023c 	.word	0x0003023c

000d4310 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_USART_Write_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	68db      	ldr	r3, [r3, #12]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003023c 	.word	0x0003023c

000d4320 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_USART_Available_Data+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	691b      	ldr	r3, [r3, #16]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USART_Read_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	695b      	ldr	r3, [r3, #20]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USART_Peek_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	699b      	ldr	r3, [r3, #24]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003023c 	.word	0x0003023c

000d4350 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USART_Flush_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	69db      	ldr	r3, [r3, #28]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003023c 	.word	0x0003023c

000d4360 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USART_Available_Data_For_Write+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003023c 	.word	0x0003023c

000d4370 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Init+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	681b      	ldr	r3, [r3, #0]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Available_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	691b      	ldr	r3, [r3, #16]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Receive_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	699b      	ldr	r3, [r3, #24]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Send_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	69db      	ldr	r3, [r3, #28]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Flush_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6a1b      	ldr	r3, [r3, #32]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <panic_+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030260 	.word	0x00030260

000d43e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <set_system_mode+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	685b      	ldr	r3, [r3, #4]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030220 	.word	0x00030220

000d43f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <system_delay_ms+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	695b      	ldr	r3, [r3, #20]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030220 	.word	0x00030220

000d4400 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b03      	ldr	r3, [pc, #12]	; (d4410 <system_ctrl_set_app_request_handler+0x10>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d440a:	9301      	str	r3, [sp, #4]
   d440c:	bd08      	pop	{r3, pc}
   d440e:	0000      	.short	0x0000
   d4410:	00030220 	.word	0x00030220

000d4414 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b03      	ldr	r3, [pc, #12]	; (d4424 <system_ctrl_set_result+0x10>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d441e:	9301      	str	r3, [sp, #4]
   d4420:	bd08      	pop	{r3, pc}
   d4422:	0000      	.short	0x0000
   d4424:	00030220 	.word	0x00030220

000d4428 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b03      	ldr	r3, [pc, #12]	; (d4438 <system_sleep_pins+0x10>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d4432:	9301      	str	r3, [sp, #4]
   d4434:	bd08      	pop	{r3, pc}
   d4436:	0000      	.short	0x0000
   d4438:	00030220 	.word	0x00030220

000d443c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030244 	.word	0x00030244

000d444c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <network_connect+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030240 	.word	0x00030240

000d445c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <network_connecting+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	689b      	ldr	r3, [r3, #8]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030240 	.word	0x00030240

000d446c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <network_disconnect+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	68db      	ldr	r3, [r3, #12]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030240 	.word	0x00030240

000d447c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <network_ready+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	691b      	ldr	r3, [r3, #16]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030240 	.word	0x00030240

000d448c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <network_on+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	695b      	ldr	r3, [r3, #20]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030240 	.word	0x00030240

000d449c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <network_off+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	699b      	ldr	r3, [r3, #24]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030240 	.word	0x00030240

000d44ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <network_listen+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	69db      	ldr	r3, [r3, #28]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030240 	.word	0x00030240

000d44bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <network_listening+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6a1b      	ldr	r3, [r3, #32]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030240 	.word	0x00030240

000d44cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <network_set_listen_timeout+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030240 	.word	0x00030240

000d44dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <network_get_listen_timeout+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030240 	.word	0x00030240

000d44ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <malloc+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	681b      	ldr	r3, [r3, #0]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003021c 	.word	0x0003021c

000d44fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <free+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	685b      	ldr	r3, [r3, #4]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003021c 	.word	0x0003021c

000d450c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d450c:	2100      	movs	r1, #0
   d450e:	f7ff bf6f 	b.w	d43f0 <system_delay_ms>

000d4512 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4512:	4770      	bx	lr

000d4514 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4514:	2000      	movs	r0, #0
   d4516:	4770      	bx	lr

000d4518 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4518:	b510      	push	{r4, lr}
   d451a:	2114      	movs	r1, #20
   d451c:	4604      	mov	r4, r0
   d451e:	f001 f9d2 	bl	d58c6 <_ZdlPvj>
   d4522:	4620      	mov	r0, r4
   d4524:	bd10      	pop	{r4, pc}

000d4526 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4526:	f7ff bdb8 	b.w	d409a <_ZdlPv>

000d452a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d452a:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d452c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d452e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4530:	689b      	ldr	r3, [r3, #8]
   d4532:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4534:	68a3      	ldr	r3, [r4, #8]
   d4536:	3b01      	subs	r3, #1
   d4538:	60a3      	str	r3, [r4, #8]
   d453a:	b92b      	cbnz	r3, d4548 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d453c:	6823      	ldr	r3, [r4, #0]
   d453e:	4620      	mov	r0, r4
   d4540:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4546:	4718      	bx	r3
   d4548:	bd10      	pop	{r4, pc}

000d454a <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d454a:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d454c:	7982      	ldrb	r2, [r0, #6]
   d454e:	798b      	ldrb	r3, [r1, #6]
   d4550:	429a      	cmp	r2, r3
   d4552:	d106      	bne.n	d4562 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4554:	2206      	movs	r2, #6
   d4556:	f001 fb27 	bl	d5ba8 <memcmp>
   d455a:	fab0 f080 	clz	r0, r0
   d455e:	0940      	lsrs	r0, r0, #5
   d4560:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d4562:	2000      	movs	r0, #0
    }
   d4564:	bd08      	pop	{r3, pc}

000d4566 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4566:	b510      	push	{r4, lr}
            : uuid_() {
   d4568:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d456a:	4604      	mov	r4, r0
            : uuid_() {
   d456c:	2100      	movs	r1, #0
   d456e:	f001 fb50 	bl	d5c12 <memset>
    }
   d4572:	4620      	mov	r0, r4
   d4574:	bd10      	pop	{r4, pc}
	...

000d4578 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4578:	b510      	push	{r4, lr}
            locked_(false) {
   d457a:	2300      	movs	r3, #0
   d457c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d457e:	4b04      	ldr	r3, [pc, #16]	; (d4590 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4580:	4604      	mov	r4, r0
   d4582:	6818      	ldr	r0, [r3, #0]
   d4584:	f7ff fe6c 	bl	d4260 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4588:	2301      	movs	r3, #1
   d458a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d458c:	4620      	mov	r0, r4
   d458e:	bd10      	pop	{r4, pc}
   d4590:	2003e3e8 	.word	0x2003e3e8

000d4594 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4594:	b510      	push	{r4, lr}
        if (locked_) {
   d4596:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4598:	4604      	mov	r4, r0
        if (locked_) {
   d459a:	b11b      	cbz	r3, d45a4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d459c:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d459e:	6818      	ldr	r0, [r3, #0]
   d45a0:	f7ff fe66 	bl	d4270 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d45a4:	4620      	mov	r0, r4
   d45a6:	bd10      	pop	{r4, pc}
   d45a8:	2003e3e8 	.word	0x2003e3e8

000d45ac <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d45ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45b0:	4688      	mov	r8, r1
   d45b2:	4607      	mov	r7, r0
        : BleUuid() {
   d45b4:	f7ff ffd7 	bl	d4566 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d45b8:	f1b8 0f00 	cmp.w	r8, #0
   d45bc:	d002      	beq.n	d45c4 <_ZN8particle7BleUuidC1EPKc+0x18>
   d45be:	2600      	movs	r6, #0
   d45c0:	2510      	movs	r5, #16
   d45c2:	e00f      	b.n	d45e4 <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d45c4:	2210      	movs	r2, #16
   d45c6:	4641      	mov	r1, r8
   d45c8:	4638      	mov	r0, r7
   d45ca:	f001 fb22 	bl	d5c12 <memset>
   d45ce:	e04a      	b.n	d4666 <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d45d0:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d45d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d45d8:	b2d1      	uxtb	r1, r2
   d45da:	2909      	cmp	r1, #9
   d45dc:	d808      	bhi.n	d45f0 <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d45de:	1c53      	adds	r3, r2, #1
   d45e0:	d114      	bne.n	d460c <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d45e2:	3601      	adds	r6, #1
   d45e4:	4640      	mov	r0, r8
   d45e6:	f001 fb45 	bl	d5c74 <strlen>
   d45ea:	4286      	cmp	r6, r0
   d45ec:	d3f0      	bcc.n	d45d0 <_ZN8particle7BleUuidC1EPKc+0x24>
   d45ee:	e033      	b.n	d4658 <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d45f0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d45f4:	2a05      	cmp	r2, #5
   d45f6:	d802      	bhi.n	d45fe <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d45f8:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d45fc:	e7ef      	b.n	d45de <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d45fe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d4602:	2a05      	cmp	r2, #5
   d4604:	d8ed      	bhi.n	d45e2 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d4606:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d460a:	e7e8      	b.n	d45de <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d460c:	0112      	lsls	r2, r2, #4
   d460e:	3d01      	subs	r5, #1
   d4610:	b2d4      	uxtb	r4, r2
   d4612:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d4614:	4640      	mov	r0, r8
   d4616:	f001 fb2d 	bl	d5c74 <strlen>
   d461a:	3601      	adds	r6, #1
   d461c:	4286      	cmp	r6, r0
   d461e:	d2e0      	bcs.n	d45e2 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d4620:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4624:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d4628:	b2d9      	uxtb	r1, r3
   d462a:	2909      	cmp	r1, #9
   d462c:	d90e      	bls.n	d464c <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d462e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d4632:	2b05      	cmp	r3, #5
   d4634:	d802      	bhi.n	d463c <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d4636:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d463a:	e007      	b.n	d464c <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d463c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d4640:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4642:	bf94      	ite	ls
   d4644:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d4648:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
   d464c:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d464e:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d4650:	bf1c      	itt	ne
   d4652:	4314      	orrne	r4, r2
   d4654:	557c      	strbne	r4, [r7, r5]
   d4656:	e7c4      	b.n	d45e2 <_ZN8particle7BleUuidC1EPKc+0x36>
   d4658:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d465a:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d465c:	42bb      	cmp	r3, r7
   d465e:	d002      	beq.n	d4666 <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d4660:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4664:	e7fa      	b.n	d465c <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4666:	2301      	movs	r3, #1
   d4668:	743b      	strb	r3, [r7, #16]
}
   d466a:	4638      	mov	r0, r7
   d466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4670 <_ZN8particle18BleAdvertisingData5clearEv>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
}

void BleAdvertisingData::clear() {
    selfLen_ = 0;
   d4670:	2100      	movs	r1, #0
   d4672:	6201      	str	r1, [r0, #32]
    memset(selfData_, 0x00, sizeof(selfData_));
   d4674:	221f      	movs	r2, #31
   d4676:	f001 bacc 	b.w	d5c12 <memset>

000d467a <_ZN8particle18BleAdvertisingData3setERKNS_7iBeaconE>:
    memcpy(selfData_, buf, len);
    selfLen_ = len;
    return selfLen_;
}

size_t BleAdvertisingData::set(const iBeacon& beacon) {
   d467a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d467c:	460d      	mov	r5, r1
   d467e:	4604      	mov	r4, r0
    clear();
   d4680:	f7ff fff6 	bl	d4670 <_ZN8particle18BleAdvertisingData5clearEv>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4684:	7d2b      	ldrb	r3, [r5, #20]
   d4686:	6a20      	ldr	r0, [r4, #32]
   d4688:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d468c:	d03e      	beq.n	d470c <_ZN8particle18BleAdvertisingData3setERKNS_7iBeaconE+0x92>
    if (beacon.uuid.type() == BleUuidType::SHORT) {
        return selfLen_;
    }

    selfData_[selfLen_++] = 0x02;
    selfData_[selfLen_++] = BLE_SIG_AD_TYPE_FLAGS;
   d468e:	1823      	adds	r3, r4, r0

    if (beacon.uuid.type() == BleUuidType::SHORT) {
        return selfLen_;
    }

    selfData_[selfLen_++] = 0x02;
   d4690:	2202      	movs	r2, #2
    selfData_[selfLen_++] = BLE_SIG_AD_TYPE_FLAGS;
   d4692:	2101      	movs	r1, #1

    if (beacon.uuid.type() == BleUuidType::SHORT) {
        return selfLen_;
    }

    selfData_[selfLen_++] = 0x02;
   d4694:	5422      	strb	r2, [r4, r0]
    selfData_[selfLen_++] = BLE_SIG_AD_TYPE_FLAGS;
   d4696:	7059      	strb	r1, [r3, #1]
    selfData_[selfLen_++] = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4698:	2106      	movs	r1, #6
   d469a:	7099      	strb	r1, [r3, #2]
    selfData_[selfLen_++] = 0x1a; // length
   d469c:	211a      	movs	r1, #26
   d469e:	70d9      	strb	r1, [r3, #3]
    selfData_[selfLen_++] = BLE_SIG_AD_TYPE_MANUFACTURER_SPECIFIC_DATA;
   d46a0:	3005      	adds	r0, #5
   d46a2:	21ff      	movs	r1, #255	; 0xff
   d46a4:	6220      	str	r0, [r4, #32]
   d46a6:	7119      	strb	r1, [r3, #4]
    // Company ID
    uint16_t companyId = iBeacon::APPLE_COMPANY_ID;
   d46a8:	ab02      	add	r3, sp, #8
   d46aa:	214c      	movs	r1, #76	; 0x4c
   d46ac:	f823 1d02 	strh.w	r1, [r3, #-2]!
    memcpy(&selfData_[selfLen_], (uint8_t*)&companyId, sizeof(uint16_t));
   d46b0:	881b      	ldrh	r3, [r3, #0]
   d46b2:	5223      	strh	r3, [r4, r0]
    selfLen_ += sizeof(uint16_t);
   d46b4:	6a20      	ldr	r0, [r4, #32]
    // Beacon type: iBeacon
    selfData_[selfLen_++] = iBeacon::BEACON_TYPE_IBEACON;
   d46b6:	1821      	adds	r1, r4, r0
    // Length of the following payload
    selfData_[selfLen_++] = 0x15;
   d46b8:	1d03      	adds	r3, r0, #4
    // Company ID
    uint16_t companyId = iBeacon::APPLE_COMPANY_ID;
    memcpy(&selfData_[selfLen_], (uint8_t*)&companyId, sizeof(uint16_t));
    selfLen_ += sizeof(uint16_t);
    // Beacon type: iBeacon
    selfData_[selfLen_++] = iBeacon::BEACON_TYPE_IBEACON;
   d46ba:	708a      	strb	r2, [r1, #2]
    // Length of the following payload
    selfData_[selfLen_++] = 0x15;
   d46bc:	6223      	str	r3, [r4, #32]
   d46be:	2315      	movs	r3, #21
   d46c0:	70cb      	strb	r3, [r1, #3]
   d46c2:	1cc3      	adds	r3, r0, #3
   d46c4:	f105 0214 	add.w	r2, r5, #20
   d46c8:	4423      	add	r3, r4
   d46ca:	1d2e      	adds	r6, r5, #4
    // 128-bits Beacon UUID, MSB
    for (size_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
        selfData_[selfLen_ + i] = beacon.uuid.full()[j];
   d46cc:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
   d46d0:	f803 7f01 	strb.w	r7, [r3, #1]!
    // Beacon type: iBeacon
    selfData_[selfLen_++] = iBeacon::BEACON_TYPE_IBEACON;
    // Length of the following payload
    selfData_[selfLen_++] = 0x15;
    // 128-bits Beacon UUID, MSB
    for (size_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d46d4:	42b2      	cmp	r2, r6
   d46d6:	d1f9      	bne.n	d46cc <_ZN8particle18BleAdvertisingData3setERKNS_7iBeaconE+0x52>
        selfData_[selfLen_ + i] = beacon.uuid.full()[j];
    }
    selfLen_ += BLE_SIG_UUID_128BIT_LEN;
    // Major, MSB
    selfData_[selfLen_++] = (uint8_t)((beacon.major >> 8) & 0x00FF);
   d46d8:	f100 0215 	add.w	r2, r0, #21
   d46dc:	6222      	str	r2, [r4, #32]
   d46de:	882b      	ldrh	r3, [r5, #0]
   d46e0:	0a1b      	lsrs	r3, r3, #8
   d46e2:	750b      	strb	r3, [r1, #20]
    selfData_[selfLen_++] = (uint8_t)(beacon.major & 0x00FF);
   d46e4:	f100 0116 	add.w	r1, r0, #22
   d46e8:	6221      	str	r1, [r4, #32]
   d46ea:	882b      	ldrh	r3, [r5, #0]
   d46ec:	54a3      	strb	r3, [r4, r2]
    // Minor, MSB
    selfData_[selfLen_++] = (uint8_t)((beacon.minor >> 8) & 0x00FF);
   d46ee:	f100 0217 	add.w	r2, r0, #23
   d46f2:	6222      	str	r2, [r4, #32]
   d46f4:	886b      	ldrh	r3, [r5, #2]
   d46f6:	0a1b      	lsrs	r3, r3, #8
   d46f8:	5463      	strb	r3, [r4, r1]
    selfData_[selfLen_++] = (uint8_t)(beacon.minor & 0x00FF);
   d46fa:	f100 0318 	add.w	r3, r0, #24
   d46fe:	6223      	str	r3, [r4, #32]
   d4700:	8869      	ldrh	r1, [r5, #2]
   d4702:	54a1      	strb	r1, [r4, r2]
    // Measure power
    selfData_[selfLen_++] = beacon.measurePower;
   d4704:	3019      	adds	r0, #25
   d4706:	6220      	str	r0, [r4, #32]
   d4708:	7e2a      	ldrb	r2, [r5, #24]
   d470a:	54e2      	strb	r2, [r4, r3]

    return selfLen_;
}
   d470c:	b003      	add	sp, #12
   d470e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4710 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4710:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4712:	b18b      	cbz	r3, d4738 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4714:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4716:	1ce5      	adds	r5, r4, #3
   d4718:	428d      	cmp	r5, r1
   d471a:	d80f      	bhi.n	d473c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d471c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d471e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4720:	5d87      	ldrb	r7, [r0, r6]
   d4722:	4297      	cmp	r7, r2
   d4724:	d105      	bne.n	d4732 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4726:	442e      	add	r6, r5
   d4728:	42b1      	cmp	r1, r6
   d472a:	d307      	bcc.n	d473c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d472c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d472e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4730:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4732:	3501      	adds	r5, #1
   d4734:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4736:	e7ee      	b.n	d4716 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4738:	4618      	mov	r0, r3
   d473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d473c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d473e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4740 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4744:	4604      	mov	r4, r0
   d4746:	460e      	mov	r6, r1
   d4748:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d474a:	4617      	mov	r7, r2
   d474c:	2a00      	cmp	r2, #0
   d474e:	d03a      	beq.n	d47c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4750:	460a      	mov	r2, r1
   d4752:	ab01      	add	r3, sp, #4
   d4754:	6a01      	ldr	r1, [r0, #32]
   d4756:	f7ff ffdb 	bl	d4710 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d475a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d475e:	6a22      	ldr	r2, [r4, #32]
   d4760:	bb03      	cbnz	r3, d47a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4762:	b1f8      	cbz	r0, d47a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4764:	1c96      	adds	r6, r2, #2
   d4766:	442e      	add	r6, r5
   d4768:	1a36      	subs	r6, r6, r0
   d476a:	2e1f      	cmp	r6, #31
   d476c:	d82b      	bhi.n	d47c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d476e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4772:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4776:	ebc8 0202 	rsb	r2, r8, r2
   d477a:	1a12      	subs	r2, r2, r0
   d477c:	eb00 0108 	add.w	r1, r0, r8
   d4780:	eb05 0009 	add.w	r0, r5, r9
   d4784:	b292      	uxth	r2, r2
   d4786:	4421      	add	r1, r4
   d4788:	4420      	add	r0, r4
   d478a:	f001 fa27 	bl	d5bdc <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d478e:	1c6b      	adds	r3, r5, #1
   d4790:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4794:	462a      	mov	r2, r5
   d4796:	4639      	mov	r1, r7
   d4798:	eb04 0009 	add.w	r0, r4, r9
   d479c:	f001 fa13 	bl	d5bc6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d47a0:	6226      	str	r6, [r4, #32]
   d47a2:	e010      	b.n	d47c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d47a4:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d47a6:	182b      	adds	r3, r5, r0
   d47a8:	2b1f      	cmp	r3, #31
   d47aa:	d80c      	bhi.n	d47c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d47ac:	1c6b      	adds	r3, r5, #1
   d47ae:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d47b0:	4422      	add	r2, r4
   d47b2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d47b4:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d47b6:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d47b8:	4420      	add	r0, r4
   d47ba:	462a      	mov	r2, r5
   d47bc:	f001 fa03 	bl	d5bc6 <memcpy>
        selfLen_ += len;
   d47c0:	6a22      	ldr	r2, [r4, #32]
   d47c2:	442a      	add	r2, r5
   d47c4:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d47c6:	6a20      	ldr	r0, [r4, #32]
}
   d47c8:	b003      	add	sp, #12
   d47ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d47ce <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d47ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d47d0:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d47d2:	4603      	mov	r3, r0
   d47d4:	f100 021f 	add.w	r2, r0, #31
   d47d8:	2000      	movs	r0, #0
   d47da:	f803 0b01 	strb.w	r0, [r3], #1
   d47de:	4293      	cmp	r3, r2
   d47e0:	f04f 0100 	mov.w	r1, #0
   d47e4:	d1f9      	bne.n	d47da <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d47e6:	aa04      	add	r2, sp, #16
   d47e8:	2306      	movs	r3, #6
   d47ea:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d47ee:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d47f0:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d47f2:	9100      	str	r1, [sp, #0]
   d47f4:	4620      	mov	r0, r4
   d47f6:	4619      	mov	r1, r3
   d47f8:	f7ff ffa2 	bl	d4740 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d47fc:	4620      	mov	r0, r4
   d47fe:	b004      	add	sp, #16
   d4800:	bd10      	pop	{r4, pc}

000d4802 <_ZN8particle18BleAdvertisingDataC1ERKNS_7iBeaconE>:

BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
   d4802:	b538      	push	{r3, r4, r5, lr}
   d4804:	4604      	mov	r4, r0
   d4806:	460d      	mov	r5, r1
        : BleAdvertisingData() {
   d4808:	f7ff ffe1 	bl	d47ce <_ZN8particle18BleAdvertisingDataC1Ev>
    set(beacon);
   d480c:	4629      	mov	r1, r5
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff ff33 	bl	d467a <_ZN8particle18BleAdvertisingData3setERKNS_7iBeaconE>
}
   d4814:	4620      	mov	r0, r4
   d4816:	bd38      	pop	{r3, r4, r5, pc}

000d4818 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d4818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d481c:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4820:	460d      	mov	r5, r1
   d4822:	4617      	mov	r7, r2
   d4824:	4698      	mov	r8, r3
   d4826:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d482a:	42a6      	cmp	r6, r4
   d482c:	d033      	beq.n	d4896 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d482e:	6823      	ldr	r3, [r4, #0]
   d4830:	699a      	ldr	r2, [r3, #24]
   d4832:	69d9      	ldr	r1, [r3, #28]
   d4834:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d4838:	4291      	cmp	r1, r2
   d483a:	d01b      	beq.n	d4874 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d483c:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d483e:	b19b      	cbz	r3, d4868 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d4840:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d4844:	42a8      	cmp	r0, r5
   d4846:	d011      	beq.n	d486c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d4848:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d484c:	42a8      	cmp	r0, r5
   d484e:	d00d      	beq.n	d486c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d4850:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d4854:	42a8      	cmp	r0, r5
   d4856:	d009      	beq.n	d486c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d4858:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d485c:	42a8      	cmp	r0, r5
   d485e:	d005      	beq.n	d486c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d4860:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d4864:	42a8      	cmp	r0, r5
   d4866:	d001      	beq.n	d486c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d4868:	3208      	adds	r2, #8
   d486a:	e7e5      	b.n	d4838 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d486c:	b117      	cbz	r7, d4874 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d486e:	f1b8 0f00 	cmp.w	r8, #0
   d4872:	d101      	bne.n	d4878 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d4874:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d4876:	e7d8      	b.n	d482a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d4878:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d487c:	f1b9 0f00 	cmp.w	r9, #0
   d4880:	d0f8      	beq.n	d4874 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4882:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d4886:	42aa      	cmp	r2, r5
   d4888:	d1f4      	bne.n	d4874 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d488c:	9a08      	ldr	r2, [sp, #32]
   d488e:	4641      	mov	r1, r8
   d4890:	4638      	mov	r0, r7
   d4892:	47c8      	blx	r9
   d4894:	e7ee      	b.n	d4874 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d489a <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d489a:	b508      	push	{r3, lr}
   d489c:	6800      	ldr	r0, [r0, #0]
   d489e:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d48a0:	8ac2      	ldrh	r2, [r0, #22]
   d48a2:	8acb      	ldrh	r3, [r1, #22]
   d48a4:	429a      	cmp	r2, r3
   d48a6:	d104      	bne.n	d48b2 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d48a8:	3101      	adds	r1, #1
   d48aa:	3001      	adds	r0, #1
   d48ac:	f7ff fe4d 	bl	d454a <_ZNK8particle10BleAddresseqERKS0_>
   d48b0:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d48b2:	2000      	movs	r0, #0
}
   d48b4:	bd08      	pop	{r3, pc}

000d48b6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
    BleAddress addr = {};
    hal_ble_gap_get_device_address(&addr, nullptr);
    return addr;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   d48b6:	b513      	push	{r0, r1, r4, lr}
   d48b8:	460c      	mov	r4, r1
    WiringBleLock lk;
   d48ba:	a801      	add	r0, sp, #4
   d48bc:	f7ff fe5c 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   d48c0:	2100      	movs	r1, #0
   d48c2:	4620      	mov	r0, r4
   d48c4:	f7ff fc7c 	bl	d41c0 <hal_ble_gap_set_tx_power>
   d48c8:	4604      	mov	r4, r0
    hal_ble_gap_get_device_address(&addr, nullptr);
    return addr;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
   d48ca:	a801      	add	r0, sp, #4
   d48cc:	f7ff fe62 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}
   d48d0:	4620      	mov	r0, r4
   d48d2:	b002      	add	sp, #8
   d48d4:	bd10      	pop	{r4, pc}

000d48d6 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d48d6:	b530      	push	{r4, r5, lr}
   d48d8:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d48da:	2400      	movs	r4, #0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d48dc:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d48de:	460d      	mov	r5, r1
    WiringBleLock lk;
   d48e0:	f7ff fe4a 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d48e4:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d48e6:	4621      	mov	r1, r4
   d48e8:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d48ea:	9401      	str	r4, [sp, #4]
   d48ec:	9402      	str	r4, [sp, #8]
   d48ee:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d48f0:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d48f4:	f7ff fc74 	bl	d41e0 <hal_ble_gap_get_advertising_parameters>
   d48f8:	2800      	cmp	r0, #0
   d48fa:	db05      	blt.n	d4908 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d48fc:	4621      	mov	r1, r4
   d48fe:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d4900:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4904:	f7ff fc64 	bl	d41d0 <hal_ble_gap_set_advertising_parameters>
   d4908:	4604      	mov	r4, r0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d490a:	4668      	mov	r0, sp
   d490c:	f7ff fe42 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4910:	4620      	mov	r0, r4
   d4912:	b005      	add	sp, #20
   d4914:	bd30      	pop	{r4, r5, pc}

000d4916 <_ZNK8particle14BleLocalDevice24setAdvertisingParametersEPKNS_20BleAdvertisingParamsE>:

int BleLocalDevice::setAdvertisingParameters(const BleAdvertisingParams* params) const {
   d4916:	4608      	mov	r0, r1
    return hal_ble_gap_set_advertising_parameters(params, nullptr);
   d4918:	2100      	movs	r1, #0
   d491a:	f7ff bc59 	b.w	d41d0 <hal_ble_gap_set_advertising_parameters>

000d491e <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d491e:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4920:	a801      	add	r0, sp, #4
   d4922:	f7ff fe29 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d4926:	2000      	movs	r0, #0
   d4928:	f7ff fc6a 	bl	d4200 <hal_ble_gap_start_advertising>
   d492c:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d492e:	a801      	add	r0, sp, #4
   d4930:	f7ff fe30 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4934:	4620      	mov	r0, r4
   d4936:	b002      	add	sp, #8
   d4938:	bd10      	pop	{r4, pc}
	...

000d493c <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE>:
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}

int BleLocalDevice::advertise(const iBeacon& beacon) const {
   d493c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d493e:	4606      	mov	r6, r0
    WiringBleLock lk;
   d4940:	a801      	add	r0, sp, #4
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}

int BleLocalDevice::advertise(const iBeacon& beacon) const {
   d4942:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4944:	f7ff fe18 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>
    BleAdvertisingData* advData = new(std::nothrow) BleAdvertisingData(beacon);
   d4948:	4912      	ldr	r1, [pc, #72]	; (d4994 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x58>)
   d494a:	2024      	movs	r0, #36	; 0x24
   d494c:	f000 ffc6 	bl	d58dc <_ZnwjRKSt9nothrow_t>
   d4950:	4605      	mov	r5, r0
   d4952:	b198      	cbz	r0, d497c <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x40>
   d4954:	4621      	mov	r1, r4
   d4956:	f7ff ff54 	bl	d4802 <_ZN8particle18BleAdvertisingDataC1ERKNS_7iBeaconE>
    SCOPE_GUARD ({
        free(advData);
    });
    CHECK_TRUE(advData, SYSTEM_ERROR_NO_MEMORY);
    CHECK(hal_ble_gap_set_advertising_data(advData->data(), advData->length(), nullptr));
   d495a:	2200      	movs	r2, #0
   d495c:	6a29      	ldr	r1, [r5, #32]
   d495e:	4628      	mov	r0, r5
   d4960:	f7ff fc46 	bl	d41f0 <hal_ble_gap_set_advertising_data>
   d4964:	2800      	cmp	r0, #0
   d4966:	db0b      	blt.n	d4980 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x44>
    CHECK(setAdvertisingType(BleAdvertisingEventType::SCANABLE_UNDIRECTED));
   d4968:	2105      	movs	r1, #5
   d496a:	4630      	mov	r0, r6
   d496c:	f7ff ffb3 	bl	d48d6 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
   d4970:	2800      	cmp	r0, #0
   d4972:	db05      	blt.n	d4980 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x44>
    return advertise();
   d4974:	4630      	mov	r0, r6
   d4976:	f7ff ffd2 	bl	d491e <_ZNK8particle14BleLocalDevice9advertiseEv>
   d497a:	e001      	b.n	d4980 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x44>
    WiringBleLock lk;
    BleAdvertisingData* advData = new(std::nothrow) BleAdvertisingData(beacon);
    SCOPE_GUARD ({
        free(advData);
    });
    CHECK_TRUE(advData, SYSTEM_ERROR_NO_MEMORY);
   d497c:	4c06      	ldr	r4, [pc, #24]	; (d4998 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x5c>)
   d497e:	e000      	b.n	d4982 <_ZNK8particle14BleLocalDevice9advertiseERKNS_7iBeaconE+0x46>
   d4980:	4604      	mov	r4, r0
}

int BleLocalDevice::advertise(const iBeacon& beacon) const {
    WiringBleLock lk;
    BleAdvertisingData* advData = new(std::nothrow) BleAdvertisingData(beacon);
    SCOPE_GUARD ({
   d4982:	4628      	mov	r0, r5
   d4984:	f7ff fdba 	bl	d44fc <free>
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}

int BleLocalDevice::advertise(const iBeacon& beacon) const {
    WiringBleLock lk;
   d4988:	a801      	add	r0, sp, #4
   d498a:	f7ff fe03 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
    });
    CHECK_TRUE(advData, SYSTEM_ERROR_NO_MEMORY);
    CHECK(hal_ble_gap_set_advertising_data(advData->data(), advData->length(), nullptr));
    CHECK(setAdvertisingType(BleAdvertisingEventType::SCANABLE_UNDIRECTED));
    return advertise();
}
   d498e:	4620      	mov	r0, r4
   d4990:	b002      	add	sp, #8
   d4992:	bd70      	pop	{r4, r5, r6, pc}
   d4994:	000d5f0c 	.word	0x000d5f0c
   d4998:	fffffefc 	.word	0xfffffefc

000d499c <_ZNK8particle14BleLocalDevice7setPPCPEtttt>:

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
}

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
   d499c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    WiringBleLock lk;
   d499e:	4668      	mov	r0, sp

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
}

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
   d49a0:	4615      	mov	r5, r2
   d49a2:	460e      	mov	r6, r1
   d49a4:	461c      	mov	r4, r3
    WiringBleLock lk;
   d49a6:	f7ff fde7 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_conn_params_t ppcp = {};
   d49aa:	2100      	movs	r1, #0
    ppcp.size = sizeof(hal_ble_conn_params_t);
   d49ac:	230c      	movs	r3, #12
    return hal_ble_gap_stop_scan(nullptr);
}

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_conn_params_t ppcp = {};
   d49ae:	9101      	str	r1, [sp, #4]
    ppcp.size = sizeof(hal_ble_conn_params_t);
    ppcp.min_conn_interval = minInterval;
    ppcp.max_conn_interval = maxInterval;
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
   d49b0:	a801      	add	r0, sp, #4
}

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_conn_params_t ppcp = {};
    ppcp.size = sizeof(hal_ble_conn_params_t);
   d49b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    ppcp.min_conn_interval = minInterval;
    ppcp.max_conn_interval = maxInterval;
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
   d49b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    WiringBleLock lk;
    hal_ble_conn_params_t ppcp = {};
    ppcp.size = sizeof(hal_ble_conn_params_t);
    ppcp.min_conn_interval = minInterval;
    ppcp.max_conn_interval = maxInterval;
    ppcp.slave_latency = latency;
   d49ba:	f8ad 400c 	strh.w	r4, [sp, #12]
    ppcp.conn_sup_timeout = timeout;
   d49be:	f8ad 300e 	strh.w	r3, [sp, #14]

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_conn_params_t ppcp = {};
    ppcp.size = sizeof(hal_ble_conn_params_t);
    ppcp.min_conn_interval = minInterval;
   d49c2:	f8ad 6008 	strh.w	r6, [sp, #8]
    ppcp.max_conn_interval = maxInterval;
   d49c6:	f8ad 500a 	strh.w	r5, [sp, #10]
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
   d49ca:	f7ff fbf1 	bl	d41b0 <hal_ble_gap_set_ppcp>
   d49ce:	4604      	mov	r4, r0
int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
}

int BleLocalDevice::setPPCP(uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) const {
    WiringBleLock lk;
   d49d0:	4668      	mov	r0, sp
   d49d2:	f7ff fddf 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
    ppcp.min_conn_interval = minInterval;
    ppcp.max_conn_interval = maxInterval;
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}
   d49d6:	4620      	mov	r0, r4
   d49d8:	b004      	add	sp, #16
   d49da:	bd70      	pop	{r4, r5, r6, pc}

000d49dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d49dc:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d49de:	6983      	ldr	r3, [r0, #24]
   d49e0:	e893 0014 	ldmia.w	r3, {r2, r4}
   d49e4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d49e8:	42a2      	cmp	r2, r4
   d49ea:	4613      	mov	r3, r2
   d49ec:	d007      	beq.n	d49fe <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d49ee:	681d      	ldr	r5, [r3, #0]
   d49f0:	8aed      	ldrh	r5, [r5, #22]
   d49f2:	428d      	cmp	r5, r1
   d49f4:	f102 0208 	add.w	r2, r2, #8
   d49f8:	d1f6      	bne.n	d49e8 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d49fa:	4618      	mov	r0, r3
   d49fc:	bd30      	pop	{r4, r5, pc}
   d49fe:	69c2      	ldr	r2, [r0, #28]
   d4a00:	6813      	ldr	r3, [r2, #0]
   d4a02:	6852      	ldr	r2, [r2, #4]
   d4a04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d4a08:	429a      	cmp	r2, r3
   d4a0a:	4618      	mov	r0, r3
   d4a0c:	d006      	beq.n	d4a1c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d4a0e:	6804      	ldr	r4, [r0, #0]
   d4a10:	8ae4      	ldrh	r4, [r4, #22]
   d4a12:	428c      	cmp	r4, r1
   d4a14:	f103 0308 	add.w	r3, r3, #8
   d4a18:	d1f6      	bne.n	d4a08 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d4a1a:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d4a1c:	2000      	movs	r0, #0
}
   d4a1e:	bd30      	pop	{r4, r5, pc}

000d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4a20:	b510      	push	{r4, lr}
   d4a22:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4a24:	6800      	ldr	r0, [r0, #0]
   d4a26:	b128      	cbz	r0, d4a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4a28:	6843      	ldr	r3, [r0, #4]
   d4a2a:	3b01      	subs	r3, #1
   d4a2c:	6043      	str	r3, [r0, #4]
   d4a2e:	b90b      	cbnz	r3, d4a34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4a30:	f7ff fd7b 	bl	d452a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4a34:	4620      	mov	r0, r4
   d4a36:	bd10      	pop	{r4, pc}

000d4a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4a38:	680b      	ldr	r3, [r1, #0]
   d4a3a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4a3c:	b113      	cbz	r3, d4a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4a3e:	685a      	ldr	r2, [r3, #4]
   d4a40:	3201      	adds	r2, #1
   d4a42:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4a44:	4770      	bx	lr

000d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a46:	b510      	push	{r4, lr}
   d4a48:	f851 3b04 	ldr.w	r3, [r1], #4
   d4a4c:	4604      	mov	r4, r0
   d4a4e:	f840 3b04 	str.w	r3, [r0], #4
   d4a52:	f7ff fff1 	bl	d4a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4a56:	4620      	mov	r0, r4
   d4a58:	bd10      	pop	{r4, pc}

000d4a5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a5a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4a5c:	6804      	ldr	r4, [r0, #0]
   d4a5e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a60:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4a62:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4a66:	42a6      	cmp	r6, r4
   d4a68:	d004      	beq.n	d4a74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a6a:	1d20      	adds	r0, r4, #4
   d4a6c:	f7ff ffd8 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a70:	3408      	adds	r4, #8
   d4a72:	e7f8      	b.n	d4a66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4a74:	6828      	ldr	r0, [r5, #0]
   d4a76:	f7ff fd41 	bl	d44fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4a7a:	4628      	mov	r0, r5
   d4a7c:	bd70      	pop	{r4, r5, r6, pc}

000d4a7e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d4a7e:	b538      	push	{r3, r4, r5, lr}
   d4a80:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4a82:	2010      	movs	r0, #16
   d4a84:	780d      	ldrb	r5, [r1, #0]
   d4a86:	f7ff fb06 	bl	d4096 <_Znwj>
   d4a8a:	b120      	cbz	r0, d4a96 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	6003      	str	r3, [r0, #0]
   d4a90:	6043      	str	r3, [r0, #4]
   d4a92:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d4a94:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4a96:	6020      	str	r0, [r4, #0]
   d4a98:	4620      	mov	r0, r4
   d4a9a:	bd38      	pop	{r3, r4, r5, pc}

000d4a9c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4a9c:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a9e:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4aa0:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4aa2:	b134      	cbz	r4, d4ab2 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	f7ff ffd8 	bl	d4a5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4aaa:	2110      	movs	r1, #16
   d4aac:	4620      	mov	r0, r4
   d4aae:	f000 ff0a 	bl	d58c6 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d4ab2:	4628      	mov	r0, r5
   d4ab4:	bd38      	pop	{r3, r4, r5, pc}

000d4ab6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4ab6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4ab8:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d4aba:	f104 001c 	add.w	r0, r4, #28
   d4abe:	f7ff ffed 	bl	d4a9c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ac8:	f7ff bae7 	b.w	d409a <_ZdlPv>

000d4acc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4acc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4ace:	6804      	ldr	r4, [r0, #0]
   d4ad0:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4ad2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4ad4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4ad8:	42a6      	cmp	r6, r4
   d4ada:	d004      	beq.n	d4ae6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4adc:	1d20      	adds	r0, r4, #4
   d4ade:	f7ff ff9f 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ae2:	3408      	adds	r4, #8
   d4ae4:	e7f8      	b.n	d4ad8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4ae6:	2300      	movs	r3, #0
   d4ae8:	606b      	str	r3, [r5, #4]
   d4aea:	bd70      	pop	{r4, r5, r6, pc}

000d4aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4aec:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4af0:	4606      	mov	r6, r0
   d4af2:	460c      	mov	r4, r1
   d4af4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4af6:	d914      	bls.n	d4b22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d4af8:	4290      	cmp	r0, r2
   d4afa:	d213      	bcs.n	d4b24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d4afc:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d4b00:	1a6c      	subs	r4, r5, r1
   d4b02:	f1a1 0708 	sub.w	r7, r1, #8
   d4b06:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4b08:	42af      	cmp	r7, r5
   d4b0a:	d018      	beq.n	d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d4b0c:	b11c      	cbz	r4, d4b16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4b0e:	4629      	mov	r1, r5
   d4b10:	4620      	mov	r0, r4
   d4b12:	f7ff ff98 	bl	d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4b16:	1d28      	adds	r0, r5, #4
   d4b18:	f7ff ff82 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4b1c:	3d08      	subs	r5, #8
   d4b1e:	3c08      	subs	r4, #8
   d4b20:	e7f2      	b.n	d4b08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4b22:	d00c      	beq.n	d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d4b24:	42ac      	cmp	r4, r5
   d4b26:	d00a      	beq.n	d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d4b28:	b11e      	cbz	r6, d4b32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d4b2a:	4621      	mov	r1, r4
   d4b2c:	4630      	mov	r0, r6
   d4b2e:	f7ff ff8a 	bl	d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4b32:	1d20      	adds	r0, r4, #4
   d4b34:	f7ff ff74 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4b38:	3408      	adds	r4, #8
   d4b3a:	3608      	adds	r6, #8
   d4b3c:	e7f2      	b.n	d4b24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d4b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b40 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b42:	680b      	ldr	r3, [r1, #0]
   d4b44:	69da      	ldr	r2, [r3, #28]
   d4b46:	460e      	mov	r6, r1
   d4b48:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4b4a:	6851      	ldr	r1, [r2, #4]
   d4b4c:	4605      	mov	r5, r0
   d4b4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4b52:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4b54:	4299      	cmp	r1, r3
   d4b56:	d00d      	beq.n	d4b74 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d4b58:	6818      	ldr	r0, [r3, #0]
   d4b5a:	6982      	ldr	r2, [r0, #24]
   d4b5c:	69c0      	ldr	r0, [r0, #28]
   d4b5e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4b62:	4290      	cmp	r0, r2
   d4b64:	d004      	beq.n	d4b70 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d4b66:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4b6a:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d4b6e:	e7f8      	b.n	d4b62 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d4b70:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4b72:	e7ef      	b.n	d4b54 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d4b74:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4b7a:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4b7c:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4b7e:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4b80:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4b82:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4b84:	f8c3 200a 	str.w	r2, [r3, #10]
   d4b88:	f8c3 200e 	str.w	r2, [r3, #14]
   d4b8c:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d4b90:	682c      	ldr	r4, [r5, #0]
   d4b92:	686b      	ldr	r3, [r5, #4]
   d4b94:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4b98:	42bc      	cmp	r4, r7
   d4b9a:	d016      	beq.n	d4bca <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d4b9c:	4631      	mov	r1, r6
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff fe7b 	bl	d489a <_ZN8particle13BlePeerDeviceeqERKS0_>
   d4ba4:	b908      	cbnz	r0, d4baa <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4ba6:	3408      	adds	r4, #8
   d4ba8:	e7f6      	b.n	d4b98 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4baa:	b174      	cbz	r4, d4bca <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d4bac:	1d20      	adds	r0, r4, #4
   d4bae:	f7ff ff37 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4bb2:	682b      	ldr	r3, [r5, #0]
   d4bb4:	686a      	ldr	r2, [r5, #4]
   d4bb6:	f104 0108 	add.w	r1, r4, #8
   d4bba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	f7ff ff94 	bl	d4aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4bc4:	686b      	ldr	r3, [r5, #4]
   d4bc6:	3b01      	subs	r3, #1
   d4bc8:	606b      	str	r3, [r5, #4]
   d4bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4bce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d4bd0:	6846      	ldr	r6, [r0, #4]
   d4bd2:	4668      	mov	r0, sp
   d4bd4:	f7ff ff37 	bl	d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4bd8:	6867      	ldr	r7, [r4, #4]
   d4bda:	68a3      	ldr	r3, [r4, #8]
   d4bdc:	429f      	cmp	r7, r3
   d4bde:	db14      	blt.n	d4c0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d4be0:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4be2:	2f00      	cmp	r7, #0
   d4be4:	dd0b      	ble.n	d4bfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4be6:	00f8      	lsls	r0, r7, #3
   d4be8:	f7ff fc80 	bl	d44ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4bec:	4605      	mov	r5, r0
   d4bee:	b300      	cbz	r0, d4c32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d4bf0:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4bf4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4bf8:	f7ff ff78 	bl	d4aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4bfc:	e000      	b.n	d4c00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4bfe:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4c00:	6820      	ldr	r0, [r4, #0]
   d4c02:	f7ff fc7b 	bl	d44fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4c06:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4c08:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4c0a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4c0c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4c0e:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d4c12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4c16:	4629      	mov	r1, r5
   d4c18:	f105 0008 	add.w	r0, r5, #8
   d4c1c:	f7ff ff66 	bl	d4aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4c20:	b11d      	cbz	r5, d4c2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d4c22:	4669      	mov	r1, sp
   d4c24:	4628      	mov	r0, r5
   d4c26:	f7ff ff0e 	bl	d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d4c2a:	6863      	ldr	r3, [r4, #4]
   d4c2c:	3301      	adds	r3, #1
   d4c2e:	6063      	str	r3, [r4, #4]
   d4c30:	2501      	movs	r5, #1
   d4c32:	a801      	add	r0, sp, #4
   d4c34:	f7ff fef4 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4c38:	4628      	mov	r0, r5
   d4c3a:	b003      	add	sp, #12
   d4c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c3e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4c40:	6804      	ldr	r4, [r0, #0]
   d4c42:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c44:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4c46:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4c4a:	42a6      	cmp	r6, r4
   d4c4c:	d004      	beq.n	d4c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4c4e:	1d20      	adds	r0, r4, #4
   d4c50:	f7ff fee6 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c54:	3408      	adds	r4, #8
   d4c56:	e7f8      	b.n	d4c4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4c58:	6828      	ldr	r0, [r5, #0]
   d4c5a:	f7ff fc4f 	bl	d44fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4c5e:	4628      	mov	r0, r5
   d4c60:	bd70      	pop	{r4, r5, r6, pc}

000d4c62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c62:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c64:	4604      	mov	r4, r0
   d4c66:	b138      	cbz	r0, d4c78 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d4c68:	f7ff ffe9 	bl	d4c3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	210c      	movs	r1, #12
      }
   d4c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c74:	f000 be27 	b.w	d58c6 <_ZdlPvj>
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c7a:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c7c:	4604      	mov	r4, r0
   d4c7e:	b138      	cbz	r0, d4c90 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d4c80:	f7ff ffdd 	bl	d4c3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4c84:	4620      	mov	r0, r4
   d4c86:	210c      	movs	r1, #12
      }
   d4c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c8c:	f000 be1b 	b.w	d58c6 <_ZdlPvj>
   d4c90:	bd10      	pop	{r4, pc}
	...

000d4c94 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4c96:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4c98:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4c9a:	6005      	str	r5, [r0, #0]
   d4c9c:	6045      	str	r5, [r0, #4]
   d4c9e:	6085      	str	r5, [r0, #8]
   d4ca0:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4ca2:	6105      	str	r5, [r0, #16]
   d4ca4:	6145      	str	r5, [r0, #20]
   d4ca6:	6185      	str	r5, [r0, #24]
   d4ca8:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4caa:	4628      	mov	r0, r5
   d4cac:	f7ff fa70 	bl	d4190 <hal_ble_stack_init>
   d4cb0:	b120      	cbz	r0, d4cbc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d4cb2:	4a25      	ldr	r2, [pc, #148]	; (d4d48 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d4cb4:	4629      	mov	r1, r5
   d4cb6:	200a      	movs	r0, #10
   d4cb8:	f7ff fb8a 	bl	d43d0 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4cbc:	2301      	movs	r3, #1
   d4cbe:	f10d 0103 	add.w	r1, sp, #3
   d4cc2:	a801      	add	r0, sp, #4
   d4cc4:	f88d 3003 	strb.w	r3, [sp, #3]
   d4cc8:	f7ff fed9 	bl	d4a7e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ccc:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cce:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4cd0:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d4cd2:	2200      	movs	r2, #0
   d4cd4:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cd6:	b135      	cbz	r5, d4ce6 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f7ff febe 	bl	d4a5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cde:	2110      	movs	r1, #16
   d4ce0:	4628      	mov	r0, r5
   d4ce2:	f000 fdf0 	bl	d58c6 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4ce6:	a801      	add	r0, sp, #4
   d4ce8:	f7ff fed8 	bl	d4a9c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4cec:	2001      	movs	r0, #1
   d4cee:	f7ff f9d2 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cf2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4cf4:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cf6:	b11b      	cbz	r3, d4d00 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cf8:	2101      	movs	r1, #1
   d4cfa:	4618      	mov	r0, r3
   d4cfc:	f000 fde3 	bl	d58c6 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4d00:	200c      	movs	r0, #12
   d4d02:	f7ff f9c8 	bl	d4096 <_Znwj>
   d4d06:	4603      	mov	r3, r0
   d4d08:	b118      	cbz	r0, d4d12 <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	6002      	str	r2, [r0, #0]
   d4d0e:	6042      	str	r2, [r0, #4]
   d4d10:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d12:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4d14:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d16:	b108      	cbz	r0, d4d1c <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d4d18:	f7ff ffa3 	bl	d4c62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4d1c:	200c      	movs	r0, #12
   d4d1e:	f7ff f9ba 	bl	d4096 <_Znwj>
   d4d22:	4603      	mov	r3, r0
   d4d24:	b118      	cbz	r0, d4d2e <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d4d26:	2200      	movs	r2, #0
   d4d28:	6002      	str	r2, [r0, #0]
   d4d2a:	6042      	str	r2, [r0, #4]
   d4d2c:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d2e:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4d30:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d32:	b108      	cbz	r0, d4d38 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d4d34:	f7ff ffa1 	bl	d4c7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d4d38:	2200      	movs	r2, #0
   d4d3a:	4621      	mov	r1, r4
   d4d3c:	4803      	ldr	r0, [pc, #12]	; (d4d4c <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d4d3e:	f7ff fa2f 	bl	d41a0 <hal_ble_set_callback_on_events>
}
   d4d42:	4620      	mov	r0, r4
   d4d44:	b003      	add	sp, #12
   d4d46:	bd30      	pop	{r4, r5, pc}
   d4d48:	000d4291 	.word	0x000d4291
   d4d4c:	000d4e41 	.word	0x000d4e41

000d4d50 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4d50:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4d52:	4c0a      	ldr	r4, [pc, #40]	; (d4d7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4d54:	6823      	ldr	r3, [r4, #0]
   d4d56:	07db      	lsls	r3, r3, #31
   d4d58:	d40e      	bmi.n	d4d78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	f7ff f9a1 	bl	d40a2 <__cxa_guard_acquire>
   d4d60:	b150      	cbz	r0, d4d78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4d62:	4807      	ldr	r0, [pc, #28]	; (d4d80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4d64:	f7ff ff96 	bl	d4c94 <_ZN8particle14BleLocalDeviceC1Ev>
   d4d68:	4620      	mov	r0, r4
   d4d6a:	f7ff f99f 	bl	d40ac <__cxa_guard_release>
   d4d6e:	4a05      	ldr	r2, [pc, #20]	; (d4d84 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4d70:	4905      	ldr	r1, [pc, #20]	; (d4d88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4d72:	4803      	ldr	r0, [pc, #12]	; (d4d80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4d74:	f000 fda2 	bl	d58bc <__aeabi_atexit>
    return instance;
}
   d4d78:	4801      	ldr	r0, [pc, #4]	; (d4d80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4d7a:	bd10      	pop	{r4, pc}
   d4d7c:	2003e3e4 	.word	0x2003e3e4
   d4d80:	2003e3c4 	.word	0x2003e3c4
   d4d84:	2003e3b4 	.word	0x2003e3b4
   d4d88:	000d4d8d 	.word	0x000d4d8d

000d4d8c <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4d8c:	b510      	push	{r4, lr}
   d4d8e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d90:	69c0      	ldr	r0, [r0, #28]
   d4d92:	b108      	cbz	r0, d4d98 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d4d94:	f7ff ff71 	bl	d4c7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d98:	69a0      	ldr	r0, [r4, #24]
   d4d9a:	b108      	cbz	r0, d4da0 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d4d9c:	f7ff ff61 	bl	d4c62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4da0:	6960      	ldr	r0, [r4, #20]
   d4da2:	b110      	cbz	r0, d4daa <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4da4:	2101      	movs	r1, #1
   d4da6:	f000 fd8e 	bl	d58c6 <_ZdlPvj>
   d4daa:	f104 0010 	add.w	r0, r4, #16
   d4dae:	f7ff fe75 	bl	d4a9c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4db2:	4620      	mov	r0, r4
   d4db4:	bd10      	pop	{r4, pc}
	...

000d4db8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4dba:	2500      	movs	r5, #0
   d4dbc:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4dbe:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4dc0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4dc2:	2020      	movs	r0, #32
   d4dc4:	f7ff f967 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4dc8:	4604      	mov	r4, r0
   d4dca:	b1b0      	cbz	r0, d4dfa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d4dcc:	4603      	mov	r3, r0
   d4dce:	a901      	add	r1, sp, #4
   d4dd0:	f803 5b01 	strb.w	r5, [r3], #1
   d4dd4:	f8c0 5001 	str.w	r5, [r0, #1]
   d4dd8:	605d      	str	r5, [r3, #4]
   d4dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4dde:	82c3      	strh	r3, [r0, #22]
   d4de0:	237f      	movs	r3, #127	; 0x7f
   d4de2:	f8c0 500a 	str.w	r5, [r0, #10]
   d4de6:	f8c0 500e 	str.w	r5, [r0, #14]
   d4dea:	f8c0 5012 	str.w	r5, [r0, #18]
   d4dee:	7603      	strb	r3, [r0, #24]
   d4df0:	301c      	adds	r0, #28
   d4df2:	f88d 5004 	strb.w	r5, [sp, #4]
   d4df6:	f7ff fe42 	bl	d4a7e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4dfa:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4dfc:	2014      	movs	r0, #20
   d4dfe:	9301      	str	r3, [sp, #4]
   d4e00:	f7ff f949 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4e04:	b128      	cbz	r0, d4e12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4e06:	2301      	movs	r3, #1
   d4e08:	6043      	str	r3, [r0, #4]
   d4e0a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4e0c:	4b06      	ldr	r3, [pc, #24]	; (d4e28 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d4e0e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4e10:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e12:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4e14:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4e16:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4e18:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e1a:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4e1c:	f7ff fe00 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d4e20:	4630      	mov	r0, r6
   d4e22:	b002      	add	sp, #8
   d4e24:	bd70      	pop	{r4, r5, r6, pc}
   d4e26:	bf00      	nop
   d4e28:	000d5cc8 	.word	0x000d5cc8

000d4e2c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4e2c:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d4e2e:	f04f 0100 	mov.w	r1, #0
   d4e32:	aa01      	add	r2, sp, #4
   d4e34:	4604      	mov	r4, r0
   d4e36:	f7ff ffbf 	bl	d4db8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	b002      	add	sp, #8
   d4e3e:	bd10      	pop	{r4, pc}

000d4e40 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d4e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e42:	4604      	mov	r4, r0
   d4e44:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d4e46:	460d      	mov	r5, r1
   d4e48:	2900      	cmp	r1, #0
   d4e4a:	f000 80a5 	beq.w	d4f98 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4e4e:	a803      	add	r0, sp, #12
   d4e50:	f7ff fb92 	bl	d4578 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d4e54:	6863      	ldr	r3, [r4, #4]
   d4e56:	3b03      	subs	r3, #3
   d4e58:	2b07      	cmp	r3, #7
   d4e5a:	f200 809a 	bhi.w	d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4e5e:	e8df f003 	tbb	[pc, r3]
   d4e62:	4404      	.short	0x4404
   d4e64:	98989898 	.word	0x98989898
   d4e68:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d4e6a:	a806      	add	r0, sp, #24
   d4e6c:	f7ff ffde 	bl	d4e2c <_ZN8particle13BlePeerDeviceC1Ev>
   d4e70:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d4e72:	89a2      	ldrh	r2, [r4, #12]
   d4e74:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d4e76:	8962      	ldrh	r2, [r4, #10]
   d4e78:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d4e7a:	8922      	ldrh	r2, [r4, #8]
   d4e7c:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d4e7e:	8922      	ldrh	r2, [r4, #8]
   d4e80:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d4e82:	8b22      	ldrh	r2, [r4, #24]
   d4e84:	82da      	strh	r2, [r3, #22]
   d4e86:	4622      	mov	r2, r4
   d4e88:	7da1      	ldrb	r1, [r4, #22]
   d4e8a:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d4e8e:	9004      	str	r0, [sp, #16]
   d4e90:	8892      	ldrh	r2, [r2, #4]
   d4e92:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4e96:	9804      	ldr	r0, [sp, #16]
   d4e98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d4e9c:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4e9e:	f8c3 0001 	str.w	r0, [r3, #1]
   d4ea2:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d4ea6:	682b      	ldr	r3, [r5, #0]
   d4ea8:	b113      	cbz	r3, d4eb0 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d4eaa:	68a9      	ldr	r1, [r5, #8]
   d4eac:	a806      	add	r0, sp, #24
   d4eae:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d4eb0:	7ba3      	ldrb	r3, [r4, #14]
   d4eb2:	2b01      	cmp	r3, #1
   d4eb4:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4eb6:	bf0b      	itete	eq
   d4eb8:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4eba:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4ebc:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4ebe:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ec0:	bf0c      	ite	eq
   d4ec2:	69ac      	ldreq	r4, [r5, #24]
   d4ec4:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d4ec6:	6863      	ldr	r3, [r4, #4]
   d4ec8:	2b00      	cmp	r3, #0
   d4eca:	dc0a      	bgt.n	d4ee2 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4ecc:	a906      	add	r1, sp, #24
   d4ece:	a808      	add	r0, sp, #32
   d4ed0:	f7ff fdb9 	bl	d4a46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d4ed4:	a908      	add	r1, sp, #32
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	f7ff fe78 	bl	d4bcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4edc:	a809      	add	r0, sp, #36	; 0x24
   d4ede:	f7ff fd9f 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ee2:	a807      	add	r0, sp, #28
   d4ee4:	f7ff fd9c 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ee8:	e053      	b.n	d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d4eea:	89a1      	ldrh	r1, [r4, #12]
   d4eec:	4628      	mov	r0, r5
   d4eee:	f7ff fd75 	bl	d49dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4ef2:	4604      	mov	r4, r0
   d4ef4:	2800      	cmp	r0, #0
   d4ef6:	d04c      	beq.n	d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d4ef8:	686b      	ldr	r3, [r5, #4]
   d4efa:	b10b      	cbz	r3, d4f00 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d4efc:	68e9      	ldr	r1, [r5, #12]
   d4efe:	4798      	blx	r3
   d4f00:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d4f02:	781a      	ldrb	r2, [r3, #0]
   d4f04:	2a01      	cmp	r2, #1
   d4f06:	d104      	bne.n	d4f12 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d4f08:	4621      	mov	r1, r4
   d4f0a:	69e8      	ldr	r0, [r5, #28]
   d4f0c:	f7ff fe18 	bl	d4b40 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d4f10:	e03f      	b.n	d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4f12:	69da      	ldr	r2, [r3, #28]
   d4f14:	69a8      	ldr	r0, [r5, #24]
   d4f16:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4f18:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4f1a:	2600      	movs	r6, #0
   d4f1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4f20:	4299      	cmp	r1, r3
   d4f22:	d00d      	beq.n	d4f40 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d4f24:	681d      	ldr	r5, [r3, #0]
   d4f26:	69aa      	ldr	r2, [r5, #24]
   d4f28:	69ed      	ldr	r5, [r5, #28]
   d4f2a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4f2e:	4295      	cmp	r5, r2
   d4f30:	d004      	beq.n	d4f3c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d4f32:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4f36:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d4f3a:	e7f8      	b.n	d4f2e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d4f3c:	3308      	adds	r3, #8
   d4f3e:	e7ef      	b.n	d4f20 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d4f40:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4f46:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4f48:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4f4a:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4f4c:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4f4e:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4f50:	f8c3 200a 	str.w	r2, [r3, #10]
   d4f54:	f8c3 200e 	str.w	r2, [r3, #14]
   d4f58:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d4f5c:	f7ff fdb6 	bl	d4acc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d4f60:	e017      	b.n	d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4f62:	8aa1      	ldrh	r1, [r4, #20]
   d4f64:	4628      	mov	r0, r5
   d4f66:	f7ff fd39 	bl	d49dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4f6a:	b190      	cbz	r0, d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d4f6c:	8ae1      	ldrh	r1, [r4, #22]
   d4f6e:	9000      	str	r0, [sp, #0]
   d4f70:	68e3      	ldr	r3, [r4, #12]
   d4f72:	6922      	ldr	r2, [r4, #16]
   d4f74:	6928      	ldr	r0, [r5, #16]
   d4f76:	e00a      	b.n	d4f8e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4f78:	8aa1      	ldrh	r1, [r4, #20]
   d4f7a:	4628      	mov	r0, r5
   d4f7c:	f7ff fd2e 	bl	d49dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4f80:	b138      	cbz	r0, d4f92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4f82:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d4f84:	8ae1      	ldrh	r1, [r4, #22]
   d4f86:	9000      	str	r0, [sp, #0]
   d4f88:	68e3      	ldr	r3, [r4, #12]
   d4f8a:	6922      	ldr	r2, [r4, #16]
   d4f8c:	69e8      	ldr	r0, [r5, #28]
   d4f8e:	f7ff fc43 	bl	d4818 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4f92:	a803      	add	r0, sp, #12
   d4f94:	f7ff fafe 	bl	d4594 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d4f98:	b00b      	add	sp, #44	; 0x2c
   d4f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f9c:	4802      	ldr	r0, [pc, #8]	; (d4fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4f9e:	2300      	movs	r3, #0
   d4fa0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4fa2:	f7ff b955 	b.w	d4250 <os_mutex_recursive_create>
   d4fa6:	bf00      	nop
   d4fa8:	2003e3e8 	.word	0x2003e3e8

000d4fac <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4fae:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4fb0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4fb2:	b113      	cbz	r3, d4fba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fb4:	2203      	movs	r2, #3
   d4fb6:	4601      	mov	r1, r0
   d4fb8:	4798      	blx	r3
    }
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd10      	pop	{r4, pc}

000d4fbe <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fbe:	2200      	movs	r2, #0
   d4fc0:	4611      	mov	r1, r2
   d4fc2:	6840      	ldr	r0, [r0, #4]
   d4fc4:	f7ff ba7a 	b.w	d44bc <network_listening>

000d4fc8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fc8:	2200      	movs	r2, #0
   d4fca:	4611      	mov	r1, r2
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	f7ff ba85 	b.w	d44dc <network_get_listen_timeout>

000d4fd2 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	f7ff ba79 	b.w	d44cc <network_set_listen_timeout>

000d4fda <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fda:	2200      	movs	r2, #0
   d4fdc:	f081 0101 	eor.w	r1, r1, #1
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	f7ff ba63 	b.w	d44ac <network_listen>

000d4fe6 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4fe6:	2300      	movs	r3, #0
   d4fe8:	461a      	mov	r2, r3
   d4fea:	4619      	mov	r1, r3
   d4fec:	6840      	ldr	r0, [r0, #4]
   d4fee:	f7ff ba55 	b.w	d449c <network_off>

000d4ff2 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ff2:	2300      	movs	r3, #0
   d4ff4:	461a      	mov	r2, r3
   d4ff6:	4619      	mov	r1, r3
   d4ff8:	6840      	ldr	r0, [r0, #4]
   d4ffa:	f7ff ba47 	b.w	d448c <network_on>

000d4ffe <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ffe:	2200      	movs	r2, #0
   d5000:	4611      	mov	r1, r2
   d5002:	6840      	ldr	r0, [r0, #4]
   d5004:	f7ff ba3a 	b.w	d447c <network_ready>

000d5008 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5008:	2200      	movs	r2, #0
   d500a:	4611      	mov	r1, r2
   d500c:	6840      	ldr	r0, [r0, #4]
   d500e:	f7ff ba25 	b.w	d445c <network_connecting>

000d5012 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5012:	2200      	movs	r2, #0
   d5014:	2102      	movs	r1, #2
   d5016:	6840      	ldr	r0, [r0, #4]
   d5018:	f7ff ba28 	b.w	d446c <network_disconnect>

000d501c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d501c:	2300      	movs	r3, #0
   d501e:	461a      	mov	r2, r3
   d5020:	6840      	ldr	r0, [r0, #4]
   d5022:	f7ff ba13 	b.w	d444c <network_connect>
	...

000d5028 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5028:	4b02      	ldr	r3, [pc, #8]	; (d5034 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d502a:	2203      	movs	r2, #3
   d502c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d502e:	4a02      	ldr	r2, [pc, #8]	; (d5038 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5030:	601a      	str	r2, [r3, #0]
   d5032:	4770      	bx	lr
   d5034:	2003e3ec 	.word	0x2003e3ec
   d5038:	000d5ce4 	.word	0x000d5ce4

000d503c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d503c:	4770      	bx	lr

000d503e <_ZN9IPAddressD0Ev>:
   d503e:	b510      	push	{r4, lr}
   d5040:	2118      	movs	r1, #24
   d5042:	4604      	mov	r4, r0
   d5044:	f000 fc3f 	bl	d58c6 <_ZdlPvj>
   d5048:	4620      	mov	r0, r4
   d504a:	bd10      	pop	{r4, pc}

000d504c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d504c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d504e:	7d03      	ldrb	r3, [r0, #20]
   d5050:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5052:	b08d      	sub	sp, #52	; 0x34
   d5054:	460e      	mov	r6, r1
   d5056:	f100 0704 	add.w	r7, r0, #4
   d505a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d505e:	d002      	beq.n	d5066 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5060:	f100 0508 	add.w	r5, r0, #8
   d5064:	e018      	b.n	d5098 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5066:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5068:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d506a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d506e:	232f      	movs	r3, #47	; 0x2f
   d5070:	462a      	mov	r2, r5
   d5072:	200a      	movs	r0, #10
   d5074:	f7ff f924 	bl	d42c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5078:	4628      	mov	r0, r5
   d507a:	f000 fdfb 	bl	d5c74 <strlen>
   d507e:	6833      	ldr	r3, [r6, #0]
   d5080:	4602      	mov	r2, r0
   d5082:	68db      	ldr	r3, [r3, #12]
   d5084:	4629      	mov	r1, r5
   d5086:	4630      	mov	r0, r6
   d5088:	4798      	blx	r3
   d508a:	e00f      	b.n	d50ac <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d508c:	b124      	cbz	r4, d5098 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d508e:	212e      	movs	r1, #46	; 0x2e
   d5090:	4630      	mov	r0, r6
   d5092:	f000 f9c7 	bl	d5424 <_ZN5Print5printEc>
   d5096:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5098:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d509c:	220a      	movs	r2, #10
   d509e:	4630      	mov	r0, r6
   d50a0:	f000 f9f0 	bl	d5484 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50a4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50a6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50a8:	d1f0      	bne.n	d508c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50aa:	4620      	mov	r0, r4
    }
    return n;
}
   d50ac:	b00d      	add	sp, #52	; 0x34
   d50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50b0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d50b0:	b510      	push	{r4, lr}
   d50b2:	4b05      	ldr	r3, [pc, #20]	; (d50c8 <_ZN9IPAddressC1Ev+0x18>)
   d50b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50b6:	2211      	movs	r2, #17
   d50b8:	f840 3b04 	str.w	r3, [r0], #4
   d50bc:	2100      	movs	r1, #0
   d50be:	f000 fda8 	bl	d5c12 <memset>
{
    clear();
}
   d50c2:	4620      	mov	r0, r4
   d50c4:	bd10      	pop	{r4, pc}
   d50c6:	bf00      	nop
   d50c8:	000d5d18 	.word	0x000d5d18

000d50cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d50cc:	4603      	mov	r3, r0
   d50ce:	4a07      	ldr	r2, [pc, #28]	; (d50ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d50d0:	b510      	push	{r4, lr}
   d50d2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d50d6:	f101 0210 	add.w	r2, r1, #16
   d50da:	f851 4b04 	ldr.w	r4, [r1], #4
   d50de:	f843 4b04 	str.w	r4, [r3], #4
   d50e2:	4291      	cmp	r1, r2
   d50e4:	d1f9      	bne.n	d50da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50e6:	780a      	ldrb	r2, [r1, #0]
   d50e8:	701a      	strb	r2, [r3, #0]
}
   d50ea:	bd10      	pop	{r4, pc}
   d50ec:	000d5d18 	.word	0x000d5d18

000d50f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d50f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d50fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d50fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5102:	2304      	movs	r3, #4
   d5104:	6041      	str	r1, [r0, #4]
   d5106:	7503      	strb	r3, [r0, #20]
   d5108:	bd10      	pop	{r4, pc}

000d510a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d510a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d510c:	780d      	ldrb	r5, [r1, #0]
   d510e:	788b      	ldrb	r3, [r1, #2]
   d5110:	784a      	ldrb	r2, [r1, #1]
   d5112:	78c9      	ldrb	r1, [r1, #3]
   d5114:	9100      	str	r1, [sp, #0]
   d5116:	4629      	mov	r1, r5
   d5118:	f7ff ffea 	bl	d50f0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d511c:	b003      	add	sp, #12
   d511e:	bd30      	pop	{r4, r5, pc}

000d5120 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5120:	4b01      	ldr	r3, [pc, #4]	; (d5128 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5122:	4a02      	ldr	r2, [pc, #8]	; (d512c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5124:	601a      	str	r2, [r3, #0]
   d5126:	4770      	bx	lr
   d5128:	2003e3f4 	.word	0x2003e3f4
   d512c:	000d5ddc 	.word	0x000d5ddc

000d5130 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5130:	2200      	movs	r2, #0
   d5132:	4611      	mov	r1, r2
   d5134:	6840      	ldr	r0, [r0, #4]
   d5136:	f7ff b9c1 	b.w	d44bc <network_listening>

000d513a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d513a:	2200      	movs	r2, #0
   d513c:	4611      	mov	r1, r2
   d513e:	6840      	ldr	r0, [r0, #4]
   d5140:	f7ff b9cc 	b.w	d44dc <network_get_listen_timeout>

000d5144 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5144:	2200      	movs	r2, #0
   d5146:	6840      	ldr	r0, [r0, #4]
   d5148:	f7ff b9c0 	b.w	d44cc <network_set_listen_timeout>

000d514c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d514c:	2200      	movs	r2, #0
   d514e:	f081 0101 	eor.w	r1, r1, #1
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	f7ff b9aa 	b.w	d44ac <network_listen>

000d5158 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5158:	2300      	movs	r3, #0
   d515a:	461a      	mov	r2, r3
   d515c:	4619      	mov	r1, r3
   d515e:	6840      	ldr	r0, [r0, #4]
   d5160:	f7ff b99c 	b.w	d449c <network_off>

000d5164 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5164:	2300      	movs	r3, #0
   d5166:	461a      	mov	r2, r3
   d5168:	4619      	mov	r1, r3
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	f7ff b98e 	b.w	d448c <network_on>

000d5170 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5170:	2200      	movs	r2, #0
   d5172:	4611      	mov	r1, r2
   d5174:	6840      	ldr	r0, [r0, #4]
   d5176:	f7ff b981 	b.w	d447c <network_ready>

000d517a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d517a:	2200      	movs	r2, #0
   d517c:	4611      	mov	r1, r2
   d517e:	6840      	ldr	r0, [r0, #4]
   d5180:	f7ff b96c 	b.w	d445c <network_connecting>

000d5184 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5184:	2200      	movs	r2, #0
   d5186:	2102      	movs	r1, #2
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	f7ff b96f 	b.w	d446c <network_disconnect>

000d518e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d518e:	2300      	movs	r3, #0
   d5190:	461a      	mov	r2, r3
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff b95a 	b.w	d444c <network_connect>

000d5198 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5198:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d519a:	4605      	mov	r5, r0
   d519c:	b188      	cbz	r0, d51c2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d519e:	6804      	ldr	r4, [r0, #0]
   d51a0:	b14c      	cbz	r4, d51b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d51a2:	68a3      	ldr	r3, [r4, #8]
   d51a4:	b11b      	cbz	r3, d51ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51a6:	2203      	movs	r2, #3
   d51a8:	4621      	mov	r1, r4
   d51aa:	4620      	mov	r0, r4
   d51ac:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51ae:	2110      	movs	r1, #16
   d51b0:	4620      	mov	r0, r4
   d51b2:	f000 fb88 	bl	d58c6 <_ZdlPvj>
   d51b6:	4628      	mov	r0, r5
   d51b8:	2114      	movs	r1, #20
      }
   d51ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51be:	f000 bb82 	b.w	d58c6 <_ZdlPvj>
   d51c2:	bd38      	pop	{r3, r4, r5, pc}

000d51c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d51c4:	b110      	cbz	r0, d51cc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d51c6:	6803      	ldr	r3, [r0, #0]
   d51c8:	685b      	ldr	r3, [r3, #4]
   d51ca:	4718      	bx	r3
   d51cc:	4770      	bx	lr

000d51ce <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d51ce:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d51d0:	6803      	ldr	r3, [r0, #0]
   d51d2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d51d4:	b1bb      	cbz	r3, d5206 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d51d6:	6858      	ldr	r0, [r3, #4]
   d51d8:	f7ff f81a 	bl	d4210 <os_thread_is_current>
   d51dc:	b978      	cbnz	r0, d51fe <_ZN6ThreadD1Ev+0x30>
   d51de:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d51e0:	7c5a      	ldrb	r2, [r3, #17]
   d51e2:	b912      	cbnz	r2, d51ea <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d51e4:	6858      	ldr	r0, [r3, #4]
   d51e6:	f7ff f81b 	bl	d4220 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d51ea:	6823      	ldr	r3, [r4, #0]
   d51ec:	6858      	ldr	r0, [r3, #4]
   d51ee:	f7ff f81f 	bl	d4230 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51f2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d51f4:	2300      	movs	r3, #0
   d51f6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d51f8:	b128      	cbz	r0, d5206 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d51fa:	f7ff ffcd 	bl	d5198 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51fe:	6820      	ldr	r0, [r4, #0]
   d5200:	b108      	cbz	r0, d5206 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5202:	f7ff ffc9 	bl	d5198 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5206:	4620      	mov	r0, r4
   d5208:	bd10      	pop	{r4, pc}
	...

000d520c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d520c:	b538      	push	{r3, r4, r5, lr}
   d520e:	4b0c      	ldr	r3, [pc, #48]	; (d5240 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5210:	6003      	str	r3, [r0, #0]
   d5212:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5214:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5218:	b108      	cbz	r0, d521e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d521a:	f7fe ff40 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d521e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5222:	b135      	cbz	r5, d5232 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5224:	4628      	mov	r0, r5
   d5226:	f7ff ffd2 	bl	d51ce <_ZN6ThreadD1Ev>
   d522a:	2104      	movs	r1, #4
   d522c:	4628      	mov	r0, r5
   d522e:	f000 fb4a 	bl	d58c6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5232:	68a0      	ldr	r0, [r4, #8]
   d5234:	b108      	cbz	r0, d523a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5236:	f7ff ffc5 	bl	d51c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d523a:	4620      	mov	r0, r4
   d523c:	bd38      	pop	{r3, r4, r5, pc}
   d523e:	bf00      	nop
   d5240:	000d5e10 	.word	0x000d5e10

000d5244 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5244:	b538      	push	{r3, r4, r5, lr}
   d5246:	4c0d      	ldr	r4, [pc, #52]	; (d527c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5248:	4b0d      	ldr	r3, [pc, #52]	; (d5280 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d524a:	6023      	str	r3, [r4, #0]
   d524c:	2500      	movs	r5, #0
   d524e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5250:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5254:	6063      	str	r3, [r4, #4]
   d5256:	60a5      	str	r5, [r4, #8]
   d5258:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d525c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5260:	f7fe fff6 	bl	d4250 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5264:	4b07      	ldr	r3, [pc, #28]	; (d5284 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5266:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d526a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d526c:	4620      	mov	r0, r4
   d526e:	4a06      	ldr	r2, [pc, #24]	; (d5288 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5270:	4906      	ldr	r1, [pc, #24]	; (d528c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5276:	f000 bb21 	b.w	d58bc <__aeabi_atexit>
   d527a:	bf00      	nop
   d527c:	2003e3f8 	.word	0x2003e3f8
   d5280:	000d5e44 	.word	0x000d5e44
   d5284:	000d5e10 	.word	0x000d5e10
   d5288:	2003e3b4 	.word	0x2003e3b4
   d528c:	000d520d 	.word	0x000d520d

000d5290 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5290:	2300      	movs	r3, #0
   d5292:	461a      	mov	r2, r3
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	f7ff b8d9 	b.w	d444c <network_connect>

000d529a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d529a:	2200      	movs	r2, #0
   d529c:	2102      	movs	r1, #2
   d529e:	6840      	ldr	r0, [r0, #4]
   d52a0:	f7ff b8e4 	b.w	d446c <network_disconnect>

000d52a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d52a4:	2200      	movs	r2, #0
   d52a6:	4611      	mov	r1, r2
   d52a8:	6840      	ldr	r0, [r0, #4]
   d52aa:	f7ff b8d7 	b.w	d445c <network_connecting>

000d52ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d52ae:	2200      	movs	r2, #0
   d52b0:	4611      	mov	r1, r2
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	f7ff b8e2 	b.w	d447c <network_ready>

000d52b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d52b8:	2300      	movs	r3, #0
   d52ba:	461a      	mov	r2, r3
   d52bc:	4619      	mov	r1, r3
   d52be:	6840      	ldr	r0, [r0, #4]
   d52c0:	f7ff b8e4 	b.w	d448c <network_on>

000d52c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d52c4:	2300      	movs	r3, #0
   d52c6:	461a      	mov	r2, r3
   d52c8:	4619      	mov	r1, r3
   d52ca:	6840      	ldr	r0, [r0, #4]
   d52cc:	f7ff b8e6 	b.w	d449c <network_off>

000d52d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52d0:	2200      	movs	r2, #0
   d52d2:	f081 0101 	eor.w	r1, r1, #1
   d52d6:	6840      	ldr	r0, [r0, #4]
   d52d8:	f7ff b8e8 	b.w	d44ac <network_listen>

000d52dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d52dc:	2200      	movs	r2, #0
   d52de:	6840      	ldr	r0, [r0, #4]
   d52e0:	f7ff b8f4 	b.w	d44cc <network_set_listen_timeout>

000d52e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d52e4:	2200      	movs	r2, #0
   d52e6:	4611      	mov	r1, r2
   d52e8:	6840      	ldr	r0, [r0, #4]
   d52ea:	f7ff b8f7 	b.w	d44dc <network_get_listen_timeout>

000d52ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52ee:	2200      	movs	r2, #0
   d52f0:	4611      	mov	r1, r2
   d52f2:	6840      	ldr	r0, [r0, #4]
   d52f4:	f7ff b8e2 	b.w	d44bc <network_listening>

000d52f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52fc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d52fe:	b095      	sub	sp, #84	; 0x54
   d5300:	4616      	mov	r6, r2
   d5302:	460d      	mov	r5, r1
   d5304:	4607      	mov	r7, r0
    IPAddress addr;
   d5306:	f7ff fed3 	bl	d50b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d530a:	4621      	mov	r1, r4
   d530c:	2220      	movs	r2, #32
   d530e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5310:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5312:	f000 fc7e 	bl	d5c12 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5316:	2340      	movs	r3, #64	; 0x40
   d5318:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d531a:	4621      	mov	r1, r4
   d531c:	466b      	mov	r3, sp
   d531e:	aa0c      	add	r2, sp, #48	; 0x30
   d5320:	4630      	mov	r0, r6
   d5322:	f7fe ffdd 	bl	d42e0 <netdb_getaddrinfo>
    if (!r) {
   d5326:	4604      	mov	r4, r0
   d5328:	2800      	cmp	r0, #0
   d532a:	d144      	bne.n	d53b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d532c:	4602      	mov	r2, r0
   d532e:	2101      	movs	r1, #1
   d5330:	6868      	ldr	r0, [r5, #4]
   d5332:	f7ff f8a3 	bl	d447c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5336:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5338:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d533a:	4622      	mov	r2, r4
   d533c:	6868      	ldr	r0, [r5, #4]
   d533e:	f7ff f89d 	bl	d447c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5342:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5344:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5346:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5348:	2e00      	cmp	r6, #0
   d534a:	d034      	beq.n	d53b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d534c:	2900      	cmp	r1, #0
   d534e:	d132      	bne.n	d53b6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5350:	6873      	ldr	r3, [r6, #4]
   d5352:	2b02      	cmp	r3, #2
   d5354:	d002      	beq.n	d535c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5356:	2b0a      	cmp	r3, #10
   d5358:	d009      	beq.n	d536e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d535a:	e02a      	b.n	d53b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d535c:	f1b8 0f00 	cmp.w	r8, #0
   d5360:	d027      	beq.n	d53b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5362:	6971      	ldr	r1, [r6, #20]
   d5364:	4638      	mov	r0, r7
   d5366:	3104      	adds	r1, #4
   d5368:	f7ff fecf 	bl	d510a <_ZN9IPAddressaSEPKh>
   d536c:	e020      	b.n	d53b0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d536e:	f1b9 0f00 	cmp.w	r9, #0
   d5372:	d01e      	beq.n	d53b2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5374:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5376:	2211      	movs	r2, #17
   d5378:	a801      	add	r0, sp, #4
   d537a:	f000 fc4a 	bl	d5c12 <memset>
                    a.v = 6;
   d537e:	2306      	movs	r3, #6
   d5380:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5384:	ad01      	add	r5, sp, #4
   d5386:	f104 0308 	add.w	r3, r4, #8
   d538a:	3418      	adds	r4, #24
   d538c:	6818      	ldr	r0, [r3, #0]
   d538e:	6859      	ldr	r1, [r3, #4]
   d5390:	462a      	mov	r2, r5
   d5392:	c203      	stmia	r2!, {r0, r1}
   d5394:	3308      	adds	r3, #8
   d5396:	42a3      	cmp	r3, r4
   d5398:	4615      	mov	r5, r2
   d539a:	d1f7      	bne.n	d538c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d539c:	a901      	add	r1, sp, #4
   d539e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d53a0:	ad07      	add	r5, sp, #28
   d53a2:	f7ff fe93 	bl	d50cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d53a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53a8:	1d3c      	adds	r4, r7, #4
   d53aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53ac:	682b      	ldr	r3, [r5, #0]
   d53ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d53b0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d53b2:	69f6      	ldr	r6, [r6, #28]
   d53b4:	e7c8      	b.n	d5348 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d53b6:	9800      	ldr	r0, [sp, #0]
   d53b8:	f7fe ff8a 	bl	d42d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d53bc:	4638      	mov	r0, r7
   d53be:	b015      	add	sp, #84	; 0x54
   d53c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d53c4:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d53c6:	4a03      	ldr	r2, [pc, #12]	; (d53d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53c8:	601a      	str	r2, [r3, #0]
   d53ca:	2200      	movs	r2, #0
   d53cc:	605a      	str	r2, [r3, #4]
   d53ce:	4770      	bx	lr
   d53d0:	2003e5c8 	.word	0x2003e5c8
   d53d4:	000d5e44 	.word	0x000d5e44

000d53d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53da:	4606      	mov	r6, r0
   d53dc:	460d      	mov	r5, r1
   d53de:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53e0:	2400      	movs	r4, #0
  while (size--) {
   d53e2:	42bd      	cmp	r5, r7
   d53e4:	d00c      	beq.n	d5400 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53e6:	6833      	ldr	r3, [r6, #0]
   d53e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53ec:	689b      	ldr	r3, [r3, #8]
   d53ee:	4630      	mov	r0, r6
   d53f0:	4798      	blx	r3
     if (chunk>=0)
   d53f2:	2800      	cmp	r0, #0
   d53f4:	db01      	blt.n	d53fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53f8:	e7f3      	b.n	d53e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53fa:	2c00      	cmp	r4, #0
   d53fc:	bf08      	it	eq
   d53fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5400:	4620      	mov	r0, r4
   d5402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5404 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5404:	b570      	push	{r4, r5, r6, lr}
   d5406:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5408:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d540a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d540c:	b149      	cbz	r1, d5422 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d540e:	f000 fc31 	bl	d5c74 <strlen>
   d5412:	682b      	ldr	r3, [r5, #0]
   d5414:	4602      	mov	r2, r0
   d5416:	4621      	mov	r1, r4
   d5418:	4628      	mov	r0, r5
   d541a:	68db      	ldr	r3, [r3, #12]
    }
   d541c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5420:	4718      	bx	r3
    }
   d5422:	bd70      	pop	{r4, r5, r6, pc}

000d5424 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5424:	6803      	ldr	r3, [r0, #0]
   d5426:	689b      	ldr	r3, [r3, #8]
   d5428:	4718      	bx	r3

000d542a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d542a:	b530      	push	{r4, r5, lr}
   d542c:	b08b      	sub	sp, #44	; 0x2c
   d542e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5430:	2100      	movs	r1, #0
   d5432:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5436:	2a01      	cmp	r2, #1
   d5438:	bf98      	it	ls
   d543a:	220a      	movls	r2, #10
   d543c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5440:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5444:	fb05 3312 	mls	r3, r5, r2, r3
   d5448:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d544c:	2b09      	cmp	r3, #9
   d544e:	bf94      	ite	ls
   d5450:	3330      	addls	r3, #48	; 0x30
   d5452:	3337      	addhi	r3, #55	; 0x37
   d5454:	b2db      	uxtb	r3, r3
   d5456:	4621      	mov	r1, r4
   d5458:	f804 3901 	strb.w	r3, [r4], #-1
   d545c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d545e:	2d00      	cmp	r5, #0
   d5460:	d1ee      	bne.n	d5440 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5462:	f7ff ffcf 	bl	d5404 <_ZN5Print5writeEPKc>
}
   d5466:	b00b      	add	sp, #44	; 0x2c
   d5468:	bd30      	pop	{r4, r5, pc}

000d546a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d546a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d546c:	b92a      	cbnz	r2, d547a <_ZN5Print5printEmi+0x10>
   d546e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5470:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5474:	689b      	ldr	r3, [r3, #8]
   d5476:	b2c9      	uxtb	r1, r1
   d5478:	4718      	bx	r3
  else return printNumber(n, base);
   d547a:	b2d2      	uxtb	r2, r2
}
   d547c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5480:	f7ff bfd3 	b.w	d542a <_ZN5Print11printNumberEmh>

000d5484 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5484:	f7ff bff1 	b.w	d546a <_ZN5Print5printEmi>

000d5488 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5488:	b510      	push	{r4, lr}
   d548a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d548c:	f7ff fd8e 	bl	d4fac <_ZNSt14_Function_baseD1Ev>
   d5490:	4620      	mov	r0, r4
   d5492:	bd10      	pop	{r4, pc}

000d5494 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5494:	4803      	ldr	r0, [pc, #12]	; (d54a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5496:	4a04      	ldr	r2, [pc, #16]	; (d54a8 <_GLOBAL__sub_I_RGB+0x14>)
   d5498:	4904      	ldr	r1, [pc, #16]	; (d54ac <_GLOBAL__sub_I_RGB+0x18>)
   d549a:	2300      	movs	r3, #0
   d549c:	6083      	str	r3, [r0, #8]
   d549e:	f000 ba0d 	b.w	d58bc <__aeabi_atexit>
   d54a2:	bf00      	nop
   d54a4:	2003e5d0 	.word	0x2003e5d0
   d54a8:	2003e3b4 	.word	0x2003e3b4
   d54ac:	000d5489 	.word	0x000d5489

000d54b0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d54b0:	4770      	bx	lr

000d54b2 <_ZN8SPIClassD0Ev>:
   d54b2:	b510      	push	{r4, lr}
   d54b4:	2110      	movs	r1, #16
   d54b6:	4604      	mov	r4, r0
   d54b8:	f000 fa05 	bl	d58c6 <_ZdlPvj>
   d54bc:	4620      	mov	r0, r4
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d54c0:	b570      	push	{r4, r5, r6, lr}
   d54c2:	4b08      	ldr	r3, [pc, #32]	; (d54e4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d54c4:	6003      	str	r3, [r0, #0]
   d54c6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d54c8:	2500      	movs	r5, #0
   d54ca:	460e      	mov	r6, r1
   d54cc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d54d0:	f7fe feb6 	bl	d4240 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d54d4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d54d6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d54d8:	f7fe ff0a 	bl	d42f0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d54dc:	60a5      	str	r5, [r4, #8]
}
   d54de:	4620      	mov	r0, r4
   d54e0:	bd70      	pop	{r4, r5, r6, pc}
   d54e2:	bf00      	nop
   d54e4:	000d5e78 	.word	0x000d5e78

000d54e8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d54e8:	b510      	push	{r4, lr}
   d54ea:	2400      	movs	r4, #0
   d54ec:	7004      	strb	r4, [r0, #0]
   d54ee:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d54f0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d54f2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d54f6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d54f8:	dd07      	ble.n	d550a <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d54fa:	3901      	subs	r1, #1
   d54fc:	4299      	cmp	r1, r3
   d54fe:	d209      	bcs.n	d5514 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d5500:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5504:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d5506:	2301      	movs	r3, #1
   d5508:	e001      	b.n	d550e <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d550a:	d102      	bne.n	d5512 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d550c:	2302      	movs	r3, #2
   d550e:	7003      	strb	r3, [r0, #0]
   d5510:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5512:	8041      	strh	r1, [r0, #2]
    }
}
   d5514:	bd10      	pop	{r4, pc}
	...

000d5518 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5518:	b570      	push	{r4, r5, r6, lr}
   d551a:	b086      	sub	sp, #24
   d551c:	4616      	mov	r6, r2
   d551e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5520:	2300      	movs	r3, #0
   d5522:	9302      	str	r3, [sp, #8]
   d5524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5526:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5528:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d552a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d552c:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d552e:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5532:	4631      	mov	r1, r6
   d5534:	4628      	mov	r0, r5
   d5536:	f7fe ff77 	bl	d4428 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d553a:	4633      	mov	r3, r6
   d553c:	462a      	mov	r2, r5
   d553e:	4601      	mov	r1, r0
   d5540:	a804      	add	r0, sp, #16
   d5542:	f7ff ffd1 	bl	d54e8 <_ZN11SleepResultC1EiPKtj>
   d5546:	4b06      	ldr	r3, [pc, #24]	; (d5560 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d5548:	9804      	ldr	r0, [sp, #16]
   d554a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d554e:	6018      	str	r0, [r3, #0]
   d5550:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	889b      	ldrh	r3, [r3, #4]
   d5556:	6022      	str	r2, [r4, #0]
}
   d5558:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d555a:	80a3      	strh	r3, [r4, #4]
}
   d555c:	b006      	add	sp, #24
   d555e:	bd70      	pop	{r4, r5, r6, pc}
   d5560:	2003e5e0 	.word	0x2003e5e0

000d5564 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5564:	4b04      	ldr	r3, [pc, #16]	; (d5578 <_GLOBAL__sub_I_System+0x14>)
   d5566:	2000      	movs	r0, #0
   d5568:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d556c:	7018      	strb	r0, [r3, #0]
   d556e:	8058      	strh	r0, [r3, #2]
   d5570:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5572:	f7fe bf35 	b.w	d43e0 <set_system_mode>
   d5576:	bf00      	nop
   d5578:	2003e5e0 	.word	0x2003e5e0

000d557c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d557c:	4b02      	ldr	r3, [pc, #8]	; (d5588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d557e:	681a      	ldr	r2, [r3, #0]
   d5580:	4b02      	ldr	r3, [pc, #8]	; (d558c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5582:	601a      	str	r2, [r3, #0]
   d5584:	4770      	bx	lr
   d5586:	bf00      	nop
   d5588:	2003e34c 	.word	0x2003e34c
   d558c:	2003e5e8 	.word	0x2003e5e8

000d5590 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5590:	4770      	bx	lr

000d5592 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5592:	7441      	strb	r1, [r0, #17]
   d5594:	4770      	bx	lr

000d5596 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5596:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5598:	7c00      	ldrb	r0, [r0, #16]
   d559a:	f7fe fee1 	bl	d4360 <HAL_USART_Available_Data_For_Write>
}
   d559e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55a2:	bd08      	pop	{r3, pc}

000d55a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d55a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d55a6:	7c00      	ldrb	r0, [r0, #16]
   d55a8:	f7fe feba 	bl	d4320 <HAL_USART_Available_Data>
}
   d55ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55b0:	bd08      	pop	{r3, pc}

000d55b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d55b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d55b4:	7c00      	ldrb	r0, [r0, #16]
   d55b6:	f7fe fec3 	bl	d4340 <HAL_USART_Peek_Data>
}
   d55ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55be:	bf28      	it	cs
   d55c0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55c4:	bd08      	pop	{r3, pc}

000d55c6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d55c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d55c8:	7c00      	ldrb	r0, [r0, #16]
   d55ca:	f7fe feb1 	bl	d4330 <HAL_USART_Read_Data>
}
   d55ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55d2:	bf28      	it	cs
   d55d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d55d8:	bd08      	pop	{r3, pc}

000d55da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d55da:	7c00      	ldrb	r0, [r0, #16]
   d55dc:	f7fe beb8 	b.w	d4350 <HAL_USART_Flush_Data>

000d55e0 <_ZN11USARTSerialD0Ev>:
   d55e0:	b510      	push	{r4, lr}
   d55e2:	2114      	movs	r1, #20
   d55e4:	4604      	mov	r4, r0
   d55e6:	f000 f96e 	bl	d58c6 <_ZdlPvj>
   d55ea:	4620      	mov	r0, r4
   d55ec:	bd10      	pop	{r4, pc}

000d55ee <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55ee:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55f0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55f2:	4604      	mov	r4, r0
   d55f4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55f6:	b925      	cbnz	r5, d5602 <_ZN11USARTSerial5writeEh+0x14>
   d55f8:	7c00      	ldrb	r0, [r0, #16]
   d55fa:	f7fe feb1 	bl	d4360 <HAL_USART_Available_Data_For_Write>
   d55fe:	2800      	cmp	r0, #0
   d5600:	dd05      	ble.n	d560e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5602:	4631      	mov	r1, r6
   d5604:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d560a:	f7fe be81 	b.w	d4310 <HAL_USART_Write_Data>
  }
  return 0;
}
   d560e:	4628      	mov	r0, r5
   d5610:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5614 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5614:	b510      	push	{r4, lr}
   d5616:	4604      	mov	r4, r0
   d5618:	4608      	mov	r0, r1
   d561a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d561c:	2200      	movs	r2, #0
   d561e:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5624:	60a2      	str	r2, [r4, #8]
   d5626:	4a05      	ldr	r2, [pc, #20]	; (d563c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5628:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d562a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d562c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d562e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5630:	461a      	mov	r2, r3
   d5632:	f7fe fe65 	bl	d4300 <HAL_USART_Init>
}
   d5636:	4620      	mov	r0, r4
   d5638:	bd10      	pop	{r4, pc}
   d563a:	bf00      	nop
   d563c:	000d5eb4 	.word	0x000d5eb4

000d5640 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5640:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5642:	4d0c      	ldr	r5, [pc, #48]	; (d5674 <_Z22__fetch_global_Serial1v+0x34>)
   d5644:	6829      	ldr	r1, [r5, #0]
   d5646:	f011 0401 	ands.w	r4, r1, #1
   d564a:	d111      	bne.n	d5670 <_Z22__fetch_global_Serial1v+0x30>
   d564c:	4628      	mov	r0, r5
   d564e:	f7fe fd28 	bl	d40a2 <__cxa_guard_acquire>
   d5652:	b168      	cbz	r0, d5670 <_Z22__fetch_global_Serial1v+0x30>
   d5654:	4a08      	ldr	r2, [pc, #32]	; (d5678 <_Z22__fetch_global_Serial1v+0x38>)
   d5656:	4b09      	ldr	r3, [pc, #36]	; (d567c <_Z22__fetch_global_Serial1v+0x3c>)
   d5658:	4809      	ldr	r0, [pc, #36]	; (d5680 <_Z22__fetch_global_Serial1v+0x40>)
   d565a:	4621      	mov	r1, r4
   d565c:	f7ff ffda 	bl	d5614 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5660:	4628      	mov	r0, r5
   d5662:	f7fe fd23 	bl	d40ac <__cxa_guard_release>
   d5666:	4a07      	ldr	r2, [pc, #28]	; (d5684 <_Z22__fetch_global_Serial1v+0x44>)
   d5668:	4907      	ldr	r1, [pc, #28]	; (d5688 <_Z22__fetch_global_Serial1v+0x48>)
   d566a:	4805      	ldr	r0, [pc, #20]	; (d5680 <_Z22__fetch_global_Serial1v+0x40>)
   d566c:	f000 f926 	bl	d58bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5670:	4803      	ldr	r0, [pc, #12]	; (d5680 <_Z22__fetch_global_Serial1v+0x40>)
   d5672:	bd38      	pop	{r3, r4, r5, pc}
   d5674:	2003e684 	.word	0x2003e684
   d5678:	2003e688 	.word	0x2003e688
   d567c:	2003e600 	.word	0x2003e600
   d5680:	2003e5ec 	.word	0x2003e5ec
   d5684:	2003e3b4 	.word	0x2003e3b4
   d5688:	000d5591 	.word	0x000d5591

000d568c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d568c:	7441      	strb	r1, [r0, #17]
   d568e:	4770      	bx	lr

000d5690 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5690:	4770      	bx	lr

000d5692 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5692:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5694:	2100      	movs	r1, #0
   d5696:	7c00      	ldrb	r0, [r0, #16]
   d5698:	f7fe fe82 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d569c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56a0:	bf28      	it	cs
   d56a2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56a6:	bd08      	pop	{r3, pc}

000d56a8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d56a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56aa:	2101      	movs	r1, #1
   d56ac:	7c00      	ldrb	r0, [r0, #16]
   d56ae:	f7fe fe77 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d56b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56b6:	bf28      	it	cs
   d56b8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56bc:	bd08      	pop	{r3, pc}

000d56be <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d56be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56c0:	7c00      	ldrb	r0, [r0, #16]
   d56c2:	f7fe fe65 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
}
   d56c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56ca:	bd08      	pop	{r3, pc}

000d56cc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d56cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56ce:	7c00      	ldrb	r0, [r0, #16]
   d56d0:	f7fe fe56 	bl	d4380 <HAL_USB_USART_Available_Data>
}
   d56d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56d8:	bd08      	pop	{r3, pc}

000d56da <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	f7fe be70 	b.w	d43c0 <HAL_USB_USART_Flush_Data>

000d56e0 <_ZN9USBSerialD0Ev>:
   d56e0:	b510      	push	{r4, lr}
   d56e2:	2114      	movs	r1, #20
   d56e4:	4604      	mov	r4, r0
   d56e6:	f000 f8ee 	bl	d58c6 <_ZdlPvj>
   d56ea:	4620      	mov	r0, r4
   d56ec:	bd10      	pop	{r4, pc}

000d56ee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56ee:	b538      	push	{r3, r4, r5, lr}
   d56f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56f2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56f6:	f7fe fe4b 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
   d56fa:	2800      	cmp	r0, #0
   d56fc:	dc01      	bgt.n	d5702 <_ZN9USBSerial5writeEh+0x14>
   d56fe:	7c60      	ldrb	r0, [r4, #17]
   d5700:	b128      	cbz	r0, d570e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5702:	4629      	mov	r1, r5
   d5704:	7c20      	ldrb	r0, [r4, #16]
   d5706:	f7fe fe53 	bl	d43b0 <HAL_USB_USART_Send_Data>
   d570a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d570e:	bd38      	pop	{r3, r4, r5, pc}

000d5710 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5710:	b510      	push	{r4, lr}
   d5712:	4604      	mov	r4, r0
   d5714:	2300      	movs	r3, #0
   d5716:	6063      	str	r3, [r4, #4]
   d5718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d571c:	60a3      	str	r3, [r4, #8]
   d571e:	4b05      	ldr	r3, [pc, #20]	; (d5734 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5720:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5722:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5724:	4608      	mov	r0, r1
{
  _serial = serial;
   d5726:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5728:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d572a:	4611      	mov	r1, r2
   d572c:	f7fe fe20 	bl	d4370 <HAL_USB_USART_Init>
}
   d5730:	4620      	mov	r0, r4
   d5732:	bd10      	pop	{r4, pc}
   d5734:	000d5ee4 	.word	0x000d5ee4

000d5738 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5738:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d573a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d573c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d573e:	2100      	movs	r1, #0
   d5740:	f000 fa67 	bl	d5c12 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5744:	4620      	mov	r0, r4
   d5746:	bd10      	pop	{r4, pc}

000d5748 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5748:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d574a:	4d0e      	ldr	r5, [pc, #56]	; (d5784 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d574c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d574e:	a801      	add	r0, sp, #4
   d5750:	f7ff fff2 	bl	d5738 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5754:	6829      	ldr	r1, [r5, #0]
   d5756:	f011 0401 	ands.w	r4, r1, #1
   d575a:	d110      	bne.n	d577e <_Z16_fetch_usbserialv+0x36>
   d575c:	4628      	mov	r0, r5
   d575e:	f7fe fca0 	bl	d40a2 <__cxa_guard_acquire>
   d5762:	b160      	cbz	r0, d577e <_Z16_fetch_usbserialv+0x36>
   d5764:	aa01      	add	r2, sp, #4
   d5766:	4621      	mov	r1, r4
   d5768:	4807      	ldr	r0, [pc, #28]	; (d5788 <_Z16_fetch_usbserialv+0x40>)
   d576a:	f7ff ffd1 	bl	d5710 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d576e:	4628      	mov	r0, r5
   d5770:	f7fe fc9c 	bl	d40ac <__cxa_guard_release>
   d5774:	4a05      	ldr	r2, [pc, #20]	; (d578c <_Z16_fetch_usbserialv+0x44>)
   d5776:	4906      	ldr	r1, [pc, #24]	; (d5790 <_Z16_fetch_usbserialv+0x48>)
   d5778:	4803      	ldr	r0, [pc, #12]	; (d5788 <_Z16_fetch_usbserialv+0x40>)
   d577a:	f000 f89f 	bl	d58bc <__aeabi_atexit>
	return _usbserial;
}
   d577e:	4802      	ldr	r0, [pc, #8]	; (d5788 <_Z16_fetch_usbserialv+0x40>)
   d5780:	b007      	add	sp, #28
   d5782:	bd30      	pop	{r4, r5, pc}
   d5784:	2003e70c 	.word	0x2003e70c
   d5788:	2003e710 	.word	0x2003e710
   d578c:	2003e3b4 	.word	0x2003e3b4
   d5790:	000d5691 	.word	0x000d5691

000d5794 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5794:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5796:	4b0f      	ldr	r3, [pc, #60]	; (d57d4 <serialEventRun+0x40>)
   d5798:	b133      	cbz	r3, d57a8 <serialEventRun+0x14>
   d579a:	f7ff ffd5 	bl	d5748 <_Z16_fetch_usbserialv>
   d579e:	6803      	ldr	r3, [r0, #0]
   d57a0:	691b      	ldr	r3, [r3, #16]
   d57a2:	4798      	blx	r3
   d57a4:	2800      	cmp	r0, #0
   d57a6:	dc0d      	bgt.n	d57c4 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d57a8:	4b0b      	ldr	r3, [pc, #44]	; (d57d8 <serialEventRun+0x44>)
   d57aa:	b133      	cbz	r3, d57ba <serialEventRun+0x26>
   d57ac:	f7ff ff48 	bl	d5640 <_Z22__fetch_global_Serial1v>
   d57b0:	6803      	ldr	r3, [r0, #0]
   d57b2:	691b      	ldr	r3, [r3, #16]
   d57b4:	4798      	blx	r3
   d57b6:	2800      	cmp	r0, #0
   d57b8:	dc07      	bgt.n	d57ca <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d57ba:	4b08      	ldr	r3, [pc, #32]	; (d57dc <serialEventRun+0x48>)
   d57bc:	b143      	cbz	r3, d57d0 <serialEventRun+0x3c>
   d57be:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d57c2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57c4:	f3af 8000 	nop.w
   d57c8:	e7ee      	b.n	d57a8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57ca:	f3af 8000 	nop.w
   d57ce:	e7f4      	b.n	d57ba <serialEventRun+0x26>
   d57d0:	bd08      	pop	{r3, pc}
   d57d2:	bf00      	nop
	...

000d57e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57e0:	b508      	push	{r3, lr}
	serialEventRun();
   d57e2:	f7ff ffd7 	bl	d5794 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57e6:	f7fe fd5b 	bl	d42a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57ea:	4b01      	ldr	r3, [pc, #4]	; (d57f0 <_post_loop+0x10>)
   d57ec:	6018      	str	r0, [r3, #0]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	2003e728 	.word	0x2003e728

000d57f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57f6:	2300      	movs	r3, #0
   d57f8:	9300      	str	r3, [sp, #0]
   d57fa:	461a      	mov	r2, r3
   d57fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5800:	f7fe fe08 	bl	d4414 <system_ctrl_set_result>
}
   d5804:	b003      	add	sp, #12
   d5806:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d580c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d580c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d580e:	8843      	ldrh	r3, [r0, #2]
   d5810:	2b0a      	cmp	r3, #10
   d5812:	d008      	beq.n	d5826 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5814:	2b50      	cmp	r3, #80	; 0x50
   d5816:	d109      	bne.n	d582c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5818:	4b09      	ldr	r3, [pc, #36]	; (d5840 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d581a:	681b      	ldr	r3, [r3, #0]
   d581c:	b13b      	cbz	r3, d582e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d581e:	b003      	add	sp, #12
   d5820:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5824:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5826:	f7ff ffe5 	bl	d57f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d582a:	e006      	b.n	d583a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d582c:	2300      	movs	r3, #0
   d582e:	9300      	str	r3, [sp, #0]
   d5830:	461a      	mov	r2, r3
   d5832:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5836:	f7fe fded 	bl	d4414 <system_ctrl_set_result>
        break;
    }
}
   d583a:	b003      	add	sp, #12
   d583c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5840:	2003e724 	.word	0x2003e724

000d5844 <module_user_init_hook>:

void module_user_init_hook()
{
   d5844:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5846:	f7fe fd1b 	bl	d4280 <HAL_RNG_GetRandomNumber>
   d584a:	4604      	mov	r4, r0
    srand(seed);
   d584c:	f000 f9ea 	bl	d5c24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5850:	4b07      	ldr	r3, [pc, #28]	; (d5870 <module_user_init_hook+0x2c>)
   d5852:	b113      	cbz	r3, d585a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5854:	4620      	mov	r0, r4
   d5856:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d585a:	2100      	movs	r1, #0
   d585c:	4804      	ldr	r0, [pc, #16]	; (d5870 <module_user_init_hook+0x2c>)
   d585e:	f7fe fded 	bl	d443c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5862:	2100      	movs	r1, #0
   d5864:	4803      	ldr	r0, [pc, #12]	; (d5874 <module_user_init_hook+0x30>)
}
   d5866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d586a:	f7fe bdc9 	b.w	d4400 <system_ctrl_set_app_request_handler>
   d586e:	bf00      	nop
   d5870:	00000000 	.word	0x00000000
   d5874:	000d580d 	.word	0x000d580d

000d5878 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5878:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d587a:	4c0c      	ldr	r4, [pc, #48]	; (d58ac <_GLOBAL__sub_I_SPI+0x34>)
   d587c:	4e0c      	ldr	r6, [pc, #48]	; (d58b0 <_GLOBAL__sub_I_SPI+0x38>)
   d587e:	4d0d      	ldr	r5, [pc, #52]	; (d58b4 <_GLOBAL__sub_I_SPI+0x3c>)
   d5880:	2100      	movs	r1, #0
   d5882:	4620      	mov	r0, r4
   d5884:	f7ff fe1c 	bl	d54c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5888:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d588a:	4c0b      	ldr	r4, [pc, #44]	; (d58b8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d588c:	4632      	mov	r2, r6
   d588e:	4629      	mov	r1, r5
   d5890:	f000 f814 	bl	d58bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5894:	2101      	movs	r1, #1
   d5896:	4620      	mov	r0, r4
   d5898:	f7ff fe12 	bl	d54c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d589c:	4632      	mov	r2, r6
   d589e:	4629      	mov	r1, r5
   d58a0:	4620      	mov	r0, r4
   d58a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d58a6:	f000 b809 	b.w	d58bc <__aeabi_atexit>
   d58aa:	bf00      	nop
   d58ac:	2003e72c 	.word	0x2003e72c
   d58b0:	2003e3b4 	.word	0x2003e3b4
   d58b4:	000d54b1 	.word	0x000d54b1
   d58b8:	2003e73c 	.word	0x2003e73c

000d58bc <__aeabi_atexit>:
   d58bc:	460b      	mov	r3, r1
   d58be:	4601      	mov	r1, r0
   d58c0:	4618      	mov	r0, r3
   d58c2:	f000 b963 	b.w	d5b8c <__cxa_atexit>

000d58c6 <_ZdlPvj>:
   d58c6:	f7fe bbe8 	b.w	d409a <_ZdlPv>
	...

000d58cc <_ZSt15get_new_handlerv>:
   d58cc:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <_ZSt15get_new_handlerv+0xc>)
   d58ce:	6818      	ldr	r0, [r3, #0]
   d58d0:	f3bf 8f5f 	dmb	sy
   d58d4:	4770      	bx	lr
   d58d6:	bf00      	nop
   d58d8:	2003e74c 	.word	0x2003e74c

000d58dc <_ZnwjRKSt9nothrow_t>:
   d58dc:	b510      	push	{r4, lr}
   d58de:	2800      	cmp	r0, #0
   d58e0:	bf14      	ite	ne
   d58e2:	4604      	movne	r4, r0
   d58e4:	2401      	moveq	r4, #1
   d58e6:	4620      	mov	r0, r4
   d58e8:	f7fe fe00 	bl	d44ec <malloc>
   d58ec:	b920      	cbnz	r0, d58f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d58ee:	f7ff ffed 	bl	d58cc <_ZSt15get_new_handlerv>
   d58f2:	b108      	cbz	r0, d58f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d58f4:	4780      	blx	r0
   d58f6:	e7f6      	b.n	d58e6 <_ZnwjRKSt9nothrow_t+0xa>
   d58f8:	bd10      	pop	{r4, pc}
	...

000d58fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d58fc:	4b24      	ldr	r3, [pc, #144]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d58fe:	681a      	ldr	r2, [r3, #0]
   d5900:	07d0      	lsls	r0, r2, #31
   d5902:	bf5c      	itt	pl
   d5904:	2201      	movpl	r2, #1
   d5906:	601a      	strpl	r2, [r3, #0]
   d5908:	4b22      	ldr	r3, [pc, #136]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d1      	lsls	r1, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b20      	ldr	r3, [pc, #128]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d2      	lsls	r2, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b1e      	ldr	r3, [pc, #120]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d0      	lsls	r0, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b1c      	ldr	r3, [pc, #112]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d1      	lsls	r1, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b1a      	ldr	r3, [pc, #104]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d2      	lsls	r2, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b18      	ldr	r3, [pc, #96]	; (d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d0      	lsls	r0, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b16      	ldr	r3, [pc, #88]	; (d59ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d1      	lsls	r1, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b14      	ldr	r3, [pc, #80]	; (d59b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d2      	lsls	r2, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b12      	ldr	r3, [pc, #72]	; (d59b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d0      	lsls	r0, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4b10      	ldr	r3, [pc, #64]	; (d59b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5976:	681a      	ldr	r2, [r3, #0]
   d5978:	07d1      	lsls	r1, r2, #31
   d597a:	bf5c      	itt	pl
   d597c:	2201      	movpl	r2, #1
   d597e:	601a      	strpl	r2, [r3, #0]
   d5980:	4b0e      	ldr	r3, [pc, #56]	; (d59bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5982:	681a      	ldr	r2, [r3, #0]
   d5984:	07d2      	lsls	r2, r2, #31
   d5986:	bf5c      	itt	pl
   d5988:	2201      	movpl	r2, #1
   d598a:	601a      	strpl	r2, [r3, #0]
   d598c:	4770      	bx	lr
   d598e:	bf00      	nop
   d5990:	2003e77c 	.word	0x2003e77c
   d5994:	2003e778 	.word	0x2003e778
   d5998:	2003e774 	.word	0x2003e774
   d599c:	2003e770 	.word	0x2003e770
   d59a0:	2003e76c 	.word	0x2003e76c
   d59a4:	2003e768 	.word	0x2003e768
   d59a8:	2003e764 	.word	0x2003e764
   d59ac:	2003e760 	.word	0x2003e760
   d59b0:	2003e75c 	.word	0x2003e75c
   d59b4:	2003e758 	.word	0x2003e758
   d59b8:	2003e754 	.word	0x2003e754
   d59bc:	2003e750 	.word	0x2003e750

000d59c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d59c0:	4b18      	ldr	r3, [pc, #96]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d1      	lsls	r1, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b16      	ldr	r3, [pc, #88]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d2      	lsls	r2, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b14      	ldr	r3, [pc, #80]	; (d5a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d0      	lsls	r0, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b12      	ldr	r3, [pc, #72]	; (d5a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d1      	lsls	r1, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b10      	ldr	r3, [pc, #64]	; (d5a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d2      	lsls	r2, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b0e      	ldr	r3, [pc, #56]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d0      	lsls	r0, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4b0c      	ldr	r3, [pc, #48]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	07d1      	lsls	r1, r2, #31
   d5a0e:	bf5c      	itt	pl
   d5a10:	2201      	movpl	r2, #1
   d5a12:	601a      	strpl	r2, [r3, #0]
   d5a14:	4b0a      	ldr	r3, [pc, #40]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a16:	681a      	ldr	r2, [r3, #0]
   d5a18:	07d2      	lsls	r2, r2, #31
   d5a1a:	bf5c      	itt	pl
   d5a1c:	2201      	movpl	r2, #1
   d5a1e:	601a      	strpl	r2, [r3, #0]
   d5a20:	4770      	bx	lr
   d5a22:	bf00      	nop
   d5a24:	2003e79c 	.word	0x2003e79c
   d5a28:	2003e798 	.word	0x2003e798
   d5a2c:	2003e794 	.word	0x2003e794
   d5a30:	2003e790 	.word	0x2003e790
   d5a34:	2003e78c 	.word	0x2003e78c
   d5a38:	2003e788 	.word	0x2003e788
   d5a3c:	2003e784 	.word	0x2003e784
   d5a40:	2003e780 	.word	0x2003e780

000d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a44:	4b18      	ldr	r3, [pc, #96]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d1      	lsls	r1, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b16      	ldr	r3, [pc, #88]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d2      	lsls	r2, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b14      	ldr	r3, [pc, #80]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d0      	lsls	r0, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b12      	ldr	r3, [pc, #72]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b10      	ldr	r3, [pc, #64]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b0e      	ldr	r3, [pc, #56]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d0      	lsls	r0, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b0c      	ldr	r3, [pc, #48]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d1      	lsls	r1, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b0a      	ldr	r3, [pc, #40]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d2      	lsls	r2, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4770      	bx	lr
   d5aa6:	bf00      	nop
   d5aa8:	2003e7bc 	.word	0x2003e7bc
   d5aac:	2003e7b8 	.word	0x2003e7b8
   d5ab0:	2003e7b4 	.word	0x2003e7b4
   d5ab4:	2003e7b0 	.word	0x2003e7b0
   d5ab8:	2003e7ac 	.word	0x2003e7ac
   d5abc:	2003e7a8 	.word	0x2003e7a8
   d5ac0:	2003e7a4 	.word	0x2003e7a4
   d5ac4:	2003e7a0 	.word	0x2003e7a0

000d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5ac8:	4b24      	ldr	r3, [pc, #144]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d0      	lsls	r0, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b22      	ldr	r3, [pc, #136]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d1      	lsls	r1, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b20      	ldr	r3, [pc, #128]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d2      	lsls	r2, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4b1e      	ldr	r3, [pc, #120]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d0      	lsls	r0, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b1c      	ldr	r3, [pc, #112]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d1      	lsls	r1, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b1a      	ldr	r3, [pc, #104]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d2      	lsls	r2, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b18      	ldr	r3, [pc, #96]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d0      	lsls	r0, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b16      	ldr	r3, [pc, #88]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d1      	lsls	r1, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4b14      	ldr	r3, [pc, #80]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d2      	lsls	r2, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4b12      	ldr	r3, [pc, #72]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5b36:	681a      	ldr	r2, [r3, #0]
   d5b38:	07d0      	lsls	r0, r2, #31
   d5b3a:	bf5c      	itt	pl
   d5b3c:	2201      	movpl	r2, #1
   d5b3e:	601a      	strpl	r2, [r3, #0]
   d5b40:	4b10      	ldr	r3, [pc, #64]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5b42:	681a      	ldr	r2, [r3, #0]
   d5b44:	07d1      	lsls	r1, r2, #31
   d5b46:	bf5c      	itt	pl
   d5b48:	2201      	movpl	r2, #1
   d5b4a:	601a      	strpl	r2, [r3, #0]
   d5b4c:	4b0e      	ldr	r3, [pc, #56]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5b4e:	681a      	ldr	r2, [r3, #0]
   d5b50:	07d2      	lsls	r2, r2, #31
   d5b52:	bf5c      	itt	pl
   d5b54:	2201      	movpl	r2, #1
   d5b56:	601a      	strpl	r2, [r3, #0]
   d5b58:	4770      	bx	lr
   d5b5a:	bf00      	nop
   d5b5c:	2003e7ec 	.word	0x2003e7ec
   d5b60:	2003e7e8 	.word	0x2003e7e8
   d5b64:	2003e7e4 	.word	0x2003e7e4
   d5b68:	2003e7e0 	.word	0x2003e7e0
   d5b6c:	2003e7dc 	.word	0x2003e7dc
   d5b70:	2003e7d8 	.word	0x2003e7d8
   d5b74:	2003e7d4 	.word	0x2003e7d4
   d5b78:	2003e7d0 	.word	0x2003e7d0
   d5b7c:	2003e7cc 	.word	0x2003e7cc
   d5b80:	2003e7c8 	.word	0x2003e7c8
   d5b84:	2003e7c4 	.word	0x2003e7c4
   d5b88:	2003e7c0 	.word	0x2003e7c0

000d5b8c <__cxa_atexit>:
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	4c05      	ldr	r4, [pc, #20]	; (d5ba4 <__cxa_atexit+0x18>)
   d5b90:	4613      	mov	r3, r2
   d5b92:	b12c      	cbz	r4, d5ba0 <__cxa_atexit+0x14>
   d5b94:	460a      	mov	r2, r1
   d5b96:	4601      	mov	r1, r0
   d5b98:	2002      	movs	r0, #2
   d5b9a:	f3af 8000 	nop.w
   d5b9e:	bd10      	pop	{r4, pc}
   d5ba0:	4620      	mov	r0, r4
   d5ba2:	bd10      	pop	{r4, pc}
   d5ba4:	00000000 	.word	0x00000000

000d5ba8 <memcmp>:
   d5ba8:	b510      	push	{r4, lr}
   d5baa:	3901      	subs	r1, #1
   d5bac:	4402      	add	r2, r0
   d5bae:	4290      	cmp	r0, r2
   d5bb0:	d007      	beq.n	d5bc2 <memcmp+0x1a>
   d5bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d5bb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d5bba:	42a3      	cmp	r3, r4
   d5bbc:	d0f7      	beq.n	d5bae <memcmp+0x6>
   d5bbe:	1b18      	subs	r0, r3, r4
   d5bc0:	bd10      	pop	{r4, pc}
   d5bc2:	2000      	movs	r0, #0
   d5bc4:	bd10      	pop	{r4, pc}

000d5bc6 <memcpy>:
   d5bc6:	b510      	push	{r4, lr}
   d5bc8:	1e43      	subs	r3, r0, #1
   d5bca:	440a      	add	r2, r1
   d5bcc:	4291      	cmp	r1, r2
   d5bce:	d004      	beq.n	d5bda <memcpy+0x14>
   d5bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5bd8:	e7f8      	b.n	d5bcc <memcpy+0x6>
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <memmove>:
   d5bdc:	4288      	cmp	r0, r1
   d5bde:	b510      	push	{r4, lr}
   d5be0:	eb01 0302 	add.w	r3, r1, r2
   d5be4:	d801      	bhi.n	d5bea <memmove+0xe>
   d5be6:	1e42      	subs	r2, r0, #1
   d5be8:	e00b      	b.n	d5c02 <memmove+0x26>
   d5bea:	4298      	cmp	r0, r3
   d5bec:	d2fb      	bcs.n	d5be6 <memmove+0xa>
   d5bee:	1881      	adds	r1, r0, r2
   d5bf0:	1ad2      	subs	r2, r2, r3
   d5bf2:	42d3      	cmn	r3, r2
   d5bf4:	d004      	beq.n	d5c00 <memmove+0x24>
   d5bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5bfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d5bfe:	e7f8      	b.n	d5bf2 <memmove+0x16>
   d5c00:	bd10      	pop	{r4, pc}
   d5c02:	4299      	cmp	r1, r3
   d5c04:	d004      	beq.n	d5c10 <memmove+0x34>
   d5c06:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5c0a:	f802 4f01 	strb.w	r4, [r2, #1]!
   d5c0e:	e7f8      	b.n	d5c02 <memmove+0x26>
   d5c10:	bd10      	pop	{r4, pc}

000d5c12 <memset>:
   d5c12:	4402      	add	r2, r0
   d5c14:	4603      	mov	r3, r0
   d5c16:	4293      	cmp	r3, r2
   d5c18:	d002      	beq.n	d5c20 <memset+0xe>
   d5c1a:	f803 1b01 	strb.w	r1, [r3], #1
   d5c1e:	e7fa      	b.n	d5c16 <memset+0x4>
   d5c20:	4770      	bx	lr
	...

000d5c24 <srand>:
   d5c24:	b538      	push	{r3, r4, r5, lr}
   d5c26:	4b12      	ldr	r3, [pc, #72]	; (d5c70 <srand+0x4c>)
   d5c28:	681c      	ldr	r4, [r3, #0]
   d5c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c2c:	4605      	mov	r5, r0
   d5c2e:	b9d3      	cbnz	r3, d5c66 <srand+0x42>
   d5c30:	2018      	movs	r0, #24
   d5c32:	f7fe fc5b 	bl	d44ec <malloc>
   d5c36:	f243 330e 	movw	r3, #13070	; 0x330e
   d5c3a:	63a0      	str	r0, [r4, #56]	; 0x38
   d5c3c:	8003      	strh	r3, [r0, #0]
   d5c3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5c42:	8043      	strh	r3, [r0, #2]
   d5c44:	f241 2334 	movw	r3, #4660	; 0x1234
   d5c48:	8083      	strh	r3, [r0, #4]
   d5c4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5c4e:	80c3      	strh	r3, [r0, #6]
   d5c50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5c54:	8103      	strh	r3, [r0, #8]
   d5c56:	2305      	movs	r3, #5
   d5c58:	8143      	strh	r3, [r0, #10]
   d5c5a:	230b      	movs	r3, #11
   d5c5c:	8183      	strh	r3, [r0, #12]
   d5c5e:	2201      	movs	r2, #1
   d5c60:	2300      	movs	r3, #0
   d5c62:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c68:	2200      	movs	r2, #0
   d5c6a:	611d      	str	r5, [r3, #16]
   d5c6c:	615a      	str	r2, [r3, #20]
   d5c6e:	bd38      	pop	{r3, r4, r5, pc}
   d5c70:	2003e3b0 	.word	0x2003e3b0

000d5c74 <strlen>:
   d5c74:	4603      	mov	r3, r0
   d5c76:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c7a:	2a00      	cmp	r2, #0
   d5c7c:	d1fb      	bne.n	d5c76 <strlen+0x2>
   d5c7e:	1a18      	subs	r0, r3, r0
   d5c80:	3801      	subs	r0, #1
   d5c82:	4770      	bx	lr

000d5c84 <dynalib_user>:
   d5c84:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5c94:	0000 0000 6339 6231 6238 6364 352d 3435     ....9c1b8bdc-554
   d5ca4:	2d38 6534 3233 382d 3761 2d38 3962 3566     8-4e32-8a78-b9f5
   d5cb4:	3432 3331 3231 3630 0000 0000               24131206....

000d5cc0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d5cc8:	4513 000d 4519 000d 4ab7 000d 4527 000d     .E...E...J..'E..
   d5cd8:	4515 000d                                   .E..

000d5cdc <_ZTVN5spark13EthernetClassE>:
	...
   d5ce4:	501d 000d 5013 000d 5009 000d 4fff 000d     .P...P...P...O..
   d5cf4:	4ff3 000d 4fe7 000d 4fdb 000d 4fd3 000d     .O...O...O...O..
   d5d04:	4fc9 000d 4fbf 000d 52f9 000d               .O...O...R..

000d5d10 <_ZTV9IPAddress>:
	...
   d5d18:	504d 000d 503d 000d 503f 000d 0066 6e6c     MP..=P..?P..f.ln
   d5d28:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d5d38:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d5d48:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5d58:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5d68:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d5d78:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d5d88:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d5d98:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d5da8:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d5db8:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d5dc8:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d5dd8:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d5de8:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5df8:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d5e08 <_ZTVN5spark9MeshClassE>:
	...
   d5e10:	518f 000d 5185 000d 517b 000d 5171 000d     .Q...Q..{Q..qQ..
   d5e20:	5165 000d 5159 000d 514d 000d 5145 000d     eQ..YQ..MQ..EQ..
   d5e30:	513b 000d 5131 000d 52f9 000d               ;Q..1Q...R..

000d5e3c <_ZTVN5spark12NetworkClassE>:
	...
   d5e44:	5291 000d 529b 000d 52a5 000d 52af 000d     .R...R...R...R..
   d5e54:	52b9 000d 52c5 000d 52d1 000d 52dd 000d     .R...R...R...R..
   d5e64:	52e5 000d 52ef 000d 52f9 000d               .R...R...R..

000d5e70 <_ZTV8SPIClass>:
	...
   d5e78:	54b1 000d 54b3 000d 005a 2b25 3330 3a64     .T...T..Z.%+03d:
   d5e88:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d5e98:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d5ea8:	0000 0000                                   ....

000d5eac <_ZTV11USARTSerial>:
	...
   d5eb4:	5591 000d 55e1 000d 55ef 000d 53d9 000d     .U...U...U...S..
   d5ec4:	55a5 000d 55c7 000d 55b3 000d 55db 000d     .U...U...U...U..
   d5ed4:	5593 000d 5597 000d                         .U...U..

000d5edc <_ZTV9USBSerial>:
	...
   d5ee4:	5691 000d 56e1 000d 56ef 000d 53d9 000d     .V...V...V...S..
   d5ef4:	56cd 000d 5693 000d 56a9 000d 56db 000d     .V...V...V...V..
   d5f04:	56bf 000d 568d 000d                         .V...V..

000d5f0c <_ZSt7nothrow>:
   d5f0c:	0000 0000                                   ....

000d5f10 <__sf_fake_stdin>:
	...

000d5f30 <__sf_fake_stdout>:
	...

000d5f50 <__sf_fake_stderr>:
	...
   d5f70:	0043                                        C.

000d5f72 <link_const_variable_data_end>:
	...

000d5f74 <link_constructors_location>:
   d5f74:	000d4165 	.word	0x000d4165
   d5f78:	000d4f9d 	.word	0x000d4f9d
   d5f7c:	000d5029 	.word	0x000d5029
   d5f80:	000d5121 	.word	0x000d5121
   d5f84:	000d5245 	.word	0x000d5245
   d5f88:	000d53c5 	.word	0x000d53c5
   d5f8c:	000d5495 	.word	0x000d5495
   d5f90:	000d5565 	.word	0x000d5565
   d5f94:	000d557d 	.word	0x000d557d
   d5f98:	000d5879 	.word	0x000d5879
   d5f9c:	000d58fd 	.word	0x000d58fd
   d5fa0:	000d59c1 	.word	0x000d59c1
   d5fa4:	000d5a45 	.word	0x000d5a45
   d5fa8:	000d5ac9 	.word	0x000d5ac9

000d5fac <link_constructors_end>:
   d5fac:	00000000 	.word	0x00000000
