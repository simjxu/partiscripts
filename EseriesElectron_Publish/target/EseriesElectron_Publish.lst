
/Users/simonxu/Projects/Github-simjxu/partiscripts/EseriesElectron_Publish/target/EseriesElectron_Publish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08083780  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000074  20000400  08083784  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000650  20000474  20000474  00030474  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080837f8  080837f8  000237f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08083820  08083820  00023820  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000aa302  00000000  00000000  00023824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f9fd  00000000  00000000  000cdb26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014c11  00000000  00000000  000dd523  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020b0  00000000  00000000  000f2134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000034f0  00000000  00000000  000f41e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024ebe  00000000  00000000  000f76d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022557  00000000  00000000  0011c592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a6a9c  00000000  00000000  0013eae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000be90  00000000  00000000  001e5588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	ac 32 08 08                                         .2..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 ffe9 	bl	8083004 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 f809 	bl	8083050 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08083784 	.word	0x08083784
 808004c:	20000474 	.word	0x20000474
 8080050:	20000474 	.word	0x20000474
 8080054:	20000ac4 	.word	0x20000ac4
 8080058:	20000ac4 	.word	0x20000ac4

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fd79 	bl	8082b54 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08083744 	.word	0x08083744
 8080084:	08083778 	.word	0x08083778

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b848 	b.w	808011c <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f861 	bl	8080154 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 bd1f 	b.w	8082ad8 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bb9d 	b.w	80807d8 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bba3 	b.w	80807e8 <free>
	...

080800a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80800a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800a6:	4a03      	ldr	r2, [pc, #12]	; (80800b4 <__cxa_pure_virtual+0x10>)
 80800a8:	2100      	movs	r1, #0
 80800aa:	200c      	movs	r0, #12
 80800ac:	f000 fac8 	bl	8080640 <panic_>
 80800b0:	e7fe      	b.n	80800b0 <__cxa_pure_virtual+0xc>
 80800b2:	bf00      	nop
 80800b4:	08080431 	.word	0x08080431

080800b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800b8:	7800      	ldrb	r0, [r0, #0]
 80800ba:	fab0 f080 	clz	r0, r0
 80800be:	0940      	lsrs	r0, r0, #5
 80800c0:	4770      	bx	lr

080800c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800c2:	2301      	movs	r3, #1
 80800c4:	7003      	strb	r3, [r0, #0]
 80800c6:	4770      	bx	lr

080800c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80800c8:	4770      	bx	lr

080800ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80800ca:	6a00      	ldr	r0, [r0, #32]
 80800cc:	6803      	ldr	r3, [r0, #0]
 80800ce:	68db      	ldr	r3, [r3, #12]
 80800d0:	4718      	bx	r3
	...

080800d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80800d4:	b510      	push	{r4, lr}
 80800d6:	4604      	mov	r4, r0
 80800d8:	4b09      	ldr	r3, [pc, #36]	; (8080100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80800da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80800dc:	f001 fc3a 	bl	8081954 <_ZN5spark10LogManager8instanceEv>
 80800e0:	4621      	mov	r1, r4
 80800e2:	f001 fe36 	bl	8081d52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80800e6:	f002 fc07 	bl	80828f8 <_Z16_fetch_usbserialv>
 80800ea:	f002 fbeb 	bl	80828c4 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80800ee:	4620      	mov	r0, r4
 80800f0:	4b04      	ldr	r3, [pc, #16]	; (8080104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80800f2:	f840 3b04 	str.w	r3, [r0], #4
 80800f6:	f001 fd33 	bl	8081b60 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80800fa:	4620      	mov	r0, r4
 80800fc:	bd10      	pop	{r4, pc}
 80800fe:	bf00      	nop
 8080100:	080832e0 	.word	0x080832e0
 8080104:	080832c8 	.word	0x080832c8

08080108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 8080108:	b510      	push	{r4, lr}
 808010a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 808010c:	f7ff ffe2 	bl	80800d4 <_ZN5spark16SerialLogHandlerD1Ev>
 8080110:	4620      	mov	r0, r4
 8080112:	2124      	movs	r1, #36	; 0x24
 8080114:	f002 fe03 	bl	8082d1e <_ZdlPvj>
 8080118:	4620      	mov	r0, r4
 808011a:	bd10      	pop	{r4, pc}

0808011c <setup>:
SYSTEM_THREAD(ENABLED);

#define PUBLISH_INTERVAL_SEC (2)

void setup() {
    pinMode(D1, OUTPUT);
 808011c:	2101      	movs	r1, #1
SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

#define PUBLISH_INTERVAL_SEC (2)

void setup() {
 808011e:	b510      	push	{r4, lr}
    pinMode(D1, OUTPUT);
 8080120:	4608      	mov	r0, r1
 8080122:	f002 fd67 	bl	8082bf4 <pinMode>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080126:	f000 fae7 	bl	80806f8 <spark_cloud_flag_connect>
 808012a:	4c09      	ldr	r4, [pc, #36]	; (8080150 <setup+0x34>)
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808012c:	2200      	movs	r2, #0
 808012e:	4611      	mov	r1, r2
 8080130:	6860      	ldr	r0, [r4, #4]
 8080132:	f000 fb19 	bl	8080768 <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080136:	b138      	cbz	r0, 8080148 <setup+0x2c>
    Particle.connect();
    waitUntil(Cellular.ready);
}
 8080138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808013c:	4b04      	ldr	r3, [pc, #16]	; (8080150 <setup+0x34>)
 808013e:	2200      	movs	r2, #0
 8080140:	4611      	mov	r1, r2
 8080142:	6858      	ldr	r0, [r3, #4]
 8080144:	f000 bb10 	b.w	8080768 <network_ready>
            spark_process();
 8080148:	f000 face 	bl	80806e8 <spark_process>
 808014c:	e7ee      	b.n	808012c <setup+0x10>
 808014e:	bf00      	nop
 8080150:	200004b0 	.word	0x200004b0

08080154 <loop>:

uint16_t counter = 0;

void loop() {
 8080154:	b530      	push	{r4, r5, lr}
    //     break;
    //   default:
    //     Log("ERROR <%d>: Failed to acquire cellular global identity!", result);
    // }
    // Particle.publishVitals();
    Particle.publish("connectivity", String(counter++), PRIVATE);
 8080156:	4b2b      	ldr	r3, [pc, #172]	; (8080204 <loop+0xb0>)
    waitUntil(Cellular.ready);
}

uint16_t counter = 0;

void loop() {
 8080158:	b089      	sub	sp, #36	; 0x24
    //     break;
    //   default:
    //     Log("ERROR <%d>: Failed to acquire cellular global identity!", result);
    // }
    // Particle.publishVitals();
    Particle.publish("connectivity", String(counter++), PRIVATE);
 808015a:	8819      	ldrh	r1, [r3, #0]
 808015c:	a804      	add	r0, sp, #16
 808015e:	1c4a      	adds	r2, r1, #1
 8080160:	801a      	strh	r2, [r3, #0]
 8080162:	220a      	movs	r2, #10
 8080164:	f002 fa9f 	bl	80826a6 <_ZN6StringC1Eih>
 8080168:	4b27      	ldr	r3, [pc, #156]	; (8080208 <loop+0xb4>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808016a:	9a04      	ldr	r2, [sp, #16]
 808016c:	781b      	ldrb	r3, [r3, #0]
 808016e:	4927      	ldr	r1, [pc, #156]	; (808020c <loop+0xb8>)
 8080170:	f88d 3000 	strb.w	r3, [sp]
 8080174:	a802      	add	r0, sp, #8
 8080176:	233c      	movs	r3, #60	; 0x3c
 8080178:	f000 fd48 	bl	8080c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808017c:	9c03      	ldr	r4, [sp, #12]
 808017e:	b17c      	cbz	r4, 80801a0 <loop+0x4c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080180:	6863      	ldr	r3, [r4, #4]
 8080182:	3b01      	subs	r3, #1
 8080184:	6063      	str	r3, [r4, #4]
 8080186:	b95b      	cbnz	r3, 80801a0 <loop+0x4c>
        {
          _M_dispose();
 8080188:	6823      	ldr	r3, [r4, #0]
 808018a:	4620      	mov	r0, r4
 808018c:	689b      	ldr	r3, [r3, #8]
 808018e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080190:	68a3      	ldr	r3, [r4, #8]
 8080192:	3b01      	subs	r3, #1
 8080194:	60a3      	str	r3, [r4, #8]
 8080196:	b91b      	cbnz	r3, 80801a0 <loop+0x4c>
            _M_destroy();
 8080198:	6823      	ldr	r3, [r4, #0]
 808019a:	4620      	mov	r0, r4
 808019c:	68db      	ldr	r3, [r3, #12]
 808019e:	4798      	blx	r3
 80801a0:	a804      	add	r0, sp, #16
 80801a2:	f002 fa0e 	bl	80825c2 <_ZN6StringD1Ev>
    delay(PUBLISH_INTERVAL_SEC * 1000);
 80801a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80801aa:	f000 fb45 	bl	8080838 <delay>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801ae:	f000 faab 	bl	8080708 <spark_cloud_flag_connected>

    if (!Particle.connected()) {
 80801b2:	bb28      	cbnz	r0, 8080200 <loop+0xac>
        static uint32_t s = millis();
 80801b4:	4c16      	ldr	r4, [pc, #88]	; (8080210 <loop+0xbc>)
 80801b6:	4d17      	ldr	r5, [pc, #92]	; (8080214 <loop+0xc0>)
 80801b8:	6823      	ldr	r3, [r4, #0]
 80801ba:	f013 0f01 	tst.w	r3, #1
 80801be:	d109      	bne.n	80801d4 <loop+0x80>
 80801c0:	4620      	mov	r0, r4
 80801c2:	f7ff ff79 	bl	80800b8 <__cxa_guard_acquire>
 80801c6:	b128      	cbz	r0, 80801d4 <loop+0x80>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80801c8:	f000 f93a 	bl	8080440 <HAL_Timer_Get_Milli_Seconds>
 80801cc:	6028      	str	r0, [r5, #0]
 80801ce:	4620      	mov	r0, r4
 80801d0:	f7ff ff77 	bl	80800c2 <__cxa_guard_release>
 80801d4:	f000 f934 	bl	8080440 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - s >= PUBLISH_INTERVAL_SEC * 1000 * 2) {
 80801d8:	682b      	ldr	r3, [r5, #0]
 80801da:	1ac0      	subs	r0, r0, r3
 80801dc:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 80801e0:	d30e      	bcc.n	8080200 <loop+0xac>
 80801e2:	f000 f92d 	bl	8080440 <HAL_Timer_Get_Milli_Seconds>
            s = millis();
 80801e6:	4b0b      	ldr	r3, [pc, #44]	; (8080214 <loop+0xc0>)
            digitalWrite(D1, HIGH);
 80801e8:	2101      	movs	r1, #1
    delay(PUBLISH_INTERVAL_SEC * 1000);

    if (!Particle.connected()) {
        static uint32_t s = millis();
        if (millis() - s >= PUBLISH_INTERVAL_SEC * 1000 * 2) {
            s = millis();
 80801ea:	6018      	str	r0, [r3, #0]
            digitalWrite(D1, HIGH);
 80801ec:	4608      	mov	r0, r1
 80801ee:	f002 fd12 	bl	8082c16 <digitalWrite>
            delay(30);
 80801f2:	201e      	movs	r0, #30
 80801f4:	f000 fb20 	bl	8080838 <delay>
            digitalWrite(D1, LOW);
 80801f8:	2100      	movs	r1, #0
 80801fa:	2001      	movs	r0, #1
 80801fc:	f002 fd0b 	bl	8082c16 <digitalWrite>
        }
    }
}
 8080200:	b009      	add	sp, #36	; 0x24
 8080202:	bd30      	pop	{r4, r5, pc}
 8080204:	200004ae 	.word	0x200004ae
 8080208:	2000049c 	.word	0x2000049c
 808020c:	080832f0 	.word	0x080832f0
 8080210:	200004a4 	.word	0x200004a4
 8080214:	200004a0 	.word	0x200004a0

08080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8080218:	b570      	push	{r4, r5, r6, lr}
 808021a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 808021c:	6804      	ldr	r4, [r0, #0]
 808021e:	6843      	ldr	r3, [r0, #4]
 8080220:	2614      	movs	r6, #20
 8080222:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8080226:	42a6      	cmp	r6, r4
 8080228:	d004      	beq.n	8080234 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 808022a:	4620      	mov	r0, r4
 808022c:	f002 f9c9 	bl	80825c2 <_ZN6StringD1Ev>
 8080230:	3414      	adds	r4, #20
 8080232:	e7f8      	b.n	8080226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8080234:	6828      	ldr	r0, [r5, #0]
 8080236:	f000 fad7 	bl	80807e8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 808023a:	4628      	mov	r0, r5
 808023c:	bd70      	pop	{r4, r5, r6, pc}

0808023e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 808023e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8080240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080242:	4606      	mov	r6, r0
 8080244:	460c      	mov	r4, r1
 8080246:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8080248:	d916      	bls.n	8080278 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 808024a:	4290      	cmp	r0, r2
 808024c:	d215      	bcs.n	808027a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 808024e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 8080252:	1a6c      	subs	r4, r5, r1
 8080254:	f1a1 0714 	sub.w	r7, r1, #20
 8080258:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 808025a:	42af      	cmp	r7, r5
 808025c:	d01c      	beq.n	8080298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 808025e:	b12c      	cbz	r4, 808026c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 8080260:	4629      	mov	r1, r5
 8080262:	4620      	mov	r0, r4
 8080264:	f002 f99d 	bl	80825a2 <_ZN6StringC1EOS_>
 8080268:	7c2b      	ldrb	r3, [r5, #16]
 808026a:	7423      	strb	r3, [r4, #16]
 808026c:	4628      	mov	r0, r5
 808026e:	f002 f9a8 	bl	80825c2 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8080272:	3d14      	subs	r5, #20
 8080274:	3c14      	subs	r4, #20
 8080276:	e7f0      	b.n	808025a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8080278:	d00e      	beq.n	8080298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 808027a:	42ac      	cmp	r4, r5
 808027c:	d00c      	beq.n	8080298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 808027e:	b12e      	cbz	r6, 808028c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 8080280:	4621      	mov	r1, r4
 8080282:	4630      	mov	r0, r6
 8080284:	f002 f98d 	bl	80825a2 <_ZN6StringC1EOS_>
 8080288:	7c23      	ldrb	r3, [r4, #16]
 808028a:	7433      	strb	r3, [r6, #16]
 808028c:	4620      	mov	r0, r4
 808028e:	f002 f998 	bl	80825c2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8080292:	3414      	adds	r4, #20
 8080294:	3614      	adds	r6, #20
 8080296:	e7f0      	b.n	808027a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 8080298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 808029a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808029e:	2300      	movs	r3, #0
 80802a0:	6003      	str	r3, [r0, #0]
 80802a2:	6043      	str	r3, [r0, #4]
 80802a4:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80802a6:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80802a8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80802aa:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80802ac:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80802ae:	dd24      	ble.n	80802fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80802b0:	f04f 0814 	mov.w	r8, #20
 80802b4:	fb08 f006 	mul.w	r0, r8, r6
 80802b8:	f000 fa8e 	bl	80807d8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80802bc:	4605      	mov	r5, r0
 80802be:	b1e0      	cbz	r0, 80802fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80802c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80802c4:	fb08 1202 	mla	r2, r8, r2, r1
 80802c8:	f7ff ffb9 	bl	808023e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80802cc:	6820      	ldr	r0, [r4, #0]
 80802ce:	f000 fa8b 	bl	80807e8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80802d2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80802d4:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80802d6:	683e      	ldr	r6, [r7, #0]
 80802d8:	687b      	ldr	r3, [r7, #4]
 80802da:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80802de:	4546      	cmp	r6, r8
 80802e0:	d009      	beq.n	80802f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80802e2:	b12d      	cbz	r5, 80802f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80802e4:	4631      	mov	r1, r6
 80802e6:	4628      	mov	r0, r5
 80802e8:	f002 f9c1 	bl	808266e <_ZN6StringC1ERKS_>
 80802ec:	7c33      	ldrb	r3, [r6, #16]
 80802ee:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80802f0:	3614      	adds	r6, #20
 80802f2:	3514      	adds	r5, #20
 80802f4:	e7f3      	b.n	80802de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80802f6:	687b      	ldr	r3, [r7, #4]
 80802f8:	6063      	str	r3, [r4, #4]
    }
}
 80802fa:	4620      	mov	r0, r4
 80802fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080300 <_GLOBAL__sub_I_logHandler>:
 8080300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080304:	4b2a      	ldr	r3, [pc, #168]	; (80803b0 <_GLOBAL__sub_I_logHandler+0xb0>)
 8080306:	b08c      	sub	sp, #48	; 0x30
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8080308:	2400      	movs	r4, #0
 808030a:	2601      	movs	r6, #1
 808030c:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808030e:	f000 f89f 	bl	8080450 <HAL_Pin_Map>
 8080312:	9400      	str	r4, [sp, #0]
 8080314:	9401      	str	r4, [sp, #4]
 8080316:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 8080318:	f002 faee 	bl	80828f8 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 808031c:	4d25      	ldr	r5, [pc, #148]	; (80803b4 <_GLOBAL__sub_I_logHandler+0xb4>)
 808031e:	4680      	mov	r8, r0
 8080320:	462f      	mov	r7, r5
 8080322:	4669      	mov	r1, sp
 8080324:	a803      	add	r0, sp, #12
 8080326:	f7ff ffb8 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 808032a:	a903      	add	r1, sp, #12
 808032c:	a806      	add	r0, sp, #24
 808032e:	f7ff ffb4 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 8080332:	4b21      	ldr	r3, [pc, #132]	; (80803b8 <_GLOBAL__sub_I_logHandler+0xb8>)
 8080334:	a906      	add	r1, sp, #24
 8080336:	f847 3b04 	str.w	r3, [r7], #4
 808033a:	a809      	add	r0, sp, #36	; 0x24
 808033c:	f7ff ffad 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 8080340:	aa09      	add	r2, sp, #36	; 0x24
 8080342:	4631      	mov	r1, r6
 8080344:	4638      	mov	r0, r7
 8080346:	f001 fe66 	bl	8082016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 808034a:	a809      	add	r0, sp, #36	; 0x24
 808034c:	f7ff ff64 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 8080350:	a806      	add	r0, sp, #24
 8080352:	f7ff ff61 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080356:	4b19      	ldr	r3, [pc, #100]	; (80803bc <_GLOBAL__sub_I_logHandler+0xbc>)
 8080358:	a803      	add	r0, sp, #12
 808035a:	602b      	str	r3, [r5, #0]
 808035c:	f8c5 8020 	str.w	r8, [r5, #32]
 8080360:	f7ff ff5a 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080364:	4b16      	ldr	r3, [pc, #88]	; (80803c0 <_GLOBAL__sub_I_logHandler+0xc0>)
 8080366:	602b      	str	r3, [r5, #0]
        Serial.begin();
 8080368:	f002 fac6 	bl	80828f8 <_Z16_fetch_usbserialv>
 808036c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080370:	f002 faa4 	bl	80828bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 8080374:	f001 faee 	bl	8081954 <_ZN5spark10LogManager8instanceEv>
 8080378:	4629      	mov	r1, r5
 808037a:	f001 fde0 	bl	8081f3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
#include "Particle.h"
#include "cellular_hal.h"

SerialLogHandler logHandler(LOG_LEVEL_ALL);
 808037e:	4668      	mov	r0, sp
 8080380:	f7ff ff4a 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 8080384:	490f      	ldr	r1, [pc, #60]	; (80803c4 <_GLOBAL__sub_I_logHandler+0xc4>)
 8080386:	4a10      	ldr	r2, [pc, #64]	; (80803c8 <_GLOBAL__sub_I_logHandler+0xc8>)
 8080388:	4628      	mov	r0, r5
 808038a:	f002 fcc3 	bl	8082d14 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080392:	4b0e      	ldr	r3, [pc, #56]	; (80803cc <_GLOBAL__sub_I_logHandler+0xcc>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080394:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080396:	701c      	strb	r4, [r3, #0]
 8080398:	805c      	strh	r4, [r3, #2]
 808039a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808039c:	f000 f968 	bl	8080670 <set_system_mode>

CellularGlobalIdentity cgi;

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
 80803a0:	4621      	mov	r1, r4
 80803a2:	4630      	mov	r0, r6
 80803a4:	f000 f974 	bl	8080690 <system_thread_set_state>
            digitalWrite(D1, HIGH);
            delay(30);
            digitalWrite(D1, LOW);
        }
    }
}
 80803a8:	b00c      	add	sp, #48	; 0x30
 80803aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80803ae:	bf00      	nop
 80803b0:	2000049c 	.word	0x2000049c
 80803b4:	20000478 	.word	0x20000478
 80803b8:	080832c8 	.word	0x080832c8
 80803bc:	080834e4 	.word	0x080834e4
 80803c0:	080832e0 	.word	0x080832e0
 80803c4:	080800d5 	.word	0x080800d5
 80803c8:	20000474 	.word	0x20000474
 80803cc:	200004a8 	.word	0x200004a8

080803d0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80803d0:	b508      	push	{r3, lr}
 80803d2:	4b02      	ldr	r3, [pc, #8]	; (80803dc <inet_gethostbyname+0xc>)
 80803d4:	681b      	ldr	r3, [r3, #0]
 80803d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80803d8:	9301      	str	r3, [sp, #4]
 80803da:	bd08      	pop	{r3, pc}
 80803dc:	08060020 	.word	0x08060020

080803e0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80803e0:	b508      	push	{r3, lr}
 80803e2:	4b02      	ldr	r3, [pc, #8]	; (80803ec <os_mutex_create+0xc>)
 80803e4:	681b      	ldr	r3, [r3, #0]
 80803e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80803e8:	9301      	str	r3, [sp, #4]
 80803ea:	bd08      	pop	{r3, pc}
 80803ec:	080401d0 	.word	0x080401d0

080803f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80803f0:	b508      	push	{r3, lr}
 80803f2:	4b02      	ldr	r3, [pc, #8]	; (80803fc <os_mutex_recursive_create+0xc>)
 80803f4:	681b      	ldr	r3, [r3, #0]
 80803f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80803f8:	9301      	str	r3, [sp, #4]
 80803fa:	bd08      	pop	{r3, pc}
 80803fc:	080401d0 	.word	0x080401d0

08080400 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8080400:	b508      	push	{r3, lr}
 8080402:	4b02      	ldr	r3, [pc, #8]	; (808040c <os_mutex_recursive_lock+0xc>)
 8080404:	681b      	ldr	r3, [r3, #0]
 8080406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080408:	9301      	str	r3, [sp, #4]
 808040a:	bd08      	pop	{r3, pc}
 808040c:	080401d0 	.word	0x080401d0

08080410 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8080410:	b508      	push	{r3, lr}
 8080412:	4b02      	ldr	r3, [pc, #8]	; (808041c <os_mutex_recursive_unlock+0xc>)
 8080414:	681b      	ldr	r3, [r3, #0]
 8080416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080418:	9301      	str	r3, [sp, #4]
 808041a:	bd08      	pop	{r3, pc}
 808041c:	080401d0 	.word	0x080401d0

08080420 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080420:	b508      	push	{r3, lr}
 8080422:	4b02      	ldr	r3, [pc, #8]	; (808042c <HAL_RNG_GetRandomNumber+0xc>)
 8080424:	681b      	ldr	r3, [r3, #0]
 8080426:	685b      	ldr	r3, [r3, #4]
 8080428:	9301      	str	r3, [sp, #4]
 808042a:	bd08      	pop	{r3, pc}
 808042c:	0804019c 	.word	0x0804019c

08080430 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080430:	b508      	push	{r3, lr}
 8080432:	4b02      	ldr	r3, [pc, #8]	; (808043c <HAL_Delay_Microseconds+0xc>)
 8080434:	681b      	ldr	r3, [r3, #0]
 8080436:	68db      	ldr	r3, [r3, #12]
 8080438:	9301      	str	r3, [sp, #4]
 808043a:	bd08      	pop	{r3, pc}
 808043c:	0804019c 	.word	0x0804019c

08080440 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080440:	b508      	push	{r3, lr}
 8080442:	4b02      	ldr	r3, [pc, #8]	; (808044c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080444:	681b      	ldr	r3, [r3, #0]
 8080446:	695b      	ldr	r3, [r3, #20]
 8080448:	9301      	str	r3, [sp, #4]
 808044a:	bd08      	pop	{r3, pc}
 808044c:	0804019c 	.word	0x0804019c

08080450 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8080450:	b508      	push	{r3, lr}
 8080452:	4b02      	ldr	r3, [pc, #8]	; (808045c <HAL_Pin_Map+0xc>)
 8080454:	681b      	ldr	r3, [r3, #0]
 8080456:	681b      	ldr	r3, [r3, #0]
 8080458:	9301      	str	r3, [sp, #4]
 808045a:	bd08      	pop	{r3, pc}
 808045c:	080401b0 	.word	0x080401b0

08080460 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080460:	b508      	push	{r3, lr}
 8080462:	4b02      	ldr	r3, [pc, #8]	; (808046c <HAL_Pin_Mode+0xc>)
 8080464:	681b      	ldr	r3, [r3, #0]
 8080466:	689b      	ldr	r3, [r3, #8]
 8080468:	9301      	str	r3, [sp, #4]
 808046a:	bd08      	pop	{r3, pc}
 808046c:	080401b0 	.word	0x080401b0

08080470 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080470:	b508      	push	{r3, lr}
 8080472:	4b02      	ldr	r3, [pc, #8]	; (808047c <HAL_Get_Pin_Mode+0xc>)
 8080474:	681b      	ldr	r3, [r3, #0]
 8080476:	68db      	ldr	r3, [r3, #12]
 8080478:	9301      	str	r3, [sp, #4]
 808047a:	bd08      	pop	{r3, pc}
 808047c:	080401b0 	.word	0x080401b0

08080480 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080480:	b508      	push	{r3, lr}
 8080482:	4b02      	ldr	r3, [pc, #8]	; (808048c <HAL_GPIO_Write+0xc>)
 8080484:	681b      	ldr	r3, [r3, #0]
 8080486:	691b      	ldr	r3, [r3, #16]
 8080488:	9301      	str	r3, [sp, #4]
 808048a:	bd08      	pop	{r3, pc}
 808048c:	080401b0 	.word	0x080401b0

08080490 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080490:	b508      	push	{r3, lr}
 8080492:	4b02      	ldr	r3, [pc, #8]	; (808049c <HAL_I2C_Write_Data+0xc>)
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	6a1b      	ldr	r3, [r3, #32]
 8080498:	9301      	str	r3, [sp, #4]
 808049a:	bd08      	pop	{r3, pc}
 808049c:	080401ac 	.word	0x080401ac

080804a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80804a0:	b508      	push	{r3, lr}
 80804a2:	4b02      	ldr	r3, [pc, #8]	; (80804ac <HAL_I2C_Available_Data+0xc>)
 80804a4:	681b      	ldr	r3, [r3, #0]
 80804a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80804a8:	9301      	str	r3, [sp, #4]
 80804aa:	bd08      	pop	{r3, pc}
 80804ac:	080401ac 	.word	0x080401ac

080804b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80804b0:	b508      	push	{r3, lr}
 80804b2:	4b02      	ldr	r3, [pc, #8]	; (80804bc <HAL_I2C_Read_Data+0xc>)
 80804b4:	681b      	ldr	r3, [r3, #0]
 80804b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80804b8:	9301      	str	r3, [sp, #4]
 80804ba:	bd08      	pop	{r3, pc}
 80804bc:	080401ac 	.word	0x080401ac

080804c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80804c0:	b508      	push	{r3, lr}
 80804c2:	4b02      	ldr	r3, [pc, #8]	; (80804cc <HAL_I2C_Peek_Data+0xc>)
 80804c4:	681b      	ldr	r3, [r3, #0]
 80804c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80804c8:	9301      	str	r3, [sp, #4]
 80804ca:	bd08      	pop	{r3, pc}
 80804cc:	080401ac 	.word	0x080401ac

080804d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80804d0:	b508      	push	{r3, lr}
 80804d2:	4b02      	ldr	r3, [pc, #8]	; (80804dc <HAL_I2C_Flush_Data+0xc>)
 80804d4:	681b      	ldr	r3, [r3, #0]
 80804d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804d8:	9301      	str	r3, [sp, #4]
 80804da:	bd08      	pop	{r3, pc}
 80804dc:	080401ac 	.word	0x080401ac

080804e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80804e0:	b508      	push	{r3, lr}
 80804e2:	4b02      	ldr	r3, [pc, #8]	; (80804ec <HAL_I2C_Is_Enabled+0xc>)
 80804e4:	681b      	ldr	r3, [r3, #0]
 80804e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80804e8:	9301      	str	r3, [sp, #4]
 80804ea:	bd08      	pop	{r3, pc}
 80804ec:	080401ac 	.word	0x080401ac

080804f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80804f0:	b508      	push	{r3, lr}
 80804f2:	4b02      	ldr	r3, [pc, #8]	; (80804fc <HAL_I2C_Init+0xc>)
 80804f4:	681b      	ldr	r3, [r3, #0]
 80804f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80804f8:	9301      	str	r3, [sp, #4]
 80804fa:	bd08      	pop	{r3, pc}
 80804fc:	080401ac 	.word	0x080401ac

08080500 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080500:	b508      	push	{r3, lr}
 8080502:	4b02      	ldr	r3, [pc, #8]	; (808050c <HAL_SPI_Init+0xc>)
 8080504:	681b      	ldr	r3, [r3, #0]
 8080506:	69db      	ldr	r3, [r3, #28]
 8080508:	9301      	str	r3, [sp, #4]
 808050a:	bd08      	pop	{r3, pc}
 808050c:	080401b4 	.word	0x080401b4

08080510 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080510:	b508      	push	{r3, lr}
 8080512:	4b02      	ldr	r3, [pc, #8]	; (808051c <HAL_SPI_Is_Enabled+0xc>)
 8080514:	681b      	ldr	r3, [r3, #0]
 8080516:	6a1b      	ldr	r3, [r3, #32]
 8080518:	9301      	str	r3, [sp, #4]
 808051a:	bd08      	pop	{r3, pc}
 808051c:	080401b4 	.word	0x080401b4

08080520 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080520:	b508      	push	{r3, lr}
 8080522:	4b02      	ldr	r3, [pc, #8]	; (808052c <HAL_USART_Init+0xc>)
 8080524:	681b      	ldr	r3, [r3, #0]
 8080526:	699b      	ldr	r3, [r3, #24]
 8080528:	9301      	str	r3, [sp, #4]
 808052a:	bd08      	pop	{r3, pc}
 808052c:	080401c4 	.word	0x080401c4

08080530 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 8080530:	b508      	push	{r3, lr}
 8080532:	4b02      	ldr	r3, [pc, #8]	; (808053c <HAL_USART_End+0xc>)
 8080534:	681b      	ldr	r3, [r3, #0]
 8080536:	6a1b      	ldr	r3, [r3, #32]
 8080538:	9301      	str	r3, [sp, #4]
 808053a:	bd08      	pop	{r3, pc}
 808053c:	080401c4 	.word	0x080401c4

08080540 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080540:	b508      	push	{r3, lr}
 8080542:	4b02      	ldr	r3, [pc, #8]	; (808054c <HAL_USART_Write_Data+0xc>)
 8080544:	681b      	ldr	r3, [r3, #0]
 8080546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080548:	9301      	str	r3, [sp, #4]
 808054a:	bd08      	pop	{r3, pc}
 808054c:	080401c4 	.word	0x080401c4

08080550 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080550:	b508      	push	{r3, lr}
 8080552:	4b02      	ldr	r3, [pc, #8]	; (808055c <HAL_USART_Available_Data+0xc>)
 8080554:	681b      	ldr	r3, [r3, #0]
 8080556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080558:	9301      	str	r3, [sp, #4]
 808055a:	bd08      	pop	{r3, pc}
 808055c:	080401c4 	.word	0x080401c4

08080560 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080560:	b508      	push	{r3, lr}
 8080562:	4b02      	ldr	r3, [pc, #8]	; (808056c <HAL_USART_Read_Data+0xc>)
 8080564:	681b      	ldr	r3, [r3, #0]
 8080566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080568:	9301      	str	r3, [sp, #4]
 808056a:	bd08      	pop	{r3, pc}
 808056c:	080401c4 	.word	0x080401c4

08080570 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080570:	b508      	push	{r3, lr}
 8080572:	4b02      	ldr	r3, [pc, #8]	; (808057c <HAL_USART_Peek_Data+0xc>)
 8080574:	681b      	ldr	r3, [r3, #0]
 8080576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080578:	9301      	str	r3, [sp, #4]
 808057a:	bd08      	pop	{r3, pc}
 808057c:	080401c4 	.word	0x080401c4

08080580 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080580:	b508      	push	{r3, lr}
 8080582:	4b02      	ldr	r3, [pc, #8]	; (808058c <HAL_USART_Flush_Data+0xc>)
 8080584:	681b      	ldr	r3, [r3, #0]
 8080586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080588:	9301      	str	r3, [sp, #4]
 808058a:	bd08      	pop	{r3, pc}
 808058c:	080401c4 	.word	0x080401c4

08080590 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080590:	b508      	push	{r3, lr}
 8080592:	4b02      	ldr	r3, [pc, #8]	; (808059c <HAL_USART_Is_Enabled+0xc>)
 8080594:	681b      	ldr	r3, [r3, #0]
 8080596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080598:	9301      	str	r3, [sp, #4]
 808059a:	bd08      	pop	{r3, pc}
 808059c:	080401c4 	.word	0x080401c4

080805a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80805a0:	b508      	push	{r3, lr}
 80805a2:	4b02      	ldr	r3, [pc, #8]	; (80805ac <HAL_USART_Available_Data_For_Write+0xc>)
 80805a4:	681b      	ldr	r3, [r3, #0]
 80805a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80805a8:	9301      	str	r3, [sp, #4]
 80805aa:	bd08      	pop	{r3, pc}
 80805ac:	080401c4 	.word	0x080401c4

080805b0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80805b0:	b508      	push	{r3, lr}
 80805b2:	4b02      	ldr	r3, [pc, #8]	; (80805bc <HAL_USART_BeginConfig+0xc>)
 80805b4:	681b      	ldr	r3, [r3, #0]
 80805b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80805b8:	9301      	str	r3, [sp, #4]
 80805ba:	bd08      	pop	{r3, pc}
 80805bc:	080401c4 	.word	0x080401c4

080805c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80805c0:	b508      	push	{r3, lr}
 80805c2:	4b02      	ldr	r3, [pc, #8]	; (80805cc <HAL_USB_USART_Init+0xc>)
 80805c4:	681b      	ldr	r3, [r3, #0]
 80805c6:	681b      	ldr	r3, [r3, #0]
 80805c8:	9301      	str	r3, [sp, #4]
 80805ca:	bd08      	pop	{r3, pc}
 80805cc:	0806001c 	.word	0x0806001c

080805d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80805d0:	b508      	push	{r3, lr}
 80805d2:	4b02      	ldr	r3, [pc, #8]	; (80805dc <HAL_USB_USART_Begin+0xc>)
 80805d4:	681b      	ldr	r3, [r3, #0]
 80805d6:	685b      	ldr	r3, [r3, #4]
 80805d8:	9301      	str	r3, [sp, #4]
 80805da:	bd08      	pop	{r3, pc}
 80805dc:	0806001c 	.word	0x0806001c

080805e0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80805e0:	b508      	push	{r3, lr}
 80805e2:	4b02      	ldr	r3, [pc, #8]	; (80805ec <HAL_USB_USART_End+0xc>)
 80805e4:	681b      	ldr	r3, [r3, #0]
 80805e6:	689b      	ldr	r3, [r3, #8]
 80805e8:	9301      	str	r3, [sp, #4]
 80805ea:	bd08      	pop	{r3, pc}
 80805ec:	0806001c 	.word	0x0806001c

080805f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80805f0:	b508      	push	{r3, lr}
 80805f2:	4b02      	ldr	r3, [pc, #8]	; (80805fc <HAL_USB_USART_Available_Data+0xc>)
 80805f4:	681b      	ldr	r3, [r3, #0]
 80805f6:	691b      	ldr	r3, [r3, #16]
 80805f8:	9301      	str	r3, [sp, #4]
 80805fa:	bd08      	pop	{r3, pc}
 80805fc:	0806001c 	.word	0x0806001c

08080600 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080600:	b508      	push	{r3, lr}
 8080602:	4b02      	ldr	r3, [pc, #8]	; (808060c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080604:	681b      	ldr	r3, [r3, #0]
 8080606:	695b      	ldr	r3, [r3, #20]
 8080608:	9301      	str	r3, [sp, #4]
 808060a:	bd08      	pop	{r3, pc}
 808060c:	0806001c 	.word	0x0806001c

08080610 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080610:	b508      	push	{r3, lr}
 8080612:	4b02      	ldr	r3, [pc, #8]	; (808061c <HAL_USB_USART_Receive_Data+0xc>)
 8080614:	681b      	ldr	r3, [r3, #0]
 8080616:	699b      	ldr	r3, [r3, #24]
 8080618:	9301      	str	r3, [sp, #4]
 808061a:	bd08      	pop	{r3, pc}
 808061c:	0806001c 	.word	0x0806001c

08080620 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080620:	b508      	push	{r3, lr}
 8080622:	4b02      	ldr	r3, [pc, #8]	; (808062c <HAL_USB_USART_Send_Data+0xc>)
 8080624:	681b      	ldr	r3, [r3, #0]
 8080626:	69db      	ldr	r3, [r3, #28]
 8080628:	9301      	str	r3, [sp, #4]
 808062a:	bd08      	pop	{r3, pc}
 808062c:	0806001c 	.word	0x0806001c

08080630 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080630:	b508      	push	{r3, lr}
 8080632:	4b02      	ldr	r3, [pc, #8]	; (808063c <HAL_USB_USART_Flush_Data+0xc>)
 8080634:	681b      	ldr	r3, [r3, #0]
 8080636:	6a1b      	ldr	r3, [r3, #32]
 8080638:	9301      	str	r3, [sp, #4]
 808063a:	bd08      	pop	{r3, pc}
 808063c:	0806001c 	.word	0x0806001c

08080640 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8080640:	b508      	push	{r3, lr}
 8080642:	4b02      	ldr	r3, [pc, #8]	; (808064c <panic_+0xc>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080648:	9301      	str	r3, [sp, #4]
 808064a:	bd08      	pop	{r3, pc}
 808064c:	080201a0 	.word	0x080201a0

08080650 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 8080650:	b508      	push	{r3, lr}
 8080652:	4b02      	ldr	r3, [pc, #8]	; (808065c <log_level_name+0xc>)
 8080654:	681b      	ldr	r3, [r3, #0]
 8080656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8080658:	9301      	str	r3, [sp, #4]
 808065a:	bd08      	pop	{r3, pc}
 808065c:	080201a0 	.word	0x080201a0

08080660 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 8080660:	b508      	push	{r3, lr}
 8080662:	4b02      	ldr	r3, [pc, #8]	; (808066c <log_set_callbacks+0xc>)
 8080664:	681b      	ldr	r3, [r3, #0]
 8080666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8080668:	9301      	str	r3, [sp, #4]
 808066a:	bd08      	pop	{r3, pc}
 808066c:	080201a0 	.word	0x080201a0

08080670 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080670:	b508      	push	{r3, lr}
 8080672:	4b02      	ldr	r3, [pc, #8]	; (808067c <set_system_mode+0xc>)
 8080674:	681b      	ldr	r3, [r3, #0]
 8080676:	685b      	ldr	r3, [r3, #4]
 8080678:	9301      	str	r3, [sp, #4]
 808067a:	bd08      	pop	{r3, pc}
 808067c:	080401a4 	.word	0x080401a4

08080680 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080680:	b508      	push	{r3, lr}
 8080682:	4b02      	ldr	r3, [pc, #8]	; (808068c <system_delay_ms+0xc>)
 8080684:	681b      	ldr	r3, [r3, #0]
 8080686:	695b      	ldr	r3, [r3, #20]
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	bd08      	pop	{r3, pc}
 808068c:	080401a4 	.word	0x080401a4

08080690 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8080690:	b508      	push	{r3, lr}
 8080692:	4b02      	ldr	r3, [pc, #8]	; (808069c <system_thread_set_state+0xc>)
 8080694:	681b      	ldr	r3, [r3, #0]
 8080696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080698:	9301      	str	r3, [sp, #4]
 808069a:	bd08      	pop	{r3, pc}
 808069c:	080401a4 	.word	0x080401a4

080806a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80806a0:	b508      	push	{r3, lr}
 80806a2:	4b02      	ldr	r3, [pc, #8]	; (80806ac <application_thread_current+0xc>)
 80806a4:	681b      	ldr	r3, [r3, #0]
 80806a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80806a8:	9301      	str	r3, [sp, #4]
 80806aa:	bd08      	pop	{r3, pc}
 80806ac:	080401a4 	.word	0x080401a4

080806b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80806b0:	b508      	push	{r3, lr}
 80806b2:	4b02      	ldr	r3, [pc, #8]	; (80806bc <application_thread_invoke+0xc>)
 80806b4:	681b      	ldr	r3, [r3, #0]
 80806b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80806b8:	9301      	str	r3, [sp, #4]
 80806ba:	bd08      	pop	{r3, pc}
 80806bc:	080401a4 	.word	0x080401a4

080806c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80806c0:	b508      	push	{r3, lr}
 80806c2:	4b03      	ldr	r3, [pc, #12]	; (80806d0 <system_ctrl_set_app_request_handler+0x10>)
 80806c4:	681b      	ldr	r3, [r3, #0]
 80806c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80806ca:	9301      	str	r3, [sp, #4]
 80806cc:	bd08      	pop	{r3, pc}
 80806ce:	0000      	.short	0x0000
 80806d0:	080401a4 	.word	0x080401a4

080806d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80806d4:	b508      	push	{r3, lr}
 80806d6:	4b03      	ldr	r3, [pc, #12]	; (80806e4 <system_ctrl_set_result+0x10>)
 80806d8:	681b      	ldr	r3, [r3, #0]
 80806da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80806de:	9301      	str	r3, [sp, #4]
 80806e0:	bd08      	pop	{r3, pc}
 80806e2:	0000      	.short	0x0000
 80806e4:	080401a4 	.word	0x080401a4

080806e8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80806e8:	b508      	push	{r3, lr}
 80806ea:	4b02      	ldr	r3, [pc, #8]	; (80806f4 <spark_process+0xc>)
 80806ec:	681b      	ldr	r3, [r3, #0]
 80806ee:	689b      	ldr	r3, [r3, #8]
 80806f0:	9301      	str	r3, [sp, #4]
 80806f2:	bd08      	pop	{r3, pc}
 80806f4:	080401cc 	.word	0x080401cc

080806f8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80806f8:	b508      	push	{r3, lr}
 80806fa:	4b02      	ldr	r3, [pc, #8]	; (8080704 <spark_cloud_flag_connect+0xc>)
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	68db      	ldr	r3, [r3, #12]
 8080700:	9301      	str	r3, [sp, #4]
 8080702:	bd08      	pop	{r3, pc}
 8080704:	080401cc 	.word	0x080401cc

08080708 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080708:	b508      	push	{r3, lr}
 808070a:	4b02      	ldr	r3, [pc, #8]	; (8080714 <spark_cloud_flag_connected+0xc>)
 808070c:	681b      	ldr	r3, [r3, #0]
 808070e:	695b      	ldr	r3, [r3, #20]
 8080710:	9301      	str	r3, [sp, #4]
 8080712:	bd08      	pop	{r3, pc}
 8080714:	080401cc 	.word	0x080401cc

08080718 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080718:	b508      	push	{r3, lr}
 808071a:	4b02      	ldr	r3, [pc, #8]	; (8080724 <spark_send_event+0xc>)
 808071c:	681b      	ldr	r3, [r3, #0]
 808071e:	6a1b      	ldr	r3, [r3, #32]
 8080720:	9301      	str	r3, [sp, #4]
 8080722:	bd08      	pop	{r3, pc}
 8080724:	080401cc 	.word	0x080401cc

08080728 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080728:	b508      	push	{r3, lr}
 808072a:	4b02      	ldr	r3, [pc, #8]	; (8080734 <spark_set_random_seed_from_cloud_handler+0xc>)
 808072c:	681b      	ldr	r3, [r3, #0]
 808072e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080730:	9301      	str	r3, [sp, #4]
 8080732:	bd08      	pop	{r3, pc}
 8080734:	080401cc 	.word	0x080401cc

08080738 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080738:	b508      	push	{r3, lr}
 808073a:	4b02      	ldr	r3, [pc, #8]	; (8080744 <network_connect+0xc>)
 808073c:	681b      	ldr	r3, [r3, #0]
 808073e:	685b      	ldr	r3, [r3, #4]
 8080740:	9301      	str	r3, [sp, #4]
 8080742:	bd08      	pop	{r3, pc}
 8080744:	080401c8 	.word	0x080401c8

08080748 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080748:	b508      	push	{r3, lr}
 808074a:	4b02      	ldr	r3, [pc, #8]	; (8080754 <network_connecting+0xc>)
 808074c:	681b      	ldr	r3, [r3, #0]
 808074e:	689b      	ldr	r3, [r3, #8]
 8080750:	9301      	str	r3, [sp, #4]
 8080752:	bd08      	pop	{r3, pc}
 8080754:	080401c8 	.word	0x080401c8

08080758 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080758:	b508      	push	{r3, lr}
 808075a:	4b02      	ldr	r3, [pc, #8]	; (8080764 <network_disconnect+0xc>)
 808075c:	681b      	ldr	r3, [r3, #0]
 808075e:	68db      	ldr	r3, [r3, #12]
 8080760:	9301      	str	r3, [sp, #4]
 8080762:	bd08      	pop	{r3, pc}
 8080764:	080401c8 	.word	0x080401c8

08080768 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080768:	b508      	push	{r3, lr}
 808076a:	4b02      	ldr	r3, [pc, #8]	; (8080774 <network_ready+0xc>)
 808076c:	681b      	ldr	r3, [r3, #0]
 808076e:	691b      	ldr	r3, [r3, #16]
 8080770:	9301      	str	r3, [sp, #4]
 8080772:	bd08      	pop	{r3, pc}
 8080774:	080401c8 	.word	0x080401c8

08080778 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080778:	b508      	push	{r3, lr}
 808077a:	4b02      	ldr	r3, [pc, #8]	; (8080784 <network_on+0xc>)
 808077c:	681b      	ldr	r3, [r3, #0]
 808077e:	695b      	ldr	r3, [r3, #20]
 8080780:	9301      	str	r3, [sp, #4]
 8080782:	bd08      	pop	{r3, pc}
 8080784:	080401c8 	.word	0x080401c8

08080788 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080788:	b508      	push	{r3, lr}
 808078a:	4b02      	ldr	r3, [pc, #8]	; (8080794 <network_off+0xc>)
 808078c:	681b      	ldr	r3, [r3, #0]
 808078e:	699b      	ldr	r3, [r3, #24]
 8080790:	9301      	str	r3, [sp, #4]
 8080792:	bd08      	pop	{r3, pc}
 8080794:	080401c8 	.word	0x080401c8

08080798 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080798:	b508      	push	{r3, lr}
 808079a:	4b02      	ldr	r3, [pc, #8]	; (80807a4 <network_listen+0xc>)
 808079c:	681b      	ldr	r3, [r3, #0]
 808079e:	69db      	ldr	r3, [r3, #28]
 80807a0:	9301      	str	r3, [sp, #4]
 80807a2:	bd08      	pop	{r3, pc}
 80807a4:	080401c8 	.word	0x080401c8

080807a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <network_listening+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	6a1b      	ldr	r3, [r3, #32]
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080401c8 	.word	0x080401c8

080807b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <network_set_listen_timeout+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401c8 	.word	0x080401c8

080807c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <network_get_listen_timeout+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401c8 	.word	0x080401c8

080807d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b02      	ldr	r3, [pc, #8]	; (80807e4 <malloc+0xc>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	681b      	ldr	r3, [r3, #0]
 80807e0:	9301      	str	r3, [sp, #4]
 80807e2:	bd08      	pop	{r3, pc}
 80807e4:	080401a0 	.word	0x080401a0

080807e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80807e8:	b508      	push	{r3, lr}
 80807ea:	4b02      	ldr	r3, [pc, #8]	; (80807f4 <free+0xc>)
 80807ec:	681b      	ldr	r3, [r3, #0]
 80807ee:	685b      	ldr	r3, [r3, #4]
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	bd08      	pop	{r3, pc}
 80807f4:	080401a0 	.word	0x080401a0

080807f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80807f8:	b508      	push	{r3, lr}
 80807fa:	4b02      	ldr	r3, [pc, #8]	; (8080804 <realloc+0xc>)
 80807fc:	681b      	ldr	r3, [r3, #0]
 80807fe:	689b      	ldr	r3, [r3, #8]
 8080800:	9301      	str	r3, [sp, #4]
 8080802:	bd08      	pop	{r3, pc}
 8080804:	080401a0 	.word	0x080401a0

08080808 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8080808:	b508      	push	{r3, lr}
 808080a:	4b02      	ldr	r3, [pc, #8]	; (8080814 <vsnprintf+0xc>)
 808080c:	681b      	ldr	r3, [r3, #0]
 808080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080810:	9301      	str	r3, [sp, #4]
 8080812:	bd08      	pop	{r3, pc}
 8080814:	080401a0 	.word	0x080401a0

08080818 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080818:	b508      	push	{r3, lr}
 808081a:	4b02      	ldr	r3, [pc, #8]	; (8080824 <abort+0xc>)
 808081c:	681b      	ldr	r3, [r3, #0]
 808081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080820:	9301      	str	r3, [sp, #4]
 8080822:	bd08      	pop	{r3, pc}
 8080824:	080401a0 	.word	0x080401a0

08080828 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080828:	b508      	push	{r3, lr}
 808082a:	4b02      	ldr	r3, [pc, #8]	; (8080834 <_malloc_r+0xc>)
 808082c:	681b      	ldr	r3, [r3, #0]
 808082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080830:	9301      	str	r3, [sp, #4]
 8080832:	bd08      	pop	{r3, pc}
 8080834:	080401a0 	.word	0x080401a0

08080838 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080838:	2100      	movs	r1, #0
 808083a:	f7ff bf21 	b.w	8080680 <system_delay_ms>

0808083e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808083e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080840:	6883      	ldr	r3, [r0, #8]
 8080842:	4604      	mov	r4, r0
 8080844:	b90b      	cbnz	r3, 808084a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080846:	f002 fa84 	bl	8082d52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808084a:	68c3      	ldr	r3, [r0, #12]
 808084c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808084e:	68a3      	ldr	r3, [r4, #8]
 8080850:	b11b      	cbz	r3, 808085a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080852:	2203      	movs	r2, #3
 8080854:	4621      	mov	r1, r4
 8080856:	4620      	mov	r0, r4
 8080858:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808085a:	4620      	mov	r0, r4
}
 808085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080860:	2110      	movs	r1, #16
 8080862:	f002 ba5c 	b.w	8082d1e <_ZdlPvj>

08080866 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080866:	2200      	movs	r2, #0
 8080868:	4611      	mov	r1, r2
 808086a:	6840      	ldr	r0, [r0, #4]
 808086c:	f7ff bf7c 	b.w	8080768 <network_ready>

08080870 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080870:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080874:	2600      	movs	r6, #0
 8080876:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080878:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808087a:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808087c:	4688      	mov	r8, r1
 808087e:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8080880:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080884:	f002 fc51 	bl	808312a <strlen>
 8080888:	9600      	str	r6, [sp, #0]
 808088a:	b281      	uxth	r1, r0
 808088c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8080890:	4622      	mov	r2, r4
 8080892:	4638      	mov	r0, r7
 8080894:	f7ff fd9c 	bl	80803d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080898:	b120      	cbz	r0, 80808a4 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808089a:	4631      	mov	r1, r6
 808089c:	4628      	mov	r0, r5
 808089e:	f000 fb8f 	bl	8080fc0 <_ZN9IPAddressC1Em>
 80808a2:	e003      	b.n	80808ac <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80808a4:	4621      	mov	r1, r4
 80808a6:	4628      	mov	r0, r5
 80808a8:	f000 fb82 	bl	8080fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80808ac:	4628      	mov	r0, r5
 80808ae:	b004      	add	sp, #16
 80808b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080808b4 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80808b4:	2200      	movs	r2, #0
 80808b6:	4611      	mov	r1, r2
 80808b8:	6840      	ldr	r0, [r0, #4]
 80808ba:	f7ff bf75 	b.w	80807a8 <network_listening>

080808be <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80808be:	2200      	movs	r2, #0
 80808c0:	4611      	mov	r1, r2
 80808c2:	6840      	ldr	r0, [r0, #4]
 80808c4:	f7ff bf80 	b.w	80807c8 <network_get_listen_timeout>

080808c8 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80808c8:	2200      	movs	r2, #0
 80808ca:	6840      	ldr	r0, [r0, #4]
 80808cc:	f7ff bf74 	b.w	80807b8 <network_set_listen_timeout>

080808d0 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80808d0:	2200      	movs	r2, #0
 80808d2:	f081 0101 	eor.w	r1, r1, #1
 80808d6:	6840      	ldr	r0, [r0, #4]
 80808d8:	f7ff bf5e 	b.w	8080798 <network_listen>

080808dc <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80808dc:	2300      	movs	r3, #0
 80808de:	461a      	mov	r2, r3
 80808e0:	4619      	mov	r1, r3
 80808e2:	6840      	ldr	r0, [r0, #4]
 80808e4:	f7ff bf50 	b.w	8080788 <network_off>

080808e8 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80808e8:	2300      	movs	r3, #0
 80808ea:	461a      	mov	r2, r3
 80808ec:	4619      	mov	r1, r3
 80808ee:	6840      	ldr	r0, [r0, #4]
 80808f0:	f7ff bf42 	b.w	8080778 <network_on>

080808f4 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80808f4:	2200      	movs	r2, #0
 80808f6:	4611      	mov	r1, r2
 80808f8:	6840      	ldr	r0, [r0, #4]
 80808fa:	f7ff bf25 	b.w	8080748 <network_connecting>

080808fe <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80808fe:	2200      	movs	r2, #0
 8080900:	2102      	movs	r1, #2
 8080902:	6840      	ldr	r0, [r0, #4]
 8080904:	f7ff bf28 	b.w	8080758 <network_disconnect>

08080908 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080908:	2300      	movs	r3, #0
 808090a:	461a      	mov	r2, r3
 808090c:	6840      	ldr	r0, [r0, #4]
 808090e:	f7ff bf13 	b.w	8080738 <network_connect>
	...

08080914 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080914:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080916:	4c0c      	ldr	r4, [pc, #48]	; (8080948 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080918:	2528      	movs	r5, #40	; 0x28
 808091a:	462a      	mov	r2, r5
 808091c:	2100      	movs	r1, #0
 808091e:	4620      	mov	r0, r4
 8080920:	f002 fb96 	bl	8083050 <memset>
        cid = -1;
 8080924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080928:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808092a:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808092c:	4c07      	ldr	r4, [pc, #28]	; (808094c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 808092e:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080930:	4620      	mov	r0, r4
 8080932:	6063      	str	r3, [r4, #4]
 8080934:	4b06      	ldr	r3, [pc, #24]	; (8080950 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080936:	252c      	movs	r5, #44	; 0x2c
 8080938:	f840 3b08 	str.w	r3, [r0], #8
 808093c:	462a      	mov	r2, r5
 808093e:	2100      	movs	r1, #0
 8080940:	f002 fb86 	bl	8083050 <memset>
        size = sizeof(*this);
 8080944:	8125      	strh	r5, [r4, #8]
 8080946:	bd38      	pop	{r3, r4, r5, pc}
 8080948:	200004e4 	.word	0x200004e4
 808094c:	200004b0 	.word	0x200004b0
 8080950:	08083308 	.word	0x08083308

08080954 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080954:	4770      	bx	lr

08080956 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080956:	2000      	movs	r0, #0
 8080958:	4770      	bx	lr

0808095a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808095a:	b510      	push	{r4, lr}
 808095c:	4604      	mov	r4, r0
 808095e:	2110      	movs	r1, #16
 8080960:	f002 f9dd 	bl	8082d1e <_ZdlPvj>
 8080964:	4620      	mov	r0, r4
 8080966:	bd10      	pop	{r4, pc}

08080968 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080968:	b508      	push	{r3, lr}
      { delete this; }
 808096a:	b108      	cbz	r0, 8080970 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808096c:	f7ff fff5 	bl	808095a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080970:	bd08      	pop	{r3, pc}

08080972 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080972:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080974:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080976:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080978:	b113      	cbz	r3, 8080980 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808097a:	2203      	movs	r2, #3
 808097c:	4601      	mov	r1, r0
 808097e:	4798      	blx	r3
    }
 8080980:	4620      	mov	r0, r4
 8080982:	bd10      	pop	{r4, pc}

08080984 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080984:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080986:	68c4      	ldr	r4, [r0, #12]
 8080988:	b1ec      	cbz	r4, 80809c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808098a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808098c:	2b02      	cmp	r3, #2
 808098e:	d102      	bne.n	8080996 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080990:	68e0      	ldr	r0, [r4, #12]
 8080992:	f7ff ff29 	bl	80807e8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080996:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080998:	b135      	cbz	r5, 80809a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808099a:	4628      	mov	r0, r5
 808099c:	f7ff ffe9 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
 80809a0:	2110      	movs	r1, #16
 80809a2:	4628      	mov	r0, r5
 80809a4:	f002 f9bb 	bl	8082d1e <_ZdlPvj>
 80809a8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80809aa:	b135      	cbz	r5, 80809ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80809ac:	4628      	mov	r0, r5
 80809ae:	f7ff ffe0 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
 80809b2:	2110      	movs	r1, #16
 80809b4:	4628      	mov	r0, r5
 80809b6:	f002 f9b2 	bl	8082d1e <_ZdlPvj>
 80809ba:	4620      	mov	r0, r4
 80809bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80809c0:	2114      	movs	r1, #20
 80809c2:	f002 b9ac 	b.w	8082d1e <_ZdlPvj>
 80809c6:	bd38      	pop	{r3, r4, r5, pc}

080809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80809c8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80809ca:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80809cc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80809ce:	b17c      	cbz	r4, 80809f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80809d0:	6863      	ldr	r3, [r4, #4]
 80809d2:	3b01      	subs	r3, #1
 80809d4:	6063      	str	r3, [r4, #4]
 80809d6:	b95b      	cbnz	r3, 80809f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80809d8:	6823      	ldr	r3, [r4, #0]
 80809da:	4620      	mov	r0, r4
 80809dc:	689b      	ldr	r3, [r3, #8]
 80809de:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80809e0:	68a3      	ldr	r3, [r4, #8]
 80809e2:	3b01      	subs	r3, #1
 80809e4:	60a3      	str	r3, [r4, #8]
 80809e6:	b91b      	cbnz	r3, 80809f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80809e8:	6823      	ldr	r3, [r4, #0]
 80809ea:	4620      	mov	r0, r4
 80809ec:	68db      	ldr	r3, [r3, #12]
 80809ee:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80809f0:	4628      	mov	r0, r5
 80809f2:	bd38      	pop	{r3, r4, r5, pc}

080809f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80809f4:	b513      	push	{r0, r1, r4, lr}
 80809f6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80809f8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80809fc:	2300      	movs	r3, #0
 80809fe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080a00:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080a02:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080a04:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080a06:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080a08:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080a0a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080a0c:	f7ff ffdc 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a10:	4620      	mov	r0, r4
 8080a12:	b002      	add	sp, #8
 8080a14:	bd10      	pop	{r4, pc}

08080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080a16:	680b      	ldr	r3, [r1, #0]
 8080a18:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080a1a:	b113      	cbz	r3, 8080a22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080a1c:	685a      	ldr	r2, [r3, #4]
 8080a1e:	3201      	adds	r2, #1
 8080a20:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080a22:	4770      	bx	lr

08080a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080a26:	460c      	mov	r4, r1
 8080a28:	4606      	mov	r6, r0
 8080a2a:	460f      	mov	r7, r1
 8080a2c:	f854 3b04 	ldr.w	r3, [r4], #4
 8080a30:	ad02      	add	r5, sp, #8
 8080a32:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080a36:	4621      	mov	r1, r4
 8080a38:	a801      	add	r0, sp, #4
 8080a3a:	f7ff ffec 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080a3e:	4629      	mov	r1, r5
 8080a40:	4630      	mov	r0, r6
 8080a42:	f7ff ffd7 	bl	80809f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080a46:	a801      	add	r0, sp, #4
 8080a48:	f7ff ffbe 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a4c:	4620      	mov	r0, r4
 8080a4e:	f7ff ffbb 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080a52:	4638      	mov	r0, r7
 8080a54:	2108      	movs	r1, #8
 8080a56:	f002 f962 	bl	8082d1e <_ZdlPvj>
        return p;
    }
 8080a5a:	4630      	mov	r0, r6
 8080a5c:	b003      	add	sp, #12
 8080a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080a60:	b513      	push	{r0, r1, r4, lr}
 8080a62:	460b      	mov	r3, r1
 8080a64:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080a66:	c803      	ldmia	r0, {r0, r1}
 8080a68:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080a70:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080a74:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080a78:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080a7c:	b002      	add	sp, #8
 8080a7e:	bd10      	pop	{r4, pc}

08080a80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a80:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080a82:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a84:	b90a      	cbnz	r2, 8080a8a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080a86:	f002 f964 	bl	8082d52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a8a:	68c3      	ldr	r3, [r0, #12]
    }
 8080a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a90:	4718      	bx	r3

08080a92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080a92:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080a94:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080a96:	f100 0110 	add.w	r1, r0, #16
 8080a9a:	f7ff fff1 	bl	8080a80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080a9e:	bd08      	pop	{r3, pc}

08080aa0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080aa0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080aa2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080aa4:	b90a      	cbnz	r2, 8080aaa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080aa6:	f002 f954 	bl	8082d52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080aaa:	68c3      	ldr	r3, [r0, #12]
    }
 8080aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ab0:	4718      	bx	r3

08080ab2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ab2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080ab4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080ab6:	f100 0110 	add.w	r1, r0, #16
 8080aba:	f7ff fff1 	bl	8080aa0 <_ZNKSt8functionIFvRKbEEclES1_>
 8080abe:	bd08      	pop	{r3, pc}

08080ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080ac0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ac2:	2300      	movs	r3, #0
 8080ac4:	6083      	str	r3, [r0, #8]
 8080ac6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080ac8:	4604      	mov	r4, r0
 8080aca:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080acc:	b12b      	cbz	r3, 8080ada <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080ace:	2202      	movs	r2, #2
 8080ad0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080ad2:	68eb      	ldr	r3, [r5, #12]
 8080ad4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080ad6:	68ab      	ldr	r3, [r5, #8]
 8080ad8:	60a3      	str	r3, [r4, #8]
	}
    }
 8080ada:	4620      	mov	r0, r4
 8080adc:	bd38      	pop	{r3, r4, r5, pc}
	...

08080ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8080ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8080ae4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080ae8:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080aea:	f04f 0002 	mov.w	r0, #2
 8080aee:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080af0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080af4:	808b      	strh	r3, [r1, #4]
 8080af6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080af8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080afa:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8080afe:	600b      	str	r3, [r1, #0]
 8080b00:	e8d4 1f4f 	ldrexb	r1, [r4]
 8080b04:	4299      	cmp	r1, r3
 8080b06:	d103      	bne.n	8080b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8080b08:	e8c4 0f45 	strexb	r5, r0, [r4]
 8080b0c:	2d00      	cmp	r5, #0
 8080b0e:	d1f7      	bne.n	8080b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8080b10:	d002      	beq.n	8080b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8080b12:	f88d 1000 	strb.w	r1, [sp]
 8080b16:	e06c      	b.n	8080bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8080b18:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080b1c:	bf1c      	itt	ne
 8080b1e:	60e7      	strne	r7, [r4, #12]
 8080b20:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080b22:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8080b26:	bf18      	it	ne
 8080b28:	461f      	movne	r7, r3
 8080b2a:	2301      	movs	r3, #1
 8080b2c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080b2e:	f3bf 8f5f 	dmb	sy
 8080b32:	f104 0308 	add.w	r3, r4, #8
 8080b36:	2000      	movs	r0, #0
 8080b38:	e853 6f00 	ldrex	r6, [r3]
 8080b3c:	e843 0200 	strex	r2, r0, [r3]
 8080b40:	2a00      	cmp	r2, #0
 8080b42:	d1f9      	bne.n	8080b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8080b44:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080b48:	2e00      	cmp	r6, #0
 8080b4a:	d052      	beq.n	8080bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080b4c:	f7ff fda8 	bl	80806a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080b50:	b120      	cbz	r0, 8080b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080b52:	4629      	mov	r1, r5
 8080b54:	4630      	mov	r0, r6
 8080b56:	f7ff ff93 	bl	8080a80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080b5a:	e043      	b.n	8080be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080b5c:	4631      	mov	r1, r6
 8080b5e:	4668      	mov	r0, sp
 8080b60:	f7ff ffae 	bl	8080ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080b64:	68e0      	ldr	r0, [r4, #12]
 8080b66:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080b6a:	b108      	cbz	r0, 8080b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8080b6c:	f002 fac2 	bl	80830f4 <strdup>
 8080b70:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080b72:	2010      	movs	r0, #16
 8080b74:	f8ad 5014 	strh.w	r5, [sp, #20]
 8080b78:	f7ff fa8f 	bl	808009a <_Znwj>
 8080b7c:	4605      	mov	r5, r0
 8080b7e:	b330      	cbz	r0, 8080bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080b80:	f04f 0800 	mov.w	r8, #0
 8080b84:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080b88:	2018      	movs	r0, #24
 8080b8a:	f7ff fa86 	bl	808009a <_Znwj>
 8080b8e:	4604      	mov	r4, r0
 8080b90:	b1c0      	cbz	r0, 8080bc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080b92:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080b96:	4601      	mov	r1, r0
 8080b98:	4668      	mov	r0, sp
 8080b9a:	f7ff ff61 	bl	8080a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080b9e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080ba0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080ba2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080ba4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080ba6:	9202      	str	r2, [sp, #8]
 8080ba8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080baa:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080bac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8080bb0:	9203      	str	r2, [sp, #12]
 8080bb2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8080bb4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080bbc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8080bbe:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080bc2:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080bc4:	4b0e      	ldr	r3, [pc, #56]	; (8080c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080bc6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080bc8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080bca:	4b0e      	ldr	r3, [pc, #56]	; (8080c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8080bcc:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080bce:	9804      	ldr	r0, [sp, #16]
 8080bd0:	f7ff fe0a 	bl	80807e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080bd4:	4668      	mov	r0, sp
 8080bd6:	f7ff fecc 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080bda:	2200      	movs	r2, #0
 8080bdc:	4629      	mov	r1, r5
 8080bde:	480a      	ldr	r0, [pc, #40]	; (8080c08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 8080be0:	f7ff fd66 	bl	80806b0 <application_thread_invoke>
 8080be4:	4630      	mov	r0, r6
 8080be6:	f7ff fec4 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080bea:	2110      	movs	r1, #16
 8080bec:	4630      	mov	r0, r6
 8080bee:	f002 f896 	bl	8082d1e <_ZdlPvj>
 8080bf2:	4638      	mov	r0, r7
 8080bf4:	f7ff fdf8 	bl	80807e8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8080bf8:	b006      	add	sp, #24
 8080bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080bfe:	bf00      	nop
 8080c00:	08080a93 	.word	0x08080a93
 8080c04:	08080cf5 	.word	0x08080cf5
 8080c08:	0808083f 	.word	0x0808083f

08080c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080c10:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080c12:	ad07      	add	r5, sp, #28
 8080c14:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080c18:	4606      	mov	r6, r0
 8080c1a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8080c1c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080c1e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080c20:	460f      	mov	r7, r1
 8080c22:	4690      	mov	r8, r2
 8080c24:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080c28:	f8c5 b004 	str.w	fp, [r5, #4]
 8080c2c:	f8c5 b008 	str.w	fp, [r5, #8]
 8080c30:	9307      	str	r3, [sp, #28]
 8080c32:	f7ff fa32 	bl	808009a <_Znwj>
 8080c36:	4604      	mov	r4, r0
 8080c38:	b138      	cbz	r0, 8080c4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8080c3a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080c3e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080c42:	f8c0 b004 	str.w	fp, [r0, #4]
 8080c46:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080c4a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080c4c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8080c4e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080c50:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080c52:	f7ff fa22 	bl	808009a <_Znwj>
 8080c56:	b128      	cbz	r0, 8080c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8080c58:	2301      	movs	r3, #1
 8080c5a:	6043      	str	r3, [r0, #4]
 8080c5c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8080c5e:	4b23      	ldr	r3, [pc, #140]	; (8080cec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8080c60:	60c4      	str	r4, [r0, #12]
 8080c62:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8080c64:	4b22      	ldr	r3, [pc, #136]	; (8080cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080c66:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080c68:	2008      	movs	r0, #8
 8080c6a:	9308      	str	r3, [sp, #32]
 8080c6c:	f7ff fa15 	bl	808009a <_Znwj>
 8080c70:	4604      	mov	r4, r0
 8080c72:	b128      	cbz	r0, 8080c80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080c74:	9b03      	ldr	r3, [sp, #12]
 8080c76:	a904      	add	r1, sp, #16
 8080c78:	f840 3b04 	str.w	r3, [r0], #4
 8080c7c:	f7ff fecb 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080c80:	9500      	str	r5, [sp, #0]
 8080c82:	fa5f f38a 	uxtb.w	r3, sl
 8080c86:	464a      	mov	r2, r9
 8080c88:	4641      	mov	r1, r8
 8080c8a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8080c8c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080c8e:	f7ff fd43 	bl	8080718 <spark_send_event>
 8080c92:	b9b8      	cbnz	r0, 8080cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8080c94:	9b03      	ldr	r3, [sp, #12]
 8080c96:	785b      	ldrb	r3, [r3, #1]
 8080c98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8080c9c:	b993      	cbnz	r3, 8080cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080c9e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8080ca2:	a905      	add	r1, sp, #20
 8080ca4:	a803      	add	r0, sp, #12
 8080ca6:	9205      	str	r2, [sp, #20]
 8080ca8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080cac:	f7ff ff18 	bl	8080ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080cb0:	9805      	ldr	r0, [sp, #20]
 8080cb2:	f7ff fd99 	bl	80807e8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080cb6:	a805      	add	r0, sp, #20
 8080cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080cba:	f7ff feb3 	bl	8080a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080cbe:	a806      	add	r0, sp, #24
 8080cc0:	f7ff fe82 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080cc4:	9b03      	ldr	r3, [sp, #12]
 8080cc6:	a904      	add	r1, sp, #16
 8080cc8:	a806      	add	r0, sp, #24
 8080cca:	9305      	str	r3, [sp, #20]
 8080ccc:	f7ff fea3 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8080cd0:	a905      	add	r1, sp, #20
 8080cd2:	4630      	mov	r0, r6
 8080cd4:	f7ff fe8e 	bl	80809f4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080cd8:	a806      	add	r0, sp, #24
 8080cda:	f7ff fe75 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cde:	a804      	add	r0, sp, #16
 8080ce0:	f7ff fe72 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8080ce4:	4630      	mov	r0, r6
 8080ce6:	b00b      	add	sp, #44	; 0x2c
 8080ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080cec:	0808333c 	.word	0x0808333c
 8080cf0:	08080e61 	.word	0x08080e61

08080cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080cf4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080cf8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080cfa:	d006      	beq.n	8080d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8080cfc:	2a03      	cmp	r2, #3
 8080cfe:	d017      	beq.n	8080d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8080d00:	2a01      	cmp	r2, #1
 8080d02:	d121      	bne.n	8080d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080d04:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080d06:	6003      	str	r3, [r0, #0]
	      break;
 8080d08:	e01e      	b.n	8080d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d0a:	2018      	movs	r0, #24
 8080d0c:	680e      	ldr	r6, [r1, #0]
 8080d0e:	f7ff f9c4 	bl	808009a <_Znwj>
 8080d12:	4605      	mov	r5, r0
 8080d14:	b150      	cbz	r0, 8080d2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080d16:	4631      	mov	r1, r6
 8080d18:	f7ff fed2 	bl	8080ac0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080d1c:	6930      	ldr	r0, [r6, #16]
 8080d1e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080d22:	b108      	cbz	r0, 8080d28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8080d24:	f002 f9e6 	bl	80830f4 <strdup>
 8080d28:	6128      	str	r0, [r5, #16]
 8080d2a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d2c:	6025      	str	r5, [r4, #0]
 8080d2e:	e00b      	b.n	8080d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d30:	6804      	ldr	r4, [r0, #0]
 8080d32:	b14c      	cbz	r4, 8080d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080d34:	6920      	ldr	r0, [r4, #16]
 8080d36:	f7ff fd57 	bl	80807e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080d3a:	4620      	mov	r0, r4
 8080d3c:	f7ff fe19 	bl	8080972 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d40:	2118      	movs	r1, #24
 8080d42:	4620      	mov	r0, r4
 8080d44:	f001 ffeb 	bl	8082d1e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080d48:	2000      	movs	r0, #0
 8080d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080d4c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080d4c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080d4e:	2300      	movs	r3, #0
 8080d50:	6083      	str	r3, [r0, #8]
 8080d52:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080d54:	4604      	mov	r4, r0
 8080d56:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080d58:	b12b      	cbz	r3, 8080d66 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080d5a:	2202      	movs	r2, #2
 8080d5c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080d5e:	68eb      	ldr	r3, [r5, #12]
 8080d60:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080d62:	68ab      	ldr	r3, [r5, #8]
 8080d64:	60a3      	str	r3, [r4, #8]
	}
    }
 8080d66:	4620      	mov	r0, r4
 8080d68:	bd38      	pop	{r3, r4, r5, pc}

08080d6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080d6a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080d6c:	b570      	push	{r4, r5, r6, lr}
 8080d6e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080d70:	d006      	beq.n	8080d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8080d72:	2a03      	cmp	r2, #3
 8080d74:	d011      	beq.n	8080d9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8080d76:	2a01      	cmp	r2, #1
 8080d78:	d118      	bne.n	8080dac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080d7a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080d7c:	6003      	str	r3, [r0, #0]
	      break;
 8080d7e:	e015      	b.n	8080dac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d80:	2014      	movs	r0, #20
 8080d82:	680e      	ldr	r6, [r1, #0]
 8080d84:	f7ff f989 	bl	808009a <_Znwj>
 8080d88:	4605      	mov	r5, r0
 8080d8a:	b120      	cbz	r0, 8080d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080d8c:	4631      	mov	r1, r6
 8080d8e:	f7ff ffdd 	bl	8080d4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080d92:	7c33      	ldrb	r3, [r6, #16]
 8080d94:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080d96:	6025      	str	r5, [r4, #0]
 8080d98:	e008      	b.n	8080dac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080d9a:	6804      	ldr	r4, [r0, #0]
 8080d9c:	b134      	cbz	r4, 8080dac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080d9e:	4620      	mov	r0, r4
 8080da0:	f7ff fde7 	bl	8080972 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080da4:	2114      	movs	r1, #20
 8080da6:	4620      	mov	r0, r4
 8080da8:	f001 ffb9 	bl	8082d1e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080dac:	2000      	movs	r0, #0
 8080dae:	bd70      	pop	{r4, r5, r6, pc}

08080db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8080db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080db2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080db4:	f3bf 8f5f 	dmb	sy
 8080db8:	b087      	sub	sp, #28
 8080dba:	2300      	movs	r3, #0
 8080dbc:	e850 6f00 	ldrex	r6, [r0]
 8080dc0:	e840 3200 	strex	r2, r3, [r0]
 8080dc4:	2a00      	cmp	r2, #0
 8080dc6:	d1f9      	bne.n	8080dbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8080dc8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080dcc:	2e00      	cmp	r6, #0
 8080dce:	d03f      	beq.n	8080e50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080dd0:	4618      	mov	r0, r3
 8080dd2:	f7ff fc65 	bl	80806a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080dd6:	4607      	mov	r7, r0
 8080dd8:	b120      	cbz	r0, 8080de4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080dda:	4621      	mov	r1, r4
 8080ddc:	4630      	mov	r0, r6
 8080dde:	f7ff fe5f 	bl	8080aa0 <_ZNKSt8functionIFvRKbEEclES1_>
 8080de2:	e02e      	b.n	8080e42 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080de4:	4631      	mov	r1, r6
 8080de6:	a801      	add	r0, sp, #4
 8080de8:	f7ff ffb0 	bl	8080d4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080dec:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080dee:	2010      	movs	r0, #16
 8080df0:	f88d 3014 	strb.w	r3, [sp, #20]
 8080df4:	f7ff f951 	bl	808009a <_Znwj>
 8080df8:	4605      	mov	r5, r0
 8080dfa:	b1d0      	cbz	r0, 8080e32 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080dfc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080dfe:	2014      	movs	r0, #20
 8080e00:	f7ff f94b 	bl	808009a <_Znwj>
 8080e04:	4604      	mov	r4, r0
 8080e06:	b178      	cbz	r0, 8080e28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080e08:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080e0a:	4601      	mov	r1, r0
 8080e0c:	a801      	add	r0, sp, #4
 8080e0e:	f7ff fe27 	bl	8080a60 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080e12:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080e14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080e18:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080e1a:	9203      	str	r2, [sp, #12]
 8080e1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e1e:	60e3      	str	r3, [r4, #12]
 8080e20:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080e24:	9204      	str	r2, [sp, #16]
 8080e26:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080e28:	4b0a      	ldr	r3, [pc, #40]	; (8080e54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080e2a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080e2c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080e2e:	4b0a      	ldr	r3, [pc, #40]	; (8080e58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8080e30:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080e32:	a801      	add	r0, sp, #4
 8080e34:	f7ff fd9d 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080e38:	2200      	movs	r2, #0
 8080e3a:	4629      	mov	r1, r5
 8080e3c:	4807      	ldr	r0, [pc, #28]	; (8080e5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8080e3e:	f7ff fc37 	bl	80806b0 <application_thread_invoke>
 8080e42:	4630      	mov	r0, r6
 8080e44:	f7ff fd95 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080e48:	2110      	movs	r1, #16
 8080e4a:	4630      	mov	r0, r6
 8080e4c:	f001 ff67 	bl	8082d1e <_ZdlPvj>
        }
    }
 8080e50:	b007      	add	sp, #28
 8080e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080e54:	08080ab3 	.word	0x08080ab3
 8080e58:	08080d6b 	.word	0x08080d6b
 8080e5c:	0808083f 	.word	0x0808083f

08080e60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080e60:	b530      	push	{r4, r5, lr}
 8080e62:	4604      	mov	r4, r0
 8080e64:	b085      	sub	sp, #20
 8080e66:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080e68:	4668      	mov	r0, sp
 8080e6a:	4611      	mov	r1, r2
 8080e6c:	f7ff fdda 	bl	8080a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080e70:	b17c      	cbz	r4, 8080e92 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080e72:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080e74:	4628      	mov	r0, r5
 8080e76:	b10d      	cbz	r5, 8080e7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8080e78:	f002 f93c 	bl	80830f4 <strdup>
 8080e7c:	9002      	str	r0, [sp, #8]
 8080e7e:	a902      	add	r1, sp, #8
 8080e80:	4668      	mov	r0, sp
 8080e82:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080e86:	f7ff fe2b 	bl	8080ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080e8a:	9802      	ldr	r0, [sp, #8]
 8080e8c:	f7ff fcac 	bl	80807e8 <free>
 8080e90:	e01d      	b.n	8080ece <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080e92:	f04f 0201 	mov.w	r2, #1
 8080e96:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080e98:	f88d 4008 	strb.w	r4, [sp, #8]
 8080e9c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8080ea0:	42a3      	cmp	r3, r4
 8080ea2:	d103      	bne.n	8080eac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8080ea4:	e8c0 2f41 	strexb	r1, r2, [r0]
 8080ea8:	2900      	cmp	r1, #0
 8080eaa:	d1f7      	bne.n	8080e9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8080eac:	d002      	beq.n	8080eb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8080eae:	f88d 3008 	strb.w	r3, [sp, #8]
 8080eb2:	e00c      	b.n	8080ece <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8080eb4:	f110 010c 	adds.w	r1, r0, #12
 8080eb8:	f04f 0301 	mov.w	r3, #1
 8080ebc:	bf18      	it	ne
 8080ebe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080ec0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8080ec4:	3004      	adds	r0, #4
 8080ec6:	f800 3c03 	strb.w	r3, [r0, #-3]
 8080eca:	f7ff ff71 	bl	8080db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8080ece:	a801      	add	r0, sp, #4
 8080ed0:	f7ff fd7a 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8080ed4:	b005      	add	sp, #20
 8080ed6:	bd30      	pop	{r4, r5, pc}

08080ed8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8080ed8:	4770      	bx	lr

08080eda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080edc:	4606      	mov	r6, r0
 8080ede:	4615      	mov	r5, r2
 8080ee0:	460c      	mov	r4, r1
 8080ee2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080ee4:	42bc      	cmp	r4, r7
 8080ee6:	d006      	beq.n	8080ef6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080ee8:	6833      	ldr	r3, [r6, #0]
 8080eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080eee:	689b      	ldr	r3, [r3, #8]
 8080ef0:	4630      	mov	r0, r6
 8080ef2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080ef4:	e7f6      	b.n	8080ee4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8080ef6:	4628      	mov	r0, r5
 8080ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080efa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8080efa:	2200      	movs	r2, #0
 8080efc:	7c00      	ldrb	r0, [r0, #16]
 8080efe:	f7ff bac7 	b.w	8080490 <HAL_I2C_Write_Data>

08080f02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8080f02:	2100      	movs	r1, #0
 8080f04:	7c00      	ldrb	r0, [r0, #16]
 8080f06:	f7ff bacb 	b.w	80804a0 <HAL_I2C_Available_Data>

08080f0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8080f0a:	2100      	movs	r1, #0
 8080f0c:	7c00      	ldrb	r0, [r0, #16]
 8080f0e:	f7ff bacf 	b.w	80804b0 <HAL_I2C_Read_Data>

08080f12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8080f12:	2100      	movs	r1, #0
 8080f14:	7c00      	ldrb	r0, [r0, #16]
 8080f16:	f7ff bad3 	b.w	80804c0 <HAL_I2C_Peek_Data>

08080f1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080f1a:	2100      	movs	r1, #0
 8080f1c:	7c00      	ldrb	r0, [r0, #16]
 8080f1e:	f7ff bad7 	b.w	80804d0 <HAL_I2C_Flush_Data>

08080f22 <_ZN7TwoWireD0Ev>:
 8080f22:	b510      	push	{r4, lr}
 8080f24:	4604      	mov	r4, r0
 8080f26:	2114      	movs	r1, #20
 8080f28:	f001 fef9 	bl	8082d1e <_ZdlPvj>
 8080f2c:	4620      	mov	r0, r4
 8080f2e:	bd10      	pop	{r4, pc}

08080f30 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080f30:	b510      	push	{r4, lr}
 8080f32:	4604      	mov	r4, r0
 8080f34:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080f3a:	60a3      	str	r3, [r4, #8]
 8080f3c:	4b04      	ldr	r3, [pc, #16]	; (8080f50 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080f3e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8080f40:	7420      	strb	r0, [r4, #16]
 8080f42:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080f44:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080f46:	f7ff fad3 	bl	80804f0 <HAL_I2C_Init>

}
 8080f4a:	4620      	mov	r0, r4
 8080f4c:	bd10      	pop	{r4, pc}
 8080f4e:	bf00      	nop
 8080f50:	08083358 	.word	0x08083358

08080f54 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080f54:	2100      	movs	r1, #0
 8080f56:	7c00      	ldrb	r0, [r0, #16]
 8080f58:	f7ff bac2 	b.w	80804e0 <HAL_I2C_Is_Enabled>

08080f5c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080f5c:	4770      	bx	lr

08080f5e <_ZN9IPAddressD0Ev>:
 8080f5e:	b510      	push	{r4, lr}
 8080f60:	4604      	mov	r4, r0
 8080f62:	2108      	movs	r1, #8
 8080f64:	f001 fedb 	bl	8082d1e <_ZdlPvj>
 8080f68:	4620      	mov	r0, r4
 8080f6a:	bd10      	pop	{r4, pc}

08080f6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080f6e:	460f      	mov	r7, r1
 8080f70:	f100 0608 	add.w	r6, r0, #8
 8080f74:	1d05      	adds	r5, r0, #4
 8080f76:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080f78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080f7c:	220a      	movs	r2, #10
 8080f7e:	4638      	mov	r0, r7
 8080f80:	f001 fa9f 	bl	80824c2 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080f84:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080f86:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080f88:	d007      	beq.n	8080f9a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080f8a:	2c00      	cmp	r4, #0
 8080f8c:	d0f4      	beq.n	8080f78 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080f8e:	212e      	movs	r1, #46	; 0x2e
 8080f90:	4638      	mov	r0, r7
 8080f92:	f001 fa5d 	bl	8082450 <_ZN5Print5printEc>
 8080f96:	4404      	add	r4, r0
 8080f98:	e7ee      	b.n	8080f78 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080f9a:	4620      	mov	r0, r4
 8080f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080fa0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8080fa0:	4a02      	ldr	r2, [pc, #8]	; (8080fac <_ZN9IPAddressC1Ev+0xc>)
 8080fa2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080fa4:	2200      	movs	r2, #0
 8080fa6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8080fa8:	4770      	bx	lr
 8080faa:	bf00      	nop
 8080fac:	08083380 	.word	0x08083380

08080fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8080fb0:	4a02      	ldr	r2, [pc, #8]	; (8080fbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080fb2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8080fb4:	680a      	ldr	r2, [r1, #0]
 8080fb6:	6042      	str	r2, [r0, #4]
}
 8080fb8:	4770      	bx	lr
 8080fba:	bf00      	nop
 8080fbc:	08083380 	.word	0x08083380

08080fc0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080fc0:	4a01      	ldr	r2, [pc, #4]	; (8080fc8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8080fc2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080fc4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8080fc6:	4770      	bx	lr
 8080fc8:	08083380 	.word	0x08083380

08080fcc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080fcc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080fce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080fd2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080fd6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080fda:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080fde:	6041      	str	r1, [r0, #4]
 8080fe0:	bd10      	pop	{r4, pc}
	...

08080fe4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080fe6:	4d04      	ldr	r5, [pc, #16]	; (8080ff8 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080fe8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080fea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080fee:	9500      	str	r5, [sp, #0]
 8080ff0:	f7ff ffec 	bl	8080fcc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080ff4:	b003      	add	sp, #12
 8080ff6:	bd30      	pop	{r4, r5, pc}
 8080ff8:	08083380 	.word	0x08083380

08080ffc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 8080ffc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 8081000:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 8081002:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8081006:	4610      	mov	r0, r2
 8081008:	2901      	cmp	r1, #1
 808100a:	d104      	bne.n	8081016 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 808100c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8081010:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8081014:	e004      	b.n	8081020 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 8081016:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 8081018:	bf04      	itt	eq
 808101a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 808101e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 8081020:	3b01      	subs	r3, #1
 8081022:	f102 0210 	add.w	r2, r2, #16
 8081026:	d1ec      	bne.n	8081002 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 8081028:	4770      	bx	lr

0808102a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 808102a:	b40e      	push	{r1, r2, r3}
 808102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081030:	b087      	sub	sp, #28
 8081032:	af00      	add	r7, sp, #0
 8081034:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8081038:	f854 6b04 	ldr.w	r6, [r4], #4
 808103c:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808103e:	4623      	mov	r3, r4
 8081040:	4632      	mov	r2, r6
 8081042:	2110      	movs	r1, #16
 8081044:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 8081048:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 808104a:	f7ff fbdd 	bl	8080808 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 808104e:	280f      	cmp	r0, #15
 8081050:	d916      	bls.n	8081080 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 8081052:	f100 0308 	add.w	r3, r0, #8
 8081056:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 808105a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 808105c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 8081060:	4632      	mov	r2, r6
 8081062:	1c41      	adds	r1, r0, #1
 8081064:	4623      	mov	r3, r4
 8081066:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 8081068:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 808106a:	f7ff fbcd 	bl	8080808 <vsnprintf>
        va_end(args);
        if (n > 0) {
 808106e:	1e02      	subs	r2, r0, #0
 8081070:	dd04      	ble.n	808107c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 8081072:	682b      	ldr	r3, [r5, #0]
 8081074:	4669      	mov	r1, sp
 8081076:	689b      	ldr	r3, [r3, #8]
 8081078:	4628      	mov	r0, r5
 808107a:	4798      	blx	r3
 808107c:	46c5      	mov	sp, r8
 808107e:	e007      	b.n	8081090 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 8081080:	b130      	cbz	r0, 8081090 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 8081082:	682b      	ldr	r3, [r5, #0]
 8081084:	4602      	mov	r2, r0
 8081086:	689b      	ldr	r3, [r3, #8]
 8081088:	f107 0108 	add.w	r1, r7, #8
 808108c:	4628      	mov	r0, r5
 808108e:	4798      	blx	r3
    }
}
 8081090:	371c      	adds	r7, #28
 8081092:	46bd      	mov	sp, r7
 8081094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8081098:	b003      	add	sp, #12
 808109a:	4770      	bx	lr

0808109c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 808109c:	b510      	push	{r4, lr}
 808109e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80810a0:	6803      	ldr	r3, [r0, #0]
 80810a2:	689b      	ldr	r3, [r3, #8]
 80810a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80810a6:	68a3      	ldr	r3, [r4, #8]
 80810a8:	3b01      	subs	r3, #1
 80810aa:	60a3      	str	r3, [r4, #8]
 80810ac:	b92b      	cbnz	r3, 80810ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80810ae:	6823      	ldr	r3, [r4, #0]
 80810b0:	4620      	mov	r0, r4
        }
    }
 80810b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80810b6:	68db      	ldr	r3, [r3, #12]
 80810b8:	4718      	bx	r3
 80810ba:	bd10      	pop	{r4, pc}

080810bc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80810bc:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80810be:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80810c0:	ab02      	add	r3, sp, #8
 80810c2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80810c6:	6894      	ldr	r4, [r2, #8]
 80810c8:	4619      	mov	r1, r3
 80810ca:	2201      	movs	r2, #1
 80810cc:	47a0      	blx	r4
}
 80810ce:	b002      	add	sp, #8
 80810d0:	bd10      	pop	{r4, pc}

080810d2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 80810d2:	6883      	ldr	r3, [r0, #8]
 80810d4:	b1fb      	cbz	r3, 8081116 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80810d6:	781a      	ldrb	r2, [r3, #0]
 80810d8:	2a03      	cmp	r2, #3
 80810da:	d81a      	bhi.n	8081112 <_ZNK5spark9JSONValue4typeEv+0x40>
 80810dc:	e8df f002 	tbb	[pc, r2]
 80810e0:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 80810e4:	2005      	movs	r0, #5
 80810e6:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80810e8:	6802      	ldr	r2, [r0, #0]
 80810ea:	685b      	ldr	r3, [r3, #4]
 80810ec:	6852      	ldr	r2, [r2, #4]
 80810ee:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80810f0:	282d      	cmp	r0, #45	; 0x2d
 80810f2:	d014      	beq.n	808111e <_ZNK5spark9JSONValue4typeEv+0x4c>
 80810f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80810f8:	2b09      	cmp	r3, #9
 80810fa:	d910      	bls.n	808111e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80810fc:	2874      	cmp	r0, #116	; 0x74
 80810fe:	d010      	beq.n	8081122 <_ZNK5spark9JSONValue4typeEv+0x50>
 8081100:	2866      	cmp	r0, #102	; 0x66
 8081102:	d00e      	beq.n	8081122 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 8081104:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 8081108:	4258      	negs	r0, r3
 808110a:	4158      	adcs	r0, r3
 808110c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 808110e:	2006      	movs	r0, #6
 8081110:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 8081112:	2000      	movs	r0, #0
 8081114:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 8081116:	4618      	mov	r0, r3
 8081118:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 808111a:	2004      	movs	r0, #4
 808111c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 808111e:	2003      	movs	r0, #3
 8081120:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 8081122:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 8081124:	4770      	bx	lr

08081126 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 8081126:	b510      	push	{r4, lr}
 8081128:	4604      	mov	r4, r0
    switch (type()) {
 808112a:	f7ff ffd2 	bl	80810d2 <_ZNK5spark9JSONValue4typeEv>
 808112e:	2802      	cmp	r0, #2
 8081130:	d00d      	beq.n	808114e <_ZNK5spark9JSONValue5toIntEv+0x28>
 8081132:	d316      	bcc.n	8081162 <_ZNK5spark9JSONValue5toIntEv+0x3c>
 8081134:	2804      	cmp	r0, #4
 8081136:	d814      	bhi.n	8081162 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 8081138:	6822      	ldr	r2, [r4, #0]
 808113a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 808113c:	6850      	ldr	r0, [r2, #4]
 808113e:	685b      	ldr	r3, [r3, #4]
 8081140:	220a      	movs	r2, #10
 8081142:	2100      	movs	r1, #0
 8081144:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 8081146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 808114a:	f002 b8a5 	b.w	8083298 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 808114e:	6822      	ldr	r2, [r4, #0]
 8081150:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 8081152:	6852      	ldr	r2, [r2, #4]
 8081154:	685b      	ldr	r3, [r3, #4]
 8081156:	5cd0      	ldrb	r0, [r2, r3]
 8081158:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 808115c:	4258      	negs	r0, r3
 808115e:	4158      	adcs	r0, r3
 8081160:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 8081162:	2000      	movs	r0, #0
    }
}
 8081164:	bd10      	pop	{r4, pc}

08081166 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 8081166:	b510      	push	{r4, lr}
    if (!n_) {
 8081168:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 808116a:	4604      	mov	r4, r0
    if (!n_) {
 808116c:	b15b      	cbz	r3, 8081186 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 808116e:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 8081170:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 8081172:	60e0      	str	r0, [r4, #12]
    ++t_;
 8081174:	3010      	adds	r0, #16
 8081176:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 8081178:	6120      	str	r0, [r4, #16]
    --n_;
 808117a:	6163      	str	r3, [r4, #20]
    if (n_) {
 808117c:	b12b      	cbz	r3, 808118a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 808117e:	f7ff ff3d 	bl	8080ffc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 8081182:	60a0      	str	r0, [r4, #8]
 8081184:	e001      	b.n	808118a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 8081186:	4618      	mov	r0, r3
 8081188:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 808118a:	2001      	movs	r0, #1
}
 808118c:	bd10      	pop	{r4, pc}

0808118e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 808118e:	b510      	push	{r4, lr}
 8081190:	4604      	mov	r4, r0
    write('}');
 8081192:	217d      	movs	r1, #125	; 0x7d
 8081194:	f7ff ff92 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 8081198:	2301      	movs	r3, #1
 808119a:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808119c:	4620      	mov	r0, r4
 808119e:	bd10      	pop	{r4, pc}

080811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80811a0:	b508      	push	{r3, lr}
    switch (state_) {
 80811a2:	7903      	ldrb	r3, [r0, #4]
 80811a4:	2b01      	cmp	r3, #1
 80811a6:	d002      	beq.n	80811ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80811a8:	2b02      	cmp	r3, #2
 80811aa:	d002      	beq.n	80811b2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80811ac:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80811ae:	212c      	movs	r1, #44	; 0x2c
 80811b0:	e000      	b.n	80811b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80811b2:	213a      	movs	r1, #58	; 0x3a
 80811b4:	f7ff ff82 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
 80811b8:	bd08      	pop	{r3, pc}

080811ba <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80811ba:	b510      	push	{r4, lr}
 80811bc:	4604      	mov	r4, r0
    writeSeparator();
 80811be:	f7ff ffef 	bl	80811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80811c2:	4620      	mov	r0, r4
 80811c4:	217b      	movs	r1, #123	; 0x7b
 80811c6:	f7ff ff79 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80811ca:	2300      	movs	r3, #0
 80811cc:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80811ce:	4620      	mov	r0, r4
 80811d0:	bd10      	pop	{r4, pc}
	...

080811d4 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 80811d4:	b538      	push	{r3, r4, r5, lr}
 80811d6:	4604      	mov	r4, r0
 80811d8:	460d      	mov	r5, r1
    writeSeparator();
 80811da:	f7ff ffe1 	bl	80811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80811de:	6823      	ldr	r3, [r4, #0]
 80811e0:	4620      	mov	r0, r4
 80811e2:	68db      	ldr	r3, [r3, #12]
 80811e4:	462a      	mov	r2, r5
 80811e6:	4903      	ldr	r1, [pc, #12]	; (80811f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80811e8:	4798      	blx	r3
    state_ = NEXT;
 80811ea:	2301      	movs	r3, #1
 80811ec:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80811ee:	4620      	mov	r0, r4
 80811f0:	bd38      	pop	{r3, r4, r5, pc}
 80811f2:	bf00      	nop
 80811f4:	0808339b 	.word	0x0808339b

080811f8 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80811f8:	b538      	push	{r3, r4, r5, lr}
 80811fa:	4604      	mov	r4, r0
 80811fc:	460d      	mov	r5, r1
    writeSeparator();
 80811fe:	f7ff ffcf 	bl	80811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 8081202:	6823      	ldr	r3, [r4, #0]
 8081204:	4620      	mov	r0, r4
 8081206:	68db      	ldr	r3, [r3, #12]
 8081208:	462a      	mov	r2, r5
 808120a:	4903      	ldr	r1, [pc, #12]	; (8081218 <_ZN5spark10JSONWriter5valueEj+0x20>)
 808120c:	4798      	blx	r3
    state_ = NEXT;
 808120e:	2301      	movs	r3, #1
 8081210:	7123      	strb	r3, [r4, #4]
    return *this;
}
 8081212:	4620      	mov	r0, r4
 8081214:	bd38      	pop	{r3, r4, r5, pc}
 8081216:	bf00      	nop
 8081218:	0808339e 	.word	0x0808339e

0808121c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808121e:	460d      	mov	r5, r1
 8081220:	4617      	mov	r7, r2
    write('"');
 8081222:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 8081224:	4604      	mov	r4, r0
    write('"');
 8081226:	f7ff ff49 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
 808122a:	462a      	mov	r2, r5
    const char* const end = str + size;
 808122c:	4629      	mov	r1, r5
 808122e:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 8081230:	42ba      	cmp	r2, r7
 8081232:	d038      	beq.n	80812a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 8081234:	4616      	mov	r6, r2
 8081236:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808123a:	2d22      	cmp	r5, #34	; 0x22
 808123c:	d003      	beq.n	8081246 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808123e:	2d5c      	cmp	r5, #92	; 0x5c
 8081240:	d001      	beq.n	8081246 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 8081242:	2d1f      	cmp	r5, #31
 8081244:	d82d      	bhi.n	80812a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 8081246:	6823      	ldr	r3, [r4, #0]
 8081248:	1a52      	subs	r2, r2, r1
 808124a:	689b      	ldr	r3, [r3, #8]
 808124c:	4620      	mov	r0, r4
 808124e:	4798      	blx	r3
            write('\\');
 8081250:	215c      	movs	r1, #92	; 0x5c
 8081252:	4620      	mov	r0, r4
 8081254:	f7ff ff32 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 8081258:	2d0c      	cmp	r5, #12
 808125a:	d019      	beq.n	8081290 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 808125c:	d807      	bhi.n	808126e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 808125e:	2d09      	cmp	r5, #9
 8081260:	d00f      	beq.n	8081282 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 8081262:	2d0a      	cmp	r5, #10
 8081264:	d012      	beq.n	808128c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 8081266:	2d08      	cmp	r5, #8
 8081268:	d114      	bne.n	8081294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808126a:	2162      	movs	r1, #98	; 0x62
 808126c:	e00a      	b.n	8081284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 808126e:	2d22      	cmp	r5, #34	; 0x22
 8081270:	d005      	beq.n	808127e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8081272:	2d5c      	cmp	r5, #92	; 0x5c
 8081274:	d003      	beq.n	808127e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 8081276:	2d0d      	cmp	r5, #13
 8081278:	d10c      	bne.n	8081294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808127a:	2172      	movs	r1, #114	; 0x72
 808127c:	e002      	b.n	8081284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 808127e:	4629      	mov	r1, r5
 8081280:	e000      	b.n	8081284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 8081282:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 8081284:	4620      	mov	r0, r4
 8081286:	f7ff ff19 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
                break;
 808128a:	e009      	b.n	80812a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 808128c:	216e      	movs	r1, #110	; 0x6e
 808128e:	e7f9      	b.n	8081284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 8081290:	2166      	movs	r1, #102	; 0x66
 8081292:	e7f7      	b.n	8081284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 8081294:	6823      	ldr	r3, [r4, #0]
 8081296:	462a      	mov	r2, r5
 8081298:	68db      	ldr	r3, [r3, #12]
 808129a:	4909      	ldr	r1, [pc, #36]	; (80812c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 808129c:	4620      	mov	r0, r4
 808129e:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80812a0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80812a2:	4632      	mov	r2, r6
 80812a4:	e7c4      	b.n	8081230 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80812a6:	4291      	cmp	r1, r2
 80812a8:	d004      	beq.n	80812b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80812aa:	6823      	ldr	r3, [r4, #0]
 80812ac:	1a52      	subs	r2, r2, r1
 80812ae:	689d      	ldr	r5, [r3, #8]
 80812b0:	4620      	mov	r0, r4
 80812b2:	47a8      	blx	r5
    }
    write('"');
 80812b4:	2122      	movs	r1, #34	; 0x22
 80812b6:	4620      	mov	r0, r4
 80812b8:	f7ff ff00 	bl	80810bc <_ZN5spark10JSONWriter5writeEc>
 80812bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80812be:	bf00      	nop
 80812c0:	080833a9 	.word	0x080833a9

080812c4 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80812c4:	b570      	push	{r4, r5, r6, lr}
 80812c6:	4604      	mov	r4, r0
 80812c8:	460d      	mov	r5, r1
 80812ca:	4616      	mov	r6, r2
    writeSeparator();
 80812cc:	f7ff ff68 	bl	80811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80812d0:	4620      	mov	r0, r4
 80812d2:	4632      	mov	r2, r6
 80812d4:	4629      	mov	r1, r5
 80812d6:	f7ff ffa1 	bl	808121c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80812da:	2302      	movs	r3, #2
 80812dc:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80812de:	4620      	mov	r0, r4
 80812e0:	bd70      	pop	{r4, r5, r6, pc}

080812e2 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80812e2:	b570      	push	{r4, r5, r6, lr}
 80812e4:	4604      	mov	r4, r0
 80812e6:	460d      	mov	r5, r1
 80812e8:	4616      	mov	r6, r2
    writeSeparator();
 80812ea:	f7ff ff59 	bl	80811a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80812ee:	4620      	mov	r0, r4
 80812f0:	4632      	mov	r2, r6
 80812f2:	4629      	mov	r1, r5
 80812f4:	f7ff ff92 	bl	808121c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80812f8:	2301      	movs	r3, #1
 80812fa:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80812fc:	4620      	mov	r0, r4
 80812fe:	bd70      	pop	{r4, r5, r6, pc}

08081300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 8081300:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081302:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 8081304:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 8081306:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 8081308:	429c      	cmp	r4, r3
 808130a:	d00c      	beq.n	8081326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 808130c:	b114      	cbz	r4, 8081314 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808130e:	6863      	ldr	r3, [r4, #4]
 8081310:	3301      	adds	r3, #1
 8081312:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 8081314:	6828      	ldr	r0, [r5, #0]
 8081316:	b128      	cbz	r0, 8081324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081318:	6843      	ldr	r3, [r0, #4]
 808131a:	3b01      	subs	r3, #1
 808131c:	6043      	str	r3, [r0, #4]
 808131e:	b90b      	cbnz	r3, 8081324 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 8081320:	f7ff febc 	bl	808109c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 8081324:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 8081326:	4628      	mov	r0, r5
 8081328:	bd38      	pop	{r3, r4, r5, pc}
	...

0808132c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 808132c:	b510      	push	{r4, lr}
 808132e:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 8081330:	2300      	movs	r3, #0
 8081332:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8081334:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 8081336:	4810      	ldr	r0, [pc, #64]	; (8081378 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 8081338:	60e3      	str	r3, [r4, #12]
 808133a:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 808133c:	b1d1      	cbz	r1, 8081374 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 808133e:	780b      	ldrb	r3, [r1, #0]
 8081340:	2b03      	cmp	r3, #3
 8081342:	d006      	beq.n	8081352 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 8081344:	b9b3      	cbnz	r3, 8081374 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 8081346:	6813      	ldr	r3, [r2, #0]
 8081348:	6858      	ldr	r0, [r3, #4]
 808134a:	684b      	ldr	r3, [r1, #4]
 808134c:	5cc3      	ldrb	r3, [r0, r3]
 808134e:	2b6e      	cmp	r3, #110	; 0x6e
 8081350:	d008      	beq.n	8081364 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 8081352:	6813      	ldr	r3, [r2, #0]
 8081354:	6858      	ldr	r0, [r3, #4]
 8081356:	684b      	ldr	r3, [r1, #4]
 8081358:	4403      	add	r3, r0
 808135a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 808135c:	688b      	ldr	r3, [r1, #8]
 808135e:	6849      	ldr	r1, [r1, #4]
 8081360:	1a5b      	subs	r3, r3, r1
 8081362:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8081364:	4611      	mov	r1, r2
 8081366:	4620      	mov	r0, r4
 8081368:	f851 3b04 	ldr.w	r3, [r1], #4
 808136c:	f840 3b04 	str.w	r3, [r0], #4
 8081370:	f7ff ffc6 	bl	8081300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 8081374:	4620      	mov	r0, r4
 8081376:	bd10      	pop	{r4, pc}
 8081378:	0808340e 	.word	0x0808340e

0808137c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 808137c:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 808137e:	b510      	push	{r4, lr}
 8081380:	4604      	mov	r4, r0
 8081382:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8081384:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 8081386:	6083      	str	r3, [r0, #8]
 8081388:	60c3      	str	r3, [r0, #12]
 808138a:	6103      	str	r3, [r0, #16]
 808138c:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 808138e:	b171      	cbz	r1, 80813ae <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 8081390:	780b      	ldrb	r3, [r1, #0]
 8081392:	2b01      	cmp	r3, #1
 8081394:	d10b      	bne.n	80813ae <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 8081396:	f101 0310 	add.w	r3, r1, #16
 808139a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 808139c:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 808139e:	4611      	mov	r1, r2
 80813a0:	6143      	str	r3, [r0, #20]
 80813a2:	f851 3b04 	ldr.w	r3, [r1], #4
 80813a6:	f840 3b04 	str.w	r3, [r0], #4
 80813aa:	f7ff ffa9 	bl	8081300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80813ae:	4620      	mov	r0, r4
 80813b0:	bd10      	pop	{r4, pc}

080813b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80813b2:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80813b4:	b510      	push	{r4, lr}
 80813b6:	4604      	mov	r4, r0
 80813b8:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80813ba:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80813bc:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80813be:	b131      	cbz	r1, 80813ce <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80813c0:	4611      	mov	r1, r2
 80813c2:	f851 3b04 	ldr.w	r3, [r1], #4
 80813c6:	f840 3b04 	str.w	r3, [r0], #4
 80813ca:	f7ff ff99 	bl	8081300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 80813ce:	4620      	mov	r0, r4
 80813d0:	bd10      	pop	{r4, pc}

080813d2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80813d2:	6880      	ldr	r0, [r0, #8]
 80813d4:	6803      	ldr	r3, [r0, #0]
 80813d6:	68db      	ldr	r3, [r3, #12]
 80813d8:	4718      	bx	r3

080813da <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 80813da:	4770      	bx	lr

080813dc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80813dc:	b119      	cbz	r1, 80813e6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80813de:	680b      	ldr	r3, [r1, #0]
 80813e0:	4608      	mov	r0, r1
 80813e2:	685b      	ldr	r3, [r3, #4]
 80813e4:	4718      	bx	r3
 80813e6:	4770      	bx	lr

080813e8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80813e8:	b119      	cbz	r1, 80813f2 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 80813ea:	680b      	ldr	r3, [r1, #0]
 80813ec:	4608      	mov	r0, r1
 80813ee:	685b      	ldr	r3, [r3, #4]
 80813f0:	4718      	bx	r3
 80813f2:	4770      	bx	lr

080813f4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80813f4:	4770      	bx	lr

080813f6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 80813f6:	4770      	bx	lr

080813f8 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 80813f8:	4770      	bx	lr

080813fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80813fa:	b538      	push	{r3, r4, r5, lr}
 80813fc:	4604      	mov	r4, r0
 80813fe:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 8081400:	6800      	ldr	r0, [r0, #0]
 8081402:	212e      	movs	r1, #46	; 0x2e
 8081404:	f001 fe62 	bl	80830cc <strchrnul>
    size = s - category;
 8081408:	6823      	ldr	r3, [r4, #0]
 808140a:	1ac3      	subs	r3, r0, r3
 808140c:	602b      	str	r3, [r5, #0]
    if (size) {
 808140e:	b123      	cbz	r3, 808141a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 8081410:	7803      	ldrb	r3, [r0, #0]
 8081412:	b103      	cbz	r3, 8081416 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 8081414:	3001      	adds	r0, #1
 8081416:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081418:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 808141a:	4618      	mov	r0, r3
}
 808141c:	bd38      	pop	{r3, r4, r5, pc}

0808141e <_ZN5spark16JSONStreamWriterD0Ev>:
 808141e:	b510      	push	{r4, lr}
 8081420:	4604      	mov	r4, r0
 8081422:	210c      	movs	r1, #12
 8081424:	f001 fc7b 	bl	8082d1e <_ZdlPvj>
 8081428:	4620      	mov	r0, r4
 808142a:	bd10      	pop	{r4, pc}

0808142c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 808142c:	b510      	push	{r4, lr}
 808142e:	4604      	mov	r4, r0
 8081430:	2104      	movs	r1, #4
 8081432:	f001 fc74 	bl	8082d1e <_ZdlPvj>
 8081436:	4620      	mov	r0, r4
 8081438:	bd10      	pop	{r4, pc}

0808143a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 808143a:	b510      	push	{r4, lr}
 808143c:	4604      	mov	r4, r0
 808143e:	2104      	movs	r1, #4
 8081440:	f001 fc6d 	bl	8082d1e <_ZdlPvj>
 8081444:	4620      	mov	r0, r4
 8081446:	bd10      	pop	{r4, pc}

08081448 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 8081448:	b538      	push	{r3, r4, r5, lr}
 808144a:	460c      	mov	r4, r1
 808144c:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 808144e:	f001 fa53 	bl	80828f8 <_Z16_fetch_usbserialv>
 8081452:	4284      	cmp	r4, r0
 8081454:	d102      	bne.n	808145c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        Serial.end();
 8081456:	f001 fa4f 	bl	80828f8 <_Z16_fetch_usbserialv>
 808145a:	e005      	b.n	8081468 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 808145c:	f001 fa88 	bl	8082970 <_Z17_fetch_usbserial1v>
 8081460:	4284      	cmp	r4, r0
 8081462:	d105      	bne.n	8081470 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 8081464:	f001 fa84 	bl	8082970 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 8081468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.end();
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 808146c:	f001 ba2a 	b.w	80828c4 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 8081470:	f001 f9a8 	bl	80827c4 <_Z22__fetch_global_Serial1v>
 8081474:	4284      	cmp	r4, r0
 8081476:	d105      	bne.n	8081484 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 8081478:	f001 f9a4 	bl	80827c4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 808147c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 8081480:	f001 b999 	b.w	80827b6 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 8081484:	4621      	mov	r1, r4
 8081486:	4628      	mov	r0, r5
 8081488:	f7ff ffae 	bl	80813e8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 808148c:	bd38      	pop	{r3, r4, r5, pc}

0808148e <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 808148e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 8081490:	f001 fe26 	bl	80830e0 <strcmp>
}
 8081494:	fab0 f080 	clz	r0, r0
 8081498:	0940      	lsrs	r0, r0, #5
 808149a:	bd08      	pop	{r3, pc}

0808149c <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 808149c:	b538      	push	{r3, r4, r5, lr}
 808149e:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80814a0:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80814a2:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80814a4:	f001 fe41 	bl	808312a <strlen>
 80814a8:	4621      	mov	r1, r4
 80814aa:	4602      	mov	r2, r0
 80814ac:	4628      	mov	r0, r5
}
 80814ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 80814b2:	f7ff bf16 	b.w	80812e2 <_ZN5spark10JSONWriter5valueEPKcj>
	...

080814b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80814b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80814bc:	4691      	mov	r9, r2
 80814be:	b085      	sub	sp, #20
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80814c0:	4a49      	ldr	r2, [pc, #292]	; (80815e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x130>)
 80814c2:	461d      	mov	r5, r3
 80814c4:	6a03      	ldr	r3, [r0, #32]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80814c6:	f04f 0800 	mov.w	r8, #0
 80814ca:	4607      	mov	r7, r0
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80814cc:	a801      	add	r0, sp, #4
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80814ce:	460e      	mov	r6, r1
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80814d0:	9201      	str	r2, [sp, #4]
 80814d2:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80814d4:	f88d 8008 	strb.w	r8, [sp, #8]
 80814d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80814da:	f7ff fe6e 	bl	80811ba <_ZN5spark10JSONWriter11beginObjectEv>
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80814de:	4641      	mov	r1, r8
 80814e0:	4648      	mov	r0, r9
 80814e2:	f7ff f8b5 	bl	8080650 <log_level_name>
 80814e6:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80814e8:	4940      	ldr	r1, [pc, #256]	; (80815ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>)
 80814ea:	2201      	movs	r2, #1
 80814ec:	a801      	add	r0, sp, #4
 80814ee:	f7ff fee9 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 80814f2:	4641      	mov	r1, r8
 80814f4:	f7ff ffd2 	bl	808149c <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80814f8:	b13e      	cbz	r6, 808150a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x52>
        json.name("m", 1).value(msg);
 80814fa:	493d      	ldr	r1, [pc, #244]	; (80815f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x138>)
 80814fc:	2201      	movs	r2, #1
 80814fe:	a801      	add	r0, sp, #4
 8081500:	f7ff fee0 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 8081504:	4631      	mov	r1, r6
 8081506:	f7ff ffc9 	bl	808149c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 808150a:	b13d      	cbz	r5, 808151c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        json.name("c", 1).value(category);
 808150c:	4939      	ldr	r1, [pc, #228]	; (80815f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>)
 808150e:	2201      	movs	r2, #1
 8081510:	a801      	add	r0, sp, #4
 8081512:	f7ff fed7 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 8081516:	4629      	mov	r1, r5
 8081518:	f7ff ffc0 	bl	808149c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 808151c:	7923      	ldrb	r3, [r4, #4]
 808151e:	07de      	lsls	r6, r3, #31
 8081520:	d50e      	bpl.n	8081540 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x88>
        s = extractFileName(attr.file); // Strip directory path
 8081522:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8081524:	212f      	movs	r1, #47	; 0x2f
 8081526:	4628      	mov	r0, r5
 8081528:	f001 fe1c 	bl	8083164 <strrchr>
    if (s1) {
 808152c:	b100      	cbz	r0, 8081530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x78>
        return s1 + 1;
 808152e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 8081530:	4931      	ldr	r1, [pc, #196]	; (80815f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>)
 8081532:	2201      	movs	r2, #1
 8081534:	a801      	add	r0, sp, #4
 8081536:	f7ff fec5 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 808153a:	4629      	mov	r1, r5
 808153c:	f7ff ffae 	bl	808149c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 8081540:	7923      	ldrb	r3, [r4, #4]
 8081542:	079d      	lsls	r5, r3, #30
 8081544:	d507      	bpl.n	8081556 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
        json.name("ln", 2).value(attr.line);
 8081546:	492d      	ldr	r1, [pc, #180]	; (80815fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 8081548:	2202      	movs	r2, #2
 808154a:	a801      	add	r0, sp, #4
 808154c:	f7ff feba 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 8081550:	68e1      	ldr	r1, [r4, #12]
 8081552:	f7ff fe3f 	bl	80811d4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 8081556:	7923      	ldrb	r3, [r4, #4]
 8081558:	0758      	lsls	r0, r3, #29
 808155a:	d516      	bpl.n	808158a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 808155c:	6925      	ldr	r5, [r4, #16]
 808155e:	462e      	mov	r6, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 8081560:	4633      	mov	r3, r6
 8081562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8081566:	b13a      	cbz	r2, 8081578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        if (*s == ' ') {
 8081568:	2a20      	cmp	r2, #32
 808156a:	d101      	bne.n	8081570 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
            s1 = s + 1; // Skip return type
 808156c:	461d      	mov	r5, r3
 808156e:	e001      	b.n	8081574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xbc>
        } else if (*s == '(') {
 8081570:	2a28      	cmp	r2, #40	; 0x28
 8081572:	d001      	beq.n	8081578 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081574:	461e      	mov	r6, r3
 8081576:	e7f3      	b.n	8081560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 8081578:	2202      	movs	r2, #2
 808157a:	4921      	ldr	r1, [pc, #132]	; (8081600 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 808157c:	a801      	add	r0, sp, #4
 808157e:	f7ff fea1 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 8081582:	1b72      	subs	r2, r6, r5
 8081584:	4629      	mov	r1, r5
 8081586:	f7ff feac 	bl	80812e2 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 808158a:	7923      	ldrb	r3, [r4, #4]
 808158c:	0719      	lsls	r1, r3, #28
 808158e:	d507      	bpl.n	80815a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        json.name("t", 1).value((unsigned)attr.time);
 8081590:	491c      	ldr	r1, [pc, #112]	; (8081604 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 8081592:	2201      	movs	r2, #1
 8081594:	a801      	add	r0, sp, #4
 8081596:	f7ff fe95 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 808159a:	6961      	ldr	r1, [r4, #20]
 808159c:	f7ff fe2c 	bl	80811f8 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80815a0:	7923      	ldrb	r3, [r4, #4]
 80815a2:	06da      	lsls	r2, r3, #27
 80815a4:	d508      	bpl.n	80815b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("code", 4).value((int)attr.code);
 80815a6:	2204      	movs	r2, #4
 80815a8:	4917      	ldr	r1, [pc, #92]	; (8081608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80815aa:	eb0d 0002 	add.w	r0, sp, r2
 80815ae:	f7ff fe89 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 80815b2:	69a1      	ldr	r1, [r4, #24]
 80815b4:	f7ff fe0e 	bl	80811d4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80815b8:	7923      	ldrb	r3, [r4, #4]
 80815ba:	069b      	lsls	r3, r3, #26
 80815bc:	d507      	bpl.n	80815ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x116>
        json.name("detail", 6).value(attr.details);
 80815be:	4913      	ldr	r1, [pc, #76]	; (808160c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80815c0:	2206      	movs	r2, #6
 80815c2:	a801      	add	r0, sp, #4
 80815c4:	f7ff fe7e 	bl	80812c4 <_ZN5spark10JSONWriter4nameEPKcj>
 80815c8:	69e1      	ldr	r1, [r4, #28]
 80815ca:	f7ff ff67 	bl	808149c <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80815ce:	a801      	add	r0, sp, #4
 80815d0:	f7ff fddd 	bl	808118e <_ZN5spark10JSONWriter9endObjectEv>
 80815d4:	6a38      	ldr	r0, [r7, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80815d6:	2202      	movs	r2, #2
 80815d8:	6803      	ldr	r3, [r0, #0]
 80815da:	490d      	ldr	r1, [pc, #52]	; (8081610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80815dc:	68db      	ldr	r3, [r3, #12]
 80815de:	4798      	blx	r3
}
 80815e0:	b005      	add	sp, #20
 80815e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80815e6:	bf00      	nop
 80815e8:	080833b8 	.word	0x080833b8
 80815ec:	08083444 	.word	0x08083444
 80815f0:	0808345a 	.word	0x0808345a
 80815f4:	080834d3 	.word	0x080834d3
 80815f8:	080833f8 	.word	0x080833f8
 80815fc:	080833fa 	.word	0x080833fa
 8081600:	080833fd 	.word	0x080833fd
 8081604:	0808346f 	.word	0x0808346f
 8081608:	08083400 	.word	0x08083400
 808160c:	08083405 	.word	0x08083405
 8081610:	0808340c 	.word	0x0808340c

08081614 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8081614:	6800      	ldr	r0, [r0, #0]
 8081616:	f7fe bef3 	b.w	8080400 <os_mutex_recursive_lock>

0808161a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 808161a:	b570      	push	{r4, r5, r6, lr}
 808161c:	4604      	mov	r4, r0
    write(str, strlen(str));
 808161e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 8081620:	460d      	mov	r5, r1
    write(str, strlen(str));
 8081622:	f001 fd82 	bl	808312a <strlen>
 8081626:	6823      	ldr	r3, [r4, #0]
 8081628:	4602      	mov	r2, r0
 808162a:	4629      	mov	r1, r5
 808162c:	4620      	mov	r0, r4
}
 808162e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 8081632:	68db      	ldr	r3, [r3, #12]
 8081634:	4718      	bx	r3

08081636 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 8081636:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 8081638:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 808163a:	ab02      	add	r3, sp, #8
 808163c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 8081640:	68d4      	ldr	r4, [r2, #12]
 8081642:	4619      	mov	r1, r3
 8081644:	2201      	movs	r2, #1
 8081646:	47a0      	blx	r4
}
 8081648:	b002      	add	sp, #8
 808164a:	bd10      	pop	{r4, pc}

0808164c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081650:	9d06      	ldr	r5, [sp, #24]
 8081652:	4698      	mov	r8, r3
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 8081654:	792b      	ldrb	r3, [r5, #4]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 8081656:	460e      	mov	r6, r1
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 8081658:	0719      	lsls	r1, r3, #28
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 808165a:	4604      	mov	r4, r0
 808165c:	4617      	mov	r7, r2
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 808165e:	d505      	bpl.n	808166c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x20>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8081660:	696b      	ldr	r3, [r5, #20]
 8081662:	4a54      	ldr	r2, [pc, #336]	; (80817b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 8081664:	2100      	movs	r1, #0
 8081666:	6a00      	ldr	r0, [r0, #32]
 8081668:	f000 ff2d 	bl	80824c6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 808166c:	f1b8 0f00 	cmp.w	r8, #0
 8081670:	d00d      	beq.n	808168e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x42>
        write('[');
 8081672:	215b      	movs	r1, #91	; 0x5b
 8081674:	4620      	mov	r0, r4
 8081676:	f7ff ffde 	bl	8081636 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 808167a:	4641      	mov	r1, r8
 808167c:	4620      	mov	r0, r4
 808167e:	f7ff ffcc 	bl	808161a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 8081682:	6823      	ldr	r3, [r4, #0]
 8081684:	2202      	movs	r2, #2
 8081686:	68db      	ldr	r3, [r3, #12]
 8081688:	494b      	ldr	r1, [pc, #300]	; (80817b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 808168a:	4620      	mov	r0, r4
 808168c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 808168e:	792b      	ldrb	r3, [r5, #4]
 8081690:	07da      	lsls	r2, r3, #31
 8081692:	d525      	bpl.n	80816e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
        s = extractFileName(attr.file); // Strip directory path
 8081694:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 8081698:	212f      	movs	r1, #47	; 0x2f
 808169a:	4640      	mov	r0, r8
 808169c:	f001 fd62 	bl	8083164 <strrchr>
    if (s1) {
 80816a0:	b108      	cbz	r0, 80816a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        return s1 + 1;
 80816a2:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 80816a6:	4641      	mov	r1, r8
 80816a8:	4620      	mov	r0, r4
 80816aa:	f7ff ffb6 	bl	808161a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80816ae:	792b      	ldrb	r3, [r5, #4]
 80816b0:	079b      	lsls	r3, r3, #30
 80816b2:	d509      	bpl.n	80816c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
            write(':');
 80816b4:	213a      	movs	r1, #58	; 0x3a
 80816b6:	4620      	mov	r0, r4
 80816b8:	f7ff ffbd 	bl	8081636 <_ZN5spark16StreamLogHandler5writeEc>
 80816bc:	68eb      	ldr	r3, [r5, #12]
 80816be:	4a3f      	ldr	r2, [pc, #252]	; (80817bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80816c0:	2100      	movs	r1, #0
 80816c2:	6a20      	ldr	r0, [r4, #32]
 80816c4:	f000 feff 	bl	80824c6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80816c8:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 80816ca:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80816cc:	f013 0f04 	tst.w	r3, #4
 80816d0:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 80816d2:	bf18      	it	ne
 80816d4:	493a      	ldrne	r1, [pc, #232]	; (80817c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80816d6:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 80816d8:	bf08      	it	eq
 80816da:	493a      	ldreq	r1, [pc, #232]	; (80817c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80816dc:	4620      	mov	r0, r4
 80816de:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 80816e0:	792b      	ldrb	r3, [r5, #4]
 80816e2:	0758      	lsls	r0, r3, #29
 80816e4:	d518      	bpl.n	8081718 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xcc>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80816e6:	6929      	ldr	r1, [r5, #16]
 80816e8:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80816ea:	4613      	mov	r3, r2
 80816ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80816f0:	b138      	cbz	r0, 8081702 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        if (*s == ' ') {
 80816f2:	2820      	cmp	r0, #32
 80816f4:	d101      	bne.n	80816fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xae>
            s1 = s + 1; // Skip return type
 80816f6:	4619      	mov	r1, r3
 80816f8:	e001      	b.n	80816fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb2>
        } else if (*s == '(') {
 80816fa:	2828      	cmp	r0, #40	; 0x28
 80816fc:	d001      	beq.n	8081702 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80816fe:	461a      	mov	r2, r3
 8081700:	e7f3      	b.n	80816ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 8081702:	6823      	ldr	r3, [r4, #0]
 8081704:	1a52      	subs	r2, r2, r1
 8081706:	68db      	ldr	r3, [r3, #12]
 8081708:	4620      	mov	r0, r4
 808170a:	4798      	blx	r3
        write("(): ", 4);
 808170c:	6823      	ldr	r3, [r4, #0]
 808170e:	2204      	movs	r2, #4
 8081710:	68db      	ldr	r3, [r3, #12]
 8081712:	492d      	ldr	r1, [pc, #180]	; (80817c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 8081714:	4620      	mov	r0, r4
 8081716:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 8081718:	2100      	movs	r1, #0
 808171a:	4638      	mov	r0, r7
 808171c:	f7fe ff98 	bl	8080650 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 8081720:	4601      	mov	r1, r0
 8081722:	4620      	mov	r0, r4
 8081724:	f7ff ff79 	bl	808161a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 8081728:	6823      	ldr	r3, [r4, #0]
 808172a:	2202      	movs	r2, #2
 808172c:	68db      	ldr	r3, [r3, #12]
 808172e:	4925      	ldr	r1, [pc, #148]	; (80817c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 8081730:	4620      	mov	r0, r4
 8081732:	4798      	blx	r3
    // Message
    if (msg) {
 8081734:	b11e      	cbz	r6, 808173e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xf2>
        write(msg);
 8081736:	4631      	mov	r1, r6
 8081738:	4620      	mov	r0, r4
 808173a:	f7ff ff6e 	bl	808161a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 808173e:	792b      	ldrb	r3, [r5, #4]
 8081740:	f013 0f30 	tst.w	r3, #48	; 0x30
 8081744:	d02d      	beq.n	80817a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x156>
        write(" [", 2);
 8081746:	6823      	ldr	r3, [r4, #0]
 8081748:	4920      	ldr	r1, [pc, #128]	; (80817cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 808174a:	68db      	ldr	r3, [r3, #12]
 808174c:	2202      	movs	r2, #2
 808174e:	4620      	mov	r0, r4
 8081750:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 8081752:	792b      	ldrb	r3, [r5, #4]
 8081754:	06d9      	lsls	r1, r3, #27
 8081756:	d50b      	bpl.n	8081770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x124>
            write("code = ", 7);
 8081758:	6823      	ldr	r3, [r4, #0]
 808175a:	2207      	movs	r2, #7
 808175c:	68db      	ldr	r3, [r3, #12]
 808175e:	491c      	ldr	r1, [pc, #112]	; (80817d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 8081760:	4620      	mov	r0, r4
 8081762:	4798      	blx	r3
 8081764:	69ab      	ldr	r3, [r5, #24]
 8081766:	4a1b      	ldr	r2, [pc, #108]	; (80817d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 8081768:	2100      	movs	r1, #0
 808176a:	6a20      	ldr	r0, [r4, #32]
 808176c:	f000 feab 	bl	80824c6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 8081770:	792b      	ldrb	r3, [r5, #4]
 8081772:	069a      	lsls	r2, r3, #26
 8081774:	d511      	bpl.n	808179a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14e>
            if (attr.has_code) {
 8081776:	06db      	lsls	r3, r3, #27
 8081778:	d505      	bpl.n	8081786 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13a>
                write(", ", 2);
 808177a:	6823      	ldr	r3, [r4, #0]
 808177c:	2202      	movs	r2, #2
 808177e:	68db      	ldr	r3, [r3, #12]
 8081780:	490f      	ldr	r1, [pc, #60]	; (80817c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 8081782:	4620      	mov	r0, r4
 8081784:	4798      	blx	r3
            }
            write("details = ", 10);
 8081786:	6823      	ldr	r3, [r4, #0]
 8081788:	4913      	ldr	r1, [pc, #76]	; (80817d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 808178a:	4620      	mov	r0, r4
 808178c:	68db      	ldr	r3, [r3, #12]
 808178e:	220a      	movs	r2, #10
 8081790:	4798      	blx	r3
            write(attr.details);
 8081792:	69e9      	ldr	r1, [r5, #28]
 8081794:	4620      	mov	r0, r4
 8081796:	f7ff ff40 	bl	808161a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 808179a:	215d      	movs	r1, #93	; 0x5d
 808179c:	4620      	mov	r0, r4
 808179e:	f7ff ff4a 	bl	8081636 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 80817a2:	6823      	ldr	r3, [r4, #0]
 80817a4:	4620      	mov	r0, r4
}
 80817a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 80817aa:	68db      	ldr	r3, [r3, #12]
 80817ac:	2202      	movs	r2, #2
 80817ae:	490b      	ldr	r1, [pc, #44]	; (80817dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80817b0:	4718      	bx	r3
 80817b2:	bf00      	nop
 80817b4:	0808340f 	.word	0x0808340f
 80817b8:	08083416 	.word	0x08083416
 80817bc:	0808339b 	.word	0x0808339b
 80817c0:	08083419 	.word	0x08083419
 80817c4:	0808341e 	.word	0x0808341e
 80817c8:	0808341c 	.word	0x0808341c
 80817cc:	08083421 	.word	0x08083421
 80817d0:	08083424 	.word	0x08083424
 80817d4:	0808342c 	.word	0x0808342c
 80817d8:	0808342f 	.word	0x0808342f
 80817dc:	0808340c 	.word	0x0808340c

080817e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80817e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80817e4:	6807      	ldr	r7, [r0, #0]
 80817e6:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80817e8:	463c      	mov	r4, r7
 80817ea:	6845      	ldr	r5, [r0, #4]
 80817ec:	4691      	mov	r9, r2
 80817ee:	2214      	movs	r2, #20
 80817f0:	4355      	muls	r5, r2
 80817f2:	b085      	sub	sp, #20
 80817f4:	9301      	str	r3, [sp, #4]
 80817f6:	10ab      	asrs	r3, r5, #2
 80817f8:	4d18      	ldr	r5, [pc, #96]	; (808185c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80817fa:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80817fc:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80817fe:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8081800:	2d00      	cmp	r5, #0
 8081802:	9303      	str	r3, [sp, #12]
 8081804:	dd23      	ble.n	808184e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 8081806:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 8081808:	106e      	asrs	r6, r5, #1
 808180a:	fb03 f006 	mul.w	r0, r3, r6
 808180e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 8081812:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 8081816:	464a      	mov	r2, r9
 8081818:	45d1      	cmp	r9, sl
 808181a:	bf28      	it	cs
 808181c:	4652      	movcs	r2, sl
 808181e:	4659      	mov	r1, fp
 8081820:	5820      	ldr	r0, [r4, r0]
 8081822:	f001 fc8a 	bl	808313a <strncmp>
                if (cmp == 0) {
 8081826:	9b03      	ldr	r3, [sp, #12]
 8081828:	b948      	cbnz	r0, 808183e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 808182a:	45d1      	cmp	r9, sl
 808182c:	d103      	bne.n	8081836 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 808182e:	9a01      	ldr	r2, [sp, #4]
 8081830:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 8081832:	4635      	mov	r5, r6
 8081834:	e7e4      	b.n	8081800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 8081836:	bf8c      	ite	hi
 8081838:	2001      	movhi	r0, #1
 808183a:	2000      	movls	r0, #0
 808183c:	e000      	b.n	8081840 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 808183e:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 8081840:	2800      	cmp	r0, #0
 8081842:	d0f6      	beq.n	8081832 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8081844:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 8081846:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 808184a:	3e01      	subs	r6, #1
 808184c:	e7f1      	b.n	8081832 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 808184e:	1be4      	subs	r4, r4, r7
}
 8081850:	4802      	ldr	r0, [pc, #8]	; (808185c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 8081852:	10a4      	asrs	r4, r4, #2
}
 8081854:	4360      	muls	r0, r4
 8081856:	b005      	add	sp, #20
 8081858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808185c:	cccccccd 	.word	0xcccccccd

08081860 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 8081860:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 8081862:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 8081864:	b085      	sub	sp, #20
 8081866:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 8081868:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 808186a:	b313      	cbz	r3, 80818b2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 808186c:	b309      	cbz	r1, 80818b2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 808186e:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 8081870:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8081872:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 8081874:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8081878:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 808187c:	4639      	mov	r1, r7
 808187e:	a801      	add	r0, sp, #4
 8081880:	f7ff fdbb 	bl	80813fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 8081884:	4601      	mov	r1, r0
 8081886:	b1a0      	cbz	r0, 80818b2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 8081888:	ab04      	add	r3, sp, #16
 808188a:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 808188e:	9a03      	ldr	r2, [sp, #12]
 8081890:	4620      	mov	r0, r4
 8081892:	f7ff ffa5 	bl	80817e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 8081896:	f89d 300b 	ldrb.w	r3, [sp, #11]
 808189a:	b153      	cbz	r3, 80818b2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 808189c:	6823      	ldr	r3, [r4, #0]
 808189e:	2414      	movs	r4, #20
 80818a0:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80818a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 80818a8:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80818aa:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80818ac:	bfa8      	it	ge
 80818ae:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80818b0:	e7e4      	b.n	808187c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 80818b2:	4630      	mov	r0, r6
 80818b4:	b005      	add	sp, #20
 80818b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080818b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80818b8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80818ba:	4c09      	ldr	r4, [pc, #36]	; (80818e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80818bc:	6823      	ldr	r3, [r4, #0]
 80818be:	07db      	lsls	r3, r3, #31
 80818c0:	d40b      	bmi.n	80818da <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80818c2:	4620      	mov	r0, r4
 80818c4:	f7fe fbf8 	bl	80800b8 <__cxa_guard_acquire>
 80818c8:	b138      	cbz	r0, 80818da <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80818ca:	4620      	mov	r0, r4
 80818cc:	f7fe fbf9 	bl	80800c2 <__cxa_guard_release>
 80818d0:	4a04      	ldr	r2, [pc, #16]	; (80818e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80818d2:	4905      	ldr	r1, [pc, #20]	; (80818e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80818d4:	4805      	ldr	r0, [pc, #20]	; (80818ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80818d6:	f001 fa1d 	bl	8082d14 <__aeabi_atexit>
    return &factory;
}
 80818da:	4804      	ldr	r0, [pc, #16]	; (80818ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80818dc:	bd10      	pop	{r4, pc}
 80818de:	bf00      	nop
 80818e0:	2000050c 	.word	0x2000050c
 80818e4:	20000474 	.word	0x20000474
 80818e8:	080813f7 	.word	0x080813f7
 80818ec:	20000400 	.word	0x20000400

080818f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80818f0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80818f2:	4c09      	ldr	r4, [pc, #36]	; (8081918 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80818f4:	6823      	ldr	r3, [r4, #0]
 80818f6:	07db      	lsls	r3, r3, #31
 80818f8:	d40b      	bmi.n	8081912 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80818fa:	4620      	mov	r0, r4
 80818fc:	f7fe fbdc 	bl	80800b8 <__cxa_guard_acquire>
 8081900:	b138      	cbz	r0, 8081912 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 8081902:	4620      	mov	r0, r4
 8081904:	f7fe fbdd 	bl	80800c2 <__cxa_guard_release>
 8081908:	4a04      	ldr	r2, [pc, #16]	; (808191c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 808190a:	4905      	ldr	r1, [pc, #20]	; (8081920 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 808190c:	4805      	ldr	r0, [pc, #20]	; (8081924 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 808190e:	f001 fa01 	bl	8082d14 <__aeabi_atexit>
    return &factory;
}
 8081912:	4804      	ldr	r0, [pc, #16]	; (8081924 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 8081914:	bd10      	pop	{r4, pc}
 8081916:	bf00      	nop
 8081918:	2000053c 	.word	0x2000053c
 808191c:	20000474 	.word	0x20000474
 8081920:	080813f5 	.word	0x080813f5
 8081924:	20000404 	.word	0x20000404

08081928 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 8081928:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808192a:	2500      	movs	r5, #0
 808192c:	4604      	mov	r4, r0
 808192e:	6005      	str	r5, [r0, #0]
 8081930:	6045      	str	r5, [r0, #4]
 8081932:	6085      	str	r5, [r0, #8]
 8081934:	6105      	str	r5, [r0, #16]
 8081936:	6145      	str	r5, [r0, #20]
 8081938:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808193a:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 808193e:	f7fe fd57 	bl	80803f0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 8081942:	f7ff ffb9 	bl	80818b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 8081946:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 8081948:	f7ff ffd2 	bl	80818f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 808194c:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 808194e:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 8081950:	4620      	mov	r0, r4
 8081952:	bd38      	pop	{r3, r4, r5, pc}

08081954 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 8081954:	b510      	push	{r4, lr}
    static LogManager mgr;
 8081956:	4c0a      	ldr	r4, [pc, #40]	; (8081980 <_ZN5spark10LogManager8instanceEv+0x2c>)
 8081958:	6823      	ldr	r3, [r4, #0]
 808195a:	07db      	lsls	r3, r3, #31
 808195c:	d40e      	bmi.n	808197c <_ZN5spark10LogManager8instanceEv+0x28>
 808195e:	4620      	mov	r0, r4
 8081960:	f7fe fbaa 	bl	80800b8 <__cxa_guard_acquire>
 8081964:	b150      	cbz	r0, 808197c <_ZN5spark10LogManager8instanceEv+0x28>
 8081966:	4807      	ldr	r0, [pc, #28]	; (8081984 <_ZN5spark10LogManager8instanceEv+0x30>)
 8081968:	f7ff ffde 	bl	8081928 <_ZN5spark10LogManagerC1Ev>
 808196c:	4620      	mov	r0, r4
 808196e:	f7fe fba8 	bl	80800c2 <__cxa_guard_release>
 8081972:	4a05      	ldr	r2, [pc, #20]	; (8081988 <_ZN5spark10LogManager8instanceEv+0x34>)
 8081974:	4905      	ldr	r1, [pc, #20]	; (808198c <_ZN5spark10LogManager8instanceEv+0x38>)
 8081976:	4803      	ldr	r0, [pc, #12]	; (8081984 <_ZN5spark10LogManager8instanceEv+0x30>)
 8081978:	f001 f9cc 	bl	8082d14 <__aeabi_atexit>
    return &mgr;
}
 808197c:	4801      	ldr	r0, [pc, #4]	; (8081984 <_ZN5spark10LogManager8instanceEv+0x30>)
 808197e:	bd10      	pop	{r4, pc}
 8081980:	20000510 	.word	0x20000510
 8081984:	20000514 	.word	0x20000514
 8081988:	20000474 	.word	0x20000474
 808198c:	08081ddd 	.word	0x08081ddd

08081990 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 8081990:	2300      	movs	r3, #0
 8081992:	4a02      	ldr	r2, [pc, #8]	; (808199c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 8081994:	4902      	ldr	r1, [pc, #8]	; (80819a0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 8081996:	4803      	ldr	r0, [pc, #12]	; (80819a4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 8081998:	f7fe be62 	b.w	8080660 <log_set_callbacks>
 808199c:	08081cc1 	.word	0x08081cc1
 80819a0:	08081c51 	.word	0x08081c51
 80819a4:	08081bd9 	.word	0x08081bd9

080819a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80819a8:	2300      	movs	r3, #0
 80819aa:	461a      	mov	r2, r3
 80819ac:	4619      	mov	r1, r3
 80819ae:	4618      	mov	r0, r3
 80819b0:	f7fe be56 	b.w	8080660 <log_set_callbacks>

080819b4 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80819b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80819b6:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80819b8:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80819ba:	f851 3b04 	ldr.w	r3, [r1], #4
 80819be:	ac02      	add	r4, sp, #8
 80819c0:	f844 3d08 	str.w	r3, [r4, #-8]!
 80819c4:	a801      	add	r0, sp, #4
 80819c6:	f7ff f826 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80819ca:	4622      	mov	r2, r4
 80819cc:	4631      	mov	r1, r6
 80819ce:	4628      	mov	r0, r5
 80819d0:	f7ff fcac 	bl	808132c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80819d4:	a801      	add	r0, sp, #4
 80819d6:	f7fe fff7 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80819da:	4628      	mov	r0, r5
 80819dc:	b002      	add	sp, #8
 80819de:	bd70      	pop	{r4, r5, r6, pc}

080819e0 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80819e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80819e2:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 80819e4:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80819e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80819ea:	ac02      	add	r4, sp, #8
 80819ec:	f844 3d08 	str.w	r3, [r4, #-8]!
 80819f0:	a801      	add	r0, sp, #4
 80819f2:	f7ff f810 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80819f6:	4622      	mov	r2, r4
 80819f8:	4631      	mov	r1, r6
 80819fa:	4628      	mov	r0, r5
 80819fc:	f7ff fcd9 	bl	80813b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081a00:	a801      	add	r0, sp, #4
 8081a02:	f7fe ffe1 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081a06:	4628      	mov	r0, r5
 8081a08:	b002      	add	sp, #8
 8081a0a:	bd70      	pop	{r4, r5, r6, pc}

08081a0c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 8081a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081a0e:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 8081a10:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081a12:	f851 3b04 	ldr.w	r3, [r1], #4
 8081a16:	ac02      	add	r4, sp, #8
 8081a18:	f844 3d08 	str.w	r3, [r4, #-8]!
 8081a1c:	a801      	add	r0, sp, #4
 8081a1e:	f7fe fffa 	bl	8080a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8081a22:	4622      	mov	r2, r4
 8081a24:	4631      	mov	r1, r6
 8081a26:	4628      	mov	r0, r5
 8081a28:	f7ff fca8 	bl	808137c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081a2c:	a801      	add	r0, sp, #4
 8081a2e:	f7fe ffcb 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8081a32:	4628      	mov	r0, r5
 8081a34:	b002      	add	sp, #8
 8081a36:	bd70      	pop	{r4, r5, r6, pc}

08081a38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 8081a38:	b530      	push	{r4, r5, lr}
 8081a3a:	b08b      	sub	sp, #44	; 0x2c
 8081a3c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 8081a3e:	4601      	mov	r1, r0
 8081a40:	a804      	add	r0, sp, #16
 8081a42:	f7ff ffe3 	bl	8081a0c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 8081a46:	a804      	add	r0, sp, #16
 8081a48:	f7ff fb8d 	bl	8081166 <_ZN5spark18JSONObjectIterator4nextEv>
 8081a4c:	b1e8      	cbz	r0, 8081a8a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 8081a4e:	a904      	add	r1, sp, #16
 8081a50:	4668      	mov	r0, sp
 8081a52:	f7ff ffaf 	bl	80819b4 <_ZNK5spark18JSONObjectIterator4nameEv>
 8081a56:	490f      	ldr	r1, [pc, #60]	; (8081a94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 8081a58:	9802      	ldr	r0, [sp, #8]
 8081a5a:	f7ff fd18 	bl	808148e <_ZNK5spark10JSONStringeqEPKc.isra.7>
 8081a5e:	4604      	mov	r4, r0
 8081a60:	b110      	cbz	r0, 8081a68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 8081a62:	1c2c      	adds	r4, r5, #0
 8081a64:	bf18      	it	ne
 8081a66:	2401      	movne	r4, #1
 8081a68:	a801      	add	r0, sp, #4
 8081a6a:	f7fe ffad 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081a6e:	2c00      	cmp	r4, #0
 8081a70:	d0e9      	beq.n	8081a46 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 8081a72:	a904      	add	r1, sp, #16
 8081a74:	4668      	mov	r0, sp
 8081a76:	f7ff ffb3 	bl	80819e0 <_ZNK5spark18JSONObjectIterator5valueEv>
 8081a7a:	4668      	mov	r0, sp
 8081a7c:	f7ff fb53 	bl	8081126 <_ZNK5spark9JSONValue5toIntEv>
 8081a80:	6028      	str	r0, [r5, #0]
 8081a82:	a801      	add	r0, sp, #4
 8081a84:	f7fe ffa0 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081a88:	e7dd      	b.n	8081a46 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 8081a8a:	a805      	add	r0, sp, #20
 8081a8c:	f7fe ff9c 	bl	80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 8081a90:	b00b      	add	sp, #44	; 0x2c
 8081a92:	bd30      	pop	{r4, r5, pc}
 8081a94:	0808343a 	.word	0x0808343a

08081a98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8081a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081a9a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 8081a9c:	491a      	ldr	r1, [pc, #104]	; (8081b08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 8081a9e:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 8081aa0:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 8081aa2:	f001 fb1d 	bl	80830e0 <strcmp>
 8081aa6:	b940      	cbnz	r0, 8081aba <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 8081aa8:	f000 ff26 	bl	80828f8 <_Z16_fetch_usbserialv>
 8081aac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081ab0:	f000 ff04 	bl	80828bc <_ZN9USBSerial5beginEl>
        return &Serial;
 8081ab4:	f000 ff20 	bl	80828f8 <_Z16_fetch_usbserialv>
 8081ab8:	e023      	b.n	8081b02 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 8081aba:	4914      	ldr	r1, [pc, #80]	; (8081b0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 8081abc:	4620      	mov	r0, r4
 8081abe:	f001 fb0f 	bl	80830e0 <strcmp>
 8081ac2:	b940      	cbnz	r0, 8081ad6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 8081ac4:	f000 ff54 	bl	8082970 <_Z17_fetch_usbserial1v>
 8081ac8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081acc:	f000 fef6 	bl	80828bc <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 8081ad0:	f000 ff4e 	bl	8082970 <_Z17_fetch_usbserial1v>
 8081ad4:	e015      	b.n	8081b02 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 8081ad6:	490e      	ldr	r1, [pc, #56]	; (8081b10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 8081ad8:	4620      	mov	r0, r4
 8081ada:	f001 fb01 	bl	80830e0 <strcmp>
 8081ade:	b978      	cbnz	r0, 8081b00 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 8081ae0:	a902      	add	r1, sp, #8
 8081ae2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8081ae6:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 8081aea:	4628      	mov	r0, r5
 8081aec:	f7ff ffa4 	bl	8081a38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 8081af0:	f000 fe68 	bl	80827c4 <_Z22__fetch_global_Serial1v>
 8081af4:	9901      	ldr	r1, [sp, #4]
 8081af6:	f000 fe5b 	bl	80827b0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 8081afa:	f000 fe63 	bl	80827c4 <_Z22__fetch_global_Serial1v>
 8081afe:	e000      	b.n	8081b02 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 8081b00:	2000      	movs	r0, #0
}
 8081b02:	b003      	add	sp, #12
 8081b04:	bd30      	pop	{r4, r5, pc}
 8081b06:	bf00      	nop
 8081b08:	0808343f 	.word	0x0808343f
 8081b0c:	08083446 	.word	0x08083446
 8081b10:	08083449 	.word	0x08083449

08081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081b14:	b570      	push	{r4, r5, r6, lr}
 8081b16:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8081b18:	6804      	ldr	r4, [r0, #0]
 8081b1a:	6843      	ldr	r3, [r0, #4]
 8081b1c:	2614      	movs	r6, #20
 8081b1e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081b22:	42a6      	cmp	r6, r4
 8081b24:	d005      	beq.n	8081b32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 8081b26:	f104 0008 	add.w	r0, r4, #8
 8081b2a:	f7ff fff3 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8081b2e:	3414      	adds	r4, #20
 8081b30:	e7f7      	b.n	8081b22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8081b32:	6828      	ldr	r0, [r5, #0]
 8081b34:	f7fe fe58 	bl	80807e8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8081b38:	4628      	mov	r0, r5
 8081b3a:	bd70      	pop	{r4, r5, r6, pc}

08081b3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 8081b3c:	b570      	push	{r4, r5, r6, lr}
 8081b3e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 8081b40:	6804      	ldr	r4, [r0, #0]
 8081b42:	6843      	ldr	r3, [r0, #4]
 8081b44:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081b48:	42a6      	cmp	r6, r4
 8081b4a:	d004      	beq.n	8081b56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 8081b4c:	4620      	mov	r0, r4
 8081b4e:	f000 fd38 	bl	80825c2 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081b52:	3410      	adds	r4, #16
 8081b54:	e7f8      	b.n	8081b48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8081b56:	6828      	ldr	r0, [r5, #0]
 8081b58:	f7fe fe46 	bl	80807e8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 8081b5c:	4628      	mov	r0, r5
 8081b5e:	bd70      	pop	{r4, r5, r6, pc}

08081b60 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 8081b60:	b510      	push	{r4, lr}
 8081b62:	4604      	mov	r4, r0
 8081b64:	300c      	adds	r0, #12
 8081b66:	f7ff ffd5 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8081b6a:	4620      	mov	r0, r4
 8081b6c:	f7ff ffe6 	bl	8081b3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 8081b70:	4620      	mov	r0, r4
 8081b72:	bd10      	pop	{r4, pc}

08081b74 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 8081b74:	b510      	push	{r4, lr}
 8081b76:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 8081b78:	4b03      	ldr	r3, [pc, #12]	; (8081b88 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 8081b7a:	f840 3b04 	str.w	r3, [r0], #4
 8081b7e:	f7ff ffef 	bl	8081b60 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 8081b82:	4620      	mov	r0, r4
 8081b84:	bd10      	pop	{r4, pc}
 8081b86:	bf00      	nop
 8081b88:	080832c8 	.word	0x080832c8

08081b8c <_ZN5spark16StreamLogHandlerD0Ev>:
 8081b8c:	b510      	push	{r4, lr}
 8081b8e:	4604      	mov	r4, r0
 8081b90:	f7ff fff0 	bl	8081b74 <_ZN5spark16StreamLogHandlerD1Ev>
 8081b94:	4620      	mov	r0, r4
 8081b96:	2124      	movs	r1, #36	; 0x24
 8081b98:	f001 f8c1 	bl	8082d1e <_ZdlPvj>
 8081b9c:	4620      	mov	r0, r4
 8081b9e:	bd10      	pop	{r4, pc}

08081ba0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 8081ba0:	b510      	push	{r4, lr}
 8081ba2:	4604      	mov	r4, r0
 8081ba4:	4b02      	ldr	r3, [pc, #8]	; (8081bb0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 8081ba6:	6003      	str	r3, [r0, #0]
 8081ba8:	f7ff ffe4 	bl	8081b74 <_ZN5spark16StreamLogHandlerD1Ev>
 8081bac:	4620      	mov	r0, r4
 8081bae:	bd10      	pop	{r4, pc}
 8081bb0:	080833d0 	.word	0x080833d0

08081bb4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 8081bb4:	b510      	push	{r4, lr}
 8081bb6:	4604      	mov	r4, r0
 8081bb8:	f7ff fff2 	bl	8081ba0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 8081bbc:	4620      	mov	r0, r4
 8081bbe:	2124      	movs	r1, #36	; 0x24
 8081bc0:	f001 f8ad 	bl	8082d1e <_ZdlPvj>
 8081bc4:	4620      	mov	r0, r4
 8081bc6:	bd10      	pop	{r4, pc}

08081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8081bc8:	b510      	push	{r4, lr}
 8081bca:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8081bcc:	6803      	ldr	r3, [r0, #0]
 8081bce:	6818      	ldr	r0, [r3, #0]
 8081bd0:	f7fe fc1e 	bl	8080410 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 8081bd4:	4620      	mov	r0, r4
 8081bd6:	bd10      	pop	{r4, pc}

08081bd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8081bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081bdc:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8081bde:	4b1b      	ldr	r3, [pc, #108]	; (8081c4c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 8081be0:	b085      	sub	sp, #20
 8081be2:	685b      	ldr	r3, [r3, #4]
 8081be4:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081be6:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 8081bea:	460e      	mov	r6, r1
 8081bec:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081bee:	bb53      	cbnz	r3, 8081c46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 8081bf0:	f7ff feb0 	bl	8081954 <_ZN5spark10LogManager8instanceEv>
 8081bf4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081bf6:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081bf8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 8081bfa:	f7ff fd0b 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 8081bfe:	7b23      	ldrb	r3, [r4, #12]
 8081c00:	b9f3      	cbnz	r3, 8081c40 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081c02:	2301      	movs	r3, #1
 8081c04:	7323      	strb	r3, [r4, #12]
 8081c06:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8081c08:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 8081c0a:	b2f6      	uxtb	r6, r6
 8081c0c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 8081c10:	454d      	cmp	r5, r9
 8081c12:	d013      	beq.n	8081c3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 8081c14:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 8081c18:	4641      	mov	r1, r8
 8081c1a:	1d38      	adds	r0, r7, #4
 8081c1c:	f7ff fe20 	bl	8081860 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8081c20:	4286      	cmp	r6, r0
 8081c22:	d3f5      	bcc.n	8081c10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 8081c24:	683b      	ldr	r3, [r7, #0]
 8081c26:	f8cd b000 	str.w	fp, [sp]
 8081c2a:	689b      	ldr	r3, [r3, #8]
 8081c2c:	4638      	mov	r0, r7
 8081c2e:	469e      	mov	lr, r3
 8081c30:	4632      	mov	r2, r6
 8081c32:	4643      	mov	r3, r8
 8081c34:	4651      	mov	r1, sl
 8081c36:	4677      	mov	r7, lr
 8081c38:	47b8      	blx	r7
 8081c3a:	e7e9      	b.n	8081c10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081c3c:	2300      	movs	r3, #0
 8081c3e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 8081c40:	a803      	add	r0, sp, #12
 8081c42:	f7ff ffc1 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 8081c46:	b005      	add	sp, #20
 8081c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081c4c:	e000ed00 	.word	0xe000ed00

08081c50 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8081c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081c54:	4699      	mov	r9, r3
 8081c56:	4b19      	ldr	r3, [pc, #100]	; (8081cbc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 8081c58:	4607      	mov	r7, r0
 8081c5a:	685b      	ldr	r3, [r3, #4]
 8081c5c:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 8081c62:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081c64:	bb33      	cbnz	r3, 8081cb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 8081c66:	f7ff fe75 	bl	8081954 <_ZN5spark10LogManager8instanceEv>
 8081c6a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 8081c6c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081c6e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081c70:	f7ff fcd0 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 8081c74:	7b23      	ldrb	r3, [r4, #12]
 8081c76:	b9d3      	cbnz	r3, 8081cae <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081c78:	2301      	movs	r3, #1
 8081c7a:	7323      	strb	r3, [r4, #12]
 8081c7c:	6825      	ldr	r5, [r4, #0]
 8081c7e:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 8081c80:	fa5f fb86 	uxtb.w	fp, r6
 8081c84:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 8081c88:	4555      	cmp	r5, sl
 8081c8a:	d00e      	beq.n	8081caa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 8081c8c:	f855 6b04 	ldr.w	r6, [r5], #4
 8081c90:	4649      	mov	r1, r9
 8081c92:	1d30      	adds	r0, r6, #4
 8081c94:	f7ff fde4 	bl	8081860 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8081c98:	4583      	cmp	fp, r0
 8081c9a:	d3f5      	bcc.n	8081c88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 8081c9c:	6833      	ldr	r3, [r6, #0]
 8081c9e:	4642      	mov	r2, r8
 8081ca0:	68db      	ldr	r3, [r3, #12]
 8081ca2:	4639      	mov	r1, r7
 8081ca4:	4630      	mov	r0, r6
 8081ca6:	4798      	blx	r3
 8081ca8:	e7ee      	b.n	8081c88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 8081caa:	2300      	movs	r3, #0
 8081cac:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 8081cae:	a801      	add	r0, sp, #4
 8081cb0:	f7ff ff8a 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 8081cb4:	b003      	add	sp, #12
 8081cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081cba:	bf00      	nop
 8081cbc:	e000ed00 	.word	0xe000ed00

08081cc0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 8081cc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081cc4:	4b15      	ldr	r3, [pc, #84]	; (8081d1c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 8081cc6:	4604      	mov	r4, r0
 8081cc8:	685b      	ldr	r3, [r3, #4]
 8081cca:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 8081ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8081cd0:	b9fb      	cbnz	r3, 8081d12 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 8081cd2:	f7ff fe3f 	bl	8081954 <_ZN5spark10LogManager8instanceEv>
 8081cd6:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 8081cd8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081cda:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081cdc:	f7ff fc9a 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
 8081ce0:	e896 00a0 	ldmia.w	r6, {r5, r7}
 8081ce4:	2646      	movs	r6, #70	; 0x46
 8081ce6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 8081cea:	42af      	cmp	r7, r5
 8081cec:	d107      	bne.n	8081cfe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 8081cee:	a801      	add	r0, sp, #4
 8081cf0:	f7ff ff6a 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 8081cf4:	42b4      	cmp	r4, r6
 8081cf6:	bfb4      	ite	lt
 8081cf8:	2000      	movlt	r0, #0
 8081cfa:	2001      	movge	r0, #1
 8081cfc:	e00a      	b.n	8081d14 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 8081cfe:	f855 0b04 	ldr.w	r0, [r5], #4
 8081d02:	4641      	mov	r1, r8
 8081d04:	3004      	adds	r0, #4
 8081d06:	f7ff fdab 	bl	8081860 <_ZNK5spark6detail9LogFilter5levelEPKc>
 8081d0a:	4286      	cmp	r6, r0
 8081d0c:	bfa8      	it	ge
 8081d0e:	4606      	movge	r6, r0
 8081d10:	e7eb      	b.n	8081cea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 8081d12:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 8081d14:	b002      	add	sp, #8
 8081d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081d1a:	bf00      	nop
 8081d1c:	e000ed00 	.word	0xe000ed00

08081d20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 8081d20:	b570      	push	{r4, r5, r6, lr}
 8081d22:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 8081d24:	6803      	ldr	r3, [r0, #0]
 8081d26:	6842      	ldr	r2, [r0, #4]
 8081d28:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 8081d2c:	429a      	cmp	r2, r3
 8081d2e:	4618      	mov	r0, r3
 8081d30:	d00d      	beq.n	8081d4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 8081d32:	6806      	ldr	r6, [r0, #0]
 8081d34:	680d      	ldr	r5, [r1, #0]
 8081d36:	3304      	adds	r3, #4
 8081d38:	42ae      	cmp	r6, r5
 8081d3a:	d1f7      	bne.n	8081d2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 8081d3c:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 8081d3e:	1a52      	subs	r2, r2, r1
 8081d40:	f001 f96b 	bl	808301a <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8081d44:	6863      	ldr	r3, [r4, #4]
    return true;
 8081d46:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 8081d48:	3b01      	subs	r3, #1
 8081d4a:	6063      	str	r3, [r4, #4]
    return true;
}
 8081d4c:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 8081d4e:	2000      	movs	r0, #0
 8081d50:	bd70      	pop	{r4, r5, r6, pc}

08081d52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 8081d52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8081d54:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8081d56:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 8081d58:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081d5a:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 8081d5c:	f7ff fc5a 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8081d60:	a901      	add	r1, sp, #4
 8081d62:	4620      	mov	r0, r4
 8081d64:	f7ff ffdc 	bl	8081d20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 8081d68:	b920      	cbnz	r0, 8081d74 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8081d6a:	a803      	add	r0, sp, #12
 8081d6c:	f7ff ff2c 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 8081d70:	b004      	add	sp, #16
 8081d72:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 8081d74:	6863      	ldr	r3, [r4, #4]
 8081d76:	2b00      	cmp	r3, #0
 8081d78:	d1f7      	bne.n	8081d6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 8081d7a:	f7ff fe15 	bl	80819a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 8081d7e:	e7f4      	b.n	8081d6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

08081d80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 8081d80:	b570      	push	{r4, r5, r6, lr}
 8081d82:	4604      	mov	r4, r0
 8081d84:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8081d86:	6943      	ldr	r3, [r0, #20]
 8081d88:	2618      	movs	r6, #24
 8081d8a:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 8081d8e:	42ae      	cmp	r6, r5
 8081d90:	d015      	beq.n	8081dbe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 8081d92:	f105 0110 	add.w	r1, r5, #16
 8081d96:	4620      	mov	r0, r4
 8081d98:	f7ff ffc2 	bl	8081d20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 8081d9c:	6863      	ldr	r3, [r4, #4]
 8081d9e:	b90b      	cbnz	r3, 8081da4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 8081da0:	f7ff fe02 	bl	80819a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 8081da4:	69e0      	ldr	r0, [r4, #28]
 8081da6:	6929      	ldr	r1, [r5, #16]
 8081da8:	6803      	ldr	r3, [r0, #0]
 8081daa:	68db      	ldr	r3, [r3, #12]
 8081dac:	4798      	blx	r3
        if (h.stream) {
 8081dae:	6969      	ldr	r1, [r5, #20]
 8081db0:	b119      	cbz	r1, 8081dba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 8081db2:	6a20      	ldr	r0, [r4, #32]
 8081db4:	6803      	ldr	r3, [r0, #0]
 8081db6:	68db      	ldr	r3, [r3, #12]
 8081db8:	4798      	blx	r3
 8081dba:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 8081dbc:	e7e7      	b.n	8081d8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 8081dbe:	6925      	ldr	r5, [r4, #16]
 8081dc0:	6963      	ldr	r3, [r4, #20]
 8081dc2:	2618      	movs	r6, #24
 8081dc4:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081dc8:	42b5      	cmp	r5, r6
 8081dca:	d004      	beq.n	8081dd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 8081dcc:	4628      	mov	r0, r5
 8081dce:	f000 fbf8 	bl	80825c2 <_ZN6StringD1Ev>
 8081dd2:	3518      	adds	r5, #24
 8081dd4:	e7f8      	b.n	8081dc8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 8081dd6:	2300      	movs	r3, #0
 8081dd8:	6163      	str	r3, [r4, #20]
 8081dda:	bd70      	pop	{r4, r5, r6, pc}

08081ddc <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 8081ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081dde:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081de0:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 8081de2:	f7ff fde1 	bl	80819a8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 8081de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8081dea:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 8081dee:	f7ff fc11 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 8081df2:	4620      	mov	r0, r4
 8081df4:	f7ff ffc4 	bl	8081d80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 8081df8:	4628      	mov	r0, r5
 8081dfa:	f7ff fee5 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 8081dfe:	6925      	ldr	r5, [r4, #16]
 8081e00:	6963      	ldr	r3, [r4, #20]
 8081e02:	2618      	movs	r6, #24
 8081e04:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 8081e08:	42b5      	cmp	r5, r6
 8081e0a:	d004      	beq.n	8081e16 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 8081e0c:	4628      	mov	r0, r5
 8081e0e:	f000 fbd8 	bl	80825c2 <_ZN6StringD1Ev>
 8081e12:	3518      	adds	r5, #24
 8081e14:	e7f8      	b.n	8081e08 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8081e16:	6920      	ldr	r0, [r4, #16]
 8081e18:	f7fe fce6 	bl	80807e8 <free>
 8081e1c:	6820      	ldr	r0, [r4, #0]
 8081e1e:	f7fe fce3 	bl	80807e8 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 8081e22:	4620      	mov	r0, r4
 8081e24:	b002      	add	sp, #8
 8081e26:	bd70      	pop	{r4, r5, r6, pc}

08081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e28:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081e2a:	680a      	ldr	r2, [r1, #0]
 8081e2c:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e2e:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e30:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8081e32:	684a      	ldr	r2, [r1, #4]
 8081e34:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e36:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081e38:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 8081e3a:	688a      	ldr	r2, [r1, #8]
 8081e3c:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081e3e:	608b      	str	r3, [r1, #8]
 8081e40:	4770      	bx	lr

08081e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 8081e42:	b510      	push	{r4, lr}
 8081e44:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081e46:	2300      	movs	r3, #0
 8081e48:	6003      	str	r3, [r0, #0]
 8081e4a:	6043      	str	r3, [r0, #4]
 8081e4c:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8081e4e:	f7ff ffeb 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 8081e52:	4620      	mov	r0, r4
 8081e54:	bd10      	pop	{r4, pc}

08081e56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 8081e56:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8081e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081e5a:	4604      	mov	r4, r0
 8081e5c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 8081e5e:	d925      	bls.n	8081eac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 8081e60:	4290      	cmp	r0, r2
 8081e62:	d224      	bcs.n	8081eae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 8081e64:	1a55      	subs	r5, r2, r1
 8081e66:	3d14      	subs	r5, #20
 8081e68:	442c      	add	r4, r5
 8081e6a:	f1a1 0714 	sub.w	r7, r1, #20
 8081e6e:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081e72:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8081e74:	f1a5 0308 	sub.w	r3, r5, #8
 8081e78:	429f      	cmp	r7, r3
 8081e7a:	d037      	beq.n	8081eec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 8081e7c:	b184      	cbz	r4, 8081ea0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 8081e7e:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8081e82:	4629      	mov	r1, r5
 8081e84:	6023      	str	r3, [r4, #0]
 8081e86:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 8081e8a:	f104 0008 	add.w	r0, r4, #8
 8081e8e:	80a3      	strh	r3, [r4, #4]
 8081e90:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081e94:	60a6      	str	r6, [r4, #8]
 8081e96:	80e3      	strh	r3, [r4, #6]
 8081e98:	60e6      	str	r6, [r4, #12]
 8081e9a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8081e9c:	f7ff ffc4 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 8081ea0:	4628      	mov	r0, r5
 8081ea2:	f7ff fe37 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8081ea6:	3c14      	subs	r4, #20
 8081ea8:	3d14      	subs	r5, #20
 8081eaa:	e7e3      	b.n	8081e74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8081eac:	d01e      	beq.n	8081eec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 8081eae:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081eb2:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8081eb4:	f1a5 0308 	sub.w	r3, r5, #8
 8081eb8:	429e      	cmp	r6, r3
 8081eba:	d017      	beq.n	8081eec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 8081ebc:	b184      	cbz	r4, 8081ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 8081ebe:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8081ec2:	4629      	mov	r1, r5
 8081ec4:	6023      	str	r3, [r4, #0]
 8081ec6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 8081eca:	f104 0008 	add.w	r0, r4, #8
 8081ece:	80a3      	strh	r3, [r4, #4]
 8081ed0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8081ed4:	60a7      	str	r7, [r4, #8]
 8081ed6:	80e3      	strh	r3, [r4, #6]
 8081ed8:	60e7      	str	r7, [r4, #12]
 8081eda:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8081edc:	f7ff ffa4 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 8081ee0:	4628      	mov	r0, r5
 8081ee2:	f7ff fe17 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8081ee6:	3414      	adds	r4, #20
 8081ee8:	3514      	adds	r5, #20
 8081eea:	e7e3      	b.n	8081eb4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 8081eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081eee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081ef0:	6845      	ldr	r5, [r0, #4]
 8081ef2:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081ef4:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081ef6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 8081ef8:	460e      	mov	r6, r1
 8081efa:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8081efc:	db0e      	blt.n	8081f1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 8081efe:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 8081f00:	2d00      	cmp	r5, #0
 8081f02:	dd05      	ble.n	8081f10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 8081f04:	00a9      	lsls	r1, r5, #2
 8081f06:	6800      	ldr	r0, [r0, #0]
 8081f08:	f7fe fc76 	bl	80807f8 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 8081f0c:	b920      	cbnz	r0, 8081f18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 8081f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8081f10:	6800      	ldr	r0, [r0, #0]
 8081f12:	f7fe fc69 	bl	80807e8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 8081f16:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 8081f18:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 8081f1a:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8081f1c:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 8081f1e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8081f20:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 8081f24:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8081f28:	1a52      	subs	r2, r2, r1
 8081f2a:	1d08      	adds	r0, r1, #4
 8081f2c:	f001 f875 	bl	808301a <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 8081f30:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 8081f34:	6863      	ldr	r3, [r4, #4]
 8081f36:	2001      	movs	r0, #1
 8081f38:	3301      	adds	r3, #1
 8081f3a:	6063      	str	r3, [r4, #4]
    return true;
}
 8081f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081f3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 8081f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081f40:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 8081f42:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 8081f44:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081f46:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081f48:	f7ff fb64 	bl	8081614 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 8081f4c:	6823      	ldr	r3, [r4, #0]
 8081f4e:	6861      	ldr	r1, [r4, #4]
 8081f50:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 8081f54:	4283      	cmp	r3, r0
 8081f56:	461a      	mov	r2, r3
 8081f58:	d008      	beq.n	8081f6c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 8081f5a:	6812      	ldr	r2, [r2, #0]
 8081f5c:	3304      	adds	r3, #4
 8081f5e:	42aa      	cmp	r2, r5
 8081f60:	d1f8      	bne.n	8081f54 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 8081f62:	a801      	add	r0, sp, #4
 8081f64:	f7ff fe30 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 8081f68:	2500      	movs	r5, #0
 8081f6a:	e00e      	b.n	8081f8a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 8081f6c:	462a      	mov	r2, r5
 8081f6e:	4620      	mov	r0, r4
 8081f70:	f7ff ffbd 	bl	8081eee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 8081f74:	4605      	mov	r5, r0
 8081f76:	2800      	cmp	r0, #0
 8081f78:	d0f3      	beq.n	8081f62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 8081f7a:	6863      	ldr	r3, [r4, #4]
 8081f7c:	2b01      	cmp	r3, #1
 8081f7e:	d101      	bne.n	8081f84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 8081f80:	f7ff fd06 	bl	8081990 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 8081f84:	a801      	add	r0, sp, #4
 8081f86:	f7ff fe1f 	bl	8081bc8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 8081f8a:	4628      	mov	r0, r5
 8081f8c:	b003      	add	sp, #12
 8081f8e:	bd30      	pop	{r4, r5, pc}

08081f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 8081f90:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 8081f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081f94:	4606      	mov	r6, r0
 8081f96:	460c      	mov	r4, r1
 8081f98:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 8081f9a:	d914      	bls.n	8081fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 8081f9c:	4290      	cmp	r0, r2
 8081f9e:	d213      	bcs.n	8081fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 8081fa0:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 8081fa4:	1a6c      	subs	r4, r5, r1
 8081fa6:	f1a1 0710 	sub.w	r7, r1, #16
 8081faa:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 8081fac:	42af      	cmp	r7, r5
 8081fae:	d018      	beq.n	8081fe2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 8081fb0:	b11c      	cbz	r4, 8081fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 8081fb2:	4629      	mov	r1, r5
 8081fb4:	4620      	mov	r0, r4
 8081fb6:	f000 faf4 	bl	80825a2 <_ZN6StringC1EOS_>
                end->~T();
 8081fba:	4628      	mov	r0, r5
 8081fbc:	f000 fb01 	bl	80825c2 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 8081fc0:	3d10      	subs	r5, #16
 8081fc2:	3c10      	subs	r4, #16
 8081fc4:	e7f2      	b.n	8081fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 8081fc6:	d00c      	beq.n	8081fe2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 8081fc8:	42ac      	cmp	r4, r5
 8081fca:	d00a      	beq.n	8081fe2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 8081fcc:	b11e      	cbz	r6, 8081fd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 8081fce:	4621      	mov	r1, r4
 8081fd0:	4630      	mov	r0, r6
 8081fd2:	f000 fae6 	bl	80825a2 <_ZN6StringC1EOS_>
                p->~T();
 8081fd6:	4620      	mov	r0, r4
 8081fd8:	f000 faf3 	bl	80825c2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 8081fdc:	3410      	adds	r4, #16
 8081fde:	3610      	adds	r6, #16
 8081fe0:	e7f2      	b.n	8081fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 8081fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081fe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8081fe4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 8081fe6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 8081fe8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 8081fea:	dd0b      	ble.n	8082004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 8081fec:	0130      	lsls	r0, r6, #4
 8081fee:	f7fe fbf3 	bl	80807d8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 8081ff2:	4604      	mov	r4, r0
 8081ff4:	b170      	cbz	r0, 8082014 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 8081ff6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8081ffa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8081ffe:	f7ff ffc7 	bl	8081f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 8082002:	e000      	b.n	8082006 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 8082004:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 8082006:	6828      	ldr	r0, [r5, #0]
 8082008:	f7fe fbee 	bl	80807e8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 808200c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 808200e:	60ae      	str	r6, [r5, #8]
        return true;
 8082010:	2001      	movs	r0, #1
 8082012:	bd70      	pop	{r4, r5, r6, pc}
    }
 8082014:	bd70      	pop	{r4, r5, r6, pc}

08082016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8082016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808201a:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808201c:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808201e:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8082020:	b095      	sub	sp, #84	; 0x54
 8082022:	6003      	str	r3, [r0, #0]
 8082024:	6043      	str	r3, [r0, #4]
 8082026:	6083      	str	r3, [r0, #8]
 8082028:	60c3      	str	r3, [r0, #12]
 808202a:	6103      	str	r3, [r0, #16]
 808202c:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 808202e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 8082030:	9102      	str	r1, [sp, #8]
 8082032:	f8da 1004 	ldr.w	r1, [sl, #4]
 8082036:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 8082038:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808203a:	9308      	str	r3, [sp, #32]
 808203c:	9309      	str	r3, [sp, #36]	; 0x24
 808203e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 8082040:	f340 809d 	ble.w	808217e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 8082044:	a808      	add	r0, sp, #32
 8082046:	f7ff ffcd 	bl	8081fe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 808204a:	2800      	cmp	r0, #0
 808204c:	f040 8097 	bne.w	808217e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 8082050:	e08e      	b.n	8082170 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 8082052:	4621      	mov	r1, r4
 8082054:	a80b      	add	r0, sp, #44	; 0x2c
 8082056:	f000 faa4 	bl	80825a2 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 808205a:	a90b      	add	r1, sp, #44	; 0x2c
 808205c:	a80f      	add	r0, sp, #60	; 0x3c
 808205e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8082060:	f000 fa9f 	bl	80825a2 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8082064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8082068:	4299      	cmp	r1, r3
 808206a:	f2c0 80ce 	blt.w	808220a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 808206e:	3101      	adds	r1, #1
 8082070:	a808      	add	r0, sp, #32
 8082072:	f7ff ffb7 	bl	8081fe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 8082076:	2800      	cmp	r0, #0
 8082078:	f040 80c7 	bne.w	808220a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 808207c:	a80f      	add	r0, sp, #60	; 0x3c
 808207e:	f000 faa0 	bl	80825c2 <_ZN6StringD1Ev>
 8082082:	a80b      	add	r0, sp, #44	; 0x2c
 8082084:	f000 fa9d 	bl	80825c2 <_ZN6StringD1Ev>
 8082088:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 808208a:	42a7      	cmp	r7, r4
 808208c:	d1e1      	bne.n	8082052 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 808208e:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 8082090:	46b1      	mov	r9, r6
 8082092:	960b      	str	r6, [sp, #44]	; 0x2c
 8082094:	960c      	str	r6, [sp, #48]	; 0x30
 8082096:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 8082098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808209a:	429e      	cmp	r6, r3
 808209c:	f280 80a8 	bge.w	80821f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80820a0:	9a08      	ldr	r2, [sp, #32]
 80820a2:	0133      	lsls	r3, r6, #4
 80820a4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80820a6:	9306      	str	r3, [sp, #24]
        if (!category) {
 80820a8:	2b00      	cmp	r3, #0
 80820aa:	f000 809f 	beq.w	80821ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 80820ae:	2314      	movs	r3, #20
 80820b0:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80820b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80820b6:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 80820b8:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80820ba:	a907      	add	r1, sp, #28
 80820bc:	a806      	add	r0, sp, #24
 80820be:	f7ff f99c 	bl	80813fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80820c2:	4607      	mov	r7, r0
 80820c4:	2800      	cmp	r0, #0
 80820c6:	f000 8091 	beq.w	80821ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 80820ca:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 80820cc:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80820ce:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80820d2:	9a07      	ldr	r2, [sp, #28]
 80820d4:	4620      	mov	r0, r4
 80820d6:	f7ff fb83 	bl	80817e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80820da:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 80820de:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80820e0:	f1b8 0f00 	cmp.w	r8, #0
 80820e4:	d153      	bne.n	808218e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 80820e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 80820ea:	970f      	str	r7, [sp, #60]	; 0x3c
 80820ec:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80820f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80820f4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80820f8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80820fc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8082100:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 8082104:	6867      	ldr	r7, [r4, #4]
 8082106:	68a3      	ldr	r3, [r4, #8]
 8082108:	429f      	cmp	r7, r3
 808210a:	da4f      	bge.n	80821ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 808210c:	9b00      	ldr	r3, [sp, #0]
 808210e:	2214      	movs	r2, #20
 8082110:	4353      	muls	r3, r2
 8082112:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 8082116:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8082118:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 808211c:	fb02 b201 	mla	r2, r2, r1, fp
 8082120:	f107 0014 	add.w	r0, r7, #20
 8082124:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 8082126:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 8082128:	f7ff fe95 	bl	8081e56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 808212c:	b1a7      	cbz	r7, 8082158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 808212e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8082130:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8082132:	a911      	add	r1, sp, #68	; 0x44
 8082134:	f84b 2003 	str.w	r2, [fp, r3]
 8082138:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 808213c:	f107 0008 	add.w	r0, r7, #8
 8082140:	80bb      	strh	r3, [r7, #4]
 8082142:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 8082146:	f8c7 9008 	str.w	r9, [r7, #8]
 808214a:	80fb      	strh	r3, [r7, #6]
 808214c:	f8c7 900c 	str.w	r9, [r7, #12]
 8082150:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 8082154:	f7ff fe68 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 8082158:	6863      	ldr	r3, [r4, #4]
 808215a:	3301      	adds	r3, #1
 808215c:	6063      	str	r3, [r4, #4]
 808215e:	a811      	add	r0, sp, #68	; 0x44
 8082160:	f7ff fcd8 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 8082164:	f1b8 0f00 	cmp.w	r8, #0
 8082168:	d011      	beq.n	808218e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 808216a:	a80b      	add	r0, sp, #44	; 0x2c
 808216c:	f7ff fcd2 	bl	8081b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 8082170:	a808      	add	r0, sp, #32
 8082172:	f7ff fce3 	bl	8081b3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 8082176:	4628      	mov	r0, r5
 8082178:	b015      	add	sp, #84	; 0x54
 808217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808217e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 8082182:	f8da 3004 	ldr.w	r3, [sl, #4]
 8082186:	2714      	movs	r7, #20
 8082188:	fb07 4703 	mla	r7, r7, r3, r4
 808218c:	e77d      	b.n	808208a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 808218e:	6823      	ldr	r3, [r4, #0]
 8082190:	9a00      	ldr	r2, [sp, #0]
 8082192:	2414      	movs	r4, #20
 8082194:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 8082198:	9b06      	ldr	r3, [sp, #24]
 808219a:	781b      	ldrb	r3, [r3, #0]
 808219c:	bb23      	cbnz	r3, 80821e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 808219e:	f8da 3000 	ldr.w	r3, [sl]
 80821a2:	9a01      	ldr	r2, [sp, #4]
 80821a4:	4413      	add	r3, r2
 80821a6:	7c1b      	ldrb	r3, [r3, #16]
 80821a8:	80e3      	strh	r3, [r4, #6]
 80821aa:	e01d      	b.n	80821e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80821ac:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80821ae:	2f00      	cmp	r7, #0
 80821b0:	dd0f      	ble.n	80821d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80821b2:	2314      	movs	r3, #20
 80821b4:	fb03 f007 	mul.w	r0, r3, r7
 80821b8:	9303      	str	r3, [sp, #12]
 80821ba:	f7fe fb0d 	bl	80807d8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80821be:	4683      	mov	fp, r0
 80821c0:	b178      	cbz	r0, 80821e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 80821c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80821c6:	9b03      	ldr	r3, [sp, #12]
 80821c8:	fb03 1202 	mla	r2, r3, r2, r1
 80821cc:	f7ff fe43 	bl	8081e56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80821d0:	e000      	b.n	80821d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80821d2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80821d4:	6820      	ldr	r0, [r4, #0]
 80821d6:	f7fe fb07 	bl	80807e8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80821da:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 80821de:	60a7      	str	r7, [r4, #8]
 80821e0:	e794      	b.n	808210c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80821e2:	f04f 0801 	mov.w	r8, #1
 80821e6:	e7ba      	b.n	808215e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 80821e8:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80821ea:	e766      	b.n	80820ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80821ec:	3601      	adds	r6, #1
 80821ee:	e753      	b.n	8082098 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 80821f0:	a908      	add	r1, sp, #32
 80821f2:	4628      	mov	r0, r5
 80821f4:	f7ff fe18 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 80821f8:	a90b      	add	r1, sp, #44	; 0x2c
 80821fa:	f105 000c 	add.w	r0, r5, #12
 80821fe:	f7ff fe13 	bl	8081e28 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 8082202:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8082206:	762b      	strb	r3, [r5, #24]
 8082208:	e7af      	b.n	808216a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 808220a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 808220c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 808220e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 8082212:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8082216:	4631      	mov	r1, r6
 8082218:	f106 0010 	add.w	r0, r6, #16
 808221c:	f7ff feb8 	bl	8081f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 8082220:	b11e      	cbz	r6, 808222a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 8082222:	a90f      	add	r1, sp, #60	; 0x3c
 8082224:	4630      	mov	r0, r6
 8082226:	f000 f9bc 	bl	80825a2 <_ZN6StringC1EOS_>
    ++size_;
 808222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808222c:	3301      	adds	r3, #1
 808222e:	9309      	str	r3, [sp, #36]	; 0x24
 8082230:	e724      	b.n	808207c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

08082234 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8082234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 8082236:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 8082238:	460e      	mov	r6, r1
 808223a:	4605      	mov	r5, r0
        filter_(level, filters) {
 808223c:	4b08      	ldr	r3, [pc, #32]	; (8082260 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 808223e:	4611      	mov	r1, r2
 8082240:	f844 3b04 	str.w	r3, [r4], #4
 8082244:	a801      	add	r0, sp, #4
 8082246:	f7fe f828 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 808224a:	aa01      	add	r2, sp, #4
 808224c:	4631      	mov	r1, r6
 808224e:	4620      	mov	r0, r4
 8082250:	f7ff fee1 	bl	8082016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 8082254:	a801      	add	r0, sp, #4
 8082256:	f7fd ffdf 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 808225a:	4628      	mov	r0, r5
 808225c:	b004      	add	sp, #16
 808225e:	bd70      	pop	{r4, r5, r6, pc}
 8082260:	080832c8 	.word	0x080832c8

08082264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 8082264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082266:	460f      	mov	r7, r1
 8082268:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 808226a:	492b      	ldr	r1, [pc, #172]	; (8082318 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 808226c:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 808226e:	4616      	mov	r6, r2
 8082270:	461d      	mov	r5, r3
 8082272:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 8082274:	f000 ff34 	bl	80830e0 <strcmp>
 8082278:	bb28      	cbnz	r0, 80822c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 808227a:	2c00      	cmp	r4, #0
 808227c:	d049      	beq.n	8082312 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 808227e:	4629      	mov	r1, r5
 8082280:	a801      	add	r0, sp, #4
 8082282:	f7ff fdde 	bl	8081e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 8082286:	4925      	ldr	r1, [pc, #148]	; (808231c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 8082288:	2024      	movs	r0, #36	; 0x24
 808228a:	f000 fd53 	bl	8082d34 <_ZnwjRKSt9nothrow_t>
 808228e:	4605      	mov	r5, r0
 8082290:	b1b8      	cbz	r0, 80822c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 8082292:	a901      	add	r1, sp, #4
 8082294:	a804      	add	r0, sp, #16
 8082296:	f7ff fdd4 	bl	8081e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 808229a:	a904      	add	r1, sp, #16
 808229c:	a807      	add	r0, sp, #28
 808229e:	f7fd fffc 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80822a2:	aa07      	add	r2, sp, #28
 80822a4:	4631      	mov	r1, r6
 80822a6:	4628      	mov	r0, r5
 80822a8:	f7ff ffc4 	bl	8082234 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80822ac:	a807      	add	r0, sp, #28
 80822ae:	f7fd ffb3 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80822b2:	4b1b      	ldr	r3, [pc, #108]	; (8082320 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80822b4:	622c      	str	r4, [r5, #32]
 80822b6:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80822b8:	a804      	add	r0, sp, #16
 80822ba:	f7fd ffad 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80822be:	4b19      	ldr	r3, [pc, #100]	; (8082324 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 80822c0:	602b      	str	r3, [r5, #0]
 80822c2:	a801      	add	r0, sp, #4
 80822c4:	e01f      	b.n	8082306 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80822c6:	4918      	ldr	r1, [pc, #96]	; (8082328 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 80822c8:	4638      	mov	r0, r7
 80822ca:	f000 ff09 	bl	80830e0 <strcmp>
 80822ce:	b9f0      	cbnz	r0, 808230e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 80822d0:	b1fc      	cbz	r4, 8082312 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80822d2:	4629      	mov	r1, r5
 80822d4:	a804      	add	r0, sp, #16
 80822d6:	f7ff fdb4 	bl	8081e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80822da:	4910      	ldr	r1, [pc, #64]	; (808231c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80822dc:	2024      	movs	r0, #36	; 0x24
 80822de:	f000 fd29 	bl	8082d34 <_ZnwjRKSt9nothrow_t>
 80822e2:	4605      	mov	r5, r0
 80822e4:	b170      	cbz	r0, 8082304 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80822e6:	a904      	add	r1, sp, #16
 80822e8:	a807      	add	r0, sp, #28
 80822ea:	f7fd ffd6 	bl	808029a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80822ee:	aa07      	add	r2, sp, #28
 80822f0:	4631      	mov	r1, r6
 80822f2:	4628      	mov	r0, r5
 80822f4:	f7ff ff9e 	bl	8082234 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80822f8:	a807      	add	r0, sp, #28
 80822fa:	f7fd ff8d 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80822fe:	4b08      	ldr	r3, [pc, #32]	; (8082320 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 8082300:	622c      	str	r4, [r5, #32]
 8082302:	602b      	str	r3, [r5, #0]
 8082304:	a804      	add	r0, sp, #16
 8082306:	f7fd ff87 	bl	8080218 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 808230a:	4628      	mov	r0, r5
 808230c:	e002      	b.n	8082314 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 808230e:	2000      	movs	r0, #0
 8082310:	e000      	b.n	8082314 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 8082312:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 8082314:	b00b      	add	sp, #44	; 0x2c
 8082316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082318:	0808349b 	.word	0x0808349b
 808231c:	080835dc 	.word	0x080835dc
 8082320:	080834e4 	.word	0x080834e4
 8082324:	080833d0 	.word	0x080833d0
 8082328:	0808349f 	.word	0x0808349f

0808232c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808232c:	4a01      	ldr	r2, [pc, #4]	; (8082334 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808232e:	4b02      	ldr	r3, [pc, #8]	; (8082338 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082330:	601a      	str	r2, [r3, #0]
 8082332:	4770      	bx	lr
 8082334:	080834b0 	.word	0x080834b0
 8082338:	20000540 	.word	0x20000540

0808233c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808233c:	2300      	movs	r3, #0
 808233e:	461a      	mov	r2, r3
 8082340:	6840      	ldr	r0, [r0, #4]
 8082342:	f7fe b9f9 	b.w	8080738 <network_connect>

08082346 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082346:	2200      	movs	r2, #0
 8082348:	2102      	movs	r1, #2
 808234a:	6840      	ldr	r0, [r0, #4]
 808234c:	f7fe ba04 	b.w	8080758 <network_disconnect>

08082350 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082350:	2200      	movs	r2, #0
 8082352:	4611      	mov	r1, r2
 8082354:	6840      	ldr	r0, [r0, #4]
 8082356:	f7fe b9f7 	b.w	8080748 <network_connecting>

0808235a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808235a:	2200      	movs	r2, #0
 808235c:	4611      	mov	r1, r2
 808235e:	6840      	ldr	r0, [r0, #4]
 8082360:	f7fe ba02 	b.w	8080768 <network_ready>

08082364 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082364:	2300      	movs	r3, #0
 8082366:	461a      	mov	r2, r3
 8082368:	4619      	mov	r1, r3
 808236a:	6840      	ldr	r0, [r0, #4]
 808236c:	f7fe ba04 	b.w	8080778 <network_on>

08082370 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082370:	2300      	movs	r3, #0
 8082372:	461a      	mov	r2, r3
 8082374:	4619      	mov	r1, r3
 8082376:	6840      	ldr	r0, [r0, #4]
 8082378:	f7fe ba06 	b.w	8080788 <network_off>

0808237c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808237c:	2200      	movs	r2, #0
 808237e:	f081 0101 	eor.w	r1, r1, #1
 8082382:	6840      	ldr	r0, [r0, #4]
 8082384:	f7fe ba08 	b.w	8080798 <network_listen>

08082388 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082388:	2200      	movs	r2, #0
 808238a:	6840      	ldr	r0, [r0, #4]
 808238c:	f7fe ba14 	b.w	80807b8 <network_set_listen_timeout>

08082390 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082390:	2200      	movs	r2, #0
 8082392:	4611      	mov	r1, r2
 8082394:	6840      	ldr	r0, [r0, #4]
 8082396:	f7fe ba17 	b.w	80807c8 <network_get_listen_timeout>

0808239a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808239a:	2200      	movs	r2, #0
 808239c:	4611      	mov	r1, r2
 808239e:	6840      	ldr	r0, [r0, #4]
 80823a0:	f7fe ba02 	b.w	80807a8 <network_listening>

080823a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80823a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80823a6:	4617      	mov	r7, r2
 80823a8:	b087      	sub	sp, #28
 80823aa:	4605      	mov	r5, r0
    IPAddress addr;
 80823ac:	a804      	add	r0, sp, #16
 80823ae:	f7fe fdf7 	bl	8080fa0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80823b2:	2600      	movs	r6, #0
 80823b4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80823b6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80823b8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80823bc:	f000 feb5 	bl	808312a <strlen>
 80823c0:	4b0a      	ldr	r3, [pc, #40]	; (80823ec <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80823c2:	9600      	str	r6, [sp, #0]
 80823c4:	b281      	uxth	r1, r0
 80823c6:	685b      	ldr	r3, [r3, #4]
 80823c8:	4622      	mov	r2, r4
 80823ca:	4638      	mov	r0, r7
 80823cc:	f7fe f800 	bl	80803d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80823d0:	b120      	cbz	r0, 80823dc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80823d2:	4631      	mov	r1, r6
 80823d4:	4628      	mov	r0, r5
 80823d6:	f7fe fdf3 	bl	8080fc0 <_ZN9IPAddressC1Em>
 80823da:	e003      	b.n	80823e4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80823dc:	4621      	mov	r1, r4
 80823de:	4628      	mov	r0, r5
 80823e0:	f7fe fde6 	bl	8080fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80823e4:	4628      	mov	r0, r5
 80823e6:	b007      	add	sp, #28
 80823e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80823ea:	bf00      	nop
 80823ec:	200004b0 	.word	0x200004b0

080823f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80823f0:	4b02      	ldr	r3, [pc, #8]	; (80823fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80823f2:	4a03      	ldr	r2, [pc, #12]	; (8082400 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80823f4:	601a      	str	r2, [r3, #0]
 80823f6:	2200      	movs	r2, #0
 80823f8:	605a      	str	r2, [r3, #4]
 80823fa:	4770      	bx	lr
 80823fc:	20000544 	.word	0x20000544
 8082400:	08083514 	.word	0x08083514

08082404 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082406:	4606      	mov	r6, r0
 8082408:	460d      	mov	r5, r1
 808240a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808240c:	2400      	movs	r4, #0
  while (size--) {
 808240e:	42bd      	cmp	r5, r7
 8082410:	d00c      	beq.n	808242c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082412:	6833      	ldr	r3, [r6, #0]
 8082414:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082418:	689b      	ldr	r3, [r3, #8]
 808241a:	4630      	mov	r0, r6
 808241c:	4798      	blx	r3
     if (chunk>=0)
 808241e:	2800      	cmp	r0, #0
 8082420:	db01      	blt.n	8082426 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082422:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082424:	e7f3      	b.n	808240e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082426:	2c00      	cmp	r4, #0
 8082428:	bf08      	it	eq
 808242a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808242c:	4620      	mov	r0, r4
 808242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082430 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082430:	b570      	push	{r4, r5, r6, lr}
 8082432:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082434:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082436:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082438:	b149      	cbz	r1, 808244e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808243a:	f000 fe76 	bl	808312a <strlen>
 808243e:	682b      	ldr	r3, [r5, #0]
 8082440:	4602      	mov	r2, r0
 8082442:	4621      	mov	r1, r4
 8082444:	4628      	mov	r0, r5
    }
 8082446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808244a:	68db      	ldr	r3, [r3, #12]
 808244c:	4718      	bx	r3
    }
 808244e:	bd70      	pop	{r4, r5, r6, pc}

08082450 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082450:	6803      	ldr	r3, [r0, #0]
 8082452:	689b      	ldr	r3, [r3, #8]
 8082454:	4718      	bx	r3

08082456 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082456:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082458:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808245a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808245c:	f7ff fff8 	bl	8082450 <_ZN5Print5printEc>
  n += print('\n');
 8082460:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082462:	4604      	mov	r4, r0
  n += print('\n');
 8082464:	4628      	mov	r0, r5
 8082466:	f7ff fff3 	bl	8082450 <_ZN5Print5printEc>
  return n;
}
 808246a:	4420      	add	r0, r4
 808246c:	bd38      	pop	{r3, r4, r5, pc}

0808246e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808246e:	2a01      	cmp	r2, #1
 8082470:	bf98      	it	ls
 8082472:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082474:	b530      	push	{r4, r5, lr}
 8082476:	460b      	mov	r3, r1
 8082478:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808247a:	2100      	movs	r1, #0
 808247c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082480:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082484:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082488:	fb05 3312 	mls	r3, r5, r2, r3
 808248c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808248e:	2b09      	cmp	r3, #9
 8082490:	bf94      	ite	ls
 8082492:	3330      	addls	r3, #48	; 0x30
 8082494:	3337      	addhi	r3, #55	; 0x37
 8082496:	b2db      	uxtb	r3, r3
 8082498:	4621      	mov	r1, r4
 808249a:	f804 3901 	strb.w	r3, [r4], #-1
 808249e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80824a0:	2d00      	cmp	r5, #0
 80824a2:	d1ef      	bne.n	8082484 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80824a4:	f7ff ffc4 	bl	8082430 <_ZN5Print5writeEPKc>
}
 80824a8:	b00b      	add	sp, #44	; 0x2c
 80824aa:	bd30      	pop	{r4, r5, pc}

080824ac <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80824ac:	b410      	push	{r4}
  if (base == 0) return write(n);
 80824ae:	b922      	cbnz	r2, 80824ba <_ZN5Print5printEmi+0xe>
 80824b0:	6803      	ldr	r3, [r0, #0]
 80824b2:	b2c9      	uxtb	r1, r1
 80824b4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80824b6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80824b8:	4718      	bx	r3
  else return printNumber(n, base);
 80824ba:	b2d2      	uxtb	r2, r2
}
 80824bc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80824be:	f7ff bfd6 	b.w	808246e <_ZN5Print11printNumberEmh>

080824c2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80824c2:	f7ff bff3 	b.w	80824ac <_ZN5Print5printEmi>

080824c6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80824c6:	b40c      	push	{r2, r3}
 80824c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80824cc:	b087      	sub	sp, #28
 80824ce:	af00      	add	r7, sp, #0
 80824d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80824d4:	f854 9b04 	ldr.w	r9, [r4], #4
 80824d8:	4605      	mov	r5, r0
 80824da:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80824dc:	4623      	mov	r3, r4
 80824de:	464a      	mov	r2, r9
 80824e0:	2114      	movs	r1, #20
 80824e2:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80824e4:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80824e6:	f7fe f98f 	bl	8080808 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80824ea:	2813      	cmp	r0, #19
 80824ec:	d805      	bhi.n	80824fa <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80824ee:	1d39      	adds	r1, r7, #4
 80824f0:	4628      	mov	r0, r5
 80824f2:	f7ff ff9d 	bl	8082430 <_ZN5Print5writeEPKc>
 80824f6:	4604      	mov	r4, r0
 80824f8:	e013      	b.n	8082522 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80824fa:	f100 0308 	add.w	r3, r0, #8
 80824fe:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8082502:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8082504:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8082508:	1c41      	adds	r1, r0, #1
 808250a:	4623      	mov	r3, r4
 808250c:	464a      	mov	r2, r9
 808250e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8082510:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8082512:	f7fe f979 	bl	8080808 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082516:	4669      	mov	r1, sp
 8082518:	4628      	mov	r0, r5
 808251a:	f7ff ff89 	bl	8082430 <_ZN5Print5writeEPKc>
 808251e:	4604      	mov	r4, r0
 8082520:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8082522:	b11e      	cbz	r6, 808252c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8082524:	4628      	mov	r0, r5
 8082526:	f7ff ff96 	bl	8082456 <_ZN5Print7printlnEv>
 808252a:	4404      	add	r4, r0
    return n;
}
 808252c:	4620      	mov	r0, r4
 808252e:	371c      	adds	r7, #28
 8082530:	46bd      	mov	sp, r7
 8082532:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082536:	b002      	add	sp, #8
 8082538:	4770      	bx	lr

0808253a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808253a:	b510      	push	{r4, lr}
 808253c:	4604      	mov	r4, r0
 808253e:	f7fe fa18 	bl	8080972 <_ZNSt14_Function_baseD1Ev>
 8082542:	4620      	mov	r0, r4
 8082544:	bd10      	pop	{r4, pc}
	...

08082548 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082548:	4803      	ldr	r0, [pc, #12]	; (8082558 <_GLOBAL__sub_I_RGB+0x10>)
 808254a:	2300      	movs	r3, #0
 808254c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808254e:	4a03      	ldr	r2, [pc, #12]	; (808255c <_GLOBAL__sub_I_RGB+0x14>)
 8082550:	4903      	ldr	r1, [pc, #12]	; (8082560 <_GLOBAL__sub_I_RGB+0x18>)
 8082552:	f000 bbdf 	b.w	8082d14 <__aeabi_atexit>
 8082556:	bf00      	nop
 8082558:	2000054c 	.word	0x2000054c
 808255c:	20000474 	.word	0x20000474
 8082560:	0808253b 	.word	0x0808253b

08082564 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082564:	4770      	bx	lr

08082566 <_ZN8SPIClassD0Ev>:
 8082566:	b510      	push	{r4, lr}
 8082568:	4604      	mov	r4, r0
 808256a:	2110      	movs	r1, #16
 808256c:	f000 fbd7 	bl	8082d1e <_ZdlPvj>
 8082570:	4620      	mov	r0, r4
 8082572:	bd10      	pop	{r4, pc}

08082574 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082574:	b570      	push	{r4, r5, r6, lr}
 8082576:	4604      	mov	r4, r0
 8082578:	460e      	mov	r6, r1
 808257a:	4b07      	ldr	r3, [pc, #28]	; (8082598 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808257c:	2500      	movs	r5, #0
 808257e:	6003      	str	r3, [r0, #0]
 8082580:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082584:	f7fd ff2c 	bl	80803e0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082588:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808258a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808258c:	f7fd ffb8 	bl	8080500 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082590:	60a5      	str	r5, [r4, #8]
}
 8082592:	4620      	mov	r0, r4
 8082594:	bd70      	pop	{r4, r5, r6, pc}
 8082596:	bf00      	nop
 8082598:	08083548 	.word	0x08083548

0808259c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808259c:	7900      	ldrb	r0, [r0, #4]
 808259e:	f7fd bfb7 	b.w	8080510 <HAL_SPI_Is_Enabled>

080825a2 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80825a2:	2300      	movs	r3, #0
 80825a4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80825a6:	6043      	str	r3, [r0, #4]
	len = 0;
 80825a8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80825aa:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80825ac:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80825ae:	680c      	ldr	r4, [r1, #0]
 80825b0:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80825b2:	684c      	ldr	r4, [r1, #4]
 80825b4:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80825b6:	688c      	ldr	r4, [r1, #8]
 80825b8:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80825ba:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80825bc:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80825be:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80825c0:	bd10      	pop	{r4, pc}

080825c2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80825c2:	b510      	push	{r4, lr}
 80825c4:	4604      	mov	r4, r0
{
	free(buffer);
 80825c6:	6800      	ldr	r0, [r0, #0]
 80825c8:	f7fe f90e 	bl	80807e8 <free>
}
 80825cc:	4620      	mov	r0, r4
 80825ce:	bd10      	pop	{r4, pc}

080825d0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80825d0:	b510      	push	{r4, lr}
 80825d2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80825d4:	6800      	ldr	r0, [r0, #0]
 80825d6:	b108      	cbz	r0, 80825dc <_ZN6String10invalidateEv+0xc>
 80825d8:	f7fe f906 	bl	80807e8 <free>
	buffer = NULL;
 80825dc:	2300      	movs	r3, #0
 80825de:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80825e0:	60a3      	str	r3, [r4, #8]
 80825e2:	6063      	str	r3, [r4, #4]
 80825e4:	bd10      	pop	{r4, pc}

080825e6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80825e6:	b538      	push	{r3, r4, r5, lr}
 80825e8:	4604      	mov	r4, r0
 80825ea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80825ec:	6800      	ldr	r0, [r0, #0]
 80825ee:	3101      	adds	r1, #1
 80825f0:	f7fe f902 	bl	80807f8 <realloc>
	if (newbuffer) {
 80825f4:	b110      	cbz	r0, 80825fc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80825f6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80825fa:	2001      	movs	r0, #1
	}
	return 0;
}
 80825fc:	bd38      	pop	{r3, r4, r5, pc}

080825fe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80825fe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082600:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082602:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082604:	b113      	cbz	r3, 808260c <_ZN6String7reserveEj+0xe>
 8082606:	6843      	ldr	r3, [r0, #4]
 8082608:	428b      	cmp	r3, r1
 808260a:	d207      	bcs.n	808261c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808260c:	4620      	mov	r0, r4
 808260e:	f7ff ffea 	bl	80825e6 <_ZN6String12changeBufferEj>
 8082612:	b120      	cbz	r0, 808261e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082614:	68a3      	ldr	r3, [r4, #8]
 8082616:	b90b      	cbnz	r3, 808261c <_ZN6String7reserveEj+0x1e>
 8082618:	6822      	ldr	r2, [r4, #0]
 808261a:	7013      	strb	r3, [r2, #0]
 808261c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808261e:	bd10      	pop	{r4, pc}

08082620 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082620:	b570      	push	{r4, r5, r6, lr}
 8082622:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082624:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082626:	4604      	mov	r4, r0
 8082628:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808262a:	f7ff ffe8 	bl	80825fe <_ZN6String7reserveEj>
 808262e:	b918      	cbnz	r0, 8082638 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082630:	4620      	mov	r0, r4
 8082632:	f7ff ffcd 	bl	80825d0 <_ZN6String10invalidateEv>
		return *this;
 8082636:	e009      	b.n	808264c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082638:	462a      	mov	r2, r5
 808263a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808263c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808263e:	6820      	ldr	r0, [r4, #0]
 8082640:	f000 fce0 	bl	8083004 <memcpy>
	buffer[len] = 0;
 8082644:	6822      	ldr	r2, [r4, #0]
 8082646:	68a3      	ldr	r3, [r4, #8]
 8082648:	2100      	movs	r1, #0
 808264a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808264c:	4620      	mov	r0, r4
 808264e:	bd70      	pop	{r4, r5, r6, pc}

08082650 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082650:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082652:	b510      	push	{r4, lr}
 8082654:	460b      	mov	r3, r1
 8082656:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082658:	d007      	beq.n	808266a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808265a:	6809      	ldr	r1, [r1, #0]
 808265c:	b119      	cbz	r1, 8082666 <_ZN6StringaSERKS_+0x16>
 808265e:	689a      	ldr	r2, [r3, #8]
 8082660:	f7ff ffde 	bl	8082620 <_ZN6String4copyEPKcj>
 8082664:	e001      	b.n	808266a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082666:	f7ff ffb3 	bl	80825d0 <_ZN6String10invalidateEv>

	return *this;
}
 808266a:	4620      	mov	r0, r4
 808266c:	bd10      	pop	{r4, pc}

0808266e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808266e:	b510      	push	{r4, lr}
 8082670:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082672:	2300      	movs	r3, #0
 8082674:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082676:	6043      	str	r3, [r0, #4]
	len = 0;
 8082678:	6083      	str	r3, [r0, #8]
	flags = 0;
 808267a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808267c:	f7ff ffe8 	bl	8082650 <_ZN6StringaSERKS_>
}
 8082680:	4620      	mov	r0, r4
 8082682:	bd10      	pop	{r4, pc}

08082684 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8082684:	b538      	push	{r3, r4, r5, lr}
 8082686:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082688:	460c      	mov	r4, r1
 808268a:	b141      	cbz	r1, 808269e <_ZN6StringaSEPKc+0x1a>
 808268c:	4608      	mov	r0, r1
 808268e:	f000 fd4c 	bl	808312a <strlen>
 8082692:	4621      	mov	r1, r4
 8082694:	4602      	mov	r2, r0
 8082696:	4628      	mov	r0, r5
 8082698:	f7ff ffc2 	bl	8082620 <_ZN6String4copyEPKcj>
 808269c:	e001      	b.n	80826a2 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808269e:	f7ff ff97 	bl	80825d0 <_ZN6String10invalidateEv>

	return *this;
}
 80826a2:	4628      	mov	r0, r5
 80826a4:	bd38      	pop	{r3, r4, r5, pc}

080826a6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80826a6:	b510      	push	{r4, lr}
 80826a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80826aa:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80826ac:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80826ae:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80826b0:	6063      	str	r3, [r4, #4]
	len = 0;
 80826b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80826b4:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80826b6:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80826b8:	a901      	add	r1, sp, #4
 80826ba:	f000 f9b8 	bl	8082a2e <itoa>
	*this = buf;
 80826be:	a901      	add	r1, sp, #4
 80826c0:	4620      	mov	r0, r4
 80826c2:	f7ff ffdf 	bl	8082684 <_ZN6StringaSEPKc>
}
 80826c6:	4620      	mov	r0, r4
 80826c8:	b00a      	add	sp, #40	; 0x28
 80826ca:	bd10      	pop	{r4, pc}

080826cc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80826cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80826d0:	4b03      	ldr	r3, [pc, #12]	; (80826e0 <_GLOBAL__sub_I_System+0x14>)
 80826d2:	2000      	movs	r0, #0
 80826d4:	7018      	strb	r0, [r3, #0]
 80826d6:	8058      	strh	r0, [r3, #2]
 80826d8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80826da:	f7fd bfc9 	b.w	8080670 <set_system_mode>
 80826de:	bf00      	nop
 80826e0:	2000055c 	.word	0x2000055c

080826e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80826e4:	4b02      	ldr	r3, [pc, #8]	; (80826f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80826e6:	681a      	ldr	r2, [r3, #0]
 80826e8:	4b02      	ldr	r3, [pc, #8]	; (80826f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80826ea:	601a      	str	r2, [r3, #0]
 80826ec:	4770      	bx	lr
 80826ee:	bf00      	nop
 80826f0:	20000408 	.word	0x20000408
 80826f4:	20000564 	.word	0x20000564

080826f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80826f8:	4770      	bx	lr

080826fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80826fa:	7441      	strb	r1, [r0, #17]
 80826fc:	4770      	bx	lr

080826fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80826fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082700:	7c00      	ldrb	r0, [r0, #16]
 8082702:	f7fd ff4d 	bl	80805a0 <HAL_USART_Available_Data_For_Write>
}
 8082706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808270a:	bd08      	pop	{r3, pc}

0808270c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808270c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808270e:	7c00      	ldrb	r0, [r0, #16]
 8082710:	f7fd ff1e 	bl	8080550 <HAL_USART_Available_Data>
}
 8082714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082718:	bd08      	pop	{r3, pc}

0808271a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808271a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808271c:	7c00      	ldrb	r0, [r0, #16]
 808271e:	f7fd ff27 	bl	8080570 <HAL_USART_Peek_Data>
}
 8082722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082726:	bf28      	it	cs
 8082728:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 808272c:	bd08      	pop	{r3, pc}

0808272e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808272e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082730:	7c00      	ldrb	r0, [r0, #16]
 8082732:	f7fd ff15 	bl	8080560 <HAL_USART_Read_Data>
}
 8082736:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808273a:	bf28      	it	cs
 808273c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082740:	bd08      	pop	{r3, pc}

08082742 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082742:	7c00      	ldrb	r0, [r0, #16]
 8082744:	f7fd bf1c 	b.w	8080580 <HAL_USART_Flush_Data>

08082748 <_ZN11USARTSerialD0Ev>:
 8082748:	b510      	push	{r4, lr}
 808274a:	4604      	mov	r4, r0
 808274c:	2114      	movs	r1, #20
 808274e:	f000 fae6 	bl	8082d1e <_ZdlPvj>
 8082752:	4620      	mov	r0, r4
 8082754:	bd10      	pop	{r4, pc}

08082756 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082756:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082758:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808275a:	4604      	mov	r4, r0
 808275c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808275e:	b925      	cbnz	r5, 808276a <_ZN11USARTSerial5writeEh+0x14>
 8082760:	7c00      	ldrb	r0, [r0, #16]
 8082762:	f7fd ff1d 	bl	80805a0 <HAL_USART_Available_Data_For_Write>
 8082766:	2800      	cmp	r0, #0
 8082768:	dd05      	ble.n	8082776 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808276a:	4631      	mov	r1, r6
 808276c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808276e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082772:	f7fd bee5 	b.w	8080540 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082776:	4628      	mov	r0, r5
 8082778:	bd70      	pop	{r4, r5, r6, pc}
	...

0808277c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808277c:	b510      	push	{r4, lr}
 808277e:	4604      	mov	r4, r0
 8082780:	4608      	mov	r0, r1
 8082782:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082784:	2200      	movs	r2, #0
 8082786:	6062      	str	r2, [r4, #4]
 8082788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808278c:	60a2      	str	r2, [r4, #8]
 808278e:	4a05      	ldr	r2, [pc, #20]	; (80827a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082790:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082792:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082794:	2201      	movs	r2, #1
 8082796:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082798:	461a      	mov	r2, r3
 808279a:	f7fd fec1 	bl	8080520 <HAL_USART_Init>
}
 808279e:	4620      	mov	r0, r4
 80827a0:	bd10      	pop	{r4, pc}
 80827a2:	bf00      	nop
 80827a4:	08083584 	.word	0x08083584

080827a8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80827a8:	2300      	movs	r3, #0
 80827aa:	7c00      	ldrb	r0, [r0, #16]
 80827ac:	f7fd bf00 	b.w	80805b0 <HAL_USART_BeginConfig>

080827b0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80827b0:	2200      	movs	r2, #0
 80827b2:	f7ff bff9 	b.w	80827a8 <_ZN11USARTSerial5beginEmm>

080827b6 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80827b6:	7c00      	ldrb	r0, [r0, #16]
 80827b8:	f7fd beba 	b.w	8080530 <HAL_USART_End>

080827bc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80827bc:	7c00      	ldrb	r0, [r0, #16]
 80827be:	f7fd bee7 	b.w	8080590 <HAL_USART_Is_Enabled>
	...

080827c4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80827c4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80827c6:	4d0c      	ldr	r5, [pc, #48]	; (80827f8 <_Z22__fetch_global_Serial1v+0x34>)
 80827c8:	6829      	ldr	r1, [r5, #0]
 80827ca:	f011 0401 	ands.w	r4, r1, #1
 80827ce:	d111      	bne.n	80827f4 <_Z22__fetch_global_Serial1v+0x30>
 80827d0:	4628      	mov	r0, r5
 80827d2:	f7fd fc71 	bl	80800b8 <__cxa_guard_acquire>
 80827d6:	b168      	cbz	r0, 80827f4 <_Z22__fetch_global_Serial1v+0x30>
 80827d8:	4a08      	ldr	r2, [pc, #32]	; (80827fc <_Z22__fetch_global_Serial1v+0x38>)
 80827da:	4621      	mov	r1, r4
 80827dc:	4b08      	ldr	r3, [pc, #32]	; (8082800 <_Z22__fetch_global_Serial1v+0x3c>)
 80827de:	4809      	ldr	r0, [pc, #36]	; (8082804 <_Z22__fetch_global_Serial1v+0x40>)
 80827e0:	f7ff ffcc 	bl	808277c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80827e4:	4628      	mov	r0, r5
 80827e6:	f7fd fc6c 	bl	80800c2 <__cxa_guard_release>
 80827ea:	4a07      	ldr	r2, [pc, #28]	; (8082808 <_Z22__fetch_global_Serial1v+0x44>)
 80827ec:	4907      	ldr	r1, [pc, #28]	; (808280c <_Z22__fetch_global_Serial1v+0x48>)
 80827ee:	4805      	ldr	r0, [pc, #20]	; (8082804 <_Z22__fetch_global_Serial1v+0x40>)
 80827f0:	f000 fa90 	bl	8082d14 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80827f4:	4803      	ldr	r0, [pc, #12]	; (8082804 <_Z22__fetch_global_Serial1v+0x40>)
 80827f6:	bd38      	pop	{r3, r4, r5, pc}
 80827f8:	20000600 	.word	0x20000600
 80827fc:	20000604 	.word	0x20000604
 8082800:	2000057c 	.word	0x2000057c
 8082804:	20000568 	.word	0x20000568
 8082808:	20000474 	.word	0x20000474
 808280c:	080826f9 	.word	0x080826f9

08082810 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082810:	7441      	strb	r1, [r0, #17]
 8082812:	4770      	bx	lr

08082814 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082814:	4770      	bx	lr

08082816 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082816:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082818:	2100      	movs	r1, #0
 808281a:	7c00      	ldrb	r0, [r0, #16]
 808281c:	f7fd fef8 	bl	8080610 <HAL_USB_USART_Receive_Data>
}
 8082820:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082824:	bf28      	it	cs
 8082826:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 808282a:	bd08      	pop	{r3, pc}

0808282c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808282c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808282e:	2101      	movs	r1, #1
 8082830:	7c00      	ldrb	r0, [r0, #16]
 8082832:	f7fd feed 	bl	8080610 <HAL_USB_USART_Receive_Data>
}
 8082836:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808283a:	bf28      	it	cs
 808283c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082840:	bd08      	pop	{r3, pc}

08082842 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082842:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082844:	7c00      	ldrb	r0, [r0, #16]
 8082846:	f7fd fedb 	bl	8080600 <HAL_USB_USART_Available_Data_For_Write>
}
 808284a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808284e:	bd08      	pop	{r3, pc}

08082850 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082850:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082852:	7c00      	ldrb	r0, [r0, #16]
 8082854:	f7fd fecc 	bl	80805f0 <HAL_USB_USART_Available_Data>
}
 8082858:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808285c:	bd08      	pop	{r3, pc}

0808285e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808285e:	7c00      	ldrb	r0, [r0, #16]
 8082860:	f7fd bee6 	b.w	8080630 <HAL_USB_USART_Flush_Data>

08082864 <_ZN9USBSerialD0Ev>:
 8082864:	b510      	push	{r4, lr}
 8082866:	4604      	mov	r4, r0
 8082868:	2114      	movs	r1, #20
 808286a:	f000 fa58 	bl	8082d1e <_ZdlPvj>
 808286e:	4620      	mov	r0, r4
 8082870:	bd10      	pop	{r4, pc}

08082872 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082872:	b538      	push	{r3, r4, r5, lr}
 8082874:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082876:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082878:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808287a:	f7fd fec1 	bl	8080600 <HAL_USB_USART_Available_Data_For_Write>
 808287e:	2800      	cmp	r0, #0
 8082880:	dc01      	bgt.n	8082886 <_ZN9USBSerial5writeEh+0x14>
 8082882:	7c60      	ldrb	r0, [r4, #17]
 8082884:	b128      	cbz	r0, 8082892 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082886:	4629      	mov	r1, r5
 8082888:	7c20      	ldrb	r0, [r4, #16]
 808288a:	f7fd fec9 	bl	8080620 <HAL_USB_USART_Send_Data>
 808288e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082892:	bd38      	pop	{r3, r4, r5, pc}

08082894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082894:	b510      	push	{r4, lr}
 8082896:	4604      	mov	r4, r0
 8082898:	2300      	movs	r3, #0
 808289a:	6063      	str	r3, [r4, #4]
 808289c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80828a0:	60a3      	str	r3, [r4, #8]
 80828a2:	4b05      	ldr	r3, [pc, #20]	; (80828b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80828a4:	4608      	mov	r0, r1
 80828a6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80828a8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80828aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80828ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80828ae:	4611      	mov	r1, r2
 80828b0:	f7fd fe86 	bl	80805c0 <HAL_USB_USART_Init>
}
 80828b4:	4620      	mov	r0, r4
 80828b6:	bd10      	pop	{r4, pc}
 80828b8:	080835b4 	.word	0x080835b4

080828bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80828bc:	2200      	movs	r2, #0
 80828be:	7c00      	ldrb	r0, [r0, #16]
 80828c0:	f7fd be86 	b.w	80805d0 <HAL_USB_USART_Begin>

080828c4 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80828c4:	7c00      	ldrb	r0, [r0, #16]
 80828c6:	f7fd be8b 	b.w	80805e0 <HAL_USB_USART_End>
	...

080828cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80828cc:	b510      	push	{r4, lr}
 80828ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80828d0:	2214      	movs	r2, #20
 80828d2:	2100      	movs	r1, #0
 80828d4:	f000 fbbc 	bl	8083050 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80828d8:	4b05      	ldr	r3, [pc, #20]	; (80828f0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80828da:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80828dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80828de:	4b05      	ldr	r3, [pc, #20]	; (80828f4 <_Z19acquireSerialBufferv+0x28>)
 80828e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80828e2:	f240 1301 	movw	r3, #257	; 0x101
 80828e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80828e8:	2381      	movs	r3, #129	; 0x81
 80828ea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80828ec:	bd10      	pop	{r4, pc}
 80828ee:	bf00      	nop
 80828f0:	2000070d 	.word	0x2000070d
 80828f4:	2000068c 	.word	0x2000068c

080828f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80828f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80828fa:	4d0e      	ldr	r5, [pc, #56]	; (8082934 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80828fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80828fe:	a801      	add	r0, sp, #4
 8082900:	f7ff ffe4 	bl	80828cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082904:	6829      	ldr	r1, [r5, #0]
 8082906:	f011 0401 	ands.w	r4, r1, #1
 808290a:	d110      	bne.n	808292e <_Z16_fetch_usbserialv+0x36>
 808290c:	4628      	mov	r0, r5
 808290e:	f7fd fbd3 	bl	80800b8 <__cxa_guard_acquire>
 8082912:	b160      	cbz	r0, 808292e <_Z16_fetch_usbserialv+0x36>
 8082914:	aa01      	add	r2, sp, #4
 8082916:	4621      	mov	r1, r4
 8082918:	4807      	ldr	r0, [pc, #28]	; (8082938 <_Z16_fetch_usbserialv+0x40>)
 808291a:	f7ff ffbb 	bl	8082894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808291e:	4628      	mov	r0, r5
 8082920:	f7fd fbcf 	bl	80800c2 <__cxa_guard_release>
 8082924:	4a05      	ldr	r2, [pc, #20]	; (808293c <_Z16_fetch_usbserialv+0x44>)
 8082926:	4906      	ldr	r1, [pc, #24]	; (8082940 <_Z16_fetch_usbserialv+0x48>)
 8082928:	4803      	ldr	r0, [pc, #12]	; (8082938 <_Z16_fetch_usbserialv+0x40>)
 808292a:	f000 f9f3 	bl	8082d14 <__aeabi_atexit>
	return _usbserial;
}
 808292e:	4802      	ldr	r0, [pc, #8]	; (8082938 <_Z16_fetch_usbserialv+0x40>)
 8082930:	b007      	add	sp, #28
 8082932:	bd30      	pop	{r4, r5, pc}
 8082934:	20000688 	.word	0x20000688
 8082938:	20000810 	.word	0x20000810
 808293c:	20000474 	.word	0x20000474
 8082940:	08082815 	.word	0x08082815

08082944 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082944:	b510      	push	{r4, lr}
 8082946:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082948:	2214      	movs	r2, #20
 808294a:	2100      	movs	r1, #0
 808294c:	f000 fb80 	bl	8083050 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082950:	4b05      	ldr	r3, [pc, #20]	; (8082968 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082952:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082954:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082956:	4b05      	ldr	r3, [pc, #20]	; (808296c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082958:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808295a:	f240 1301 	movw	r3, #257	; 0x101
 808295e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082960:	2381      	movs	r3, #129	; 0x81
 8082962:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082964:	bd10      	pop	{r4, pc}
 8082966:	bf00      	nop
 8082968:	200008c0 	.word	0x200008c0
 808296c:	20000828 	.word	0x20000828

08082970 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082970:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082972:	4c0e      	ldr	r4, [pc, #56]	; (80829ac <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082974:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082976:	a801      	add	r0, sp, #4
 8082978:	f7ff ffe4 	bl	8082944 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808297c:	6823      	ldr	r3, [r4, #0]
 808297e:	07db      	lsls	r3, r3, #31
 8082980:	d410      	bmi.n	80829a4 <_Z17_fetch_usbserial1v+0x34>
 8082982:	4620      	mov	r0, r4
 8082984:	f7fd fb98 	bl	80800b8 <__cxa_guard_acquire>
 8082988:	b160      	cbz	r0, 80829a4 <_Z17_fetch_usbserial1v+0x34>
 808298a:	aa01      	add	r2, sp, #4
 808298c:	2101      	movs	r1, #1
 808298e:	4808      	ldr	r0, [pc, #32]	; (80829b0 <_Z17_fetch_usbserial1v+0x40>)
 8082990:	f7ff ff80 	bl	8082894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082994:	4620      	mov	r0, r4
 8082996:	f7fd fb94 	bl	80800c2 <__cxa_guard_release>
 808299a:	4a06      	ldr	r2, [pc, #24]	; (80829b4 <_Z17_fetch_usbserial1v+0x44>)
 808299c:	4906      	ldr	r1, [pc, #24]	; (80829b8 <_Z17_fetch_usbserial1v+0x48>)
 808299e:	4804      	ldr	r0, [pc, #16]	; (80829b0 <_Z17_fetch_usbserial1v+0x40>)
 80829a0:	f000 f9b8 	bl	8082d14 <__aeabi_atexit>
  return _usbserial1;
}
 80829a4:	4802      	ldr	r0, [pc, #8]	; (80829b0 <_Z17_fetch_usbserial1v+0x40>)
 80829a6:	b006      	add	sp, #24
 80829a8:	bd10      	pop	{r4, pc}
 80829aa:	bf00      	nop
 80829ac:	20000824 	.word	0x20000824
 80829b0:	200008ac 	.word	0x200008ac
 80829b4:	20000474 	.word	0x20000474
 80829b8:	08082815 	.word	0x08082815

080829bc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80829bc:	b510      	push	{r4, lr}
 80829be:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80829c0:	f000 fbb3 	bl	808312a <strlen>
 80829c4:	3801      	subs	r0, #1
 80829c6:	1823      	adds	r3, r4, r0
 80829c8:	4620      	mov	r0, r4
	while(i<j){
 80829ca:	4298      	cmp	r0, r3
 80829cc:	d206      	bcs.n	80829dc <_Z11str_reversePc+0x20>
		c = *i;
 80829ce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80829d0:	7819      	ldrb	r1, [r3, #0]
 80829d2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80829d6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80829da:	e7f6      	b.n	80829ca <_Z11str_reversePc+0xe>
 80829dc:	bd10      	pop	{r4, pc}

080829de <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80829de:	b570      	push	{r4, r5, r6, lr}
 80829e0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80829e2:	1e91      	subs	r1, r2, #2
 80829e4:	2922      	cmp	r1, #34	; 0x22
 80829e6:	d820      	bhi.n	8082a2a <ultoa+0x4c>
 80829e8:	4625      	mov	r5, r4
 80829ea:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80829ec:	b910      	cbnz	r0, 80829f4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80829ee:	4423      	add	r3, r4
            *ptr++ = '0';
 80829f0:	2230      	movs	r2, #48	; 0x30
 80829f2:	e00e      	b.n	8082a12 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80829f4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80829f8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80829fc:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80829fe:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8082a00:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8082a04:	bf94      	ite	ls
 8082a06:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082a08:	3157      	addhi	r1, #87	; 0x57
 8082a0a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8082a0e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082a10:	e7eb      	b.n	80829ea <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082a12:	4299      	cmp	r1, r3
 8082a14:	d202      	bcs.n	8082a1c <ultoa+0x3e>
            *ptr++ = '0';
 8082a16:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082a1a:	e7fa      	b.n	8082a12 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8082a1c:	2300      	movs	r3, #0
	str_reverse(buffer);
 8082a1e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8082a20:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8082a22:	f7ff ffcb 	bl	80829bc <_Z11str_reversePc>
	return buffer;
 8082a26:	4620      	mov	r0, r4
 8082a28:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8082a2a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8082a2c:	bd70      	pop	{r4, r5, r6, pc}

08082a2e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082a2e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082a30:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082a32:	460c      	mov	r4, r1
 8082a34:	4615      	mov	r5, r2
	if(a<0){
 8082a36:	da0b      	bge.n	8082a50 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082a3c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082a40:	bf14      	ite	ne
 8082a42:	4258      	negne	r0, r3
 8082a44:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082a46:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082a48:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8082a4a:	462a      	mov	r2, r5
 8082a4c:	4419      	add	r1, r3
 8082a4e:	e000      	b.n	8082a52 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8082a50:	2301      	movs	r3, #1
 8082a52:	f7ff ffc4 	bl	80829de <ultoa>
	}
	return buffer;
}
 8082a56:	4620      	mov	r0, r4
 8082a58:	bd38      	pop	{r3, r4, r5, pc}
	...

08082a5c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082a5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082a5e:	4b18      	ldr	r3, [pc, #96]	; (8082ac0 <serialEventRun+0x64>)
 8082a60:	b133      	cbz	r3, 8082a70 <serialEventRun+0x14>
 8082a62:	f7ff ff49 	bl	80828f8 <_Z16_fetch_usbserialv>
 8082a66:	6803      	ldr	r3, [r0, #0]
 8082a68:	691b      	ldr	r3, [r3, #16]
 8082a6a:	4798      	blx	r3
 8082a6c:	2800      	cmp	r0, #0
 8082a6e:	dc1e      	bgt.n	8082aae <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082a70:	4b14      	ldr	r3, [pc, #80]	; (8082ac4 <serialEventRun+0x68>)
 8082a72:	b133      	cbz	r3, 8082a82 <serialEventRun+0x26>
 8082a74:	f7ff fea6 	bl	80827c4 <_Z22__fetch_global_Serial1v>
 8082a78:	6803      	ldr	r3, [r0, #0]
 8082a7a:	691b      	ldr	r3, [r3, #16]
 8082a7c:	4798      	blx	r3
 8082a7e:	2800      	cmp	r0, #0
 8082a80:	dc18      	bgt.n	8082ab4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082a82:	4b11      	ldr	r3, [pc, #68]	; (8082ac8 <serialEventRun+0x6c>)
 8082a84:	b10b      	cbz	r3, 8082a8a <serialEventRun+0x2e>
 8082a86:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082a8a:	4b10      	ldr	r3, [pc, #64]	; (8082acc <serialEventRun+0x70>)
 8082a8c:	b10b      	cbz	r3, 8082a92 <serialEventRun+0x36>
 8082a8e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082a92:	4b0f      	ldr	r3, [pc, #60]	; (8082ad0 <serialEventRun+0x74>)
 8082a94:	b10b      	cbz	r3, 8082a9a <serialEventRun+0x3e>
 8082a96:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082a9a:	4b0e      	ldr	r3, [pc, #56]	; (8082ad4 <serialEventRun+0x78>)
 8082a9c:	b17b      	cbz	r3, 8082abe <serialEventRun+0x62>
 8082a9e:	f7ff ff67 	bl	8082970 <_Z17_fetch_usbserial1v>
 8082aa2:	6803      	ldr	r3, [r0, #0]
 8082aa4:	691b      	ldr	r3, [r3, #16]
 8082aa6:	4798      	blx	r3
 8082aa8:	2800      	cmp	r0, #0
 8082aaa:	dc06      	bgt.n	8082aba <serialEventRun+0x5e>
 8082aac:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082aae:	f3af 8000 	nop.w
 8082ab2:	e7dd      	b.n	8082a70 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082ab4:	f3af 8000 	nop.w
 8082ab8:	e7e3      	b.n	8082a82 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082aba:	f3af 8000 	nop.w
 8082abe:	bd08      	pop	{r3, pc}
	...

08082ad8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082ad8:	b508      	push	{r3, lr}
	serialEventRun();
 8082ada:	f7ff ffbf 	bl	8082a5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082ade:	f7fd fcaf 	bl	8080440 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082ae2:	4b01      	ldr	r3, [pc, #4]	; (8082ae8 <_post_loop+0x10>)
 8082ae4:	6018      	str	r0, [r3, #0]
 8082ae6:	bd08      	pop	{r3, pc}
 8082ae8:	200009cc 	.word	0x200009cc

08082aec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082aec:	4802      	ldr	r0, [pc, #8]	; (8082af8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082aee:	4a03      	ldr	r2, [pc, #12]	; (8082afc <_Z33system_initialize_user_backup_ramv+0x10>)
 8082af0:	4903      	ldr	r1, [pc, #12]	; (8082b00 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082af2:	1a12      	subs	r2, r2, r0
 8082af4:	f000 ba86 	b.w	8083004 <memcpy>
 8082af8:	40024000 	.word	0x40024000
 8082afc:	40024004 	.word	0x40024004
 8082b00:	08083780 	.word	0x08083780

08082b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082b04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082b06:	2300      	movs	r3, #0
 8082b08:	9300      	str	r3, [sp, #0]
 8082b0a:	461a      	mov	r2, r3
 8082b0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082b10:	f7fd fde0 	bl	80806d4 <system_ctrl_set_result>
}
 8082b14:	b003      	add	sp, #12
 8082b16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082b1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082b1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082b1e:	8843      	ldrh	r3, [r0, #2]
 8082b20:	2b0a      	cmp	r3, #10
 8082b22:	d008      	beq.n	8082b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082b24:	2b50      	cmp	r3, #80	; 0x50
 8082b26:	d109      	bne.n	8082b3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082b28:	4b09      	ldr	r3, [pc, #36]	; (8082b50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082b2a:	681b      	ldr	r3, [r3, #0]
 8082b2c:	b13b      	cbz	r3, 8082b3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082b2e:	b003      	add	sp, #12
 8082b30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082b34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082b36:	f7ff ffe5 	bl	8082b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082b3a:	e006      	b.n	8082b4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082b3c:	2300      	movs	r3, #0
 8082b3e:	9300      	str	r3, [sp, #0]
 8082b40:	461a      	mov	r2, r3
 8082b42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082b46:	f7fd fdc5 	bl	80806d4 <system_ctrl_set_result>
        break;
    }
}
 8082b4a:	b003      	add	sp, #12
 8082b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8082b50:	200009c4 	.word	0x200009c4

08082b54 <module_user_init_hook>:

void module_user_init_hook()
{
 8082b54:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082b56:	4c10      	ldr	r4, [pc, #64]	; (8082b98 <module_user_init_hook+0x44>)
 8082b58:	4d10      	ldr	r5, [pc, #64]	; (8082b9c <module_user_init_hook+0x48>)
 8082b5a:	6823      	ldr	r3, [r4, #0]
 8082b5c:	42ab      	cmp	r3, r5
 8082b5e:	4b10      	ldr	r3, [pc, #64]	; (8082ba0 <module_user_init_hook+0x4c>)
 8082b60:	bf0c      	ite	eq
 8082b62:	2201      	moveq	r2, #1
 8082b64:	2200      	movne	r2, #0
 8082b66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082b68:	d002      	beq.n	8082b70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8082b6a:	f7ff ffbf 	bl	8082aec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082b6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082b70:	f7fd fc56 	bl	8080420 <HAL_RNG_GetRandomNumber>
 8082b74:	4604      	mov	r4, r0
    srand(seed);
 8082b76:	f000 fa73 	bl	8083060 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082b7a:	4b0a      	ldr	r3, [pc, #40]	; (8082ba4 <module_user_init_hook+0x50>)
 8082b7c:	b113      	cbz	r3, 8082b84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8082b7e:	4620      	mov	r0, r4
 8082b80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082b84:	2100      	movs	r1, #0
 8082b86:	4807      	ldr	r0, [pc, #28]	; (8082ba4 <module_user_init_hook+0x50>)
 8082b88:	f7fd fdce 	bl	8080728 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082b90:	2100      	movs	r1, #0
 8082b92:	4805      	ldr	r0, [pc, #20]	; (8082ba8 <module_user_init_hook+0x54>)
 8082b94:	f7fd bd94 	b.w	80806c0 <system_ctrl_set_app_request_handler>
 8082b98:	40024000 	.word	0x40024000
 8082b9c:	9a271c1e 	.word	0x9a271c1e
 8082ba0:	200009c8 	.word	0x200009c8
 8082ba4:	00000000 	.word	0x00000000
 8082ba8:	08082b1d 	.word	0x08082b1d

08082bac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082bac:	b510      	push	{r4, lr}
 8082bae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082bb0:	480f      	ldr	r0, [pc, #60]	; (8082bf0 <pinAvailable+0x44>)
 8082bb2:	f7ff fcf3 	bl	808259c <_ZN8SPIClass9isEnabledEv>
 8082bb6:	b128      	cbz	r0, 8082bc4 <pinAvailable+0x18>
 8082bb8:	f1a4 030d 	sub.w	r3, r4, #13
 8082bbc:	2b02      	cmp	r3, #2
 8082bbe:	d801      	bhi.n	8082bc4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082bc0:	2000      	movs	r0, #0
 8082bc2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082bc4:	f000 f840 	bl	8082c48 <_Z19__fetch_global_Wirev>
 8082bc8:	f7fe f9c4 	bl	8080f54 <_ZN7TwoWire9isEnabledEv>
 8082bcc:	b108      	cbz	r0, 8082bd2 <pinAvailable+0x26>
 8082bce:	2c01      	cmp	r4, #1
 8082bd0:	d9f6      	bls.n	8082bc0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082bd2:	f7ff fdf7 	bl	80827c4 <_Z22__fetch_global_Serial1v>
 8082bd6:	f7ff fdf1 	bl	80827bc <_ZN11USARTSerial9isEnabledEv>
 8082bda:	b118      	cbz	r0, 8082be4 <pinAvailable+0x38>
 8082bdc:	f1a4 0312 	sub.w	r3, r4, #18
 8082be0:	2b01      	cmp	r3, #1
 8082be2:	d9ed      	bls.n	8082bc0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082be4:	2c2e      	cmp	r4, #46	; 0x2e
 8082be6:	bf8c      	ite	hi
 8082be8:	2000      	movhi	r0, #0
 8082bea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082bec:	bd10      	pop	{r4, pc}
 8082bee:	bf00      	nop
 8082bf0:	200009f0 	.word	0x200009f0

08082bf4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082bf4:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082bf6:	b538      	push	{r3, r4, r5, lr}
 8082bf8:	4604      	mov	r4, r0
 8082bfa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082bfc:	d80a      	bhi.n	8082c14 <pinMode+0x20>
 8082bfe:	29ff      	cmp	r1, #255	; 0xff
 8082c00:	d008      	beq.n	8082c14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082c02:	f7ff ffd3 	bl	8082bac <pinAvailable>
 8082c06:	b128      	cbz	r0, 8082c14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082c08:	4629      	mov	r1, r5
 8082c0a:	4620      	mov	r0, r4
}
 8082c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082c10:	f7fd bc26 	b.w	8080460 <HAL_Pin_Mode>
 8082c14:	bd38      	pop	{r3, r4, r5, pc}

08082c16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082c16:	b538      	push	{r3, r4, r5, lr}
 8082c18:	4604      	mov	r4, r0
 8082c1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082c1c:	f7fd fc28 	bl	8080470 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082c20:	28ff      	cmp	r0, #255	; 0xff
 8082c22:	d010      	beq.n	8082c46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082c24:	2806      	cmp	r0, #6
 8082c26:	d804      	bhi.n	8082c32 <digitalWrite+0x1c>
 8082c28:	234d      	movs	r3, #77	; 0x4d
 8082c2a:	fa23 f000 	lsr.w	r0, r3, r0
 8082c2e:	07c3      	lsls	r3, r0, #31
 8082c30:	d409      	bmi.n	8082c46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082c32:	4620      	mov	r0, r4
 8082c34:	f7ff ffba 	bl	8082bac <pinAvailable>
 8082c38:	b128      	cbz	r0, 8082c46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082c3a:	4629      	mov	r1, r5
 8082c3c:	4620      	mov	r0, r4
}
 8082c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082c42:	f7fd bc1d 	b.w	8080480 <HAL_GPIO_Write>
 8082c46:	bd38      	pop	{r3, r4, r5, pc}

08082c48 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8082c48:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8082c4a:	4d0b      	ldr	r5, [pc, #44]	; (8082c78 <_Z19__fetch_global_Wirev+0x30>)
 8082c4c:	6829      	ldr	r1, [r5, #0]
 8082c4e:	f011 0401 	ands.w	r4, r1, #1
 8082c52:	d10f      	bne.n	8082c74 <_Z19__fetch_global_Wirev+0x2c>
 8082c54:	4628      	mov	r0, r5
 8082c56:	f7fd fa2f 	bl	80800b8 <__cxa_guard_acquire>
 8082c5a:	b158      	cbz	r0, 8082c74 <_Z19__fetch_global_Wirev+0x2c>
 8082c5c:	4621      	mov	r1, r4
 8082c5e:	4807      	ldr	r0, [pc, #28]	; (8082c7c <_Z19__fetch_global_Wirev+0x34>)
 8082c60:	f7fe f966 	bl	8080f30 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8082c64:	4628      	mov	r0, r5
 8082c66:	f7fd fa2c 	bl	80800c2 <__cxa_guard_release>
 8082c6a:	4a05      	ldr	r2, [pc, #20]	; (8082c80 <_Z19__fetch_global_Wirev+0x38>)
 8082c6c:	4905      	ldr	r1, [pc, #20]	; (8082c84 <_Z19__fetch_global_Wirev+0x3c>)
 8082c6e:	4803      	ldr	r0, [pc, #12]	; (8082c7c <_Z19__fetch_global_Wirev+0x34>)
 8082c70:	f000 f850 	bl	8082d14 <__aeabi_atexit>
	return wire;
}
 8082c74:	4801      	ldr	r0, [pc, #4]	; (8082c7c <_Z19__fetch_global_Wirev+0x34>)
 8082c76:	bd38      	pop	{r3, r4, r5, pc}
 8082c78:	200009d0 	.word	0x200009d0
 8082c7c:	200009d4 	.word	0x200009d4
 8082c80:	20000474 	.word	0x20000474
 8082c84:	08080ed9 	.word	0x08080ed9

08082c88 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082c88:	b513      	push	{r0, r1, r4, lr}
 8082c8a:	4c08      	ldr	r4, [pc, #32]	; (8082cac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082c8c:	2300      	movs	r3, #0
 8082c8e:	461a      	mov	r2, r3
 8082c90:	4619      	mov	r1, r3
 8082c92:	9300      	str	r3, [sp, #0]
 8082c94:	4620      	mov	r0, r4
 8082c96:	f7fe f9a5 	bl	8080fe4 <_ZN9IPAddressC1Ehhhh>
 8082c9a:	4620      	mov	r0, r4
 8082c9c:	4a04      	ldr	r2, [pc, #16]	; (8082cb0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082c9e:	4905      	ldr	r1, [pc, #20]	; (8082cb4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082ca0:	b002      	add	sp, #8
 8082ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082ca6:	f000 b835 	b.w	8082d14 <__aeabi_atexit>
 8082caa:	bf00      	nop
 8082cac:	200009e8 	.word	0x200009e8
 8082cb0:	20000474 	.word	0x20000474
 8082cb4:	08080f5d 	.word	0x08080f5d

08082cb8 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082cb8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082cba:	4e11      	ldr	r6, [pc, #68]	; (8082d00 <_GLOBAL__sub_I_SPI+0x48>)
 8082cbc:	4d11      	ldr	r5, [pc, #68]	; (8082d04 <_GLOBAL__sub_I_SPI+0x4c>)
 8082cbe:	4c12      	ldr	r4, [pc, #72]	; (8082d08 <_GLOBAL__sub_I_SPI+0x50>)
 8082cc0:	2100      	movs	r1, #0
 8082cc2:	4630      	mov	r0, r6
 8082cc4:	f7ff fc56 	bl	8082574 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082cc8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082cca:	4e10      	ldr	r6, [pc, #64]	; (8082d0c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082ccc:	462a      	mov	r2, r5
 8082cce:	4621      	mov	r1, r4
 8082cd0:	f000 f820 	bl	8082d14 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082cd4:	2101      	movs	r1, #1
 8082cd6:	4630      	mov	r0, r6
 8082cd8:	f7ff fc4c 	bl	8082574 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082cdc:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082cde:	4e0c      	ldr	r6, [pc, #48]	; (8082d10 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082ce0:	462a      	mov	r2, r5
 8082ce2:	4621      	mov	r1, r4
 8082ce4:	f000 f816 	bl	8082d14 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082ce8:	2102      	movs	r1, #2
 8082cea:	4630      	mov	r0, r6
 8082cec:	f7ff fc42 	bl	8082574 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082cf0:	462a      	mov	r2, r5
 8082cf2:	4621      	mov	r1, r4
 8082cf4:	4630      	mov	r0, r6
 8082cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8082cfa:	f000 b80b 	b.w	8082d14 <__aeabi_atexit>
 8082cfe:	bf00      	nop
 8082d00:	200009f0 	.word	0x200009f0
 8082d04:	20000474 	.word	0x20000474
 8082d08:	08082565 	.word	0x08082565
 8082d0c:	20000a00 	.word	0x20000a00
 8082d10:	20000a10 	.word	0x20000a10

08082d14 <__aeabi_atexit>:
 8082d14:	460b      	mov	r3, r1
 8082d16:	4601      	mov	r1, r0
 8082d18:	4618      	mov	r0, r3
 8082d1a:	f000 b965 	b.w	8082fe8 <__cxa_atexit>

08082d1e <_ZdlPvj>:
 8082d1e:	f7fd b9be 	b.w	808009e <_ZdlPv>
	...

08082d24 <_ZSt15get_new_handlerv>:
 8082d24:	4b02      	ldr	r3, [pc, #8]	; (8082d30 <_ZSt15get_new_handlerv+0xc>)
 8082d26:	6818      	ldr	r0, [r3, #0]
 8082d28:	f3bf 8f5f 	dmb	sy
 8082d2c:	4770      	bx	lr
 8082d2e:	bf00      	nop
 8082d30:	20000a20 	.word	0x20000a20

08082d34 <_ZnwjRKSt9nothrow_t>:
 8082d34:	b510      	push	{r4, lr}
 8082d36:	2800      	cmp	r0, #0
 8082d38:	bf14      	ite	ne
 8082d3a:	4604      	movne	r4, r0
 8082d3c:	2401      	moveq	r4, #1
 8082d3e:	4620      	mov	r0, r4
 8082d40:	f7fd fd4a 	bl	80807d8 <malloc>
 8082d44:	b920      	cbnz	r0, 8082d50 <_ZnwjRKSt9nothrow_t+0x1c>
 8082d46:	f7ff ffed 	bl	8082d24 <_ZSt15get_new_handlerv>
 8082d4a:	b108      	cbz	r0, 8082d50 <_ZnwjRKSt9nothrow_t+0x1c>
 8082d4c:	4780      	blx	r0
 8082d4e:	e7f6      	b.n	8082d3e <_ZnwjRKSt9nothrow_t+0xa>
 8082d50:	bd10      	pop	{r4, pc}

08082d52 <_ZSt25__throw_bad_function_callv>:
 8082d52:	b508      	push	{r3, lr}
 8082d54:	f7fd fd60 	bl	8080818 <abort>

08082d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082d58:	4b24      	ldr	r3, [pc, #144]	; (8082dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8082d5a:	681a      	ldr	r2, [r3, #0]
 8082d5c:	07d0      	lsls	r0, r2, #31
 8082d5e:	bf5c      	itt	pl
 8082d60:	2201      	movpl	r2, #1
 8082d62:	601a      	strpl	r2, [r3, #0]
 8082d64:	4b22      	ldr	r3, [pc, #136]	; (8082df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082d66:	681a      	ldr	r2, [r3, #0]
 8082d68:	07d1      	lsls	r1, r2, #31
 8082d6a:	bf5c      	itt	pl
 8082d6c:	2201      	movpl	r2, #1
 8082d6e:	601a      	strpl	r2, [r3, #0]
 8082d70:	4b20      	ldr	r3, [pc, #128]	; (8082df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082d72:	681a      	ldr	r2, [r3, #0]
 8082d74:	07d2      	lsls	r2, r2, #31
 8082d76:	bf5c      	itt	pl
 8082d78:	2201      	movpl	r2, #1
 8082d7a:	601a      	strpl	r2, [r3, #0]
 8082d7c:	4b1e      	ldr	r3, [pc, #120]	; (8082df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8082d7e:	681a      	ldr	r2, [r3, #0]
 8082d80:	07d0      	lsls	r0, r2, #31
 8082d82:	bf5c      	itt	pl
 8082d84:	2201      	movpl	r2, #1
 8082d86:	601a      	strpl	r2, [r3, #0]
 8082d88:	4b1c      	ldr	r3, [pc, #112]	; (8082dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8082d8a:	681a      	ldr	r2, [r3, #0]
 8082d8c:	07d1      	lsls	r1, r2, #31
 8082d8e:	bf5c      	itt	pl
 8082d90:	2201      	movpl	r2, #1
 8082d92:	601a      	strpl	r2, [r3, #0]
 8082d94:	4b1a      	ldr	r3, [pc, #104]	; (8082e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8082d96:	681a      	ldr	r2, [r3, #0]
 8082d98:	07d2      	lsls	r2, r2, #31
 8082d9a:	bf5c      	itt	pl
 8082d9c:	2201      	movpl	r2, #1
 8082d9e:	601a      	strpl	r2, [r3, #0]
 8082da0:	4b18      	ldr	r3, [pc, #96]	; (8082e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8082da2:	681a      	ldr	r2, [r3, #0]
 8082da4:	07d0      	lsls	r0, r2, #31
 8082da6:	bf5c      	itt	pl
 8082da8:	2201      	movpl	r2, #1
 8082daa:	601a      	strpl	r2, [r3, #0]
 8082dac:	4b16      	ldr	r3, [pc, #88]	; (8082e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8082dae:	681a      	ldr	r2, [r3, #0]
 8082db0:	07d1      	lsls	r1, r2, #31
 8082db2:	bf5c      	itt	pl
 8082db4:	2201      	movpl	r2, #1
 8082db6:	601a      	strpl	r2, [r3, #0]
 8082db8:	4b14      	ldr	r3, [pc, #80]	; (8082e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8082dba:	681a      	ldr	r2, [r3, #0]
 8082dbc:	07d2      	lsls	r2, r2, #31
 8082dbe:	bf5c      	itt	pl
 8082dc0:	2201      	movpl	r2, #1
 8082dc2:	601a      	strpl	r2, [r3, #0]
 8082dc4:	4b12      	ldr	r3, [pc, #72]	; (8082e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082dc6:	681a      	ldr	r2, [r3, #0]
 8082dc8:	07d0      	lsls	r0, r2, #31
 8082dca:	bf5c      	itt	pl
 8082dcc:	2201      	movpl	r2, #1
 8082dce:	601a      	strpl	r2, [r3, #0]
 8082dd0:	4b10      	ldr	r3, [pc, #64]	; (8082e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082dd2:	681a      	ldr	r2, [r3, #0]
 8082dd4:	07d1      	lsls	r1, r2, #31
 8082dd6:	bf5c      	itt	pl
 8082dd8:	2201      	movpl	r2, #1
 8082dda:	601a      	strpl	r2, [r3, #0]
 8082ddc:	4b0e      	ldr	r3, [pc, #56]	; (8082e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8082dde:	681a      	ldr	r2, [r3, #0]
 8082de0:	07d2      	lsls	r2, r2, #31
 8082de2:	bf5c      	itt	pl
 8082de4:	2201      	movpl	r2, #1
 8082de6:	601a      	strpl	r2, [r3, #0]
 8082de8:	4770      	bx	lr
 8082dea:	bf00      	nop
 8082dec:	20000a50 	.word	0x20000a50
 8082df0:	20000a4c 	.word	0x20000a4c
 8082df4:	20000a48 	.word	0x20000a48
 8082df8:	20000a44 	.word	0x20000a44
 8082dfc:	20000a40 	.word	0x20000a40
 8082e00:	20000a3c 	.word	0x20000a3c
 8082e04:	20000a38 	.word	0x20000a38
 8082e08:	20000a34 	.word	0x20000a34
 8082e0c:	20000a30 	.word	0x20000a30
 8082e10:	20000a2c 	.word	0x20000a2c
 8082e14:	20000a28 	.word	0x20000a28
 8082e18:	20000a24 	.word	0x20000a24

08082e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082e1c:	4b18      	ldr	r3, [pc, #96]	; (8082e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082e1e:	681a      	ldr	r2, [r3, #0]
 8082e20:	07d1      	lsls	r1, r2, #31
 8082e22:	bf5c      	itt	pl
 8082e24:	2201      	movpl	r2, #1
 8082e26:	601a      	strpl	r2, [r3, #0]
 8082e28:	4b16      	ldr	r3, [pc, #88]	; (8082e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082e2a:	681a      	ldr	r2, [r3, #0]
 8082e2c:	07d2      	lsls	r2, r2, #31
 8082e2e:	bf5c      	itt	pl
 8082e30:	2201      	movpl	r2, #1
 8082e32:	601a      	strpl	r2, [r3, #0]
 8082e34:	4b14      	ldr	r3, [pc, #80]	; (8082e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082e36:	681a      	ldr	r2, [r3, #0]
 8082e38:	07d0      	lsls	r0, r2, #31
 8082e3a:	bf5c      	itt	pl
 8082e3c:	2201      	movpl	r2, #1
 8082e3e:	601a      	strpl	r2, [r3, #0]
 8082e40:	4b12      	ldr	r3, [pc, #72]	; (8082e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082e42:	681a      	ldr	r2, [r3, #0]
 8082e44:	07d1      	lsls	r1, r2, #31
 8082e46:	bf5c      	itt	pl
 8082e48:	2201      	movpl	r2, #1
 8082e4a:	601a      	strpl	r2, [r3, #0]
 8082e4c:	4b10      	ldr	r3, [pc, #64]	; (8082e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082e4e:	681a      	ldr	r2, [r3, #0]
 8082e50:	07d2      	lsls	r2, r2, #31
 8082e52:	bf5c      	itt	pl
 8082e54:	2201      	movpl	r2, #1
 8082e56:	601a      	strpl	r2, [r3, #0]
 8082e58:	4b0e      	ldr	r3, [pc, #56]	; (8082e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082e5a:	681a      	ldr	r2, [r3, #0]
 8082e5c:	07d0      	lsls	r0, r2, #31
 8082e5e:	bf5c      	itt	pl
 8082e60:	2201      	movpl	r2, #1
 8082e62:	601a      	strpl	r2, [r3, #0]
 8082e64:	4b0c      	ldr	r3, [pc, #48]	; (8082e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082e66:	681a      	ldr	r2, [r3, #0]
 8082e68:	07d1      	lsls	r1, r2, #31
 8082e6a:	bf5c      	itt	pl
 8082e6c:	2201      	movpl	r2, #1
 8082e6e:	601a      	strpl	r2, [r3, #0]
 8082e70:	4b0a      	ldr	r3, [pc, #40]	; (8082e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082e72:	681a      	ldr	r2, [r3, #0]
 8082e74:	07d2      	lsls	r2, r2, #31
 8082e76:	bf5c      	itt	pl
 8082e78:	2201      	movpl	r2, #1
 8082e7a:	601a      	strpl	r2, [r3, #0]
 8082e7c:	4770      	bx	lr
 8082e7e:	bf00      	nop
 8082e80:	20000a70 	.word	0x20000a70
 8082e84:	20000a6c 	.word	0x20000a6c
 8082e88:	20000a68 	.word	0x20000a68
 8082e8c:	20000a64 	.word	0x20000a64
 8082e90:	20000a60 	.word	0x20000a60
 8082e94:	20000a5c 	.word	0x20000a5c
 8082e98:	20000a58 	.word	0x20000a58
 8082e9c:	20000a54 	.word	0x20000a54

08082ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8082ea0:	4b18      	ldr	r3, [pc, #96]	; (8082f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8082ea2:	681a      	ldr	r2, [r3, #0]
 8082ea4:	07d1      	lsls	r1, r2, #31
 8082ea6:	bf5c      	itt	pl
 8082ea8:	2201      	movpl	r2, #1
 8082eaa:	601a      	strpl	r2, [r3, #0]
 8082eac:	4b16      	ldr	r3, [pc, #88]	; (8082f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8082eae:	681a      	ldr	r2, [r3, #0]
 8082eb0:	07d2      	lsls	r2, r2, #31
 8082eb2:	bf5c      	itt	pl
 8082eb4:	2201      	movpl	r2, #1
 8082eb6:	601a      	strpl	r2, [r3, #0]
 8082eb8:	4b14      	ldr	r3, [pc, #80]	; (8082f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082eba:	681a      	ldr	r2, [r3, #0]
 8082ebc:	07d0      	lsls	r0, r2, #31
 8082ebe:	bf5c      	itt	pl
 8082ec0:	2201      	movpl	r2, #1
 8082ec2:	601a      	strpl	r2, [r3, #0]
 8082ec4:	4b12      	ldr	r3, [pc, #72]	; (8082f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082ec6:	681a      	ldr	r2, [r3, #0]
 8082ec8:	07d1      	lsls	r1, r2, #31
 8082eca:	bf5c      	itt	pl
 8082ecc:	2201      	movpl	r2, #1
 8082ece:	601a      	strpl	r2, [r3, #0]
 8082ed0:	4b10      	ldr	r3, [pc, #64]	; (8082f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082ed2:	681a      	ldr	r2, [r3, #0]
 8082ed4:	07d2      	lsls	r2, r2, #31
 8082ed6:	bf5c      	itt	pl
 8082ed8:	2201      	movpl	r2, #1
 8082eda:	601a      	strpl	r2, [r3, #0]
 8082edc:	4b0e      	ldr	r3, [pc, #56]	; (8082f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082ede:	681a      	ldr	r2, [r3, #0]
 8082ee0:	07d0      	lsls	r0, r2, #31
 8082ee2:	bf5c      	itt	pl
 8082ee4:	2201      	movpl	r2, #1
 8082ee6:	601a      	strpl	r2, [r3, #0]
 8082ee8:	4b0c      	ldr	r3, [pc, #48]	; (8082f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082eea:	681a      	ldr	r2, [r3, #0]
 8082eec:	07d1      	lsls	r1, r2, #31
 8082eee:	bf5c      	itt	pl
 8082ef0:	2201      	movpl	r2, #1
 8082ef2:	601a      	strpl	r2, [r3, #0]
 8082ef4:	4b0a      	ldr	r3, [pc, #40]	; (8082f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082ef6:	681a      	ldr	r2, [r3, #0]
 8082ef8:	07d2      	lsls	r2, r2, #31
 8082efa:	bf5c      	itt	pl
 8082efc:	2201      	movpl	r2, #1
 8082efe:	601a      	strpl	r2, [r3, #0]
 8082f00:	4770      	bx	lr
 8082f02:	bf00      	nop
 8082f04:	20000a90 	.word	0x20000a90
 8082f08:	20000a8c 	.word	0x20000a8c
 8082f0c:	20000a88 	.word	0x20000a88
 8082f10:	20000a84 	.word	0x20000a84
 8082f14:	20000a80 	.word	0x20000a80
 8082f18:	20000a7c 	.word	0x20000a7c
 8082f1c:	20000a78 	.word	0x20000a78
 8082f20:	20000a74 	.word	0x20000a74

08082f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082f24:	4b24      	ldr	r3, [pc, #144]	; (8082fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082f26:	681a      	ldr	r2, [r3, #0]
 8082f28:	07d0      	lsls	r0, r2, #31
 8082f2a:	bf5c      	itt	pl
 8082f2c:	2201      	movpl	r2, #1
 8082f2e:	601a      	strpl	r2, [r3, #0]
 8082f30:	4b22      	ldr	r3, [pc, #136]	; (8082fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082f32:	681a      	ldr	r2, [r3, #0]
 8082f34:	07d1      	lsls	r1, r2, #31
 8082f36:	bf5c      	itt	pl
 8082f38:	2201      	movpl	r2, #1
 8082f3a:	601a      	strpl	r2, [r3, #0]
 8082f3c:	4b20      	ldr	r3, [pc, #128]	; (8082fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8082f3e:	681a      	ldr	r2, [r3, #0]
 8082f40:	07d2      	lsls	r2, r2, #31
 8082f42:	bf5c      	itt	pl
 8082f44:	2201      	movpl	r2, #1
 8082f46:	601a      	strpl	r2, [r3, #0]
 8082f48:	4b1e      	ldr	r3, [pc, #120]	; (8082fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082f4a:	681a      	ldr	r2, [r3, #0]
 8082f4c:	07d0      	lsls	r0, r2, #31
 8082f4e:	bf5c      	itt	pl
 8082f50:	2201      	movpl	r2, #1
 8082f52:	601a      	strpl	r2, [r3, #0]
 8082f54:	4b1c      	ldr	r3, [pc, #112]	; (8082fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082f56:	681a      	ldr	r2, [r3, #0]
 8082f58:	07d1      	lsls	r1, r2, #31
 8082f5a:	bf5c      	itt	pl
 8082f5c:	2201      	movpl	r2, #1
 8082f5e:	601a      	strpl	r2, [r3, #0]
 8082f60:	4b1a      	ldr	r3, [pc, #104]	; (8082fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8082f62:	681a      	ldr	r2, [r3, #0]
 8082f64:	07d2      	lsls	r2, r2, #31
 8082f66:	bf5c      	itt	pl
 8082f68:	2201      	movpl	r2, #1
 8082f6a:	601a      	strpl	r2, [r3, #0]
 8082f6c:	4b18      	ldr	r3, [pc, #96]	; (8082fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082f6e:	681a      	ldr	r2, [r3, #0]
 8082f70:	07d0      	lsls	r0, r2, #31
 8082f72:	bf5c      	itt	pl
 8082f74:	2201      	movpl	r2, #1
 8082f76:	601a      	strpl	r2, [r3, #0]
 8082f78:	4b16      	ldr	r3, [pc, #88]	; (8082fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082f7a:	681a      	ldr	r2, [r3, #0]
 8082f7c:	07d1      	lsls	r1, r2, #31
 8082f7e:	bf5c      	itt	pl
 8082f80:	2201      	movpl	r2, #1
 8082f82:	601a      	strpl	r2, [r3, #0]
 8082f84:	4b14      	ldr	r3, [pc, #80]	; (8082fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8082f86:	681a      	ldr	r2, [r3, #0]
 8082f88:	07d2      	lsls	r2, r2, #31
 8082f8a:	bf5c      	itt	pl
 8082f8c:	2201      	movpl	r2, #1
 8082f8e:	601a      	strpl	r2, [r3, #0]
 8082f90:	4b12      	ldr	r3, [pc, #72]	; (8082fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8082f92:	681a      	ldr	r2, [r3, #0]
 8082f94:	07d0      	lsls	r0, r2, #31
 8082f96:	bf5c      	itt	pl
 8082f98:	2201      	movpl	r2, #1
 8082f9a:	601a      	strpl	r2, [r3, #0]
 8082f9c:	4b10      	ldr	r3, [pc, #64]	; (8082fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8082f9e:	681a      	ldr	r2, [r3, #0]
 8082fa0:	07d1      	lsls	r1, r2, #31
 8082fa2:	bf5c      	itt	pl
 8082fa4:	2201      	movpl	r2, #1
 8082fa6:	601a      	strpl	r2, [r3, #0]
 8082fa8:	4b0e      	ldr	r3, [pc, #56]	; (8082fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8082faa:	681a      	ldr	r2, [r3, #0]
 8082fac:	07d2      	lsls	r2, r2, #31
 8082fae:	bf5c      	itt	pl
 8082fb0:	2201      	movpl	r2, #1
 8082fb2:	601a      	strpl	r2, [r3, #0]
 8082fb4:	4770      	bx	lr
 8082fb6:	bf00      	nop
 8082fb8:	20000ac0 	.word	0x20000ac0
 8082fbc:	20000abc 	.word	0x20000abc
 8082fc0:	20000ab8 	.word	0x20000ab8
 8082fc4:	20000ab4 	.word	0x20000ab4
 8082fc8:	20000ab0 	.word	0x20000ab0
 8082fcc:	20000aac 	.word	0x20000aac
 8082fd0:	20000aa8 	.word	0x20000aa8
 8082fd4:	20000aa4 	.word	0x20000aa4
 8082fd8:	20000aa0 	.word	0x20000aa0
 8082fdc:	20000a9c 	.word	0x20000a9c
 8082fe0:	20000a98 	.word	0x20000a98
 8082fe4:	20000a94 	.word	0x20000a94

08082fe8 <__cxa_atexit>:
 8082fe8:	b510      	push	{r4, lr}
 8082fea:	4c05      	ldr	r4, [pc, #20]	; (8083000 <__cxa_atexit+0x18>)
 8082fec:	4613      	mov	r3, r2
 8082fee:	b12c      	cbz	r4, 8082ffc <__cxa_atexit+0x14>
 8082ff0:	460a      	mov	r2, r1
 8082ff2:	4601      	mov	r1, r0
 8082ff4:	2002      	movs	r0, #2
 8082ff6:	f3af 8000 	nop.w
 8082ffa:	bd10      	pop	{r4, pc}
 8082ffc:	4620      	mov	r0, r4
 8082ffe:	bd10      	pop	{r4, pc}
 8083000:	00000000 	.word	0x00000000

08083004 <memcpy>:
 8083004:	b510      	push	{r4, lr}
 8083006:	1e43      	subs	r3, r0, #1
 8083008:	440a      	add	r2, r1
 808300a:	4291      	cmp	r1, r2
 808300c:	d004      	beq.n	8083018 <memcpy+0x14>
 808300e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083016:	e7f8      	b.n	808300a <memcpy+0x6>
 8083018:	bd10      	pop	{r4, pc}

0808301a <memmove>:
 808301a:	4288      	cmp	r0, r1
 808301c:	b510      	push	{r4, lr}
 808301e:	eb01 0302 	add.w	r3, r1, r2
 8083022:	d801      	bhi.n	8083028 <memmove+0xe>
 8083024:	1e42      	subs	r2, r0, #1
 8083026:	e00b      	b.n	8083040 <memmove+0x26>
 8083028:	4298      	cmp	r0, r3
 808302a:	d2fb      	bcs.n	8083024 <memmove+0xa>
 808302c:	1881      	adds	r1, r0, r2
 808302e:	1ad2      	subs	r2, r2, r3
 8083030:	42d3      	cmn	r3, r2
 8083032:	d004      	beq.n	808303e <memmove+0x24>
 8083034:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8083038:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808303c:	e7f8      	b.n	8083030 <memmove+0x16>
 808303e:	bd10      	pop	{r4, pc}
 8083040:	4299      	cmp	r1, r3
 8083042:	d004      	beq.n	808304e <memmove+0x34>
 8083044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083048:	f802 4f01 	strb.w	r4, [r2, #1]!
 808304c:	e7f8      	b.n	8083040 <memmove+0x26>
 808304e:	bd10      	pop	{r4, pc}

08083050 <memset>:
 8083050:	4603      	mov	r3, r0
 8083052:	4402      	add	r2, r0
 8083054:	4293      	cmp	r3, r2
 8083056:	d002      	beq.n	808305e <memset+0xe>
 8083058:	f803 1b01 	strb.w	r1, [r3], #1
 808305c:	e7fa      	b.n	8083054 <memset+0x4>
 808305e:	4770      	bx	lr

08083060 <srand>:
 8083060:	b538      	push	{r3, r4, r5, lr}
 8083062:	4b12      	ldr	r3, [pc, #72]	; (80830ac <srand+0x4c>)
 8083064:	4605      	mov	r5, r0
 8083066:	681c      	ldr	r4, [r3, #0]
 8083068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808306a:	b9d3      	cbnz	r3, 80830a2 <srand+0x42>
 808306c:	2018      	movs	r0, #24
 808306e:	f7fd fbb3 	bl	80807d8 <malloc>
 8083072:	f243 330e 	movw	r3, #13070	; 0x330e
 8083076:	63a0      	str	r0, [r4, #56]	; 0x38
 8083078:	8003      	strh	r3, [r0, #0]
 808307a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808307e:	8043      	strh	r3, [r0, #2]
 8083080:	f241 2334 	movw	r3, #4660	; 0x1234
 8083084:	8083      	strh	r3, [r0, #4]
 8083086:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808308a:	80c3      	strh	r3, [r0, #6]
 808308c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083090:	8103      	strh	r3, [r0, #8]
 8083092:	2305      	movs	r3, #5
 8083094:	8143      	strh	r3, [r0, #10]
 8083096:	230b      	movs	r3, #11
 8083098:	8183      	strh	r3, [r0, #12]
 808309a:	2201      	movs	r2, #1
 808309c:	2300      	movs	r3, #0
 808309e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80830a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80830a4:	2200      	movs	r2, #0
 80830a6:	611d      	str	r5, [r3, #16]
 80830a8:	615a      	str	r2, [r3, #20]
 80830aa:	bd38      	pop	{r3, r4, r5, pc}
 80830ac:	20000470 	.word	0x20000470

080830b0 <strchr>:
 80830b0:	b2c9      	uxtb	r1, r1
 80830b2:	4603      	mov	r3, r0
 80830b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80830b8:	b11a      	cbz	r2, 80830c2 <strchr+0x12>
 80830ba:	4291      	cmp	r1, r2
 80830bc:	d1f9      	bne.n	80830b2 <strchr+0x2>
 80830be:	4618      	mov	r0, r3
 80830c0:	4770      	bx	lr
 80830c2:	2900      	cmp	r1, #0
 80830c4:	bf0c      	ite	eq
 80830c6:	4618      	moveq	r0, r3
 80830c8:	2000      	movne	r0, #0
 80830ca:	4770      	bx	lr

080830cc <strchrnul>:
 80830cc:	b510      	push	{r4, lr}
 80830ce:	4604      	mov	r4, r0
 80830d0:	f7ff ffee 	bl	80830b0 <strchr>
 80830d4:	b918      	cbnz	r0, 80830de <strchrnul+0x12>
 80830d6:	4620      	mov	r0, r4
 80830d8:	f000 f827 	bl	808312a <strlen>
 80830dc:	4420      	add	r0, r4
 80830de:	bd10      	pop	{r4, pc}

080830e0 <strcmp>:
 80830e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80830e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80830e8:	2a01      	cmp	r2, #1
 80830ea:	bf28      	it	cs
 80830ec:	429a      	cmpcs	r2, r3
 80830ee:	d0f7      	beq.n	80830e0 <strcmp>
 80830f0:	1ad0      	subs	r0, r2, r3
 80830f2:	4770      	bx	lr

080830f4 <strdup>:
 80830f4:	4b02      	ldr	r3, [pc, #8]	; (8083100 <strdup+0xc>)
 80830f6:	4601      	mov	r1, r0
 80830f8:	6818      	ldr	r0, [r3, #0]
 80830fa:	f000 b803 	b.w	8083104 <_strdup_r>
 80830fe:	bf00      	nop
 8083100:	20000470 	.word	0x20000470

08083104 <_strdup_r>:
 8083104:	b570      	push	{r4, r5, r6, lr}
 8083106:	4606      	mov	r6, r0
 8083108:	4608      	mov	r0, r1
 808310a:	460c      	mov	r4, r1
 808310c:	f000 f80d 	bl	808312a <strlen>
 8083110:	1c45      	adds	r5, r0, #1
 8083112:	4629      	mov	r1, r5
 8083114:	4630      	mov	r0, r6
 8083116:	f7fd fb87 	bl	8080828 <_malloc_r>
 808311a:	4606      	mov	r6, r0
 808311c:	b118      	cbz	r0, 8083126 <_strdup_r+0x22>
 808311e:	462a      	mov	r2, r5
 8083120:	4621      	mov	r1, r4
 8083122:	f7ff ff6f 	bl	8083004 <memcpy>
 8083126:	4630      	mov	r0, r6
 8083128:	bd70      	pop	{r4, r5, r6, pc}

0808312a <strlen>:
 808312a:	4603      	mov	r3, r0
 808312c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083130:	2a00      	cmp	r2, #0
 8083132:	d1fb      	bne.n	808312c <strlen+0x2>
 8083134:	1a18      	subs	r0, r3, r0
 8083136:	3801      	subs	r0, #1
 8083138:	4770      	bx	lr

0808313a <strncmp>:
 808313a:	b530      	push	{r4, r5, lr}
 808313c:	b182      	cbz	r2, 8083160 <strncmp+0x26>
 808313e:	1e45      	subs	r5, r0, #1
 8083140:	3901      	subs	r1, #1
 8083142:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8083146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808314a:	42a3      	cmp	r3, r4
 808314c:	d106      	bne.n	808315c <strncmp+0x22>
 808314e:	43ec      	mvns	r4, r5
 8083150:	4414      	add	r4, r2
 8083152:	42e0      	cmn	r0, r4
 8083154:	d001      	beq.n	808315a <strncmp+0x20>
 8083156:	2b00      	cmp	r3, #0
 8083158:	d1f3      	bne.n	8083142 <strncmp+0x8>
 808315a:	461c      	mov	r4, r3
 808315c:	1b18      	subs	r0, r3, r4
 808315e:	bd30      	pop	{r4, r5, pc}
 8083160:	4610      	mov	r0, r2
 8083162:	bd30      	pop	{r4, r5, pc}

08083164 <strrchr>:
 8083164:	b538      	push	{r3, r4, r5, lr}
 8083166:	4603      	mov	r3, r0
 8083168:	460d      	mov	r5, r1
 808316a:	b141      	cbz	r1, 808317e <strrchr+0x1a>
 808316c:	2400      	movs	r4, #0
 808316e:	4629      	mov	r1, r5
 8083170:	4618      	mov	r0, r3
 8083172:	f7ff ff9d 	bl	80830b0 <strchr>
 8083176:	b130      	cbz	r0, 8083186 <strrchr+0x22>
 8083178:	1c43      	adds	r3, r0, #1
 808317a:	4604      	mov	r4, r0
 808317c:	e7f7      	b.n	808316e <strrchr+0xa>
 808317e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083182:	f7ff bf95 	b.w	80830b0 <strchr>
 8083186:	4620      	mov	r0, r4
 8083188:	bd38      	pop	{r3, r4, r5, pc}
	...

0808318c <_strtol_r>:
 808318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083190:	460f      	mov	r7, r1
 8083192:	4680      	mov	r8, r0
 8083194:	483f      	ldr	r0, [pc, #252]	; (8083294 <_strtol_r+0x108>)
 8083196:	f8d0 9000 	ldr.w	r9, [r0]
 808319a:	463d      	mov	r5, r7
 808319c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80831a0:	eb09 0004 	add.w	r0, r9, r4
 80831a4:	7840      	ldrb	r0, [r0, #1]
 80831a6:	f000 0008 	and.w	r0, r0, #8
 80831aa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80831ae:	b108      	cbz	r0, 80831b4 <_strtol_r+0x28>
 80831b0:	462f      	mov	r7, r5
 80831b2:	e7f2      	b.n	808319a <_strtol_r+0xe>
 80831b4:	2c2d      	cmp	r4, #45	; 0x2d
 80831b6:	d103      	bne.n	80831c0 <_strtol_r+0x34>
 80831b8:	1cbd      	adds	r5, r7, #2
 80831ba:	787c      	ldrb	r4, [r7, #1]
 80831bc:	2601      	movs	r6, #1
 80831be:	e003      	b.n	80831c8 <_strtol_r+0x3c>
 80831c0:	2c2b      	cmp	r4, #43	; 0x2b
 80831c2:	bf04      	itt	eq
 80831c4:	787c      	ldrbeq	r4, [r7, #1]
 80831c6:	1cbd      	addeq	r5, r7, #2
 80831c8:	b113      	cbz	r3, 80831d0 <_strtol_r+0x44>
 80831ca:	2b10      	cmp	r3, #16
 80831cc:	d10a      	bne.n	80831e4 <_strtol_r+0x58>
 80831ce:	e05b      	b.n	8083288 <_strtol_r+0xfc>
 80831d0:	2c30      	cmp	r4, #48	; 0x30
 80831d2:	d157      	bne.n	8083284 <_strtol_r+0xf8>
 80831d4:	7828      	ldrb	r0, [r5, #0]
 80831d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80831da:	2858      	cmp	r0, #88	; 0x58
 80831dc:	d14d      	bne.n	808327a <_strtol_r+0xee>
 80831de:	786c      	ldrb	r4, [r5, #1]
 80831e0:	2310      	movs	r3, #16
 80831e2:	3502      	adds	r5, #2
 80831e4:	2e00      	cmp	r6, #0
 80831e6:	bf14      	ite	ne
 80831e8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80831ec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80831f0:	fbbc faf3 	udiv	sl, ip, r3
 80831f4:	2700      	movs	r7, #0
 80831f6:	4638      	mov	r0, r7
 80831f8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80831fc:	eb09 0e04 	add.w	lr, r9, r4
 8083200:	f89e e001 	ldrb.w	lr, [lr, #1]
 8083204:	f01e 0f04 	tst.w	lr, #4
 8083208:	d001      	beq.n	808320e <_strtol_r+0x82>
 808320a:	3c30      	subs	r4, #48	; 0x30
 808320c:	e00b      	b.n	8083226 <_strtol_r+0x9a>
 808320e:	f01e 0e03 	ands.w	lr, lr, #3
 8083212:	d01b      	beq.n	808324c <_strtol_r+0xc0>
 8083214:	f1be 0f01 	cmp.w	lr, #1
 8083218:	bf0c      	ite	eq
 808321a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808321e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8083222:	ebce 0404 	rsb	r4, lr, r4
 8083226:	42a3      	cmp	r3, r4
 8083228:	dd10      	ble.n	808324c <_strtol_r+0xc0>
 808322a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 808322e:	d00a      	beq.n	8083246 <_strtol_r+0xba>
 8083230:	4550      	cmp	r0, sl
 8083232:	d806      	bhi.n	8083242 <_strtol_r+0xb6>
 8083234:	d101      	bne.n	808323a <_strtol_r+0xae>
 8083236:	4564      	cmp	r4, ip
 8083238:	dc03      	bgt.n	8083242 <_strtol_r+0xb6>
 808323a:	fb03 4000 	mla	r0, r3, r0, r4
 808323e:	2701      	movs	r7, #1
 8083240:	e001      	b.n	8083246 <_strtol_r+0xba>
 8083242:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8083246:	f815 4b01 	ldrb.w	r4, [r5], #1
 808324a:	e7d7      	b.n	80831fc <_strtol_r+0x70>
 808324c:	1c7b      	adds	r3, r7, #1
 808324e:	d10c      	bne.n	808326a <_strtol_r+0xde>
 8083250:	2e00      	cmp	r6, #0
 8083252:	f04f 0322 	mov.w	r3, #34	; 0x22
 8083256:	bf14      	ite	ne
 8083258:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808325c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083260:	f8c8 3000 	str.w	r3, [r8]
 8083264:	b92a      	cbnz	r2, 8083272 <_strtol_r+0xe6>
 8083266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808326a:	b106      	cbz	r6, 808326e <_strtol_r+0xe2>
 808326c:	4240      	negs	r0, r0
 808326e:	b172      	cbz	r2, 808328e <_strtol_r+0x102>
 8083270:	b107      	cbz	r7, 8083274 <_strtol_r+0xe8>
 8083272:	1e69      	subs	r1, r5, #1
 8083274:	6011      	str	r1, [r2, #0]
 8083276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808327a:	2430      	movs	r4, #48	; 0x30
 808327c:	2b00      	cmp	r3, #0
 808327e:	d1b1      	bne.n	80831e4 <_strtol_r+0x58>
 8083280:	2308      	movs	r3, #8
 8083282:	e7af      	b.n	80831e4 <_strtol_r+0x58>
 8083284:	230a      	movs	r3, #10
 8083286:	e7ad      	b.n	80831e4 <_strtol_r+0x58>
 8083288:	2c30      	cmp	r4, #48	; 0x30
 808328a:	d0a3      	beq.n	80831d4 <_strtol_r+0x48>
 808328c:	e7aa      	b.n	80831e4 <_strtol_r+0x58>
 808328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083292:	bf00      	nop
 8083294:	2000040c 	.word	0x2000040c

08083298 <strtol>:
 8083298:	4613      	mov	r3, r2
 808329a:	460a      	mov	r2, r1
 808329c:	4601      	mov	r1, r0
 808329e:	4802      	ldr	r0, [pc, #8]	; (80832a8 <strtol+0x10>)
 80832a0:	6800      	ldr	r0, [r0, #0]
 80832a2:	f7ff bf73 	b.w	808318c <_strtol_r>
 80832a6:	bf00      	nop
 80832a8:	20000470 	.word	0x20000470

080832ac <dynalib_user>:
 80832ac:	0808001d 0808005d 08080089 0808008d     ....]...........
 80832bc:	00000000                                ....

080832c0 <_ZTVN5spark10LogHandlerE>:
	...
 80832d0:	080800a5 080800c9                       ........

080832d8 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80832e0:	080800d5 08080109 0808164d 080800cb     ........M.......
 80832f0:	6e6e6f63 69746365 79746976 00000000     connectivity....

08083300 <_ZTVN5spark13CellularClassE>:
	...
 8083308:	08080909 080808ff 080808f5 08080867     ............g...
 8083318:	080808e9 080808dd 080808d1 080808c9     ................
 8083328:	080808bf 080808b5 08080871              ........q...

08083334 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808333c:	08080955 0808095b 08080985 08080969     U...[.......i...
 808334c:	08080957                                W...

08083350 <_ZTV7TwoWire>:
	...
 8083358:	08080ed9 08080f23 08080efb 08080edb     ....#...........
 8083368:	08080f03 08080f0b 08080f13 08080f1b     ................

08083378 <_ZTV9IPAddress>:
	...
 8083380:	08080f6d 08080f5d 08080f5f 00302e30     m...]..._...0.0.
 8083390:	736c6166 72740065 25006575 75250064     false.true.%d.%u
 80833a0:	00672500 6c6c756e 30257500 00007834     .%g.null.u%04x..

080833b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80833b8:	080813f9 0808141f 080813d3 0808102b     ............+...

080833c8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80833d0:	08081ba1 08081bb5 080814b9 080813db     ................

080833e0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80833e8:	080813f5 0808143b 08081a99 08081449     ....;.......I...
 80833f8:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
 8083408:	006c6961 25000a0d 75303130 205d0020     ail....%010u .] 
 8083418:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
 8083428:	00203d20 64006925 69617465 3d20736c      = .%i.details =
 8083438:	61620020 53006475 61697265 5355006c      .baud.Serial.US
 8083448:	72655342 316c6169 70797400 61700065     BSerial1.type.pa
 8083458:	006d6172 00646d63 68006469 7300646e     ram.cmd.id.hnd.s
 8083468:	006d7274 746c6966 6c766c00 64646100     trm.filt.lvl.add
 8083478:	646e6148 0072656c 6f6d6572 61486576     Handler.removeHa
 8083488:	656c646e 6e650072 61486d75 656c646e     ndler.enumHandle
 8083498:	4a007372 534e4f53 61657274 676f4c6d     rs.JSONStreamLog
 80834a8:	646e6148 0072656c 00707061 656e6f6e     Handler.app.none
 80834b8:	61727400 69006563 006f666e 6e726177     .trace.info.warn
 80834c8:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
 80834d8:	00000000                                ....

080834dc <_ZTVN5spark16StreamLogHandlerE>:
	...
 80834e4:	08081b75 08081b8d 0808164d 080800cb     u.......M.......

080834f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80834fc:	080813f7 0808142d 08082265 080813dd     ....-...e"......

0808350c <_ZTVN5spark12NetworkClassE>:
	...
 8083514:	0808233d 08082347 08082351 0808235b     =#..G#..Q#..[#..
 8083524:	08082365 08082371 0808237d 08082389     e#..q#..}#...#..
 8083534:	08082391 0808239b 080823a5              .#...#...#..

08083540 <_ZTV8SPIClass>:
	...
 8083548:	08082565 08082567 2b25005a 3a643330     e%..g%..Z.%+03d:
 8083558:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 8083568:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 8083578:	00000000                                ....

0808357c <_ZTV11USARTSerial>:
	...
 8083584:	080826f9 08082749 08082757 08082405     .&..I'..W'...$..
 8083594:	0808270d 0808272f 0808271b 08082743     .'../'...'..C'..
 80835a4:	080826fb 080826ff                       .&...&..

080835ac <_ZTV9USBSerial>:
	...
 80835b4:	08082815 08082865 08082873 08082405     .(..e(..s(...$..
 80835c4:	08082851 08082817 0808282d 0808285f     Q(...(..-(.._(..
 80835d4:	08082843 08082811                       C(...(..

080835dc <_ZSt7nothrow>:
	...

080835dd <_ctype_>:
 80835dd:	20202000 20202020 28282020 20282828     .         ((((( 
 80835ed:	20202020 20202020 20202020 20202020                     
 80835fd:	10108820 10101010 10101010 10101010      ...............
 808360d:	04040410 04040404 10040404 10101010     ................
 808361d:	41411010 41414141 01010101 01010101     ..AAAAAA........
 808362d:	01010101 01010101 01010101 10101010     ................
 808363d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 808364d:	02020202 02020202 02020202 10101010     ................
 808365d:	00000020 00000000 00000000 00000000      ...............
	...

080836e0 <__sf_fake_stdin>:
	...

08083700 <__sf_fake_stdout>:
	...

08083720 <__sf_fake_stderr>:
	...
 8083740:	00000043                                         C.

08083742 <link_const_variable_data_end>:
	...

08083744 <link_constructors_location>:
 8083744:	08080301 	.word	0x08080301
 8083748:	08080915 	.word	0x08080915
 808374c:	0808232d 	.word	0x0808232d
 8083750:	080823f1 	.word	0x080823f1
 8083754:	08082549 	.word	0x08082549
 8083758:	080826cd 	.word	0x080826cd
 808375c:	080826e5 	.word	0x080826e5
 8083760:	08082c89 	.word	0x08082c89
 8083764:	08082cb9 	.word	0x08082cb9
 8083768:	08082d59 	.word	0x08082d59
 808376c:	08082e1d 	.word	0x08082e1d
 8083770:	08082ea1 	.word	0x08082ea1
 8083774:	08082f25 	.word	0x08082f25

08083778 <link_constructors_end>:
	...
