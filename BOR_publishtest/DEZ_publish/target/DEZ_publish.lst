
/Users/simonxu/Projects/Github-simjxu/partiscripts/BOR_publishtest/DEZ_publish/target/DEZ_publish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00015b54  2**0
                  CONTENTS
  3 .data         00000068  2003e310  000d5ac0  0000e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000478  2003e378  2003e378  0001e378  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d5b28  000d5b28  00015b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d5b50  000d5b50  00015b50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c57b8  00000000  00000000  00015b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f2b9  00000000  00000000  000db30c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001afc1  00000000  00000000  000ea5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001fc0  00000000  00000000  00105586  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003f40  00000000  00000000  00107546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031cb5  00000000  00000000  0010b486  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023a9e  00000000  00000000  0013d13b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00105693  00000000  00000000  00160bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bfd4  00000000  00000000  0026626c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	5c 57 0d 00                                         \W..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fb35 	bl	d569c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fb3a 	bl	d56b2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e310 	.word	0x2003e310
   d4048:	000d5ac0 	.word	0x000d5ac0
   d404c:	2003e378 	.word	0x2003e378
   d4050:	2003e378 	.word	0x2003e378
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f983 	bl	d5364 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5ac0 	.word	0x000d5ac0
   d4080:	000d5a84 	.word	0x000d5a84

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b815 	b.w	d40b2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f813 	bl	d40b4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b935 	b.w	d5300 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 b9af 	b.w	d43f8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 b9b5 	b.w	d4408 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 b9b3 	b.w	d4408 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <setup>:

// String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2,\"source\":\"AH\"}";
String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2}";

// setup() runs once, when the device is first turned on.
void setup() {
   d40b2:	4770      	bx	lr

000d40b4 <loop>:
  // Put initialization like pinMode and begin functions here.

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  delay(10000);
   d40b6:	f242 7010 	movw	r0, #10000	; 0x2710
   d40ba:	f000 f9c5 	bl	d4448 <delay>
   d40be:	4b0f      	ldr	r3, [pc, #60]	; (d40fc <loop+0x48>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c0:	490f      	ldr	r1, [pc, #60]	; (d4100 <loop+0x4c>)
   d40c2:	681a      	ldr	r2, [r3, #0]
   d40c4:	4b0f      	ldr	r3, [pc, #60]	; (d4104 <loop+0x50>)
   d40c6:	781b      	ldrb	r3, [r3, #0]
   d40c8:	f88d 3000 	strb.w	r3, [sp]
   d40cc:	a802      	add	r0, sp, #8
   d40ce:	233c      	movs	r3, #60	; 0x3c
   d40d0:	f000 fb8c 	bl	d47ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40d4:	9c03      	ldr	r4, [sp, #12]
   d40d6:	b17c      	cbz	r4, d40f8 <loop+0x44>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <loop+0x44>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <loop+0x44>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
  Particle.publish("alert",pub_var);

   d40f8:	b004      	add	sp, #16
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	2003e37c 	.word	0x2003e37c
   d4100:	000d5770 	.word	0x000d5770
   d4104:	2003e38c 	.word	0x2003e38c

000d4108 <_GLOBAL__sub_I_pub_var>:
   d4108:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d410a:	4b08      	ldr	r3, [pc, #32]	; (d412c <_GLOBAL__sub_I_pub_var+0x24>)
 * Author:
 * Date:
 */

// String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2,\"source\":\"AH\"}";
String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2}";
   d410c:	4c08      	ldr	r4, [pc, #32]	; (d4130 <_GLOBAL__sub_I_pub_var+0x28>)
   d410e:	2200      	movs	r2, #0
   d4110:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4112:	f000 f84d 	bl	d41b0 <HAL_Pin_Map>
   d4116:	4907      	ldr	r1, [pc, #28]	; (d4134 <_GLOBAL__sub_I_pub_var+0x2c>)
   d4118:	4620      	mov	r0, r4
   d411a:	f000 ffa8 	bl	d506e <_ZN6StringC1EPK19__FlashStringHelper>
   d411e:	4620      	mov	r0, r4
   d4120:	4a05      	ldr	r2, [pc, #20]	; (d4138 <_GLOBAL__sub_I_pub_var+0x30>)
   d4122:	4906      	ldr	r1, [pc, #24]	; (d413c <_GLOBAL__sub_I_pub_var+0x34>)
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  delay(10000);
  Particle.publish("alert",pub_var);

   d4124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Author:
 * Date:
 */

// String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2,\"source\":\"AH\"}";
String pub_var = "{\"seq\":12,\"time\":1563399253,\"error\":2}";
   d4128:	f001 b958 	b.w	d53dc <__aeabi_atexit>
   d412c:	2003e38c 	.word	0x2003e38c
   d4130:	2003e37c 	.word	0x2003e37c
   d4134:	000d5776 	.word	0x000d5776
   d4138:	2003e378 	.word	0x2003e378
   d413c:	000d4fe1 	.word	0x000d4fe1

000d4140 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4140:	b508      	push	{r3, lr}
   d4142:	4b02      	ldr	r3, [pc, #8]	; (d414c <os_thread_is_current+0xc>)
   d4144:	681b      	ldr	r3, [r3, #0]
   d4146:	689b      	ldr	r3, [r3, #8]
   d4148:	9301      	str	r3, [sp, #4]
   d414a:	bd08      	pop	{r3, pc}
   d414c:	00030248 	.word	0x00030248

000d4150 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4150:	b508      	push	{r3, lr}
   d4152:	4b02      	ldr	r3, [pc, #8]	; (d415c <os_thread_join+0xc>)
   d4154:	681b      	ldr	r3, [r3, #0]
   d4156:	691b      	ldr	r3, [r3, #16]
   d4158:	9301      	str	r3, [sp, #4]
   d415a:	bd08      	pop	{r3, pc}
   d415c:	00030248 	.word	0x00030248

000d4160 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4160:	b508      	push	{r3, lr}
   d4162:	4b02      	ldr	r3, [pc, #8]	; (d416c <os_thread_cleanup+0xc>)
   d4164:	681b      	ldr	r3, [r3, #0]
   d4166:	695b      	ldr	r3, [r3, #20]
   d4168:	9301      	str	r3, [sp, #4]
   d416a:	bd08      	pop	{r3, pc}
   d416c:	00030248 	.word	0x00030248

000d4170 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4170:	b508      	push	{r3, lr}
   d4172:	4b02      	ldr	r3, [pc, #8]	; (d417c <os_mutex_create+0xc>)
   d4174:	681b      	ldr	r3, [r3, #0]
   d4176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4178:	9301      	str	r3, [sp, #4]
   d417a:	bd08      	pop	{r3, pc}
   d417c:	00030248 	.word	0x00030248

000d4180 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4180:	b508      	push	{r3, lr}
   d4182:	4b02      	ldr	r3, [pc, #8]	; (d418c <os_mutex_recursive_create+0xc>)
   d4184:	681b      	ldr	r3, [r3, #0]
   d4186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4188:	9301      	str	r3, [sp, #4]
   d418a:	bd08      	pop	{r3, pc}
   d418c:	00030248 	.word	0x00030248

000d4190 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <HAL_RNG_GetRandomNumber+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	685b      	ldr	r3, [r3, #4]
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030218 	.word	0x00030218

000d41a0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	695b      	ldr	r3, [r3, #20]
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030218 	.word	0x00030218

000d41b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <HAL_Pin_Map+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	681b      	ldr	r3, [r3, #0]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	0003022c 	.word	0x0003022c

000d41c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <inet_inet_ntop+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	695b      	ldr	r3, [r3, #20]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030264 	.word	0x00030264

000d41d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <netdb_freeaddrinfo+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	689b      	ldr	r3, [r3, #8]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030268 	.word	0x00030268

000d41e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <netdb_getaddrinfo+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	68db      	ldr	r3, [r3, #12]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030268 	.word	0x00030268

000d41f0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_SPI_Init+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	69db      	ldr	r3, [r3, #28]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030230 	.word	0x00030230

000d4200 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <HAL_USART_Init+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	681b      	ldr	r3, [r3, #0]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	0003023c 	.word	0x0003023c

000d4210 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <HAL_USART_Write_Data+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	68db      	ldr	r3, [r3, #12]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	0003023c 	.word	0x0003023c

000d4220 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <HAL_USART_Available_Data+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	691b      	ldr	r3, [r3, #16]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	0003023c 	.word	0x0003023c

000d4230 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <HAL_USART_Read_Data+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	695b      	ldr	r3, [r3, #20]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	0003023c 	.word	0x0003023c

000d4240 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <HAL_USART_Peek_Data+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	699b      	ldr	r3, [r3, #24]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	0003023c 	.word	0x0003023c

000d4250 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <HAL_USART_Flush_Data+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	69db      	ldr	r3, [r3, #28]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	0003023c 	.word	0x0003023c

000d4260 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <HAL_USART_Available_Data_For_Write+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	0003023c 	.word	0x0003023c

000d4270 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <HAL_USB_USART_Init+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	681b      	ldr	r3, [r3, #0]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003024c 	.word	0x0003024c

000d4280 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_USB_USART_Available_Data+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	691b      	ldr	r3, [r3, #16]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003024c 	.word	0x0003024c

000d4290 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	695b      	ldr	r3, [r3, #20]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003024c 	.word	0x0003024c

000d42a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_USB_USART_Receive_Data+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	699b      	ldr	r3, [r3, #24]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003024c 	.word	0x0003024c

000d42b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_USB_USART_Send_Data+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	69db      	ldr	r3, [r3, #28]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003024c 	.word	0x0003024c

000d42c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USB_USART_Flush_Data+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	6a1b      	ldr	r3, [r3, #32]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003024c 	.word	0x0003024c

000d42d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <set_system_mode+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	685b      	ldr	r3, [r3, #4]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030220 	.word	0x00030220

000d42e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <system_delay_ms+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	695b      	ldr	r3, [r3, #20]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030220 	.word	0x00030220

000d42f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <application_thread_current+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030220 	.word	0x00030220

000d4300 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <application_thread_invoke+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030220 	.word	0x00030220

000d4310 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b03      	ldr	r3, [pc, #12]	; (d4320 <system_ctrl_set_app_request_handler+0x10>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d431a:	9301      	str	r3, [sp, #4]
   d431c:	bd08      	pop	{r3, pc}
   d431e:	0000      	.short	0x0000
   d4320:	00030220 	.word	0x00030220

000d4324 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b03      	ldr	r3, [pc, #12]	; (d4334 <system_ctrl_set_result+0x10>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d432e:	9301      	str	r3, [sp, #4]
   d4330:	bd08      	pop	{r3, pc}
   d4332:	0000      	.short	0x0000
   d4334:	00030220 	.word	0x00030220

000d4338 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <spark_send_event+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	6a1b      	ldr	r3, [r3, #32]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030244 	.word	0x00030244

000d4348 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <spark_set_random_seed_from_cloud_handler+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030244 	.word	0x00030244

000d4358 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <network_connect+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	685b      	ldr	r3, [r3, #4]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030240 	.word	0x00030240

000d4368 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <network_connecting+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	689b      	ldr	r3, [r3, #8]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030240 	.word	0x00030240

000d4378 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <network_disconnect+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	68db      	ldr	r3, [r3, #12]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030240 	.word	0x00030240

000d4388 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <network_ready+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	691b      	ldr	r3, [r3, #16]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030240 	.word	0x00030240

000d4398 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <network_on+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	695b      	ldr	r3, [r3, #20]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030240 	.word	0x00030240

000d43a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <network_off+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	699b      	ldr	r3, [r3, #24]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030240 	.word	0x00030240

000d43b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <network_listen+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	69db      	ldr	r3, [r3, #28]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030240 	.word	0x00030240

000d43c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <network_listening+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a1b      	ldr	r3, [r3, #32]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030240 	.word	0x00030240

000d43d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <network_set_listen_timeout+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030240 	.word	0x00030240

000d43e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <network_get_listen_timeout+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030240 	.word	0x00030240

000d43f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <malloc+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	681b      	ldr	r3, [r3, #0]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003021c 	.word	0x0003021c

000d4408 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <free+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	685b      	ldr	r3, [r3, #4]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003021c 	.word	0x0003021c

000d4418 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <realloc+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	689b      	ldr	r3, [r3, #8]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003021c 	.word	0x0003021c

000d4428 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <abort+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003021c 	.word	0x0003021c

000d4438 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <_malloc_r+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003021c 	.word	0x0003021c

000d4448 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4448:	2100      	movs	r1, #0
   d444a:	f7ff bf49 	b.w	d42e0 <system_delay_ms>

000d444e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d444e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4450:	6883      	ldr	r3, [r0, #8]
   d4452:	4604      	mov	r4, r0
   d4454:	b90b      	cbnz	r3, d445a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4456:	f000 ffc8 	bl	d53ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d445a:	68c3      	ldr	r3, [r0, #12]
   d445c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d445e:	68a3      	ldr	r3, [r4, #8]
   d4460:	b11b      	cbz	r3, d446a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4462:	2203      	movs	r2, #3
   d4464:	4621      	mov	r1, r4
   d4466:	4620      	mov	r0, r4
   d4468:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d446a:	4620      	mov	r0, r4
   d446c:	2110      	movs	r1, #16
}
   d446e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4472:	f000 bfb8 	b.w	d53e6 <_ZdlPvj>

000d4476 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4476:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4478:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d447a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d447c:	689b      	ldr	r3, [r3, #8]
   d447e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4480:	68a3      	ldr	r3, [r4, #8]
   d4482:	3b01      	subs	r3, #1
   d4484:	60a3      	str	r3, [r4, #8]
   d4486:	b92b      	cbnz	r3, d4494 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d4488:	6823      	ldr	r3, [r4, #0]
   d448a:	4620      	mov	r0, r4
   d448c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d448e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4492:	4718      	bx	r3
   d4494:	bd10      	pop	{r4, pc}

000d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4496:	b510      	push	{r4, lr}
   d4498:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d449a:	6800      	ldr	r0, [r0, #0]
   d449c:	b128      	cbz	r0, d44aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d449e:	6843      	ldr	r3, [r0, #4]
   d44a0:	3b01      	subs	r3, #1
   d44a2:	6043      	str	r3, [r0, #4]
   d44a4:	b90b      	cbnz	r3, d44aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d44a6:	f7ff ffe6 	bl	d4476 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d44aa:	4620      	mov	r0, r4
   d44ac:	bd10      	pop	{r4, pc}

000d44ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d44ae:	680b      	ldr	r3, [r1, #0]
   d44b0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d44b2:	b113      	cbz	r3, d44ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d44b4:	685a      	ldr	r2, [r3, #4]
   d44b6:	3201      	adds	r2, #1
   d44b8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d44ba:	4770      	bx	lr

000d44bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d44bc:	4802      	ldr	r0, [pc, #8]	; (d44c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d44be:	2300      	movs	r3, #0
   d44c0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d44c2:	f7ff be5d 	b.w	d4180 <os_mutex_recursive_create>
   d44c6:	bf00      	nop
   d44c8:	2003e390 	.word	0x2003e390

000d44cc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d44cc:	2200      	movs	r2, #0
   d44ce:	4611      	mov	r1, r2
   d44d0:	6840      	ldr	r0, [r0, #4]
   d44d2:	f7ff bf59 	b.w	d4388 <network_ready>

000d44d6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44d6:	2200      	movs	r2, #0
   d44d8:	4611      	mov	r1, r2
   d44da:	6840      	ldr	r0, [r0, #4]
   d44dc:	f7ff bf74 	b.w	d43c8 <network_listening>

000d44e0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d44e0:	2200      	movs	r2, #0
   d44e2:	4611      	mov	r1, r2
   d44e4:	6840      	ldr	r0, [r0, #4]
   d44e6:	f7ff bf7f 	b.w	d43e8 <network_get_listen_timeout>

000d44ea <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d44ea:	2200      	movs	r2, #0
   d44ec:	6840      	ldr	r0, [r0, #4]
   d44ee:	f7ff bf73 	b.w	d43d8 <network_set_listen_timeout>

000d44f2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d44f2:	2200      	movs	r2, #0
   d44f4:	f081 0101 	eor.w	r1, r1, #1
   d44f8:	6840      	ldr	r0, [r0, #4]
   d44fa:	f7ff bf5d 	b.w	d43b8 <network_listen>

000d44fe <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d44fe:	2300      	movs	r3, #0
   d4500:	461a      	mov	r2, r3
   d4502:	4619      	mov	r1, r3
   d4504:	6840      	ldr	r0, [r0, #4]
   d4506:	f7ff bf4f 	b.w	d43a8 <network_off>

000d450a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d450a:	2300      	movs	r3, #0
   d450c:	461a      	mov	r2, r3
   d450e:	4619      	mov	r1, r3
   d4510:	6840      	ldr	r0, [r0, #4]
   d4512:	f7ff bf41 	b.w	d4398 <network_on>

000d4516 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4516:	2200      	movs	r2, #0
   d4518:	4611      	mov	r1, r2
   d451a:	6840      	ldr	r0, [r0, #4]
   d451c:	f7ff bf24 	b.w	d4368 <network_connecting>

000d4520 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4520:	2200      	movs	r2, #0
   d4522:	2102      	movs	r1, #2
   d4524:	6840      	ldr	r0, [r0, #4]
   d4526:	f7ff bf27 	b.w	d4378 <network_disconnect>

000d452a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d452a:	2300      	movs	r3, #0
   d452c:	461a      	mov	r2, r3
   d452e:	6840      	ldr	r0, [r0, #4]
   d4530:	f7ff bf12 	b.w	d4358 <network_connect>

000d4534 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4534:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4536:	4c0c      	ldr	r4, [pc, #48]	; (d4568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4538:	2528      	movs	r5, #40	; 0x28
   d453a:	462a      	mov	r2, r5
   d453c:	2100      	movs	r1, #0
   d453e:	4620      	mov	r0, r4
   d4540:	f001 f8b7 	bl	d56b2 <memset>
        cid = -1;
   d4544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4548:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d454a:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d454c:	4c07      	ldr	r4, [pc, #28]	; (d456c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d454e:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4550:	4620      	mov	r0, r4
   d4552:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d4554:	252c      	movs	r5, #44	; 0x2c
   d4556:	4b06      	ldr	r3, [pc, #24]	; (d4570 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d4558:	f840 3b08 	str.w	r3, [r0], #8
   d455c:	462a      	mov	r2, r5
   d455e:	2100      	movs	r1, #0
   d4560:	f001 f8a7 	bl	d56b2 <memset>
        size = sizeof(*this);
   d4564:	8125      	strh	r5, [r4, #8]
   d4566:	bd38      	pop	{r3, r4, r5, pc}
   d4568:	2003e3c8 	.word	0x2003e3c8
   d456c:	2003e394 	.word	0x2003e394
   d4570:	000d57a8 	.word	0x000d57a8

000d4574 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4574:	4770      	bx	lr

000d4576 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4576:	2000      	movs	r0, #0
   d4578:	4770      	bx	lr

000d457a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d457a:	b510      	push	{r4, lr}
   d457c:	2110      	movs	r1, #16
   d457e:	4604      	mov	r4, r0
   d4580:	f000 ff31 	bl	d53e6 <_ZdlPvj>
   d4584:	4620      	mov	r0, r4
   d4586:	bd10      	pop	{r4, pc}

000d4588 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4588:	b508      	push	{r3, lr}
      { delete this; }
   d458a:	b108      	cbz	r0, d4590 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d458c:	f7ff fff5 	bl	d457a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4590:	bd08      	pop	{r3, pc}

000d4592 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4592:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4594:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4596:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4598:	b113      	cbz	r3, d45a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d459a:	2203      	movs	r2, #3
   d459c:	4601      	mov	r1, r0
   d459e:	4798      	blx	r3
    }
   d45a0:	4620      	mov	r0, r4
   d45a2:	bd10      	pop	{r4, pc}

000d45a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d45a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d45a6:	68c4      	ldr	r4, [r0, #12]
   d45a8:	b1ec      	cbz	r4, d45e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d45aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d45ac:	2b02      	cmp	r3, #2
   d45ae:	d102      	bne.n	d45b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d45b0:	68e0      	ldr	r0, [r4, #12]
   d45b2:	f7ff ff29 	bl	d4408 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d45b6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d45b8:	b135      	cbz	r5, d45c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d45ba:	4628      	mov	r0, r5
   d45bc:	f7ff ffe9 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
   d45c0:	2110      	movs	r1, #16
   d45c2:	4628      	mov	r0, r5
   d45c4:	f000 ff0f 	bl	d53e6 <_ZdlPvj>
   d45c8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d45ca:	b135      	cbz	r5, d45da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d45cc:	4628      	mov	r0, r5
   d45ce:	f7ff ffe0 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
   d45d2:	2110      	movs	r1, #16
   d45d4:	4628      	mov	r0, r5
   d45d6:	f000 ff06 	bl	d53e6 <_ZdlPvj>
   d45da:	4620      	mov	r0, r4
   d45dc:	2114      	movs	r1, #20
   d45de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d45e2:	f000 bf00 	b.w	d53e6 <_ZdlPvj>
   d45e6:	bd38      	pop	{r3, r4, r5, pc}

000d45e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d45e8:	b513      	push	{r0, r1, r4, lr}
   d45ea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d45ec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d45f0:	2300      	movs	r3, #0
   d45f2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d45f4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d45f6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d45f8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d45fa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d45fc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d45fe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4600:	f7ff ff49 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4604:	4620      	mov	r0, r4
   d4606:	b002      	add	sp, #8
   d4608:	bd10      	pop	{r4, pc}

000d460a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d460a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d460c:	460c      	mov	r4, r1
   d460e:	ad02      	add	r5, sp, #8
   d4610:	f854 3b04 	ldr.w	r3, [r4], #4
   d4614:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4618:	4606      	mov	r6, r0
   d461a:	460f      	mov	r7, r1
   d461c:	a801      	add	r0, sp, #4
   d461e:	4621      	mov	r1, r4
   d4620:	f7ff ff45 	bl	d44ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4624:	4629      	mov	r1, r5
   d4626:	4630      	mov	r0, r6
   d4628:	f7ff ffde 	bl	d45e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d462c:	a801      	add	r0, sp, #4
   d462e:	f7ff ff32 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4632:	4620      	mov	r0, r4
   d4634:	f7ff ff2f 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4638:	4638      	mov	r0, r7
   d463a:	2108      	movs	r1, #8
   d463c:	f000 fed3 	bl	d53e6 <_ZdlPvj>
        return p;
    }
   d4640:	4630      	mov	r0, r6
   d4642:	b003      	add	sp, #12
   d4644:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4646 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4646:	b513      	push	{r0, r1, r4, lr}
   d4648:	460b      	mov	r3, r1
   d464a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d464c:	c803      	ldmia	r0, {r0, r1}
   d464e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4652:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4656:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d465a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d465e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4662:	b002      	add	sp, #8
   d4664:	bd10      	pop	{r4, pc}

000d4666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4666:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4668:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d466a:	b90a      	cbnz	r2, d4670 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d466c:	f000 febd 	bl	d53ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4670:	68c3      	ldr	r3, [r0, #12]
    }
   d4672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4676:	4718      	bx	r3

000d4678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4678:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d467a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d467c:	f100 0110 	add.w	r1, r0, #16
   d4680:	f7ff fff1 	bl	d4666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4684:	bd08      	pop	{r3, pc}

000d4686 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4686:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4688:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d468a:	b90a      	cbnz	r2, d4690 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d468c:	f000 fead 	bl	d53ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4690:	68c3      	ldr	r3, [r0, #12]
    }
   d4692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4696:	4718      	bx	r3

000d4698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4698:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d469a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d469c:	f100 0110 	add.w	r1, r0, #16
   d46a0:	f7ff fff1 	bl	d4686 <_ZNKSt8functionIFvRKbEEclES1_>
   d46a4:	bd08      	pop	{r3, pc}

000d46a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d46a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d46a8:	2300      	movs	r3, #0
   d46aa:	6083      	str	r3, [r0, #8]
   d46ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d46ae:	4604      	mov	r4, r0
   d46b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d46b2:	b12b      	cbz	r3, d46c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d46b4:	2202      	movs	r2, #2
   d46b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d46b8:	68eb      	ldr	r3, [r5, #12]
   d46ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d46bc:	68ab      	ldr	r3, [r5, #8]
   d46be:	60a3      	str	r3, [r4, #8]
	}
    }
   d46c0:	4620      	mov	r0, r4
   d46c2:	bd38      	pop	{r3, r4, r5, pc}

000d46c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d46c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d46c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d46cc:	b086      	sub	sp, #24
   d46ce:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d46d0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d46d4:	808b      	strh	r3, [r1, #4]
   d46d6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d46d8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d46da:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d46de:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d46e0:	f04f 0002 	mov.w	r0, #2
   d46e4:	e8d4 1f4f 	ldrexb	r1, [r4]
   d46e8:	4299      	cmp	r1, r3
   d46ea:	d103      	bne.n	d46f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d46ec:	e8c4 0f45 	strexb	r5, r0, [r4]
   d46f0:	2d00      	cmp	r5, #0
   d46f2:	d1f7      	bne.n	d46e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d46f4:	d002      	beq.n	d46fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d46f6:	f88d 1000 	strb.w	r1, [sp]
   d46fa:	e06b      	b.n	d47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d46fc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4700:	bf1e      	ittt	ne
   d4702:	60e7      	strne	r7, [r4, #12]
   d4704:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4706:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4708:	2301      	movs	r3, #1
   d470a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d470e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4710:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4712:	f104 0308 	add.w	r3, r4, #8
   d4716:	f3bf 8f5f 	dmb	sy
   d471a:	e853 6f00 	ldrex	r6, [r3]
   d471e:	e843 0200 	strex	r2, r0, [r3]
   d4722:	2a00      	cmp	r2, #0
   d4724:	d1f9      	bne.n	d471a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4726:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d472a:	2e00      	cmp	r6, #0
   d472c:	d052      	beq.n	d47d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d472e:	f7ff fddf 	bl	d42f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4732:	b120      	cbz	r0, d473e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4734:	4629      	mov	r1, r5
   d4736:	4630      	mov	r0, r6
   d4738:	f7ff ff95 	bl	d4666 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d473c:	e043      	b.n	d47c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d473e:	4631      	mov	r1, r6
   d4740:	4668      	mov	r0, sp
   d4742:	f7ff ffb0 	bl	d46a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4746:	68e0      	ldr	r0, [r4, #12]
   d4748:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d474c:	b108      	cbz	r0, d4752 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d474e:	f000 ffe1 	bl	d5714 <strdup>
   d4752:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4754:	2010      	movs	r0, #16
   d4756:	f8ad 5014 	strh.w	r5, [sp, #20]
   d475a:	f7ff fc9c 	bl	d4096 <_Znwj>
   d475e:	4605      	mov	r5, r0
   d4760:	b330      	cbz	r0, d47b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4762:	f04f 0800 	mov.w	r8, #0
   d4766:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d476a:	2018      	movs	r0, #24
   d476c:	f7ff fc93 	bl	d4096 <_Znwj>
   d4770:	4604      	mov	r4, r0
   d4772:	b1c0      	cbz	r0, d47a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4774:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4778:	4601      	mov	r1, r0
   d477a:	4668      	mov	r0, sp
   d477c:	f7ff ff63 	bl	d4646 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4780:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4782:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4784:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4786:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4788:	9202      	str	r2, [sp, #8]
   d478a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d478c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d478e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4792:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4794:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4798:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d479c:	9b04      	ldr	r3, [sp, #16]
   d479e:	9203      	str	r2, [sp, #12]
   d47a0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d47a2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d47a6:	4b0e      	ldr	r3, [pc, #56]	; (d47e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d47a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d47aa:	4b0e      	ldr	r3, [pc, #56]	; (d47e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d47ac:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d47ae:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d47b0:	9804      	ldr	r0, [sp, #16]
   d47b2:	f7ff fe29 	bl	d4408 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d47b6:	4668      	mov	r0, sp
   d47b8:	f7ff feeb 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d47bc:	2200      	movs	r2, #0
   d47be:	4629      	mov	r1, r5
   d47c0:	4809      	ldr	r0, [pc, #36]	; (d47e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d47c2:	f7ff fd9d 	bl	d4300 <application_thread_invoke>
   d47c6:	4630      	mov	r0, r6
   d47c8:	f7ff fee3 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d47cc:	2110      	movs	r1, #16
   d47ce:	4630      	mov	r0, r6
   d47d0:	f000 fe09 	bl	d53e6 <_ZdlPvj>
   d47d4:	4638      	mov	r0, r7
   d47d6:	f7ff fe17 	bl	d4408 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d47da:	b006      	add	sp, #24
   d47dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d47e0:	000d4679 	.word	0x000d4679
   d47e4:	000d48d5 	.word	0x000d48d5
   d47e8:	000d444f 	.word	0x000d444f

000d47ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d47ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47f0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d47f2:	ad07      	add	r5, sp, #28
   d47f4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d47f8:	4606      	mov	r6, r0
   d47fa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d47fc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d47fe:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4800:	460f      	mov	r7, r1
   d4802:	4690      	mov	r8, r2
   d4804:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4808:	f8c5 b004 	str.w	fp, [r5, #4]
   d480c:	f8c5 b008 	str.w	fp, [r5, #8]
   d4810:	9307      	str	r3, [sp, #28]
   d4812:	f7ff fc40 	bl	d4096 <_Znwj>
   d4816:	4604      	mov	r4, r0
   d4818:	b138      	cbz	r0, d482a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d481a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d481e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4822:	f8c0 b004 	str.w	fp, [r0, #4]
   d4826:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d482a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d482c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d482e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4830:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4832:	f7ff fc30 	bl	d4096 <_Znwj>
   d4836:	b128      	cbz	r0, d4844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4838:	2301      	movs	r3, #1
   d483a:	6043      	str	r3, [r0, #4]
   d483c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d483e:	4b23      	ldr	r3, [pc, #140]	; (d48cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4840:	6003      	str	r3, [r0, #0]
   d4842:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4844:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4846:	4b22      	ldr	r3, [pc, #136]	; (d48d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4848:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d484a:	2008      	movs	r0, #8
   d484c:	f7ff fc23 	bl	d4096 <_Znwj>
   d4850:	4604      	mov	r4, r0
   d4852:	b128      	cbz	r0, d4860 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4854:	9b03      	ldr	r3, [sp, #12]
   d4856:	f840 3b04 	str.w	r3, [r0], #4
   d485a:	a904      	add	r1, sp, #16
   d485c:	f7ff fe27 	bl	d44ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4860:	9500      	str	r5, [sp, #0]
   d4862:	fa5f f38a 	uxtb.w	r3, sl
   d4866:	464a      	mov	r2, r9
   d4868:	4641      	mov	r1, r8
   d486a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d486c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d486e:	f7ff fd63 	bl	d4338 <spark_send_event>
   d4872:	b9b8      	cbnz	r0, d48a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4874:	9b03      	ldr	r3, [sp, #12]
   d4876:	785b      	ldrb	r3, [r3, #1]
   d4878:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d487c:	b993      	cbnz	r3, d48a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d487e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4882:	a905      	add	r1, sp, #20
   d4884:	a803      	add	r0, sp, #12
   d4886:	9205      	str	r2, [sp, #20]
   d4888:	f8ad 3018 	strh.w	r3, [sp, #24]
   d488c:	f7ff ff1a 	bl	d46c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4890:	9805      	ldr	r0, [sp, #20]
   d4892:	f7ff fdb9 	bl	d4408 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4896:	a805      	add	r0, sp, #20
   d4898:	9909      	ldr	r1, [sp, #36]	; 0x24
   d489a:	f7ff feb6 	bl	d460a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d489e:	a806      	add	r0, sp, #24
   d48a0:	f7ff fdf9 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48a4:	9b03      	ldr	r3, [sp, #12]
   d48a6:	9305      	str	r3, [sp, #20]
   d48a8:	a904      	add	r1, sp, #16
   d48aa:	a806      	add	r0, sp, #24
   d48ac:	f7ff fdff 	bl	d44ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d48b0:	a905      	add	r1, sp, #20
   d48b2:	4630      	mov	r0, r6
   d48b4:	f7ff fe98 	bl	d45e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48b8:	a806      	add	r0, sp, #24
   d48ba:	f7ff fdec 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48be:	a804      	add	r0, sp, #16
   d48c0:	f7ff fde9 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d48c4:	4630      	mov	r0, r6
   d48c6:	b00b      	add	sp, #44	; 0x2c
   d48c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48cc:	000d57dc 	.word	0x000d57dc
   d48d0:	000d4a41 	.word	0x000d4a41

000d48d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d48d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d48d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d48da:	d006      	beq.n	d48ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d48dc:	2a03      	cmp	r2, #3
   d48de:	d017      	beq.n	d4910 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d48e0:	2a01      	cmp	r2, #1
   d48e2:	d121      	bne.n	d4928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d48e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d48e6:	6003      	str	r3, [r0, #0]
	      break;
   d48e8:	e01e      	b.n	d4928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d48ea:	2018      	movs	r0, #24
   d48ec:	680e      	ldr	r6, [r1, #0]
   d48ee:	f7ff fbd2 	bl	d4096 <_Znwj>
   d48f2:	4605      	mov	r5, r0
   d48f4:	b150      	cbz	r0, d490c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d48f6:	4631      	mov	r1, r6
   d48f8:	f7ff fed5 	bl	d46a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d48fc:	6930      	ldr	r0, [r6, #16]
   d48fe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4902:	b108      	cbz	r0, d4908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4904:	f000 ff06 	bl	d5714 <strdup>
   d4908:	6128      	str	r0, [r5, #16]
   d490a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d490c:	6025      	str	r5, [r4, #0]
   d490e:	e00b      	b.n	d4928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4910:	6804      	ldr	r4, [r0, #0]
   d4912:	b14c      	cbz	r4, d4928 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4914:	6920      	ldr	r0, [r4, #16]
   d4916:	f7ff fd77 	bl	d4408 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d491a:	4620      	mov	r0, r4
   d491c:	f7ff fe39 	bl	d4592 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4920:	2118      	movs	r1, #24
   d4922:	4620      	mov	r0, r4
   d4924:	f000 fd5f 	bl	d53e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4928:	2000      	movs	r0, #0
   d492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d492c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d492c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d492e:	2300      	movs	r3, #0
   d4930:	6083      	str	r3, [r0, #8]
   d4932:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4934:	4604      	mov	r4, r0
   d4936:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4938:	b12b      	cbz	r3, d4946 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d493a:	2202      	movs	r2, #2
   d493c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d493e:	68eb      	ldr	r3, [r5, #12]
   d4940:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4942:	68ab      	ldr	r3, [r5, #8]
   d4944:	60a3      	str	r3, [r4, #8]
	}
    }
   d4946:	4620      	mov	r0, r4
   d4948:	bd38      	pop	{r3, r4, r5, pc}

000d494a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d494a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d494c:	b570      	push	{r4, r5, r6, lr}
   d494e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4950:	d006      	beq.n	d4960 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4952:	2a03      	cmp	r2, #3
   d4954:	d011      	beq.n	d497a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4956:	2a01      	cmp	r2, #1
   d4958:	d118      	bne.n	d498c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d495a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d495c:	6003      	str	r3, [r0, #0]
	      break;
   d495e:	e015      	b.n	d498c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4960:	2014      	movs	r0, #20
   d4962:	680e      	ldr	r6, [r1, #0]
   d4964:	f7ff fb97 	bl	d4096 <_Znwj>
   d4968:	4605      	mov	r5, r0
   d496a:	b120      	cbz	r0, d4976 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d496c:	4631      	mov	r1, r6
   d496e:	f7ff ffdd 	bl	d492c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4972:	7c33      	ldrb	r3, [r6, #16]
   d4974:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4976:	6025      	str	r5, [r4, #0]
   d4978:	e008      	b.n	d498c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d497a:	6804      	ldr	r4, [r0, #0]
   d497c:	b134      	cbz	r4, d498c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d497e:	4620      	mov	r0, r4
   d4980:	f7ff fe07 	bl	d4592 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4984:	2114      	movs	r1, #20
   d4986:	4620      	mov	r0, r4
   d4988:	f000 fd2d 	bl	d53e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d498c:	2000      	movs	r0, #0
   d498e:	bd70      	pop	{r4, r5, r6, pc}

000d4990 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4990:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4992:	2300      	movs	r3, #0
   d4994:	b087      	sub	sp, #28
   d4996:	460c      	mov	r4, r1
   d4998:	f3bf 8f5f 	dmb	sy
   d499c:	e850 6f00 	ldrex	r6, [r0]
   d49a0:	e840 3200 	strex	r2, r3, [r0]
   d49a4:	2a00      	cmp	r2, #0
   d49a6:	d1f9      	bne.n	d499c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d49a8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d49ac:	2e00      	cmp	r6, #0
   d49ae:	d03f      	beq.n	d4a30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d49b0:	4618      	mov	r0, r3
   d49b2:	f7ff fc9d 	bl	d42f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d49b6:	4607      	mov	r7, r0
   d49b8:	b120      	cbz	r0, d49c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d49ba:	4621      	mov	r1, r4
   d49bc:	4630      	mov	r0, r6
   d49be:	f7ff fe62 	bl	d4686 <_ZNKSt8functionIFvRKbEEclES1_>
   d49c2:	e02e      	b.n	d4a22 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d49c4:	4631      	mov	r1, r6
   d49c6:	a801      	add	r0, sp, #4
   d49c8:	f7ff ffb0 	bl	d492c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d49cc:	7823      	ldrb	r3, [r4, #0]
   d49ce:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d49d2:	2010      	movs	r0, #16
   d49d4:	f7ff fb5f 	bl	d4096 <_Znwj>
   d49d8:	4605      	mov	r5, r0
   d49da:	b1d0      	cbz	r0, d4a12 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49dc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49de:	2014      	movs	r0, #20
   d49e0:	f7ff fb59 	bl	d4096 <_Znwj>
   d49e4:	4604      	mov	r4, r0
   d49e6:	b178      	cbz	r0, d4a08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49e8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d49ea:	4601      	mov	r1, r0
   d49ec:	a801      	add	r0, sp, #4
   d49ee:	f7ff fe2a 	bl	d4646 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49f2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d49f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d49f6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d49fa:	9203      	str	r2, [sp, #12]
   d49fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d49fe:	60e3      	str	r3, [r4, #12]
   d4a00:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a04:	9204      	str	r2, [sp, #16]
   d4a06:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4a08:	4b0a      	ldr	r3, [pc, #40]	; (d4a34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4a0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a0c:	4b0a      	ldr	r3, [pc, #40]	; (d4a38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a0e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4a10:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a12:	a801      	add	r0, sp, #4
   d4a14:	f7ff fdbd 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4a18:	2200      	movs	r2, #0
   d4a1a:	4629      	mov	r1, r5
   d4a1c:	4807      	ldr	r0, [pc, #28]	; (d4a3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4a1e:	f7ff fc6f 	bl	d4300 <application_thread_invoke>
   d4a22:	4630      	mov	r0, r6
   d4a24:	f7ff fdb5 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4a28:	2110      	movs	r1, #16
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	f000 fcdb 	bl	d53e6 <_ZdlPvj>
        }
    }
   d4a30:	b007      	add	sp, #28
   d4a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a34:	000d4699 	.word	0x000d4699
   d4a38:	000d494b 	.word	0x000d494b
   d4a3c:	000d444f 	.word	0x000d444f

000d4a40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4a40:	b530      	push	{r4, r5, lr}
   d4a42:	b085      	sub	sp, #20
   d4a44:	4604      	mov	r4, r0
   d4a46:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4a48:	4668      	mov	r0, sp
   d4a4a:	4611      	mov	r1, r2
   d4a4c:	f7ff fddd 	bl	d460a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4a50:	b17c      	cbz	r4, d4a72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4a52:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4a54:	4628      	mov	r0, r5
   d4a56:	b10d      	cbz	r5, d4a5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4a58:	f000 fe5c 	bl	d5714 <strdup>
   d4a5c:	9002      	str	r0, [sp, #8]
   d4a5e:	a902      	add	r1, sp, #8
   d4a60:	4668      	mov	r0, sp
   d4a62:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4a66:	f7ff fe2d 	bl	d46c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4a6a:	9802      	ldr	r0, [sp, #8]
   d4a6c:	f7ff fccc 	bl	d4408 <free>
   d4a70:	e01d      	b.n	d4aae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4a72:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4a74:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4a78:	f04f 0201 	mov.w	r2, #1
   d4a7c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4a80:	42a3      	cmp	r3, r4
   d4a82:	d103      	bne.n	d4a8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4a84:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4a88:	2900      	cmp	r1, #0
   d4a8a:	d1f7      	bne.n	d4a7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4a8c:	d002      	beq.n	d4a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4a8e:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a92:	e00c      	b.n	d4aae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4a94:	f110 010c 	adds.w	r1, r0, #12
   d4a98:	f04f 0301 	mov.w	r3, #1
   d4a9c:	bf18      	it	ne
   d4a9e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4aa0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4aa4:	3004      	adds	r0, #4
   d4aa6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4aaa:	f7ff ff71 	bl	d4990 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4aae:	a801      	add	r0, sp, #4
   d4ab0:	f7ff fcf1 	bl	d4496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4ab4:	b005      	add	sp, #20
   d4ab6:	bd30      	pop	{r4, r5, pc}

000d4ab8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ab8:	2200      	movs	r2, #0
   d4aba:	4611      	mov	r1, r2
   d4abc:	6840      	ldr	r0, [r0, #4]
   d4abe:	f7ff bc83 	b.w	d43c8 <network_listening>

000d4ac2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ac2:	2200      	movs	r2, #0
   d4ac4:	4611      	mov	r1, r2
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	f7ff bc8e 	b.w	d43e8 <network_get_listen_timeout>

000d4acc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4acc:	2200      	movs	r2, #0
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	f7ff bc82 	b.w	d43d8 <network_set_listen_timeout>

000d4ad4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ad4:	2200      	movs	r2, #0
   d4ad6:	f081 0101 	eor.w	r1, r1, #1
   d4ada:	6840      	ldr	r0, [r0, #4]
   d4adc:	f7ff bc6c 	b.w	d43b8 <network_listen>

000d4ae0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ae0:	2300      	movs	r3, #0
   d4ae2:	461a      	mov	r2, r3
   d4ae4:	4619      	mov	r1, r3
   d4ae6:	6840      	ldr	r0, [r0, #4]
   d4ae8:	f7ff bc5e 	b.w	d43a8 <network_off>

000d4aec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4aec:	2300      	movs	r3, #0
   d4aee:	461a      	mov	r2, r3
   d4af0:	4619      	mov	r1, r3
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	f7ff bc50 	b.w	d4398 <network_on>

000d4af8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4af8:	2200      	movs	r2, #0
   d4afa:	4611      	mov	r1, r2
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	f7ff bc43 	b.w	d4388 <network_ready>

000d4b02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b02:	2200      	movs	r2, #0
   d4b04:	4611      	mov	r1, r2
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	f7ff bc2e 	b.w	d4368 <network_connecting>

000d4b0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	2102      	movs	r1, #2
   d4b10:	6840      	ldr	r0, [r0, #4]
   d4b12:	f7ff bc31 	b.w	d4378 <network_disconnect>

000d4b16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b16:	2300      	movs	r3, #0
   d4b18:	461a      	mov	r2, r3
   d4b1a:	6840      	ldr	r0, [r0, #4]
   d4b1c:	f7ff bc1c 	b.w	d4358 <network_connect>

000d4b20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4b20:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b22:	2203      	movs	r2, #3
   d4b24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b26:	4a02      	ldr	r2, [pc, #8]	; (d4b30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b28:	601a      	str	r2, [r3, #0]
   d4b2a:	4770      	bx	lr
   d4b2c:	2003e3f0 	.word	0x2003e3f0
   d4b30:	000d57f8 	.word	0x000d57f8

000d4b34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b34:	4770      	bx	lr

000d4b36 <_ZN9IPAddressD0Ev>:
   d4b36:	b510      	push	{r4, lr}
   d4b38:	2118      	movs	r1, #24
   d4b3a:	4604      	mov	r4, r0
   d4b3c:	f000 fc53 	bl	d53e6 <_ZdlPvj>
   d4b40:	4620      	mov	r0, r4
   d4b42:	bd10      	pop	{r4, pc}

000d4b44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b46:	7d03      	ldrb	r3, [r0, #20]
   d4b48:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b4a:	b08d      	sub	sp, #52	; 0x34
   d4b4c:	460e      	mov	r6, r1
   d4b4e:	f100 0704 	add.w	r7, r0, #4
   d4b52:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b56:	d002      	beq.n	d4b5e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4b58:	f100 0508 	add.w	r5, r0, #8
   d4b5c:	e018      	b.n	d4b90 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b5e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b60:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b62:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b66:	232f      	movs	r3, #47	; 0x2f
   d4b68:	462a      	mov	r2, r5
   d4b6a:	200a      	movs	r0, #10
   d4b6c:	f7ff fb28 	bl	d41c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b70:	4628      	mov	r0, r5
   d4b72:	f000 fdea 	bl	d574a <strlen>
   d4b76:	6833      	ldr	r3, [r6, #0]
   d4b78:	4602      	mov	r2, r0
   d4b7a:	68db      	ldr	r3, [r3, #12]
   d4b7c:	4629      	mov	r1, r5
   d4b7e:	4630      	mov	r0, r6
   d4b80:	4798      	blx	r3
   d4b82:	e00f      	b.n	d4ba4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b84:	b124      	cbz	r4, d4b90 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b86:	212e      	movs	r1, #46	; 0x2e
   d4b88:	4630      	mov	r0, r6
   d4b8a:	f000 f9c7 	bl	d4f1c <_ZN5Print5printEc>
   d4b8e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4b90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b94:	220a      	movs	r2, #10
   d4b96:	4630      	mov	r0, r6
   d4b98:	f000 f9f0 	bl	d4f7c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b9c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b9e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ba0:	d1f0      	bne.n	d4b84 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ba2:	4620      	mov	r0, r4
    }
    return n;
}
   d4ba4:	b00d      	add	sp, #52	; 0x34
   d4ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ba8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ba8:	b510      	push	{r4, lr}
   d4baa:	4b05      	ldr	r3, [pc, #20]	; (d4bc0 <_ZN9IPAddressC1Ev+0x18>)
   d4bac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4bae:	2211      	movs	r2, #17
   d4bb0:	f840 3b04 	str.w	r3, [r0], #4
   d4bb4:	2100      	movs	r1, #0
   d4bb6:	f000 fd7c 	bl	d56b2 <memset>
{
    clear();
}
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}
   d4bbe:	bf00      	nop
   d4bc0:	000d582c 	.word	0x000d582c

000d4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4bc4:	4603      	mov	r3, r0
   d4bc6:	4a07      	ldr	r2, [pc, #28]	; (d4be4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4bc8:	b510      	push	{r4, lr}
   d4bca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4bce:	f101 0210 	add.w	r2, r1, #16
   d4bd2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bd6:	f843 4b04 	str.w	r4, [r3], #4
   d4bda:	4291      	cmp	r1, r2
   d4bdc:	d1f9      	bne.n	d4bd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4bde:	780a      	ldrb	r2, [r1, #0]
   d4be0:	701a      	strb	r2, [r3, #0]
}
   d4be2:	bd10      	pop	{r4, pc}
   d4be4:	000d582c 	.word	0x000d582c

000d4be8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4be8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4bea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4bee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4bf2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4bf6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4bfa:	2304      	movs	r3, #4
   d4bfc:	6041      	str	r1, [r0, #4]
   d4bfe:	7503      	strb	r3, [r0, #20]
   d4c00:	bd10      	pop	{r4, pc}

000d4c02 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4c04:	780d      	ldrb	r5, [r1, #0]
   d4c06:	788b      	ldrb	r3, [r1, #2]
   d4c08:	784a      	ldrb	r2, [r1, #1]
   d4c0a:	78c9      	ldrb	r1, [r1, #3]
   d4c0c:	9100      	str	r1, [sp, #0]
   d4c0e:	4629      	mov	r1, r5
   d4c10:	f7ff ffea 	bl	d4be8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4c14:	b003      	add	sp, #12
   d4c16:	bd30      	pop	{r4, r5, pc}

000d4c18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c18:	4b01      	ldr	r3, [pc, #4]	; (d4c20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c1a:	4a02      	ldr	r2, [pc, #8]	; (d4c24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c1c:	601a      	str	r2, [r3, #0]
   d4c1e:	4770      	bx	lr
   d4c20:	2003e3f8 	.word	0x2003e3f8
   d4c24:	000d58f0 	.word	0x000d58f0

000d4c28 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c28:	2200      	movs	r2, #0
   d4c2a:	4611      	mov	r1, r2
   d4c2c:	6840      	ldr	r0, [r0, #4]
   d4c2e:	f7ff bbcb 	b.w	d43c8 <network_listening>

000d4c32 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c32:	2200      	movs	r2, #0
   d4c34:	4611      	mov	r1, r2
   d4c36:	6840      	ldr	r0, [r0, #4]
   d4c38:	f7ff bbd6 	b.w	d43e8 <network_get_listen_timeout>

000d4c3c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	6840      	ldr	r0, [r0, #4]
   d4c40:	f7ff bbca 	b.w	d43d8 <network_set_listen_timeout>

000d4c44 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c44:	2200      	movs	r2, #0
   d4c46:	f081 0101 	eor.w	r1, r1, #1
   d4c4a:	6840      	ldr	r0, [r0, #4]
   d4c4c:	f7ff bbb4 	b.w	d43b8 <network_listen>

000d4c50 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c50:	2300      	movs	r3, #0
   d4c52:	461a      	mov	r2, r3
   d4c54:	4619      	mov	r1, r3
   d4c56:	6840      	ldr	r0, [r0, #4]
   d4c58:	f7ff bba6 	b.w	d43a8 <network_off>

000d4c5c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c5c:	2300      	movs	r3, #0
   d4c5e:	461a      	mov	r2, r3
   d4c60:	4619      	mov	r1, r3
   d4c62:	6840      	ldr	r0, [r0, #4]
   d4c64:	f7ff bb98 	b.w	d4398 <network_on>

000d4c68 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	4611      	mov	r1, r2
   d4c6c:	6840      	ldr	r0, [r0, #4]
   d4c6e:	f7ff bb8b 	b.w	d4388 <network_ready>

000d4c72 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c72:	2200      	movs	r2, #0
   d4c74:	4611      	mov	r1, r2
   d4c76:	6840      	ldr	r0, [r0, #4]
   d4c78:	f7ff bb76 	b.w	d4368 <network_connecting>

000d4c7c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	2102      	movs	r1, #2
   d4c80:	6840      	ldr	r0, [r0, #4]
   d4c82:	f7ff bb79 	b.w	d4378 <network_disconnect>

000d4c86 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c86:	2300      	movs	r3, #0
   d4c88:	461a      	mov	r2, r3
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff bb64 	b.w	d4358 <network_connect>

000d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c90:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c92:	4605      	mov	r5, r0
   d4c94:	b188      	cbz	r0, d4cba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c96:	6804      	ldr	r4, [r0, #0]
   d4c98:	b14c      	cbz	r4, d4cae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4c9a:	68a3      	ldr	r3, [r4, #8]
   d4c9c:	b11b      	cbz	r3, d4ca6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c9e:	2203      	movs	r2, #3
   d4ca0:	4621      	mov	r1, r4
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ca6:	2110      	movs	r1, #16
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f000 fb9c 	bl	d53e6 <_ZdlPvj>
   d4cae:	4628      	mov	r0, r5
   d4cb0:	2114      	movs	r1, #20
      }
   d4cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cb6:	f000 bb96 	b.w	d53e6 <_ZdlPvj>
   d4cba:	bd38      	pop	{r3, r4, r5, pc}

000d4cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4cbc:	b110      	cbz	r0, d4cc4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4cbe:	6803      	ldr	r3, [r0, #0]
   d4cc0:	685b      	ldr	r3, [r3, #4]
   d4cc2:	4718      	bx	r3
   d4cc4:	4770      	bx	lr

000d4cc6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4cc6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cc8:	6803      	ldr	r3, [r0, #0]
   d4cca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ccc:	b1bb      	cbz	r3, d4cfe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4cce:	6858      	ldr	r0, [r3, #4]
   d4cd0:	f7ff fa36 	bl	d4140 <os_thread_is_current>
   d4cd4:	b978      	cbnz	r0, d4cf6 <_ZN6ThreadD1Ev+0x30>
   d4cd6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4cd8:	7c5a      	ldrb	r2, [r3, #17]
   d4cda:	b912      	cbnz	r2, d4ce2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4cdc:	6858      	ldr	r0, [r3, #4]
   d4cde:	f7ff fa37 	bl	d4150 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ce2:	6823      	ldr	r3, [r4, #0]
   d4ce4:	6858      	ldr	r0, [r3, #4]
   d4ce6:	f7ff fa3b 	bl	d4160 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4cec:	2300      	movs	r3, #0
   d4cee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4cf0:	b128      	cbz	r0, d4cfe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4cf2:	f7ff ffcd 	bl	d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cf6:	6820      	ldr	r0, [r4, #0]
   d4cf8:	b108      	cbz	r0, d4cfe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4cfa:	f7ff ffc9 	bl	d4c90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d4cfe:	4620      	mov	r0, r4
   d4d00:	bd10      	pop	{r4, pc}
	...

000d4d04 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4d04:	b538      	push	{r3, r4, r5, lr}
   d4d06:	4b0c      	ldr	r3, [pc, #48]	; (d4d38 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4d08:	6003      	str	r3, [r0, #0]
   d4d0a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d0c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4d10:	b108      	cbz	r0, d4d16 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4d12:	f7ff f9c4 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d16:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4d1a:	b135      	cbz	r5, d4d2a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d1c:	4628      	mov	r0, r5
   d4d1e:	f7ff ffd2 	bl	d4cc6 <_ZN6ThreadD1Ev>
   d4d22:	2104      	movs	r1, #4
   d4d24:	4628      	mov	r0, r5
   d4d26:	f000 fb5e 	bl	d53e6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d2a:	68a0      	ldr	r0, [r4, #8]
   d4d2c:	b108      	cbz	r0, d4d32 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4d2e:	f7ff ffc5 	bl	d4cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4d32:	4620      	mov	r0, r4
   d4d34:	bd38      	pop	{r3, r4, r5, pc}
   d4d36:	bf00      	nop
   d4d38:	000d5924 	.word	0x000d5924

000d4d3c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d3c:	b538      	push	{r3, r4, r5, lr}
   d4d3e:	4c0d      	ldr	r4, [pc, #52]	; (d4d74 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4d40:	4b0d      	ldr	r3, [pc, #52]	; (d4d78 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4d42:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d44:	2500      	movs	r5, #0
   d4d46:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d48:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4d4c:	6063      	str	r3, [r4, #4]
   d4d4e:	60a5      	str	r5, [r4, #8]
   d4d50:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d54:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4d58:	f7ff fa12 	bl	d4180 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4d5c:	4b07      	ldr	r3, [pc, #28]	; (d4d7c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4d5e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4d62:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4d64:	4620      	mov	r0, r4
   d4d66:	4a06      	ldr	r2, [pc, #24]	; (d4d80 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4d68:	4906      	ldr	r1, [pc, #24]	; (d4d84 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4d6e:	f000 bb35 	b.w	d53dc <__aeabi_atexit>
   d4d72:	bf00      	nop
   d4d74:	2003e3fc 	.word	0x2003e3fc
   d4d78:	000d5958 	.word	0x000d5958
   d4d7c:	000d5924 	.word	0x000d5924
   d4d80:	2003e378 	.word	0x2003e378
   d4d84:	000d4d05 	.word	0x000d4d05

000d4d88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d88:	2300      	movs	r3, #0
   d4d8a:	461a      	mov	r2, r3
   d4d8c:	6840      	ldr	r0, [r0, #4]
   d4d8e:	f7ff bae3 	b.w	d4358 <network_connect>

000d4d92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d92:	2200      	movs	r2, #0
   d4d94:	2102      	movs	r1, #2
   d4d96:	6840      	ldr	r0, [r0, #4]
   d4d98:	f7ff baee 	b.w	d4378 <network_disconnect>

000d4d9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	4611      	mov	r1, r2
   d4da0:	6840      	ldr	r0, [r0, #4]
   d4da2:	f7ff bae1 	b.w	d4368 <network_connecting>

000d4da6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4da6:	2200      	movs	r2, #0
   d4da8:	4611      	mov	r1, r2
   d4daa:	6840      	ldr	r0, [r0, #4]
   d4dac:	f7ff baec 	b.w	d4388 <network_ready>

000d4db0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4db0:	2300      	movs	r3, #0
   d4db2:	461a      	mov	r2, r3
   d4db4:	4619      	mov	r1, r3
   d4db6:	6840      	ldr	r0, [r0, #4]
   d4db8:	f7ff baee 	b.w	d4398 <network_on>

000d4dbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	461a      	mov	r2, r3
   d4dc0:	4619      	mov	r1, r3
   d4dc2:	6840      	ldr	r0, [r0, #4]
   d4dc4:	f7ff baf0 	b.w	d43a8 <network_off>

000d4dc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4dc8:	2200      	movs	r2, #0
   d4dca:	f081 0101 	eor.w	r1, r1, #1
   d4dce:	6840      	ldr	r0, [r0, #4]
   d4dd0:	f7ff baf2 	b.w	d43b8 <network_listen>

000d4dd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	f7ff bafe 	b.w	d43d8 <network_set_listen_timeout>

000d4ddc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ddc:	2200      	movs	r2, #0
   d4dde:	4611      	mov	r1, r2
   d4de0:	6840      	ldr	r0, [r0, #4]
   d4de2:	f7ff bb01 	b.w	d43e8 <network_get_listen_timeout>

000d4de6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4de6:	2200      	movs	r2, #0
   d4de8:	4611      	mov	r1, r2
   d4dea:	6840      	ldr	r0, [r0, #4]
   d4dec:	f7ff baec 	b.w	d43c8 <network_listening>

000d4df0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4df4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4df6:	b095      	sub	sp, #84	; 0x54
   d4df8:	4616      	mov	r6, r2
   d4dfa:	460d      	mov	r5, r1
   d4dfc:	4607      	mov	r7, r0
    IPAddress addr;
   d4dfe:	f7ff fed3 	bl	d4ba8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e02:	4621      	mov	r1, r4
   d4e04:	2220      	movs	r2, #32
   d4e06:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e08:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e0a:	f000 fc52 	bl	d56b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e0e:	2340      	movs	r3, #64	; 0x40
   d4e10:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e12:	4621      	mov	r1, r4
   d4e14:	466b      	mov	r3, sp
   d4e16:	aa0c      	add	r2, sp, #48	; 0x30
   d4e18:	4630      	mov	r0, r6
   d4e1a:	f7ff f9e1 	bl	d41e0 <netdb_getaddrinfo>
    if (!r) {
   d4e1e:	4604      	mov	r4, r0
   d4e20:	2800      	cmp	r0, #0
   d4e22:	d144      	bne.n	d4eae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e24:	4602      	mov	r2, r0
   d4e26:	2101      	movs	r1, #1
   d4e28:	6868      	ldr	r0, [r5, #4]
   d4e2a:	f7ff faad 	bl	d4388 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e2e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e30:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e32:	4622      	mov	r2, r4
   d4e34:	6868      	ldr	r0, [r5, #4]
   d4e36:	f7ff faa7 	bl	d4388 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e3a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e3c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4e3e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e40:	2e00      	cmp	r6, #0
   d4e42:	d034      	beq.n	d4eae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4e44:	2900      	cmp	r1, #0
   d4e46:	d132      	bne.n	d4eae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e48:	6873      	ldr	r3, [r6, #4]
   d4e4a:	2b02      	cmp	r3, #2
   d4e4c:	d002      	beq.n	d4e54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4e4e:	2b0a      	cmp	r3, #10
   d4e50:	d009      	beq.n	d4e66 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4e52:	e02a      	b.n	d4eaa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4e54:	f1b8 0f00 	cmp.w	r8, #0
   d4e58:	d027      	beq.n	d4eaa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e5a:	6971      	ldr	r1, [r6, #20]
   d4e5c:	4638      	mov	r0, r7
   d4e5e:	3104      	adds	r1, #4
   d4e60:	f7ff fecf 	bl	d4c02 <_ZN9IPAddressaSEPKh>
   d4e64:	e020      	b.n	d4ea8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e66:	f1b9 0f00 	cmp.w	r9, #0
   d4e6a:	d01e      	beq.n	d4eaa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e6c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e6e:	2211      	movs	r2, #17
   d4e70:	a801      	add	r0, sp, #4
   d4e72:	f000 fc1e 	bl	d56b2 <memset>
                    a.v = 6;
   d4e76:	2306      	movs	r3, #6
   d4e78:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e7c:	ad01      	add	r5, sp, #4
   d4e7e:	f104 0308 	add.w	r3, r4, #8
   d4e82:	3418      	adds	r4, #24
   d4e84:	6818      	ldr	r0, [r3, #0]
   d4e86:	6859      	ldr	r1, [r3, #4]
   d4e88:	462a      	mov	r2, r5
   d4e8a:	c203      	stmia	r2!, {r0, r1}
   d4e8c:	3308      	adds	r3, #8
   d4e8e:	42a3      	cmp	r3, r4
   d4e90:	4615      	mov	r5, r2
   d4e92:	d1f7      	bne.n	d4e84 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4e94:	a901      	add	r1, sp, #4
   d4e96:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e98:	ad07      	add	r5, sp, #28
   d4e9a:	f7ff fe93 	bl	d4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ea0:	1d3c      	adds	r4, r7, #4
   d4ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ea4:	682b      	ldr	r3, [r5, #0]
   d4ea6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4ea8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eaa:	69f6      	ldr	r6, [r6, #28]
   d4eac:	e7c8      	b.n	d4e40 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4eae:	9800      	ldr	r0, [sp, #0]
   d4eb0:	f7ff f98e 	bl	d41d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4eb4:	4638      	mov	r0, r7
   d4eb6:	b015      	add	sp, #84	; 0x54
   d4eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4ebc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4ebc:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4ebe:	4a03      	ldr	r2, [pc, #12]	; (d4ecc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4ec0:	601a      	str	r2, [r3, #0]
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	605a      	str	r2, [r3, #4]
   d4ec6:	4770      	bx	lr
   d4ec8:	2003e5cc 	.word	0x2003e5cc
   d4ecc:	000d5958 	.word	0x000d5958

000d4ed0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ed2:	4606      	mov	r6, r0
   d4ed4:	460d      	mov	r5, r1
   d4ed6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4ed8:	2400      	movs	r4, #0
  while (size--) {
   d4eda:	42bd      	cmp	r5, r7
   d4edc:	d00c      	beq.n	d4ef8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4ede:	6833      	ldr	r3, [r6, #0]
   d4ee0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ee4:	689b      	ldr	r3, [r3, #8]
   d4ee6:	4630      	mov	r0, r6
   d4ee8:	4798      	blx	r3
     if (chunk>=0)
   d4eea:	2800      	cmp	r0, #0
   d4eec:	db01      	blt.n	d4ef2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4eee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ef0:	e7f3      	b.n	d4eda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ef2:	2c00      	cmp	r4, #0
   d4ef4:	bf08      	it	eq
   d4ef6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ef8:	4620      	mov	r0, r4
   d4efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4efc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4efc:	b570      	push	{r4, r5, r6, lr}
   d4efe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f00:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f02:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4f04:	b149      	cbz	r1, d4f1a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4f06:	f000 fc20 	bl	d574a <strlen>
   d4f0a:	682b      	ldr	r3, [r5, #0]
   d4f0c:	4602      	mov	r2, r0
   d4f0e:	4621      	mov	r1, r4
   d4f10:	4628      	mov	r0, r5
   d4f12:	68db      	ldr	r3, [r3, #12]
    }
   d4f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f18:	4718      	bx	r3
    }
   d4f1a:	bd70      	pop	{r4, r5, r6, pc}

000d4f1c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4f1c:	6803      	ldr	r3, [r0, #0]
   d4f1e:	689b      	ldr	r3, [r3, #8]
   d4f20:	4718      	bx	r3

000d4f22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f22:	b530      	push	{r4, r5, lr}
   d4f24:	b08b      	sub	sp, #44	; 0x2c
   d4f26:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f28:	2100      	movs	r1, #0
   d4f2a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f2e:	2a01      	cmp	r2, #1
   d4f30:	bf98      	it	ls
   d4f32:	220a      	movls	r2, #10
   d4f34:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4f38:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4f3c:	fb05 3312 	mls	r3, r5, r2, r3
   d4f40:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f44:	2b09      	cmp	r3, #9
   d4f46:	bf94      	ite	ls
   d4f48:	3330      	addls	r3, #48	; 0x30
   d4f4a:	3337      	addhi	r3, #55	; 0x37
   d4f4c:	b2db      	uxtb	r3, r3
   d4f4e:	4621      	mov	r1, r4
   d4f50:	f804 3901 	strb.w	r3, [r4], #-1
   d4f54:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4f56:	2d00      	cmp	r5, #0
   d4f58:	d1ee      	bne.n	d4f38 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4f5a:	f7ff ffcf 	bl	d4efc <_ZN5Print5writeEPKc>
}
   d4f5e:	b00b      	add	sp, #44	; 0x2c
   d4f60:	bd30      	pop	{r4, r5, pc}

000d4f62 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4f62:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4f64:	b92a      	cbnz	r2, d4f72 <_ZN5Print5printEmi+0x10>
   d4f66:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4f68:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4f6c:	689b      	ldr	r3, [r3, #8]
   d4f6e:	b2c9      	uxtb	r1, r1
   d4f70:	4718      	bx	r3
  else return printNumber(n, base);
   d4f72:	b2d2      	uxtb	r2, r2
}
   d4f74:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4f78:	f7ff bfd3 	b.w	d4f22 <_ZN5Print11printNumberEmh>

000d4f7c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4f7c:	f7ff bff1 	b.w	d4f62 <_ZN5Print5printEmi>

000d4f80 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f80:	b510      	push	{r4, lr}
   d4f82:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f84:	f7ff fb05 	bl	d4592 <_ZNSt14_Function_baseD1Ev>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f8c:	4803      	ldr	r0, [pc, #12]	; (d4f9c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f8e:	4a04      	ldr	r2, [pc, #16]	; (d4fa0 <_GLOBAL__sub_I_RGB+0x14>)
   d4f90:	4904      	ldr	r1, [pc, #16]	; (d4fa4 <_GLOBAL__sub_I_RGB+0x18>)
   d4f92:	2300      	movs	r3, #0
   d4f94:	6083      	str	r3, [r0, #8]
   d4f96:	f000 ba21 	b.w	d53dc <__aeabi_atexit>
   d4f9a:	bf00      	nop
   d4f9c:	2003e5d4 	.word	0x2003e5d4
   d4fa0:	2003e378 	.word	0x2003e378
   d4fa4:	000d4f81 	.word	0x000d4f81

000d4fa8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4fa8:	4770      	bx	lr

000d4faa <_ZN8SPIClassD0Ev>:
   d4faa:	b510      	push	{r4, lr}
   d4fac:	2110      	movs	r1, #16
   d4fae:	4604      	mov	r4, r0
   d4fb0:	f000 fa19 	bl	d53e6 <_ZdlPvj>
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	bd10      	pop	{r4, pc}

000d4fb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4fb8:	b570      	push	{r4, r5, r6, lr}
   d4fba:	4b08      	ldr	r3, [pc, #32]	; (d4fdc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4fbc:	6003      	str	r3, [r0, #0]
   d4fbe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4fc0:	2500      	movs	r5, #0
   d4fc2:	460e      	mov	r6, r1
   d4fc4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4fc8:	f7ff f8d2 	bl	d4170 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4fcc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4fce:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4fd0:	f7ff f90e 	bl	d41f0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4fd4:	60a5      	str	r5, [r4, #8]
}
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	bd70      	pop	{r4, r5, r6, pc}
   d4fda:	bf00      	nop
   d4fdc:	000d598c 	.word	0x000d598c

000d4fe0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4fe0:	b510      	push	{r4, lr}
   d4fe2:	4604      	mov	r4, r0
{
	free(buffer);
   d4fe4:	6800      	ldr	r0, [r0, #0]
   d4fe6:	f7ff fa0f 	bl	d4408 <free>
}
   d4fea:	4620      	mov	r0, r4
   d4fec:	bd10      	pop	{r4, pc}

000d4fee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4fee:	b510      	push	{r4, lr}
   d4ff0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4ff2:	6800      	ldr	r0, [r0, #0]
   d4ff4:	b108      	cbz	r0, d4ffa <_ZN6String10invalidateEv+0xc>
   d4ff6:	f7ff fa07 	bl	d4408 <free>
	buffer = NULL;
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4ffe:	60a3      	str	r3, [r4, #8]
   d5000:	6063      	str	r3, [r4, #4]
   d5002:	bd10      	pop	{r4, pc}

000d5004 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5004:	b538      	push	{r3, r4, r5, lr}
   d5006:	4604      	mov	r4, r0
   d5008:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d500a:	6800      	ldr	r0, [r0, #0]
   d500c:	3101      	adds	r1, #1
   d500e:	f7ff fa03 	bl	d4418 <realloc>
	if (newbuffer) {
   d5012:	b110      	cbz	r0, d501a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5014:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5018:	2001      	movs	r0, #1
	}
	return 0;
}
   d501a:	bd38      	pop	{r3, r4, r5, pc}

000d501c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d501c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d501e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5020:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5022:	b113      	cbz	r3, d502a <_ZN6String7reserveEj+0xe>
   d5024:	6843      	ldr	r3, [r0, #4]
   d5026:	428b      	cmp	r3, r1
   d5028:	d207      	bcs.n	d503a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d502a:	4620      	mov	r0, r4
   d502c:	f7ff ffea 	bl	d5004 <_ZN6String12changeBufferEj>
   d5030:	b120      	cbz	r0, d503c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5032:	68a3      	ldr	r3, [r4, #8]
   d5034:	b90b      	cbnz	r3, d503a <_ZN6String7reserveEj+0x1e>
   d5036:	6822      	ldr	r2, [r4, #0]
   d5038:	7013      	strb	r3, [r2, #0]
   d503a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d503c:	bd10      	pop	{r4, pc}

000d503e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d503e:	b570      	push	{r4, r5, r6, lr}
   d5040:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5042:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5044:	4604      	mov	r4, r0
   d5046:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5048:	f7ff ffe8 	bl	d501c <_ZN6String7reserveEj>
   d504c:	b918      	cbnz	r0, d5056 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d504e:	4620      	mov	r0, r4
   d5050:	f7ff ffcd 	bl	d4fee <_ZN6String10invalidateEv>
		return *this;
   d5054:	e009      	b.n	d506a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5056:	462a      	mov	r2, r5
   d5058:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d505a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d505c:	6820      	ldr	r0, [r4, #0]
   d505e:	f000 fb1d 	bl	d569c <memcpy>
	buffer[len] = 0;
   d5062:	6822      	ldr	r2, [r4, #0]
   d5064:	68a3      	ldr	r3, [r4, #8]
   d5066:	2100      	movs	r1, #0
   d5068:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d506a:	4620      	mov	r0, r4
   d506c:	bd70      	pop	{r4, r5, r6, pc}

000d506e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d506e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5070:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5072:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5074:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5076:	6043      	str	r3, [r0, #4]
	len = 0;
   d5078:	6083      	str	r3, [r0, #8]
	flags = 0;
   d507a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d507c:	460d      	mov	r5, r1
   d507e:	b139      	cbz	r1, d5090 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5080:	4608      	mov	r0, r1
   d5082:	f000 fb62 	bl	d574a <strlen>
   d5086:	4629      	mov	r1, r5
   d5088:	4602      	mov	r2, r0
   d508a:	4620      	mov	r0, r4
   d508c:	f7ff ffd7 	bl	d503e <_ZN6String4copyEPKcj>
}
   d5090:	4620      	mov	r0, r4
   d5092:	bd38      	pop	{r3, r4, r5, pc}

000d5094 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5094:	4b04      	ldr	r3, [pc, #16]	; (d50a8 <_GLOBAL__sub_I_System+0x14>)
   d5096:	2000      	movs	r0, #0
   d5098:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d509c:	7018      	strb	r0, [r3, #0]
   d509e:	8058      	strh	r0, [r3, #2]
   d50a0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50a2:	f7ff b915 	b.w	d42d0 <set_system_mode>
   d50a6:	bf00      	nop
   d50a8:	2003e5e4 	.word	0x2003e5e4

000d50ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d50ac:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d50ae:	681a      	ldr	r2, [r3, #0]
   d50b0:	4b02      	ldr	r3, [pc, #8]	; (d50bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d50b2:	601a      	str	r2, [r3, #0]
   d50b4:	4770      	bx	lr
   d50b6:	bf00      	nop
   d50b8:	2003e310 	.word	0x2003e310
   d50bc:	2003e5ec 	.word	0x2003e5ec

000d50c0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d50c0:	4770      	bx	lr

000d50c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d50c2:	7441      	strb	r1, [r0, #17]
   d50c4:	4770      	bx	lr

000d50c6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d50c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d50c8:	7c00      	ldrb	r0, [r0, #16]
   d50ca:	f7ff f8c9 	bl	d4260 <HAL_USART_Available_Data_For_Write>
}
   d50ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50d2:	bd08      	pop	{r3, pc}

000d50d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d50d4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d50d6:	7c00      	ldrb	r0, [r0, #16]
   d50d8:	f7ff f8a2 	bl	d4220 <HAL_USART_Available_Data>
}
   d50dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d50e0:	bd08      	pop	{r3, pc}

000d50e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d50e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d50e4:	7c00      	ldrb	r0, [r0, #16]
   d50e6:	f7ff f8ab 	bl	d4240 <HAL_USART_Peek_Data>
}
   d50ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d50ee:	bf28      	it	cs
   d50f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d50f4:	bd08      	pop	{r3, pc}

000d50f6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d50f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d50f8:	7c00      	ldrb	r0, [r0, #16]
   d50fa:	f7ff f899 	bl	d4230 <HAL_USART_Read_Data>
}
   d50fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5102:	bf28      	it	cs
   d5104:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5108:	bd08      	pop	{r3, pc}

000d510a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d510a:	7c00      	ldrb	r0, [r0, #16]
   d510c:	f7ff b8a0 	b.w	d4250 <HAL_USART_Flush_Data>

000d5110 <_ZN11USARTSerialD0Ev>:
   d5110:	b510      	push	{r4, lr}
   d5112:	2114      	movs	r1, #20
   d5114:	4604      	mov	r4, r0
   d5116:	f000 f966 	bl	d53e6 <_ZdlPvj>
   d511a:	4620      	mov	r0, r4
   d511c:	bd10      	pop	{r4, pc}

000d511e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d511e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5120:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5122:	4604      	mov	r4, r0
   d5124:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5126:	b925      	cbnz	r5, d5132 <_ZN11USARTSerial5writeEh+0x14>
   d5128:	7c00      	ldrb	r0, [r0, #16]
   d512a:	f7ff f899 	bl	d4260 <HAL_USART_Available_Data_For_Write>
   d512e:	2800      	cmp	r0, #0
   d5130:	dd05      	ble.n	d513e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5132:	4631      	mov	r1, r6
   d5134:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d513a:	f7ff b869 	b.w	d4210 <HAL_USART_Write_Data>
  }
  return 0;
}
   d513e:	4628      	mov	r0, r5
   d5140:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5144 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5144:	b510      	push	{r4, lr}
   d5146:	4604      	mov	r4, r0
   d5148:	4608      	mov	r0, r1
   d514a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d514c:	2200      	movs	r2, #0
   d514e:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5154:	60a2      	str	r2, [r4, #8]
   d5156:	4a05      	ldr	r2, [pc, #20]	; (d516c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5158:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d515a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d515c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d515e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5160:	461a      	mov	r2, r3
   d5162:	f7ff f84d 	bl	d4200 <HAL_USART_Init>
}
   d5166:	4620      	mov	r0, r4
   d5168:	bd10      	pop	{r4, pc}
   d516a:	bf00      	nop
   d516c:	000d59c8 	.word	0x000d59c8

000d5170 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5170:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5172:	4d0c      	ldr	r5, [pc, #48]	; (d51a4 <_Z22__fetch_global_Serial1v+0x34>)
   d5174:	6829      	ldr	r1, [r5, #0]
   d5176:	f011 0401 	ands.w	r4, r1, #1
   d517a:	d111      	bne.n	d51a0 <_Z22__fetch_global_Serial1v+0x30>
   d517c:	4628      	mov	r0, r5
   d517e:	f7fe ff90 	bl	d40a2 <__cxa_guard_acquire>
   d5182:	b168      	cbz	r0, d51a0 <_Z22__fetch_global_Serial1v+0x30>
   d5184:	4a08      	ldr	r2, [pc, #32]	; (d51a8 <_Z22__fetch_global_Serial1v+0x38>)
   d5186:	4b09      	ldr	r3, [pc, #36]	; (d51ac <_Z22__fetch_global_Serial1v+0x3c>)
   d5188:	4809      	ldr	r0, [pc, #36]	; (d51b0 <_Z22__fetch_global_Serial1v+0x40>)
   d518a:	4621      	mov	r1, r4
   d518c:	f7ff ffda 	bl	d5144 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5190:	4628      	mov	r0, r5
   d5192:	f7fe ff8b 	bl	d40ac <__cxa_guard_release>
   d5196:	4a07      	ldr	r2, [pc, #28]	; (d51b4 <_Z22__fetch_global_Serial1v+0x44>)
   d5198:	4907      	ldr	r1, [pc, #28]	; (d51b8 <_Z22__fetch_global_Serial1v+0x48>)
   d519a:	4805      	ldr	r0, [pc, #20]	; (d51b0 <_Z22__fetch_global_Serial1v+0x40>)
   d519c:	f000 f91e 	bl	d53dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d51a0:	4803      	ldr	r0, [pc, #12]	; (d51b0 <_Z22__fetch_global_Serial1v+0x40>)
   d51a2:	bd38      	pop	{r3, r4, r5, pc}
   d51a4:	2003e688 	.word	0x2003e688
   d51a8:	2003e68c 	.word	0x2003e68c
   d51ac:	2003e604 	.word	0x2003e604
   d51b0:	2003e5f0 	.word	0x2003e5f0
   d51b4:	2003e378 	.word	0x2003e378
   d51b8:	000d50c1 	.word	0x000d50c1

000d51bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51bc:	7441      	strb	r1, [r0, #17]
   d51be:	4770      	bx	lr

000d51c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d51c0:	4770      	bx	lr

000d51c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d51c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d51c4:	2100      	movs	r1, #0
   d51c6:	7c00      	ldrb	r0, [r0, #16]
   d51c8:	f7ff f86a 	bl	d42a0 <HAL_USB_USART_Receive_Data>
}
   d51cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51d0:	bf28      	it	cs
   d51d2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d51d6:	bd08      	pop	{r3, pc}

000d51d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d51d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d51da:	2101      	movs	r1, #1
   d51dc:	7c00      	ldrb	r0, [r0, #16]
   d51de:	f7ff f85f 	bl	d42a0 <HAL_USB_USART_Receive_Data>
}
   d51e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d51e6:	bf28      	it	cs
   d51e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d51ec:	bd08      	pop	{r3, pc}

000d51ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d51ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d51f0:	7c00      	ldrb	r0, [r0, #16]
   d51f2:	f7ff f84d 	bl	d4290 <HAL_USB_USART_Available_Data_For_Write>
}
   d51f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51fa:	bd08      	pop	{r3, pc}

000d51fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d51fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d51fe:	7c00      	ldrb	r0, [r0, #16]
   d5200:	f7ff f83e 	bl	d4280 <HAL_USB_USART_Available_Data>
}
   d5204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5208:	bd08      	pop	{r3, pc}

000d520a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d520a:	7c00      	ldrb	r0, [r0, #16]
   d520c:	f7ff b858 	b.w	d42c0 <HAL_USB_USART_Flush_Data>

000d5210 <_ZN9USBSerialD0Ev>:
   d5210:	b510      	push	{r4, lr}
   d5212:	2114      	movs	r1, #20
   d5214:	4604      	mov	r4, r0
   d5216:	f000 f8e6 	bl	d53e6 <_ZdlPvj>
   d521a:	4620      	mov	r0, r4
   d521c:	bd10      	pop	{r4, pc}

000d521e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d521e:	b538      	push	{r3, r4, r5, lr}
   d5220:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5222:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5224:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5226:	f7ff f833 	bl	d4290 <HAL_USB_USART_Available_Data_For_Write>
   d522a:	2800      	cmp	r0, #0
   d522c:	dc01      	bgt.n	d5232 <_ZN9USBSerial5writeEh+0x14>
   d522e:	7c60      	ldrb	r0, [r4, #17]
   d5230:	b128      	cbz	r0, d523e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5232:	4629      	mov	r1, r5
   d5234:	7c20      	ldrb	r0, [r4, #16]
   d5236:	f7ff f83b 	bl	d42b0 <HAL_USB_USART_Send_Data>
   d523a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d523e:	bd38      	pop	{r3, r4, r5, pc}

000d5240 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5240:	b510      	push	{r4, lr}
   d5242:	4604      	mov	r4, r0
   d5244:	2300      	movs	r3, #0
   d5246:	6063      	str	r3, [r4, #4]
   d5248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d524c:	60a3      	str	r3, [r4, #8]
   d524e:	4b05      	ldr	r3, [pc, #20]	; (d5264 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5250:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5252:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5254:	4608      	mov	r0, r1
{
  _serial = serial;
   d5256:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5258:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d525a:	4611      	mov	r1, r2
   d525c:	f7ff f808 	bl	d4270 <HAL_USB_USART_Init>
}
   d5260:	4620      	mov	r0, r4
   d5262:	bd10      	pop	{r4, pc}
   d5264:	000d59f8 	.word	0x000d59f8

000d5268 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5268:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d526a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d526c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d526e:	2100      	movs	r1, #0
   d5270:	f000 fa1f 	bl	d56b2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5274:	4620      	mov	r0, r4
   d5276:	bd10      	pop	{r4, pc}

000d5278 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5278:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d527a:	4d0e      	ldr	r5, [pc, #56]	; (d52b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d527c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d527e:	a801      	add	r0, sp, #4
   d5280:	f7ff fff2 	bl	d5268 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5284:	6829      	ldr	r1, [r5, #0]
   d5286:	f011 0401 	ands.w	r4, r1, #1
   d528a:	d110      	bne.n	d52ae <_Z16_fetch_usbserialv+0x36>
   d528c:	4628      	mov	r0, r5
   d528e:	f7fe ff08 	bl	d40a2 <__cxa_guard_acquire>
   d5292:	b160      	cbz	r0, d52ae <_Z16_fetch_usbserialv+0x36>
   d5294:	aa01      	add	r2, sp, #4
   d5296:	4621      	mov	r1, r4
   d5298:	4807      	ldr	r0, [pc, #28]	; (d52b8 <_Z16_fetch_usbserialv+0x40>)
   d529a:	f7ff ffd1 	bl	d5240 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d529e:	4628      	mov	r0, r5
   d52a0:	f7fe ff04 	bl	d40ac <__cxa_guard_release>
   d52a4:	4a05      	ldr	r2, [pc, #20]	; (d52bc <_Z16_fetch_usbserialv+0x44>)
   d52a6:	4906      	ldr	r1, [pc, #24]	; (d52c0 <_Z16_fetch_usbserialv+0x48>)
   d52a8:	4803      	ldr	r0, [pc, #12]	; (d52b8 <_Z16_fetch_usbserialv+0x40>)
   d52aa:	f000 f897 	bl	d53dc <__aeabi_atexit>
	return _usbserial;
}
   d52ae:	4802      	ldr	r0, [pc, #8]	; (d52b8 <_Z16_fetch_usbserialv+0x40>)
   d52b0:	b007      	add	sp, #28
   d52b2:	bd30      	pop	{r4, r5, pc}
   d52b4:	2003e710 	.word	0x2003e710
   d52b8:	2003e714 	.word	0x2003e714
   d52bc:	2003e378 	.word	0x2003e378
   d52c0:	000d51c1 	.word	0x000d51c1

000d52c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d52c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d52c6:	4b0c      	ldr	r3, [pc, #48]	; (d52f8 <serialEventRun+0x34>)
   d52c8:	b133      	cbz	r3, d52d8 <serialEventRun+0x14>
   d52ca:	f7ff ffd5 	bl	d5278 <_Z16_fetch_usbserialv>
   d52ce:	6803      	ldr	r3, [r0, #0]
   d52d0:	691b      	ldr	r3, [r3, #16]
   d52d2:	4798      	blx	r3
   d52d4:	2800      	cmp	r0, #0
   d52d6:	dc09      	bgt.n	d52ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d52d8:	4b08      	ldr	r3, [pc, #32]	; (d52fc <serialEventRun+0x38>)
   d52da:	b163      	cbz	r3, d52f6 <serialEventRun+0x32>
   d52dc:	f7ff ff48 	bl	d5170 <_Z22__fetch_global_Serial1v>
   d52e0:	6803      	ldr	r3, [r0, #0]
   d52e2:	691b      	ldr	r3, [r3, #16]
   d52e4:	4798      	blx	r3
   d52e6:	2800      	cmp	r0, #0
   d52e8:	dc03      	bgt.n	d52f2 <serialEventRun+0x2e>
   d52ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52ec:	f3af 8000 	nop.w
   d52f0:	e7f2      	b.n	d52d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52f2:	f3af 8000 	nop.w
   d52f6:	bd08      	pop	{r3, pc}
	...

000d5300 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5300:	b508      	push	{r3, lr}
	serialEventRun();
   d5302:	f7ff ffdf 	bl	d52c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5306:	f7fe ff4b 	bl	d41a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d530a:	4b01      	ldr	r3, [pc, #4]	; (d5310 <_post_loop+0x10>)
   d530c:	6018      	str	r0, [r3, #0]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	2003e72c 	.word	0x2003e72c

000d5314 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5314:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5316:	2300      	movs	r3, #0
   d5318:	9300      	str	r3, [sp, #0]
   d531a:	461a      	mov	r2, r3
   d531c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5320:	f7ff f800 	bl	d4324 <system_ctrl_set_result>
}
   d5324:	b003      	add	sp, #12
   d5326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d532c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d532c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d532e:	8843      	ldrh	r3, [r0, #2]
   d5330:	2b0a      	cmp	r3, #10
   d5332:	d008      	beq.n	d5346 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5334:	2b50      	cmp	r3, #80	; 0x50
   d5336:	d109      	bne.n	d534c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5338:	4b09      	ldr	r3, [pc, #36]	; (d5360 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d533a:	681b      	ldr	r3, [r3, #0]
   d533c:	b13b      	cbz	r3, d534e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d533e:	b003      	add	sp, #12
   d5340:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5344:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5346:	f7ff ffe5 	bl	d5314 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d534a:	e006      	b.n	d535a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d534c:	2300      	movs	r3, #0
   d534e:	9300      	str	r3, [sp, #0]
   d5350:	461a      	mov	r2, r3
   d5352:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5356:	f7fe ffe5 	bl	d4324 <system_ctrl_set_result>
        break;
    }
}
   d535a:	b003      	add	sp, #12
   d535c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5360:	2003e728 	.word	0x2003e728

000d5364 <module_user_init_hook>:

void module_user_init_hook()
{
   d5364:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5366:	f7fe ff13 	bl	d4190 <HAL_RNG_GetRandomNumber>
   d536a:	4604      	mov	r4, r0
    srand(seed);
   d536c:	f000 f9aa 	bl	d56c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5370:	4b07      	ldr	r3, [pc, #28]	; (d5390 <module_user_init_hook+0x2c>)
   d5372:	b113      	cbz	r3, d537a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5374:	4620      	mov	r0, r4
   d5376:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d537a:	2100      	movs	r1, #0
   d537c:	4804      	ldr	r0, [pc, #16]	; (d5390 <module_user_init_hook+0x2c>)
   d537e:	f7fe ffe3 	bl	d4348 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5382:	2100      	movs	r1, #0
   d5384:	4803      	ldr	r0, [pc, #12]	; (d5394 <module_user_init_hook+0x30>)
}
   d5386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d538a:	f7fe bfc1 	b.w	d4310 <system_ctrl_set_app_request_handler>
   d538e:	bf00      	nop
   d5390:	00000000 	.word	0x00000000
   d5394:	000d532d 	.word	0x000d532d

000d5398 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5398:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d539a:	4c0c      	ldr	r4, [pc, #48]	; (d53cc <_GLOBAL__sub_I_SPI+0x34>)
   d539c:	4e0c      	ldr	r6, [pc, #48]	; (d53d0 <_GLOBAL__sub_I_SPI+0x38>)
   d539e:	4d0d      	ldr	r5, [pc, #52]	; (d53d4 <_GLOBAL__sub_I_SPI+0x3c>)
   d53a0:	2100      	movs	r1, #0
   d53a2:	4620      	mov	r0, r4
   d53a4:	f7ff fe08 	bl	d4fb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d53a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d53aa:	4c0b      	ldr	r4, [pc, #44]	; (d53d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d53ac:	4632      	mov	r2, r6
   d53ae:	4629      	mov	r1, r5
   d53b0:	f000 f814 	bl	d53dc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d53b4:	2101      	movs	r1, #1
   d53b6:	4620      	mov	r0, r4
   d53b8:	f7ff fdfe 	bl	d4fb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d53bc:	4632      	mov	r2, r6
   d53be:	4629      	mov	r1, r5
   d53c0:	4620      	mov	r0, r4
   d53c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d53c6:	f000 b809 	b.w	d53dc <__aeabi_atexit>
   d53ca:	bf00      	nop
   d53cc:	2003e730 	.word	0x2003e730
   d53d0:	2003e378 	.word	0x2003e378
   d53d4:	000d4fa9 	.word	0x000d4fa9
   d53d8:	2003e740 	.word	0x2003e740

000d53dc <__aeabi_atexit>:
   d53dc:	460b      	mov	r3, r1
   d53de:	4601      	mov	r1, r0
   d53e0:	4618      	mov	r0, r3
   d53e2:	f000 b94d 	b.w	d5680 <__cxa_atexit>

000d53e6 <_ZdlPvj>:
   d53e6:	f7fe be58 	b.w	d409a <_ZdlPv>

000d53ea <_ZSt25__throw_bad_function_callv>:
   d53ea:	b508      	push	{r3, lr}
   d53ec:	f7ff f81c 	bl	d4428 <abort>

000d53f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d53f0:	4b24      	ldr	r3, [pc, #144]	; (d5484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d0      	lsls	r0, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b22      	ldr	r3, [pc, #136]	; (d5488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d1      	lsls	r1, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4b20      	ldr	r3, [pc, #128]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d540a:	681a      	ldr	r2, [r3, #0]
   d540c:	07d2      	lsls	r2, r2, #31
   d540e:	bf5c      	itt	pl
   d5410:	2201      	movpl	r2, #1
   d5412:	601a      	strpl	r2, [r3, #0]
   d5414:	4b1e      	ldr	r3, [pc, #120]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d0      	lsls	r0, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b1c      	ldr	r3, [pc, #112]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d1      	lsls	r1, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4b1a      	ldr	r3, [pc, #104]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d2      	lsls	r2, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b18      	ldr	r3, [pc, #96]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d0      	lsls	r0, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b16      	ldr	r3, [pc, #88]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d1      	lsls	r1, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b14      	ldr	r3, [pc, #80]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d2      	lsls	r2, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b12      	ldr	r3, [pc, #72]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d0      	lsls	r0, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b10      	ldr	r3, [pc, #64]	; (d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b0e      	ldr	r3, [pc, #56]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4770      	bx	lr
   d5482:	bf00      	nop
   d5484:	2003e77c 	.word	0x2003e77c
   d5488:	2003e778 	.word	0x2003e778
   d548c:	2003e774 	.word	0x2003e774
   d5490:	2003e770 	.word	0x2003e770
   d5494:	2003e76c 	.word	0x2003e76c
   d5498:	2003e768 	.word	0x2003e768
   d549c:	2003e764 	.word	0x2003e764
   d54a0:	2003e760 	.word	0x2003e760
   d54a4:	2003e75c 	.word	0x2003e75c
   d54a8:	2003e758 	.word	0x2003e758
   d54ac:	2003e754 	.word	0x2003e754
   d54b0:	2003e750 	.word	0x2003e750

000d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54b4:	4b18      	ldr	r3, [pc, #96]	; (d5518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54b6:	681a      	ldr	r2, [r3, #0]
   d54b8:	07d1      	lsls	r1, r2, #31
   d54ba:	bf5c      	itt	pl
   d54bc:	2201      	movpl	r2, #1
   d54be:	601a      	strpl	r2, [r3, #0]
   d54c0:	4b16      	ldr	r3, [pc, #88]	; (d551c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d54c2:	681a      	ldr	r2, [r3, #0]
   d54c4:	07d2      	lsls	r2, r2, #31
   d54c6:	bf5c      	itt	pl
   d54c8:	2201      	movpl	r2, #1
   d54ca:	601a      	strpl	r2, [r3, #0]
   d54cc:	4b14      	ldr	r3, [pc, #80]	; (d5520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d54ce:	681a      	ldr	r2, [r3, #0]
   d54d0:	07d0      	lsls	r0, r2, #31
   d54d2:	bf5c      	itt	pl
   d54d4:	2201      	movpl	r2, #1
   d54d6:	601a      	strpl	r2, [r3, #0]
   d54d8:	4b12      	ldr	r3, [pc, #72]	; (d5524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d54da:	681a      	ldr	r2, [r3, #0]
   d54dc:	07d1      	lsls	r1, r2, #31
   d54de:	bf5c      	itt	pl
   d54e0:	2201      	movpl	r2, #1
   d54e2:	601a      	strpl	r2, [r3, #0]
   d54e4:	4b10      	ldr	r3, [pc, #64]	; (d5528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d54e6:	681a      	ldr	r2, [r3, #0]
   d54e8:	07d2      	lsls	r2, r2, #31
   d54ea:	bf5c      	itt	pl
   d54ec:	2201      	movpl	r2, #1
   d54ee:	601a      	strpl	r2, [r3, #0]
   d54f0:	4b0e      	ldr	r3, [pc, #56]	; (d552c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d54f2:	681a      	ldr	r2, [r3, #0]
   d54f4:	07d0      	lsls	r0, r2, #31
   d54f6:	bf5c      	itt	pl
   d54f8:	2201      	movpl	r2, #1
   d54fa:	601a      	strpl	r2, [r3, #0]
   d54fc:	4b0c      	ldr	r3, [pc, #48]	; (d5530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d1      	lsls	r1, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b0a      	ldr	r3, [pc, #40]	; (d5534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d2      	lsls	r2, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4770      	bx	lr
   d5516:	bf00      	nop
   d5518:	2003e79c 	.word	0x2003e79c
   d551c:	2003e798 	.word	0x2003e798
   d5520:	2003e794 	.word	0x2003e794
   d5524:	2003e790 	.word	0x2003e790
   d5528:	2003e78c 	.word	0x2003e78c
   d552c:	2003e788 	.word	0x2003e788
   d5530:	2003e784 	.word	0x2003e784
   d5534:	2003e780 	.word	0x2003e780

000d5538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5538:	4b18      	ldr	r3, [pc, #96]	; (d559c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d1      	lsls	r1, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4b16      	ldr	r3, [pc, #88]	; (d55a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5546:	681a      	ldr	r2, [r3, #0]
   d5548:	07d2      	lsls	r2, r2, #31
   d554a:	bf5c      	itt	pl
   d554c:	2201      	movpl	r2, #1
   d554e:	601a      	strpl	r2, [r3, #0]
   d5550:	4b14      	ldr	r3, [pc, #80]	; (d55a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	07d0      	lsls	r0, r2, #31
   d5556:	bf5c      	itt	pl
   d5558:	2201      	movpl	r2, #1
   d555a:	601a      	strpl	r2, [r3, #0]
   d555c:	4b12      	ldr	r3, [pc, #72]	; (d55a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d555e:	681a      	ldr	r2, [r3, #0]
   d5560:	07d1      	lsls	r1, r2, #31
   d5562:	bf5c      	itt	pl
   d5564:	2201      	movpl	r2, #1
   d5566:	601a      	strpl	r2, [r3, #0]
   d5568:	4b10      	ldr	r3, [pc, #64]	; (d55ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d2      	lsls	r2, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b0e      	ldr	r3, [pc, #56]	; (d55b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d0      	lsls	r0, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b0c      	ldr	r3, [pc, #48]	; (d55b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d1      	lsls	r1, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b0a      	ldr	r3, [pc, #40]	; (d55b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d2      	lsls	r2, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4770      	bx	lr
   d559a:	bf00      	nop
   d559c:	2003e7bc 	.word	0x2003e7bc
   d55a0:	2003e7b8 	.word	0x2003e7b8
   d55a4:	2003e7b4 	.word	0x2003e7b4
   d55a8:	2003e7b0 	.word	0x2003e7b0
   d55ac:	2003e7ac 	.word	0x2003e7ac
   d55b0:	2003e7a8 	.word	0x2003e7a8
   d55b4:	2003e7a4 	.word	0x2003e7a4
   d55b8:	2003e7a0 	.word	0x2003e7a0

000d55bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d55bc:	4b24      	ldr	r3, [pc, #144]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d0      	lsls	r0, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b22      	ldr	r3, [pc, #136]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d1      	lsls	r1, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b20      	ldr	r3, [pc, #128]	; (d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d2      	lsls	r2, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b1e      	ldr	r3, [pc, #120]	; (d565c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d0      	lsls	r0, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4b1c      	ldr	r3, [pc, #112]	; (d5660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	07d1      	lsls	r1, r2, #31
   d55f2:	bf5c      	itt	pl
   d55f4:	2201      	movpl	r2, #1
   d55f6:	601a      	strpl	r2, [r3, #0]
   d55f8:	4b1a      	ldr	r3, [pc, #104]	; (d5664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d55fa:	681a      	ldr	r2, [r3, #0]
   d55fc:	07d2      	lsls	r2, r2, #31
   d55fe:	bf5c      	itt	pl
   d5600:	2201      	movpl	r2, #1
   d5602:	601a      	strpl	r2, [r3, #0]
   d5604:	4b18      	ldr	r3, [pc, #96]	; (d5668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5606:	681a      	ldr	r2, [r3, #0]
   d5608:	07d0      	lsls	r0, r2, #31
   d560a:	bf5c      	itt	pl
   d560c:	2201      	movpl	r2, #1
   d560e:	601a      	strpl	r2, [r3, #0]
   d5610:	4b16      	ldr	r3, [pc, #88]	; (d566c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5612:	681a      	ldr	r2, [r3, #0]
   d5614:	07d1      	lsls	r1, r2, #31
   d5616:	bf5c      	itt	pl
   d5618:	2201      	movpl	r2, #1
   d561a:	601a      	strpl	r2, [r3, #0]
   d561c:	4b14      	ldr	r3, [pc, #80]	; (d5670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d561e:	681a      	ldr	r2, [r3, #0]
   d5620:	07d2      	lsls	r2, r2, #31
   d5622:	bf5c      	itt	pl
   d5624:	2201      	movpl	r2, #1
   d5626:	601a      	strpl	r2, [r3, #0]
   d5628:	4b12      	ldr	r3, [pc, #72]	; (d5674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d562a:	681a      	ldr	r2, [r3, #0]
   d562c:	07d0      	lsls	r0, r2, #31
   d562e:	bf5c      	itt	pl
   d5630:	2201      	movpl	r2, #1
   d5632:	601a      	strpl	r2, [r3, #0]
   d5634:	4b10      	ldr	r3, [pc, #64]	; (d5678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5636:	681a      	ldr	r2, [r3, #0]
   d5638:	07d1      	lsls	r1, r2, #31
   d563a:	bf5c      	itt	pl
   d563c:	2201      	movpl	r2, #1
   d563e:	601a      	strpl	r2, [r3, #0]
   d5640:	4b0e      	ldr	r3, [pc, #56]	; (d567c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	07d2      	lsls	r2, r2, #31
   d5646:	bf5c      	itt	pl
   d5648:	2201      	movpl	r2, #1
   d564a:	601a      	strpl	r2, [r3, #0]
   d564c:	4770      	bx	lr
   d564e:	bf00      	nop
   d5650:	2003e7ec 	.word	0x2003e7ec
   d5654:	2003e7e8 	.word	0x2003e7e8
   d5658:	2003e7e4 	.word	0x2003e7e4
   d565c:	2003e7e0 	.word	0x2003e7e0
   d5660:	2003e7dc 	.word	0x2003e7dc
   d5664:	2003e7d8 	.word	0x2003e7d8
   d5668:	2003e7d4 	.word	0x2003e7d4
   d566c:	2003e7d0 	.word	0x2003e7d0
   d5670:	2003e7cc 	.word	0x2003e7cc
   d5674:	2003e7c8 	.word	0x2003e7c8
   d5678:	2003e7c4 	.word	0x2003e7c4
   d567c:	2003e7c0 	.word	0x2003e7c0

000d5680 <__cxa_atexit>:
   d5680:	b510      	push	{r4, lr}
   d5682:	4c05      	ldr	r4, [pc, #20]	; (d5698 <__cxa_atexit+0x18>)
   d5684:	4613      	mov	r3, r2
   d5686:	b12c      	cbz	r4, d5694 <__cxa_atexit+0x14>
   d5688:	460a      	mov	r2, r1
   d568a:	4601      	mov	r1, r0
   d568c:	2002      	movs	r0, #2
   d568e:	f3af 8000 	nop.w
   d5692:	bd10      	pop	{r4, pc}
   d5694:	4620      	mov	r0, r4
   d5696:	bd10      	pop	{r4, pc}
   d5698:	00000000 	.word	0x00000000

000d569c <memcpy>:
   d569c:	b510      	push	{r4, lr}
   d569e:	1e43      	subs	r3, r0, #1
   d56a0:	440a      	add	r2, r1
   d56a2:	4291      	cmp	r1, r2
   d56a4:	d004      	beq.n	d56b0 <memcpy+0x14>
   d56a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d56aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d56ae:	e7f8      	b.n	d56a2 <memcpy+0x6>
   d56b0:	bd10      	pop	{r4, pc}

000d56b2 <memset>:
   d56b2:	4402      	add	r2, r0
   d56b4:	4603      	mov	r3, r0
   d56b6:	4293      	cmp	r3, r2
   d56b8:	d002      	beq.n	d56c0 <memset+0xe>
   d56ba:	f803 1b01 	strb.w	r1, [r3], #1
   d56be:	e7fa      	b.n	d56b6 <memset+0x4>
   d56c0:	4770      	bx	lr
	...

000d56c4 <srand>:
   d56c4:	b538      	push	{r3, r4, r5, lr}
   d56c6:	4b12      	ldr	r3, [pc, #72]	; (d5710 <srand+0x4c>)
   d56c8:	681c      	ldr	r4, [r3, #0]
   d56ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d56cc:	4605      	mov	r5, r0
   d56ce:	b9d3      	cbnz	r3, d5706 <srand+0x42>
   d56d0:	2018      	movs	r0, #24
   d56d2:	f7fe fe91 	bl	d43f8 <malloc>
   d56d6:	f243 330e 	movw	r3, #13070	; 0x330e
   d56da:	63a0      	str	r0, [r4, #56]	; 0x38
   d56dc:	8003      	strh	r3, [r0, #0]
   d56de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d56e2:	8043      	strh	r3, [r0, #2]
   d56e4:	f241 2334 	movw	r3, #4660	; 0x1234
   d56e8:	8083      	strh	r3, [r0, #4]
   d56ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d56ee:	80c3      	strh	r3, [r0, #6]
   d56f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d56f4:	8103      	strh	r3, [r0, #8]
   d56f6:	2305      	movs	r3, #5
   d56f8:	8143      	strh	r3, [r0, #10]
   d56fa:	230b      	movs	r3, #11
   d56fc:	8183      	strh	r3, [r0, #12]
   d56fe:	2201      	movs	r2, #1
   d5700:	2300      	movs	r3, #0
   d5702:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5708:	2200      	movs	r2, #0
   d570a:	611d      	str	r5, [r3, #16]
   d570c:	615a      	str	r2, [r3, #20]
   d570e:	bd38      	pop	{r3, r4, r5, pc}
   d5710:	2003e374 	.word	0x2003e374

000d5714 <strdup>:
   d5714:	4b02      	ldr	r3, [pc, #8]	; (d5720 <strdup+0xc>)
   d5716:	4601      	mov	r1, r0
   d5718:	6818      	ldr	r0, [r3, #0]
   d571a:	f000 b803 	b.w	d5724 <_strdup_r>
   d571e:	bf00      	nop
   d5720:	2003e374 	.word	0x2003e374

000d5724 <_strdup_r>:
   d5724:	b570      	push	{r4, r5, r6, lr}
   d5726:	4606      	mov	r6, r0
   d5728:	4608      	mov	r0, r1
   d572a:	460c      	mov	r4, r1
   d572c:	f000 f80d 	bl	d574a <strlen>
   d5730:	1c45      	adds	r5, r0, #1
   d5732:	4629      	mov	r1, r5
   d5734:	4630      	mov	r0, r6
   d5736:	f7fe fe7f 	bl	d4438 <_malloc_r>
   d573a:	4606      	mov	r6, r0
   d573c:	b118      	cbz	r0, d5746 <_strdup_r+0x22>
   d573e:	462a      	mov	r2, r5
   d5740:	4621      	mov	r1, r4
   d5742:	f7ff ffab 	bl	d569c <memcpy>
   d5746:	4630      	mov	r0, r6
   d5748:	bd70      	pop	{r4, r5, r6, pc}

000d574a <strlen>:
   d574a:	4603      	mov	r3, r0
   d574c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5750:	2a00      	cmp	r2, #0
   d5752:	d1fb      	bne.n	d574c <strlen+0x2>
   d5754:	1a18      	subs	r0, r3, r0
   d5756:	3801      	subs	r0, #1
   d5758:	4770      	bx	lr

000d575a <link_code_end>:
	...

000d575c <dynalib_user>:
   d575c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d576c:	0000 0000 6c61 7265 0074 227b 6573 2271     ....alert.{"seq"
   d577c:	313a 2c32 7422 6d69 2265 313a 3635 3333     :12,"time":15633
   d578c:	3939 3532 2c33 6522 7272 726f 3a22 7d32     99253,"error":2}
   d579c:	0000 0000                                   ....

000d57a0 <_ZTVN5spark13CellularClassE>:
	...
   d57a8:	452b 000d 4521 000d 4517 000d 44cd 000d     +E..!E...E...D..
   d57b8:	450b 000d 44ff 000d 44f3 000d 44eb 000d     .E...D...D...D..
   d57c8:	44e1 000d 44d7 000d 4df1 000d               .D...D...M..

000d57d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d57dc:	4575 000d 457b 000d 45a5 000d 4589 000d     uE..{E...E...E..
   d57ec:	4577 000d                                   wE..

000d57f0 <_ZTVN5spark13EthernetClassE>:
	...
   d57f8:	4b17 000d 4b0d 000d 4b03 000d 4af9 000d     .K...K...K...J..
   d5808:	4aed 000d 4ae1 000d 4ad5 000d 4acd 000d     .J...J...J...J..
   d5818:	4ac3 000d 4ab9 000d 4df1 000d               .J...J...M..

000d5824 <_ZTV9IPAddress>:
	...
   d582c:	4b45 000d 4b35 000d 4b37 000d 0066 6e6c     EK..5K..7K..f.ln
   d583c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d584c:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d585c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d586c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d587c:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d588c:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d589c:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d58ac:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d58bc:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d58cc:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d58dc:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d58ec:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d58fc:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d590c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d591c <_ZTVN5spark9MeshClassE>:
	...
   d5924:	4c87 000d 4c7d 000d 4c73 000d 4c69 000d     .L..}L..sL..iL..
   d5934:	4c5d 000d 4c51 000d 4c45 000d 4c3d 000d     ]L..QL..EL..=L..
   d5944:	4c33 000d 4c29 000d 4df1 000d               3L..)L...M..

000d5950 <_ZTVN5spark12NetworkClassE>:
	...
   d5958:	4d89 000d 4d93 000d 4d9d 000d 4da7 000d     .M...M...M...M..
   d5968:	4db1 000d 4dbd 000d 4dc9 000d 4dd5 000d     .M...M...M...M..
   d5978:	4ddd 000d 4de7 000d 4df1 000d               .M...M...M..

000d5984 <_ZTV8SPIClass>:
	...
   d598c:	4fa9 000d 4fab 000d 005a 2b25 3330 3a64     .O...O..Z.%+03d:
   d599c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d59ac:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d59bc:	0000 0000                                   ....

000d59c0 <_ZTV11USARTSerial>:
	...
   d59c8:	50c1 000d 5111 000d 511f 000d 4ed1 000d     .P...Q...Q...N..
   d59d8:	50d5 000d 50f7 000d 50e3 000d 510b 000d     .P...P...P...Q..
   d59e8:	50c3 000d 50c7 000d                         .P...P..

000d59f0 <_ZTV9USBSerial>:
	...
   d59f8:	51c1 000d 5211 000d 521f 000d 4ed1 000d     .Q...R...R...N..
   d5a08:	51fd 000d 51c3 000d 51d9 000d 520b 000d     .Q...Q...Q...R..
   d5a18:	51ef 000d 51bd 000d                         .Q...Q..

000d5a20 <__sf_fake_stdin>:
	...

000d5a40 <__sf_fake_stdout>:
	...

000d5a60 <__sf_fake_stderr>:
	...
   d5a80:	0043                                        C.

000d5a82 <link_const_variable_data_end>:
	...

000d5a84 <link_constructors_location>:
   d5a84:	000d4109 	.word	0x000d4109
   d5a88:	000d44bd 	.word	0x000d44bd
   d5a8c:	000d4535 	.word	0x000d4535
   d5a90:	000d4b21 	.word	0x000d4b21
   d5a94:	000d4c19 	.word	0x000d4c19
   d5a98:	000d4d3d 	.word	0x000d4d3d
   d5a9c:	000d4ebd 	.word	0x000d4ebd
   d5aa0:	000d4f8d 	.word	0x000d4f8d
   d5aa4:	000d5095 	.word	0x000d5095
   d5aa8:	000d50ad 	.word	0x000d50ad
   d5aac:	000d5399 	.word	0x000d5399
   d5ab0:	000d53f1 	.word	0x000d53f1
   d5ab4:	000d54b5 	.word	0x000d54b5
   d5ab8:	000d5539 	.word	0x000d5539
   d5abc:	000d55bd 	.word	0x000d55bd
