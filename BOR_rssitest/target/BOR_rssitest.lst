
/Users/simonxu/Projects/Github-simjxu/partiscripts/BOR_rssitest/target/BOR_rssitest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016178  2**0
                  CONTENTS
  3 .data         0000007c  2003e2cc  000d60d0  0000e2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004a8  2003e348  2003e348  0001e348  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d614c  000d614c  0001614c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6174  000d6174  00016174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a5c22  00000000  00000000  00016178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f94a  00000000  00000000  000bbd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014120  00000000  00000000  000cb6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ee8  00000000  00000000  000df804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000032f0  00000000  00000000  000e16ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00032043  00000000  00000000  000e49dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025177  00000000  00000000  00116a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d42a4  00000000  00000000  0013bb96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b804  00000000  00000000  0020fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e4 5c 0d 00                                         .\..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe0f 	bl	d5c50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe14 	bl	d5c66 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2cc 	.word	0x2003e2cc
   d4048:	000d60d0 	.word	0x000d60d0
   d404c:	2003e348 	.word	0x2003e348
   d4050:	2003e348 	.word	0x2003e348
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbfb 	bl	d5854 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d60c8 	.word	0x000d60c8
   d4080:	000d6090 	.word	0x000d6090

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f89d 	bl	d41c8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bbad 	b.w	d57f0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 babf 	b.w	d4618 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bac5 	b.w	d4628 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bac3 	b.w	d4628 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9ledToggle6String>:
}


// Finally, we will write out our ledToggle function, which is referenced by the Particle.function() called "led"

int ledToggle(String command) {
   d40b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	490e      	ldr	r1, [pc, #56]	; (d40f4 <_Z9ledToggle6String+0x3c>)
   d40bc:	4605      	mov	r5, r0
   d40be:	f001 fa51 	bl	d5564 <_ZNK6String6equalsEPKc>

	if (command=="on") {
   d40c2:	4604      	mov	r4, r0
   d40c4:	b130      	cbz	r0, d40d4 <_Z9ledToggle6String+0x1c>
		digitalWrite(boardled,HIGH);
   d40c6:	4b0c      	ldr	r3, [pc, #48]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40c8:	2101      	movs	r1, #1
   d40ca:	8818      	ldrh	r0, [r3, #0]
   d40cc:	f001 fc07 	bl	d58de <digitalWrite>
   d40d0:	2001      	movs	r0, #1
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	4909      	ldr	r1, [pc, #36]	; (d40fc <_Z9ledToggle6String+0x44>)
   d40d6:	4628      	mov	r0, r5
   d40d8:	f001 fa44 	bl	d5564 <_ZNK6String6equalsEPKc>
		return 1;
	}
	else if (command=="off") {
   d40dc:	b130      	cbz	r0, d40ec <_Z9ledToggle6String+0x34>
		digitalWrite(boardled,LOW);
   d40de:	4b06      	ldr	r3, [pc, #24]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40e0:	4621      	mov	r1, r4
   d40e2:	8818      	ldrh	r0, [r3, #0]
   d40e4:	f001 fbfb 	bl	d58de <digitalWrite>
		return 0;
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		return -1;
   d40ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

   d40f0:	bd38      	pop	{r3, r4, r5, pc}
   d40f2:	bf00      	nop
   d40f4:	000d5cf8 	.word	0x000d5cf8
   d40f8:	2003e2d8 	.word	0x2003e2d8
   d40fc:	000d5cfb 	.word	0x000d5cfb

000d4100 <setup>:
  Serial.print(", data: ");
  Serial.println(data);
  analogWrite(pwm, 250);
}

void setup() {
   d4100:	b513      	push	{r0, r1, r4, lr}

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4102:	4b20      	ldr	r3, [pc, #128]	; (d4184 <setup+0x84>)
	pinMode(boardled,OUTPUT);		// This is the onboard led
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4104:	4c20      	ldr	r4, [pc, #128]	; (d4188 <setup+0x88>)

void setup() {

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4106:	8818      	ldrh	r0, [r3, #0]
   d4108:	2101      	movs	r1, #1
   d410a:	f001 fbd7 	bl	d58bc <pinMode>
	pinMode(boardled,OUTPUT);		// This is the onboard led
   d410e:	4b1f      	ldr	r3, [pc, #124]	; (d418c <setup+0x8c>)
   d4110:	2101      	movs	r1, #1
   d4112:	8818      	ldrh	r0, [r3, #0]
   d4114:	f001 fbd2 	bl	d58bc <pinMode>
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
   d4118:	4b1d      	ldr	r3, [pc, #116]	; (d4190 <setup+0x90>)
   d411a:	2100      	movs	r1, #0
   d411c:	8818      	ldrh	r0, [r3, #0]
   d411e:	f001 fbcd 	bl	d58bc <pinMode>
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4122:	8820      	ldrh	r0, [r4, #0]
   d4124:	2101      	movs	r1, #1
   d4126:	f001 fbc9 	bl	d58bc <pinMode>
												 // (sending out consistent power)
	pinMode(pwm, OUTPUT); // Pin for the pwm output
   d412a:	4b1a      	ldr	r3, [pc, #104]	; (d4194 <setup+0x94>)
   d412c:	2101      	movs	r1, #1
   d412e:	8818      	ldrh	r0, [r3, #0]
   d4130:	f001 fbc4 	bl	d58bc <pinMode>

	// Next, write one pin of the photoresistor to be the maximum possible, so that 
	// we can use this for power.
	digitalWrite(power,HIGH);
   d4134:	8820      	ldrh	r0, [r4, #0]
   d4136:	2101      	movs	r1, #1
   d4138:	f001 fbd1 	bl	d58de <digitalWrite>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d413c:	2300      	movs	r3, #0
   d413e:	2209      	movs	r2, #9
   d4140:	4915      	ldr	r1, [pc, #84]	; (d4198 <setup+0x98>)
   d4142:	4816      	ldr	r0, [pc, #88]	; (d419c <setup+0x9c>)
   d4144:	f000 f9f8 	bl	d4538 <spark_variable>
   d4148:	2300      	movs	r3, #0
   d414a:	2209      	movs	r2, #9
   d414c:	4914      	ldr	r1, [pc, #80]	; (d41a0 <setup+0xa0>)
   d414e:	4815      	ldr	r0, [pc, #84]	; (d41a4 <setup+0xa4>)
   d4150:	f000 f9f2 	bl	d4538 <spark_variable>
   d4154:	2300      	movs	r3, #0
   d4156:	2209      	movs	r2, #9
   d4158:	4913      	ldr	r1, [pc, #76]	; (d41a8 <setup+0xa8>)
   d415a:	4814      	ldr	r0, [pc, #80]	; (d41ac <setup+0xac>)
   d415c:	f000 f9ec 	bl	d4538 <spark_variable>

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4160:	2308      	movs	r3, #8
   d4162:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d4166:	4b12      	ldr	r3, [pc, #72]	; (d41b0 <setup+0xb0>)
   d4168:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d416a:	2204      	movs	r2, #4
   d416c:	466b      	mov	r3, sp
   d416e:	4911      	ldr	r1, [pc, #68]	; (d41b4 <setup+0xb4>)
   d4170:	4811      	ldr	r0, [pc, #68]	; (d41b8 <setup+0xb8>)
   d4172:	f000 f9e1 	bl	d4538 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4176:	4a11      	ldr	r2, [pc, #68]	; (d41bc <setup+0xbc>)
   d4178:	4911      	ldr	r1, [pc, #68]	; (d41c0 <setup+0xc0>)
   d417a:	4812      	ldr	r0, [pc, #72]	; (d41c4 <setup+0xc4>)
   d417c:	f000 fbfc 	bl	d4978 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	// This is saying that when we ask the cloud for the function "led", it will employ 
	//the function ledToggle() from this app.

	// // Subscribe to the light_level and point to Handler
  // Mesh.subscribe("light_level", myHandler);
}
   d4180:	b002      	add	sp, #8
   d4182:	bd10      	pop	{r4, pc}
   d4184:	2003e2dc 	.word	0x2003e2dc
   d4188:	2003e2d0 	.word	0x2003e2d0
   d418c:	2003e2d8 	.word	0x2003e2d8
   d4190:	2003e2d4 	.word	0x2003e2d4
   d4194:	2003e2cc 	.word	0x2003e2cc
   d4198:	2003e368 	.word	0x2003e368
   d419c:	000d5d08 	.word	0x000d5d08
   d41a0:	2003e350 	.word	0x2003e350
   d41a4:	000d5d14 	.word	0x000d5d14
   d41a8:	2003e358 	.word	0x2003e358
   d41ac:	000d5d1f 	.word	0x000d5d1f
   d41b0:	000d40b3 	.word	0x000d40b3
   d41b4:	2003e370 	.word	0x2003e370
   d41b8:	000d5d28 	.word	0x000d5d28
   d41bc:	000d5d2f 	.word	0x000d5d2f
   d41c0:	000d40b9 	.word	0x000d40b9
   d41c4:	000d494d 	.word	0x000d494d

000d41c8 <loop>:


// Next is the loop function...

void loop() {
   d41c8:	b510      	push	{r4, lr}
  delay(2000);
   d41ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}


// Next is the loop function...

void loop() {
   d41ce:	b090      	sub	sp, #64	; 0x40
  delay(2000);
   d41d0:	f000 fa52 	bl	d4678 <delay>
  CellularSignal sig = Cellular.RSSI();
  radioRSSI = String::format("SIG=%i,QUAL=%i", sig.rssi, sig.qual);
   d41d4:	4c17      	ldr	r4, [pc, #92]	; (d4234 <loop+0x6c>)

// Next is the loop function...

void loop() {
  delay(2000);
  CellularSignal sig = Cellular.RSSI();
   d41d6:	4918      	ldr	r1, [pc, #96]	; (d4238 <loop+0x70>)
   d41d8:	a806      	add	r0, sp, #24
   d41da:	f000 fa97 	bl	d470c <_ZN5spark13CellularClass4RSSIEv>
  radioRSSI = String::format("SIG=%i,QUAL=%i", sig.rssi, sig.qual);
   d41de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d41e0:	9a08      	ldr	r2, [sp, #32]
   d41e2:	4916      	ldr	r1, [pc, #88]	; (d423c <loop+0x74>)
   d41e4:	a802      	add	r0, sp, #8
   d41e6:	f001 f9cf 	bl	d5588 <_ZN6String6formatEPKcz>
   d41ea:	a902      	add	r1, sp, #8
   d41ec:	4620      	mov	r0, r4
   d41ee:	f001 f9b1 	bl	d5554 <_ZN6StringaSEOS_>
   d41f2:	a802      	add	r0, sp, #8
   d41f4:	f001 f91d 	bl	d5432 <_ZN6StringD1Ev>
   d41f8:	4b11      	ldr	r3, [pc, #68]	; (d4240 <loop+0x78>)
   d41fa:	6822      	ldr	r2, [r4, #0]
   d41fc:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41fe:	f88d 3000 	strb.w	r3, [sp]
   d4202:	4910      	ldr	r1, [pc, #64]	; (d4244 <loop+0x7c>)
   d4204:	233c      	movs	r3, #60	; 0x3c
   d4206:	a802      	add	r0, sp, #8
   d4208:	f000 fcec 	bl	d4be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d420c:	9c03      	ldr	r4, [sp, #12]
   d420e:	b17c      	cbz	r4, d4230 <loop+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4210:	6863      	ldr	r3, [r4, #4]
   d4212:	3b01      	subs	r3, #1
   d4214:	6063      	str	r3, [r4, #4]
   d4216:	b95b      	cbnz	r3, d4230 <loop+0x68>
        {
          _M_dispose();
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	4620      	mov	r0, r4
   d421c:	689b      	ldr	r3, [r3, #8]
   d421e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4220:	68a3      	ldr	r3, [r4, #8]
   d4222:	3b01      	subs	r3, #1
   d4224:	60a3      	str	r3, [r4, #8]
   d4226:	b91b      	cbnz	r3, d4230 <loop+0x68>
            _M_destroy();
   d4228:	6823      	ldr	r3, [r4, #0]
   d422a:	4620      	mov	r0, r4
   d422c:	68db      	ldr	r3, [r3, #12]
   d422e:	4798      	blx	r3

  Particle.publish("RSSI", radioRSSI, NO_ACK);
}
   d4230:	b010      	add	sp, #64	; 0x40
   d4232:	bd10      	pop	{r4, pc}
   d4234:	2003e370 	.word	0x2003e370
   d4238:	2003e380 	.word	0x2003e380
   d423c:	000d5d33 	.word	0x000d5d33
   d4240:	2003e360 	.word	0x2003e360
   d4244:	000d5d42 	.word	0x000d5d42

000d4248 <_GLOBAL__sub_I_led>:
	}
	else {
		return -1;
	}

   d4248:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d424a:	4b08      	ldr	r3, [pc, #32]	; (d426c <_GLOBAL__sub_I_led+0x24>)
double setpoint;
double minim = 40.0;
double maxim = 300.0;
double fadeamount = 1.0;
double brightness = 0.0;
String radioRSSI = "SIG=NA,QUAL=NA";
   d424c:	4c08      	ldr	r4, [pc, #32]	; (d4270 <_GLOBAL__sub_I_led+0x28>)
   d424e:	2202      	movs	r2, #2
   d4250:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4252:	f000 f84d 	bl	d42f0 <HAL_Pin_Map>
   d4256:	4907      	ldr	r1, [pc, #28]	; (d4274 <_GLOBAL__sub_I_led+0x2c>)
   d4258:	4620      	mov	r0, r4
   d425a:	f001 f931 	bl	d54c0 <_ZN6StringC1EPK19__FlashStringHelper>
   d425e:	4620      	mov	r0, r4
   d4260:	4a05      	ldr	r2, [pc, #20]	; (d4278 <_GLOBAL__sub_I_led+0x30>)
   d4262:	4906      	ldr	r1, [pc, #24]	; (d427c <_GLOBAL__sub_I_led+0x34>)
	}
	else {
		return -1;
	}

   d4264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
double setpoint;
double minim = 40.0;
double maxim = 300.0;
double fadeamount = 1.0;
double brightness = 0.0;
String radioRSSI = "SIG=NA,QUAL=NA";
   d4268:	f001 bb94 	b.w	d5994 <__aeabi_atexit>
   d426c:	2003e360 	.word	0x2003e360
   d4270:	2003e370 	.word	0x2003e370
   d4274:	000d5d47 	.word	0x000d5d47
   d4278:	2003e348 	.word	0x2003e348
   d427c:	000d5433 	.word	0x000d5433

000d4280 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <cellular_signal+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030274 	.word	0x00030274

000d4290 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <os_thread_is_current+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	689b      	ldr	r3, [r3, #8]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030248 	.word	0x00030248

000d42a0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <os_thread_join+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	691b      	ldr	r3, [r3, #16]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030248 	.word	0x00030248

000d42b0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <os_thread_cleanup+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030248 	.word	0x00030248

000d42c0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <os_mutex_create+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030248 	.word	0x00030248

000d42d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <os_mutex_recursive_create+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030248 	.word	0x00030248

000d42e0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	695b      	ldr	r3, [r3, #20]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030218 	.word	0x00030218

000d42f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_Pin_Map+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	681b      	ldr	r3, [r3, #0]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003022c 	.word	0x0003022c

000d4300 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_Pin_Mode+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	689b      	ldr	r3, [r3, #8]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003022c 	.word	0x0003022c

000d4310 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_Get_Pin_Mode+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	68db      	ldr	r3, [r3, #12]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003022c 	.word	0x0003022c

000d4320 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_GPIO_Write+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	691b      	ldr	r3, [r3, #16]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003022c 	.word	0x0003022c

000d4330 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_I2C_Write_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6a1b      	ldr	r3, [r3, #32]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030228 	.word	0x00030228

000d4340 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_I2C_Available_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_I2C_Read_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030228 	.word	0x00030228

000d4360 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_I2C_Peek_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030228 	.word	0x00030228

000d4370 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_I2C_Flush_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030228 	.word	0x00030228

000d4380 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_I2C_Is_Enabled+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030228 	.word	0x00030228

000d4390 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_I2C_Init+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030228 	.word	0x00030228

000d43a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <inet_inet_ntop+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	695b      	ldr	r3, [r3, #20]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030264 	.word	0x00030264

000d43b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <netdb_freeaddrinfo+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	689b      	ldr	r3, [r3, #8]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030268 	.word	0x00030268

000d43c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <netdb_getaddrinfo+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	68db      	ldr	r3, [r3, #12]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030268 	.word	0x00030268

000d43d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_SPI_Init+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	69db      	ldr	r3, [r3, #28]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030230 	.word	0x00030230

000d43e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_SPI_Is_Enabled+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6a1b      	ldr	r3, [r3, #32]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030230 	.word	0x00030230

000d43f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USART_Init+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003023c 	.word	0x0003023c

000d4400 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USART_Write_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	68db      	ldr	r3, [r3, #12]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003023c 	.word	0x0003023c

000d4410 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USART_Available_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	691b      	ldr	r3, [r3, #16]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003023c 	.word	0x0003023c

000d4420 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USART_Read_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003023c 	.word	0x0003023c

000d4430 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USART_Peek_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	699b      	ldr	r3, [r3, #24]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USART_Flush_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	69db      	ldr	r3, [r3, #28]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Is_Enabled+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6a1b      	ldr	r3, [r3, #32]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Available_Data_For_Write+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USB_USART_Init+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	681b      	ldr	r3, [r3, #0]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003024c 	.word	0x0003024c

000d4480 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USB_USART_Available_Data+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	691b      	ldr	r3, [r3, #16]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003024c 	.word	0x0003024c

000d4490 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	695b      	ldr	r3, [r3, #20]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003024c 	.word	0x0003024c

000d44a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USB_USART_Receive_Data+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	699b      	ldr	r3, [r3, #24]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003024c 	.word	0x0003024c

000d44b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USB_USART_Send_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	69db      	ldr	r3, [r3, #28]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003024c 	.word	0x0003024c

000d44c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USB_USART_Flush_Data+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6a1b      	ldr	r3, [r3, #32]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003024c 	.word	0x0003024c

000d44d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <set_system_mode+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	685b      	ldr	r3, [r3, #4]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030220 	.word	0x00030220

000d44e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <system_delay_ms+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	695b      	ldr	r3, [r3, #20]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030220 	.word	0x00030220

000d44f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <application_thread_current+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030220 	.word	0x00030220

000d4500 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <application_thread_invoke+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030220 	.word	0x00030220

000d4510 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b03      	ldr	r3, [pc, #12]	; (d4520 <system_ctrl_set_app_request_handler+0x10>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d451a:	9301      	str	r3, [sp, #4]
   d451c:	bd08      	pop	{r3, pc}
   d451e:	0000      	.short	0x0000
   d4520:	00030220 	.word	0x00030220

000d4524 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b03      	ldr	r3, [pc, #12]	; (d4534 <system_ctrl_set_result+0x10>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d452e:	9301      	str	r3, [sp, #4]
   d4530:	bd08      	pop	{r3, pc}
   d4532:	0000      	.short	0x0000
   d4534:	00030220 	.word	0x00030220

000d4538 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <spark_variable+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	681b      	ldr	r3, [r3, #0]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030244 	.word	0x00030244

000d4548 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <spark_function+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	685b      	ldr	r3, [r3, #4]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030244 	.word	0x00030244

000d4558 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <spark_send_event+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6a1b      	ldr	r3, [r3, #32]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030244 	.word	0x00030244

000d4568 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <spark_set_random_seed_from_cloud_handler+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030244 	.word	0x00030244

000d4578 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <network_connect+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	685b      	ldr	r3, [r3, #4]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030240 	.word	0x00030240

000d4588 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <network_connecting+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	689b      	ldr	r3, [r3, #8]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030240 	.word	0x00030240

000d4598 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <network_disconnect+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	68db      	ldr	r3, [r3, #12]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030240 	.word	0x00030240

000d45a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <network_ready+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	691b      	ldr	r3, [r3, #16]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030240 	.word	0x00030240

000d45b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <network_on+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	695b      	ldr	r3, [r3, #20]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030240 	.word	0x00030240

000d45c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <network_off+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	699b      	ldr	r3, [r3, #24]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030240 	.word	0x00030240

000d45d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <network_listen+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	69db      	ldr	r3, [r3, #28]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030240 	.word	0x00030240

000d45e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <network_listening+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a1b      	ldr	r3, [r3, #32]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030240 	.word	0x00030240

000d45f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_set_listen_timeout+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_get_listen_timeout+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <malloc>:
#include <errno.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <malloc+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003021c 	.word	0x0003021c

000d4628 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <free+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	685b      	ldr	r3, [r3, #4]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003021c 	.word	0x0003021c

000d4638 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <realloc+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	689b      	ldr	r3, [r3, #8]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003021c 	.word	0x0003021c

000d4648 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <vsnprintf+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003021c 	.word	0x0003021c

000d4658 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <abort+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003021c 	.word	0x0003021c

000d4668 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <_malloc_r+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003021c 	.word	0x0003021c

000d4678 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4678:	2100      	movs	r1, #0
   d467a:	f7ff bf31 	b.w	d44e0 <system_delay_ms>

000d467e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d467e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4680:	6883      	ldr	r3, [r0, #8]
   d4682:	4604      	mov	r4, r0
   d4684:	b90b      	cbnz	r3, d468a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4686:	f001 f98a 	bl	d599e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d468a:	68c3      	ldr	r3, [r0, #12]
   d468c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d468e:	68a3      	ldr	r3, [r4, #8]
   d4690:	b11b      	cbz	r3, d469a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4692:	2203      	movs	r2, #3
   d4694:	4621      	mov	r1, r4
   d4696:	4620      	mov	r0, r4
   d4698:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d469a:	4620      	mov	r0, r4
}
   d469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d46a0:	f7ff bcfb 	b.w	d409a <_ZdlPv>

000d46a4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d46a4:	2200      	movs	r2, #0
   d46a6:	4611      	mov	r1, r2
   d46a8:	6840      	ldr	r0, [r0, #4]
   d46aa:	f7ff bf7d 	b.w	d45a8 <network_ready>

000d46ae <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46ae:	2200      	movs	r2, #0
   d46b0:	4611      	mov	r1, r2
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	f7ff bf98 	b.w	d45e8 <network_listening>

000d46b8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46b8:	2200      	movs	r2, #0
   d46ba:	4611      	mov	r1, r2
   d46bc:	6840      	ldr	r0, [r0, #4]
   d46be:	f7ff bfa3 	b.w	d4608 <network_get_listen_timeout>

000d46c2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46c2:	2200      	movs	r2, #0
   d46c4:	6840      	ldr	r0, [r0, #4]
   d46c6:	f7ff bf97 	b.w	d45f8 <network_set_listen_timeout>

000d46ca <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46ca:	2200      	movs	r2, #0
   d46cc:	f081 0101 	eor.w	r1, r1, #1
   d46d0:	6840      	ldr	r0, [r0, #4]
   d46d2:	f7ff bf81 	b.w	d45d8 <network_listen>

000d46d6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d46d6:	2300      	movs	r3, #0
   d46d8:	461a      	mov	r2, r3
   d46da:	4619      	mov	r1, r3
   d46dc:	6840      	ldr	r0, [r0, #4]
   d46de:	f7ff bf73 	b.w	d45c8 <network_off>

000d46e2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d46e2:	2300      	movs	r3, #0
   d46e4:	461a      	mov	r2, r3
   d46e6:	4619      	mov	r1, r3
   d46e8:	6840      	ldr	r0, [r0, #4]
   d46ea:	f7ff bf65 	b.w	d45b8 <network_on>

000d46ee <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46ee:	2200      	movs	r2, #0
   d46f0:	4611      	mov	r1, r2
   d46f2:	6840      	ldr	r0, [r0, #4]
   d46f4:	f7ff bf48 	b.w	d4588 <network_connecting>

000d46f8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46f8:	2200      	movs	r2, #0
   d46fa:	2102      	movs	r1, #2
   d46fc:	6840      	ldr	r0, [r0, #4]
   d46fe:	f7ff bf4b 	b.w	d4598 <network_disconnect>

000d4702 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4702:	2300      	movs	r3, #0
   d4704:	461a      	mov	r2, r3
   d4706:	6840      	ldr	r0, [r0, #4]
   d4708:	f7ff bf36 	b.w	d4578 <network_connect>

000d470c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d470c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d470e:	4b1b      	ldr	r3, [pc, #108]	; (d477c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d4710:	6003      	str	r3, [r0, #0]
   d4712:	2500      	movs	r5, #0
   d4714:	460f      	mov	r7, r1
   d4716:	3328      	adds	r3, #40	; 0x28
   d4718:	2618      	movs	r6, #24
   d471a:	b089      	sub	sp, #36	; 0x24
   d471c:	6043      	str	r3, [r0, #4]
   d471e:	6085      	str	r5, [r0, #8]
   d4720:	60c5      	str	r5, [r0, #12]
   d4722:	4632      	mov	r2, r6
   d4724:	4629      	mov	r1, r5
   d4726:	4604      	mov	r4, r0
   d4728:	3010      	adds	r0, #16
   d472a:	f001 fa9c 	bl	d5c66 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d472e:	462a      	mov	r2, r5
   d4730:	4629      	mov	r1, r5
   d4732:	6878      	ldr	r0, [r7, #4]
   d4734:	f7ff ff38 	bl	d45a8 <network_ready>
   d4738:	b908      	cbnz	r0, d473e <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d473a:	60a0      	str	r0, [r4, #8]
            return sig;
   d473c:	e01b      	b.n	d4776 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d473e:	4629      	mov	r1, r5
   d4740:	4632      	mov	r2, r6
   d4742:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d4744:	9500      	str	r5, [sp, #0]
   d4746:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d4748:	f001 fa8d 	bl	d5c66 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d474c:	a902      	add	r1, sp, #8
   d474e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d4750:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d4754:	f7ff fd94 	bl	d4280 <cellular_signal>
   d4758:	b110      	cbz	r0, d4760 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d475a:	2301      	movs	r3, #1
   d475c:	60a3      	str	r3, [r4, #8]
            return sig;
   d475e:	e00a      	b.n	d4776 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d4760:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d4762:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d4764:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d4766:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d4768:	b90b      	cbnz	r3, d476e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d476a:	2302      	movs	r3, #2
   d476c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d476e:	a902      	add	r1, sp, #8
   d4770:	4620      	mov	r0, r4
   d4772:	f000 f8a9 	bl	d48c8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d4776:	4620      	mov	r0, r4
   d4778:	b009      	add	sp, #36	; 0x24
   d477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d477c:	000d5d94 	.word	0x000d5d94

000d4780 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4780:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4782:	4d0c      	ldr	r5, [pc, #48]	; (d47b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4784:	2428      	movs	r4, #40	; 0x28
   d4786:	4622      	mov	r2, r4
   d4788:	2100      	movs	r1, #0
   d478a:	4628      	mov	r0, r5
   d478c:	f001 fa6b 	bl	d5c66 <memset>
        cid = -1;
   d4790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4794:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d4796:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4798:	4d07      	ldr	r5, [pc, #28]	; (d47b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d479a:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d479c:	4628      	mov	r0, r5
   d479e:	606b      	str	r3, [r5, #4]
   d47a0:	4b06      	ldr	r3, [pc, #24]	; (d47bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d47a2:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d47a6:	4622      	mov	r2, r4
   d47a8:	2100      	movs	r1, #0
   d47aa:	f001 fa5c 	bl	d5c66 <memset>
        size = sizeof(*this);
   d47ae:	812c      	strh	r4, [r5, #8]
   d47b0:	bd38      	pop	{r3, r4, r5, pc}
   d47b2:	bf00      	nop
   d47b4:	2003e3b0 	.word	0x2003e3b0
   d47b8:	2003e380 	.word	0x2003e380
   d47bc:	000d5d60 	.word	0x000d5d60

000d47c0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d47c0:	4770      	bx	lr

000d47c2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d47c2:	7d00      	ldrb	r0, [r0, #20]
   d47c4:	4770      	bx	lr
	...

000d47c8 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d47c8:	7d03      	ldrb	r3, [r0, #20]
   d47ca:	b11b      	cbz	r3, d47d4 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d47cc:	6983      	ldr	r3, [r0, #24]
   d47ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d47d2:	d102      	bne.n	d47da <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d47d4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d47ec <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d47d8:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d47da:	ee07 3a90 	vmov	s15, r3
   d47de:	ed9f 7a04 	vldr	s14, [pc, #16]	; d47f0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d47e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d47e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d47ea:	4770      	bx	lr
   d47ec:	00000000 	.word	0x00000000
   d47f0:	42c80000 	.word	0x42c80000

000d47f4 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d47f4:	7d03      	ldrb	r3, [r0, #20]
   d47f6:	b11b      	cbz	r3, d4800 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d47f8:	6a03      	ldr	r3, [r0, #32]
   d47fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d47fe:	d102      	bne.n	d4806 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d4800:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4818 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d4804:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d4806:	ee07 3a90 	vmov	s15, r3
   d480a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d481c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d480e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4812:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d4816:	4770      	bx	lr
   d4818:	00000000 	.word	0x00000000
   d481c:	42c80000 	.word	0x42c80000

000d4820 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d4820:	b570      	push	{r4, r5, r6, lr}
   d4822:	460d      	mov	r5, r1
   d4824:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d4826:	220a      	movs	r2, #10
   d4828:	6881      	ldr	r1, [r0, #8]
   d482a:	4628      	mov	r0, r5
   d482c:	f000 fdcc 	bl	d53c8 <_ZN5Print5printEii>
    n += p.print(',');
   d4830:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d4832:	4604      	mov	r4, r0
    n += p.print(',');
   d4834:	4628      	mov	r0, r5
   d4836:	f000 fd73 	bl	d5320 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d483a:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d483c:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d483e:	68f1      	ldr	r1, [r6, #12]
   d4840:	4628      	mov	r0, r5
   d4842:	f000 fdc1 	bl	d53c8 <_ZN5Print5printEii>
    return n;
}
   d4846:	4420      	add	r0, r4
   d4848:	bd70      	pop	{r4, r5, r6, pc}

000d484a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d484a:	f1a0 0004 	sub.w	r0, r0, #4
   d484e:	f7ff bfe7 	b.w	d4820 <_ZNK14CellularSignal7printToER5Print>

000d4852 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d4852:	b510      	push	{r4, lr}
   d4854:	4604      	mov	r4, r0
   d4856:	f7ff fc20 	bl	d409a <_ZdlPv>
   d485a:	4620      	mov	r0, r4
   d485c:	bd10      	pop	{r4, pc}
	...

000d4860 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d4860:	7d03      	ldrb	r3, [r0, #20]
   d4862:	b17b      	cbz	r3, d4884 <_ZNK14CellularSignal10getQualityEv+0x24>
   d4864:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4866:	2b00      	cmp	r3, #0
   d4868:	db0c      	blt.n	d4884 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d486a:	ee07 3a90 	vmov	s15, r3
   d486e:	eddf 6a07 	vldr	s13, [pc, #28]	; d488c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d4872:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4890 <_ZNK14CellularSignal10getQualityEv+0x30>
   d4876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d487a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d487e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4882:	4770      	bx	lr
    }

    return -1.0f;
   d4884:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d4888:	4770      	bx	lr
   d488a:	bf00      	nop
   d488c:	477fff00 	.word	0x477fff00
   d4890:	42c80000 	.word	0x42c80000

000d4894 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d4894:	7d03      	ldrb	r3, [r0, #20]
   d4896:	b17b      	cbz	r3, d48b8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d4898:	69c3      	ldr	r3, [r0, #28]
   d489a:	2b00      	cmp	r3, #0
   d489c:	db0c      	blt.n	d48b8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d489e:	ee07 3a90 	vmov	s15, r3
   d48a2:	eddf 6a07 	vldr	s13, [pc, #28]	; d48c0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d48a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d48c4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d48aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d48ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d48b2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d48b6:	4770      	bx	lr
    }

    return -1.0f;
   d48b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d48bc:	4770      	bx	lr
   d48be:	bf00      	nop
   d48c0:	477fff00 	.word	0x477fff00
   d48c4:	42c80000 	.word	0x42c80000

000d48c8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d48c8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d48ca:	460d      	mov	r5, r1
   d48cc:	f100 0410 	add.w	r4, r0, #16
   d48d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d48d8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d48dc:	2001      	movs	r0, #1
   d48de:	bd30      	pop	{r4, r5, pc}

000d48e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48e0:	4770      	bx	lr

000d48e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d48e2:	2000      	movs	r0, #0
   d48e4:	4770      	bx	lr

000d48e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48e6:	b510      	push	{r4, lr}
   d48e8:	4604      	mov	r4, r0
   d48ea:	f7ff fbd6 	bl	d409a <_ZdlPv>
   d48ee:	4620      	mov	r0, r4
   d48f0:	bd10      	pop	{r4, pc}

000d48f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d48f2:	b508      	push	{r3, lr}
      { delete this; }
   d48f4:	b108      	cbz	r0, d48fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d48f6:	f7ff fff6 	bl	d48e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d48fa:	bd08      	pop	{r3, pc}

000d48fc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48fe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4900:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4902:	b113      	cbz	r3, d490a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4904:	2203      	movs	r2, #3
   d4906:	4601      	mov	r1, r0
   d4908:	4798      	blx	r3
    }
   d490a:	4620      	mov	r0, r4
   d490c:	bd10      	pop	{r4, pc}

000d490e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d490e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4910:	68c4      	ldr	r4, [r0, #12]
   d4912:	b1d4      	cbz	r4, d494a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4914:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4916:	2b02      	cmp	r3, #2
   d4918:	d102      	bne.n	d4920 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d491a:	68e0      	ldr	r0, [r4, #12]
   d491c:	f7ff fe84 	bl	d4628 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4920:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4922:	b12d      	cbz	r5, d4930 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4924:	4628      	mov	r0, r5
   d4926:	f7ff ffe9 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
   d492a:	4628      	mov	r0, r5
   d492c:	f7ff fbb5 	bl	d409a <_ZdlPv>
   d4930:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4932:	b12d      	cbz	r5, d4940 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4934:	4628      	mov	r0, r5
   d4936:	f7ff ffe1 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
   d493a:	4628      	mov	r0, r5
   d493c:	f7ff fbad 	bl	d409a <_ZdlPv>
   d4940:	4620      	mov	r0, r4
   d4942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4946:	f7ff bba8 	b.w	d409a <_ZdlPv>
   d494a:	bd38      	pop	{r3, r4, r5, pc}

000d494c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d494c:	b510      	push	{r4, lr}
   d494e:	b088      	sub	sp, #32
   d4950:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4952:	4668      	mov	r0, sp
   d4954:	f000 fdb4 	bl	d54c0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4958:	4669      	mov	r1, sp
   d495a:	a804      	add	r0, sp, #16
   d495c:	f000 fdef 	bl	d553e <_ZN6StringC1ERKS_>
   d4960:	a804      	add	r0, sp, #16
   d4962:	47a0      	blx	r4
   d4964:	4604      	mov	r4, r0
   d4966:	a804      	add	r0, sp, #16
   d4968:	f000 fd63 	bl	d5432 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d496c:	4668      	mov	r0, sp
   d496e:	f000 fd60 	bl	d5432 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4972:	4620      	mov	r0, r4
   d4974:	b008      	add	sp, #32
   d4976:	bd10      	pop	{r4, pc}

000d4978 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4978:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d497a:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d497c:	b085      	sub	sp, #20
   d497e:	4607      	mov	r7, r0
   d4980:	460e      	mov	r6, r1
   d4982:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4984:	2100      	movs	r1, #0
   d4986:	4622      	mov	r2, r4
   d4988:	4668      	mov	r0, sp
   d498a:	f001 f96c 	bl	d5c66 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d498e:	2200      	movs	r2, #0
   d4990:	4669      	mov	r1, sp
   d4992:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4994:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d4998:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d499a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d499c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d499e:	f7ff fdd3 	bl	d4548 <spark_function>
}
   d49a2:	b005      	add	sp, #20
   d49a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d49a6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d49a8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d49aa:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d49ac:	b17c      	cbz	r4, d49ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d49ae:	6863      	ldr	r3, [r4, #4]
   d49b0:	3b01      	subs	r3, #1
   d49b2:	6063      	str	r3, [r4, #4]
   d49b4:	b95b      	cbnz	r3, d49ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d49b6:	6823      	ldr	r3, [r4, #0]
   d49b8:	4620      	mov	r0, r4
   d49ba:	689b      	ldr	r3, [r3, #8]
   d49bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49be:	68a3      	ldr	r3, [r4, #8]
   d49c0:	3b01      	subs	r3, #1
   d49c2:	60a3      	str	r3, [r4, #8]
   d49c4:	b91b      	cbnz	r3, d49ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d49c6:	6823      	ldr	r3, [r4, #0]
   d49c8:	4620      	mov	r0, r4
   d49ca:	68db      	ldr	r3, [r3, #12]
   d49cc:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d49ce:	4628      	mov	r0, r5
   d49d0:	bd38      	pop	{r3, r4, r5, pc}

000d49d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d49d2:	b513      	push	{r0, r1, r4, lr}
   d49d4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d49d6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d49da:	2300      	movs	r3, #0
   d49dc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49de:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49e0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d49e2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49e4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d49e6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49e8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49ea:	f7ff ffdc 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49ee:	4620      	mov	r0, r4
   d49f0:	b002      	add	sp, #8
   d49f2:	bd10      	pop	{r4, pc}

000d49f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d49f4:	680b      	ldr	r3, [r1, #0]
   d49f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d49f8:	b113      	cbz	r3, d4a00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d49fa:	685a      	ldr	r2, [r3, #4]
   d49fc:	3201      	adds	r2, #1
   d49fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4a00:	4770      	bx	lr

000d4a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a04:	460c      	mov	r4, r1
   d4a06:	ad02      	add	r5, sp, #8
   d4a08:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a0c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a10:	4606      	mov	r6, r0
   d4a12:	460f      	mov	r7, r1
   d4a14:	a801      	add	r0, sp, #4
   d4a16:	4621      	mov	r1, r4
   d4a18:	f7ff ffec 	bl	d49f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4a1c:	4629      	mov	r1, r5
   d4a1e:	4630      	mov	r0, r6
   d4a20:	f7ff ffd7 	bl	d49d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a24:	a801      	add	r0, sp, #4
   d4a26:	f7ff ffbe 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	f7ff ffbb 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4a30:	4638      	mov	r0, r7
   d4a32:	f7ff fb32 	bl	d409a <_ZdlPv>
        return p;
    }
   d4a36:	4630      	mov	r0, r6
   d4a38:	b003      	add	sp, #12
   d4a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a3c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a3c:	b513      	push	{r0, r1, r4, lr}
   d4a3e:	460b      	mov	r3, r1
   d4a40:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a42:	c803      	ldmia	r0, {r0, r1}
   d4a44:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a48:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a4c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a50:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a54:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a58:	b002      	add	sp, #8
   d4a5a:	bd10      	pop	{r4, pc}

000d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a5c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a5e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a60:	b90a      	cbnz	r2, d4a66 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4a62:	f000 ff9c 	bl	d599e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a66:	68c3      	ldr	r3, [r0, #12]
    }
   d4a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a6c:	4718      	bx	r3

000d4a6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a6e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a70:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a72:	f100 0110 	add.w	r1, r0, #16
   d4a76:	f7ff fff1 	bl	d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a7a:	bd08      	pop	{r3, pc}

000d4a7c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a7c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a7e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a80:	b90a      	cbnz	r2, d4a86 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4a82:	f000 ff8c 	bl	d599e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a86:	68c3      	ldr	r3, [r0, #12]
    }
   d4a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a8c:	4718      	bx	r3

000d4a8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a8e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a90:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a92:	f100 0110 	add.w	r1, r0, #16
   d4a96:	f7ff fff1 	bl	d4a7c <_ZNKSt8functionIFvRKbEEclES1_>
   d4a9a:	bd08      	pop	{r3, pc}

000d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a9c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	6083      	str	r3, [r0, #8]
   d4aa2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4aa4:	4604      	mov	r4, r0
   d4aa6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4aa8:	b12b      	cbz	r3, d4ab6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4aaa:	2202      	movs	r2, #2
   d4aac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4aae:	68eb      	ldr	r3, [r5, #12]
   d4ab0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4ab2:	68ab      	ldr	r3, [r5, #8]
   d4ab4:	60a3      	str	r3, [r4, #8]
	}
    }
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4ac0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4ac4:	b086      	sub	sp, #24
   d4ac6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ac8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4acc:	808b      	strh	r3, [r1, #4]
   d4ace:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ad0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ad2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ad6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4ad8:	f04f 0002 	mov.w	r0, #2
   d4adc:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4ae0:	4299      	cmp	r1, r3
   d4ae2:	d103      	bne.n	d4aec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4ae4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4ae8:	2d00      	cmp	r5, #0
   d4aea:	d1f7      	bne.n	d4adc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4aec:	d002      	beq.n	d4af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4aee:	f88d 1000 	strb.w	r1, [sp]
   d4af2:	e06a      	b.n	d4bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4af4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4af8:	bf1e      	ittt	ne
   d4afa:	60e7      	strne	r7, [r4, #12]
   d4afc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4afe:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b00:	2301      	movs	r3, #1
   d4b02:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b06:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b08:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b0a:	f104 0308 	add.w	r3, r4, #8
   d4b0e:	f3bf 8f5f 	dmb	sy
   d4b12:	e853 6f00 	ldrex	r6, [r3]
   d4b16:	e843 0200 	strex	r2, r0, [r3]
   d4b1a:	2a00      	cmp	r2, #0
   d4b1c:	d1f9      	bne.n	d4b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4b1e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b22:	2e00      	cmp	r6, #0
   d4b24:	d051      	beq.n	d4bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b26:	f7ff fce3 	bl	d44f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b2a:	b120      	cbz	r0, d4b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4b2c:	4629      	mov	r1, r5
   d4b2e:	4630      	mov	r0, r6
   d4b30:	f7ff ff94 	bl	d4a5c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b34:	e043      	b.n	d4bbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4b36:	4631      	mov	r1, r6
   d4b38:	4668      	mov	r0, sp
   d4b3a:	f7ff ffaf 	bl	d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4b3e:	68e0      	ldr	r0, [r4, #12]
   d4b40:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b44:	b108      	cbz	r0, d4b4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4b46:	f001 f8a9 	bl	d5c9c <strdup>
   d4b4a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4b4c:	2010      	movs	r0, #16
   d4b4e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4b52:	f7ff faa0 	bl	d4096 <_Znwj>
   d4b56:	4605      	mov	r5, r0
   d4b58:	b330      	cbz	r0, d4ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b5a:	f04f 0800 	mov.w	r8, #0
   d4b5e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b62:	2018      	movs	r0, #24
   d4b64:	f7ff fa97 	bl	d4096 <_Znwj>
   d4b68:	4604      	mov	r4, r0
   d4b6a:	b1c0      	cbz	r0, d4b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b6c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b70:	4601      	mov	r1, r0
   d4b72:	4668      	mov	r0, sp
   d4b74:	f7ff ff62 	bl	d4a3c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b78:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4b7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b7c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b7e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4b80:	9202      	str	r2, [sp, #8]
   d4b82:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b84:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4b8a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4b90:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b94:	9b04      	ldr	r3, [sp, #16]
   d4b96:	9203      	str	r2, [sp, #12]
   d4b98:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b9a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4b9e:	4b0e      	ldr	r3, [pc, #56]	; (d4bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4ba0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ba2:	4b0e      	ldr	r3, [pc, #56]	; (d4bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ba4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ba6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ba8:	9804      	ldr	r0, [sp, #16]
   d4baa:	f7ff fd3d 	bl	d4628 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bae:	4668      	mov	r0, sp
   d4bb0:	f7ff fea4 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4bb4:	2200      	movs	r2, #0
   d4bb6:	4629      	mov	r1, r5
   d4bb8:	4809      	ldr	r0, [pc, #36]	; (d4be0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4bba:	f7ff fca1 	bl	d4500 <application_thread_invoke>
   d4bbe:	4630      	mov	r0, r6
   d4bc0:	f7ff fe9c 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4bc4:	4630      	mov	r0, r6
   d4bc6:	f7ff fa68 	bl	d409a <_ZdlPv>
   d4bca:	4638      	mov	r0, r7
   d4bcc:	f7ff fd2c 	bl	d4628 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4bd0:	b006      	add	sp, #24
   d4bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4bd6:	bf00      	nop
   d4bd8:	000d4a6f 	.word	0x000d4a6f
   d4bdc:	000d4ccd 	.word	0x000d4ccd
   d4be0:	000d467f 	.word	0x000d467f

000d4be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4be8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4bea:	ad07      	add	r5, sp, #28
   d4bec:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4bf0:	4606      	mov	r6, r0
   d4bf2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4bf4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4bf6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4bf8:	460f      	mov	r7, r1
   d4bfa:	4690      	mov	r8, r2
   d4bfc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c00:	f8c5 b004 	str.w	fp, [r5, #4]
   d4c04:	f8c5 b008 	str.w	fp, [r5, #8]
   d4c08:	9307      	str	r3, [sp, #28]
   d4c0a:	f7ff fa44 	bl	d4096 <_Znwj>
   d4c0e:	4604      	mov	r4, r0
   d4c10:	b138      	cbz	r0, d4c22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4c12:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c16:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c1a:	f8c0 b004 	str.w	fp, [r0, #4]
   d4c1e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c22:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c24:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c26:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c28:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c2a:	f7ff fa34 	bl	d4096 <_Znwj>
   d4c2e:	b128      	cbz	r0, d4c3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4c30:	2301      	movs	r3, #1
   d4c32:	6043      	str	r3, [r0, #4]
   d4c34:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4c36:	4b23      	ldr	r3, [pc, #140]	; (d4cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4c38:	6003      	str	r3, [r0, #0]
   d4c3a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c3c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4c3e:	4b22      	ldr	r3, [pc, #136]	; (d4cc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4c40:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4c42:	2008      	movs	r0, #8
   d4c44:	f7ff fa27 	bl	d4096 <_Znwj>
   d4c48:	4604      	mov	r4, r0
   d4c4a:	b128      	cbz	r0, d4c58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c4c:	9b03      	ldr	r3, [sp, #12]
   d4c4e:	f840 3b04 	str.w	r3, [r0], #4
   d4c52:	a904      	add	r1, sp, #16
   d4c54:	f7ff fece 	bl	d49f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c58:	9500      	str	r5, [sp, #0]
   d4c5a:	fa5f f38a 	uxtb.w	r3, sl
   d4c5e:	464a      	mov	r2, r9
   d4c60:	4641      	mov	r1, r8
   d4c62:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4c64:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c66:	f7ff fc77 	bl	d4558 <spark_send_event>
   d4c6a:	b9b8      	cbnz	r0, d4c9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4c6c:	9b03      	ldr	r3, [sp, #12]
   d4c6e:	785b      	ldrb	r3, [r3, #1]
   d4c70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4c74:	b993      	cbnz	r3, d4c9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4c76:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4c7a:	a905      	add	r1, sp, #20
   d4c7c:	a803      	add	r0, sp, #12
   d4c7e:	9205      	str	r2, [sp, #20]
   d4c80:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c84:	f7ff ff1a 	bl	d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c88:	9805      	ldr	r0, [sp, #20]
   d4c8a:	f7ff fccd 	bl	d4628 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4c8e:	a805      	add	r0, sp, #20
   d4c90:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4c92:	f7ff feb6 	bl	d4a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c96:	a806      	add	r0, sp, #24
   d4c98:	f7ff fe85 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c9c:	9b03      	ldr	r3, [sp, #12]
   d4c9e:	9305      	str	r3, [sp, #20]
   d4ca0:	a904      	add	r1, sp, #16
   d4ca2:	a806      	add	r0, sp, #24
   d4ca4:	f7ff fea6 	bl	d49f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4ca8:	a905      	add	r1, sp, #20
   d4caa:	4630      	mov	r0, r6
   d4cac:	f7ff fe91 	bl	d49d2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cb0:	a806      	add	r0, sp, #24
   d4cb2:	f7ff fe78 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cb6:	a804      	add	r0, sp, #16
   d4cb8:	f7ff fe75 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4cbc:	4630      	mov	r0, r6
   d4cbe:	b00b      	add	sp, #44	; 0x2c
   d4cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4cc4:	000d5dc8 	.word	0x000d5dc8
   d4cc8:	000d4e35 	.word	0x000d4e35

000d4ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ccc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cd0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cd2:	d006      	beq.n	d4ce2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4cd4:	2a03      	cmp	r2, #3
   d4cd6:	d017      	beq.n	d4d08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4cd8:	2a01      	cmp	r2, #1
   d4cda:	d120      	bne.n	d4d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cdc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4cde:	6003      	str	r3, [r0, #0]
	      break;
   d4ce0:	e01d      	b.n	d4d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ce2:	2018      	movs	r0, #24
   d4ce4:	680e      	ldr	r6, [r1, #0]
   d4ce6:	f7ff f9d6 	bl	d4096 <_Znwj>
   d4cea:	4605      	mov	r5, r0
   d4cec:	b150      	cbz	r0, d4d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4cee:	4631      	mov	r1, r6
   d4cf0:	f7ff fed4 	bl	d4a9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4cf4:	6930      	ldr	r0, [r6, #16]
   d4cf6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4cfa:	b108      	cbz	r0, d4d00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4cfc:	f000 ffce 	bl	d5c9c <strdup>
   d4d00:	6128      	str	r0, [r5, #16]
   d4d02:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d04:	6025      	str	r5, [r4, #0]
   d4d06:	e00a      	b.n	d4d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d08:	6804      	ldr	r4, [r0, #0]
   d4d0a:	b144      	cbz	r4, d4d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d0c:	6920      	ldr	r0, [r4, #16]
   d4d0e:	f7ff fc8b 	bl	d4628 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d12:	4620      	mov	r0, r4
   d4d14:	f7ff fdf2 	bl	d48fc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f7ff f9be 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d1e:	2000      	movs	r0, #0
   d4d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d22 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d22:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d24:	2300      	movs	r3, #0
   d4d26:	6083      	str	r3, [r0, #8]
   d4d28:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d2a:	4604      	mov	r4, r0
   d4d2c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d2e:	b12b      	cbz	r3, d4d3c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d30:	2202      	movs	r2, #2
   d4d32:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d34:	68eb      	ldr	r3, [r5, #12]
   d4d36:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d38:	68ab      	ldr	r3, [r5, #8]
   d4d3a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	bd38      	pop	{r3, r4, r5, pc}

000d4d40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d42:	b570      	push	{r4, r5, r6, lr}
   d4d44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d46:	d006      	beq.n	d4d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4d48:	2a03      	cmp	r2, #3
   d4d4a:	d011      	beq.n	d4d70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4d4c:	2a01      	cmp	r2, #1
   d4d4e:	d117      	bne.n	d4d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d52:	6003      	str	r3, [r0, #0]
	      break;
   d4d54:	e014      	b.n	d4d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d56:	2014      	movs	r0, #20
   d4d58:	680e      	ldr	r6, [r1, #0]
   d4d5a:	f7ff f99c 	bl	d4096 <_Znwj>
   d4d5e:	4605      	mov	r5, r0
   d4d60:	b120      	cbz	r0, d4d6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d62:	4631      	mov	r1, r6
   d4d64:	f7ff ffdd 	bl	d4d22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4d68:	7c33      	ldrb	r3, [r6, #16]
   d4d6a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d6c:	6025      	str	r5, [r4, #0]
   d4d6e:	e007      	b.n	d4d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d70:	6804      	ldr	r4, [r0, #0]
   d4d72:	b12c      	cbz	r4, d4d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d74:	4620      	mov	r0, r4
   d4d76:	f7ff fdc1 	bl	d48fc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	f7ff f98d 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d80:	2000      	movs	r0, #0
   d4d82:	bd70      	pop	{r4, r5, r6, pc}

000d4d84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4d84:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4d86:	2300      	movs	r3, #0
   d4d88:	b087      	sub	sp, #28
   d4d8a:	460c      	mov	r4, r1
   d4d8c:	f3bf 8f5f 	dmb	sy
   d4d90:	e850 6f00 	ldrex	r6, [r0]
   d4d94:	e840 3200 	strex	r2, r3, [r0]
   d4d98:	2a00      	cmp	r2, #0
   d4d9a:	d1f9      	bne.n	d4d90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4d9c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4da0:	2e00      	cmp	r6, #0
   d4da2:	d03e      	beq.n	d4e22 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4da4:	4618      	mov	r0, r3
   d4da6:	f7ff fba3 	bl	d44f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4daa:	4607      	mov	r7, r0
   d4dac:	b120      	cbz	r0, d4db8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4dae:	4621      	mov	r1, r4
   d4db0:	4630      	mov	r0, r6
   d4db2:	f7ff fe63 	bl	d4a7c <_ZNKSt8functionIFvRKbEEclES1_>
   d4db6:	e02e      	b.n	d4e16 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4db8:	4631      	mov	r1, r6
   d4dba:	a801      	add	r0, sp, #4
   d4dbc:	f7ff ffb1 	bl	d4d22 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4dc0:	7823      	ldrb	r3, [r4, #0]
   d4dc2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4dc6:	2010      	movs	r0, #16
   d4dc8:	f7ff f965 	bl	d4096 <_Znwj>
   d4dcc:	4605      	mov	r5, r0
   d4dce:	b1d0      	cbz	r0, d4e06 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dd0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dd2:	2014      	movs	r0, #20
   d4dd4:	f7ff f95f 	bl	d4096 <_Znwj>
   d4dd8:	4604      	mov	r4, r0
   d4dda:	b178      	cbz	r0, d4dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ddc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4dde:	4601      	mov	r1, r0
   d4de0:	a801      	add	r0, sp, #4
   d4de2:	f7ff fe2b 	bl	d4a3c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4de6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4de8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dea:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4dee:	9203      	str	r2, [sp, #12]
   d4df0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4df2:	60e3      	str	r3, [r4, #12]
   d4df4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4df8:	9204      	str	r2, [sp, #16]
   d4dfa:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4dfc:	4b0a      	ldr	r3, [pc, #40]	; (d4e28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4dfe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e00:	4b0a      	ldr	r3, [pc, #40]	; (d4e2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e02:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e04:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e06:	a801      	add	r0, sp, #4
   d4e08:	f7ff fd78 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	4629      	mov	r1, r5
   d4e10:	4807      	ldr	r0, [pc, #28]	; (d4e30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4e12:	f7ff fb75 	bl	d4500 <application_thread_invoke>
   d4e16:	4630      	mov	r0, r6
   d4e18:	f7ff fd70 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e1c:	4630      	mov	r0, r6
   d4e1e:	f7ff f93c 	bl	d409a <_ZdlPv>
        }
    }
   d4e22:	b007      	add	sp, #28
   d4e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e26:	bf00      	nop
   d4e28:	000d4a8f 	.word	0x000d4a8f
   d4e2c:	000d4d41 	.word	0x000d4d41
   d4e30:	000d467f 	.word	0x000d467f

000d4e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4e34:	b530      	push	{r4, r5, lr}
   d4e36:	b085      	sub	sp, #20
   d4e38:	4604      	mov	r4, r0
   d4e3a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4e3c:	4668      	mov	r0, sp
   d4e3e:	4611      	mov	r1, r2
   d4e40:	f7ff fddf 	bl	d4a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4e44:	b17c      	cbz	r4, d4e66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4e46:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e48:	4628      	mov	r0, r5
   d4e4a:	b10d      	cbz	r5, d4e50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4e4c:	f000 ff26 	bl	d5c9c <strdup>
   d4e50:	9002      	str	r0, [sp, #8]
   d4e52:	a902      	add	r1, sp, #8
   d4e54:	4668      	mov	r0, sp
   d4e56:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4e5a:	f7ff fe2f 	bl	d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4e5e:	9802      	ldr	r0, [sp, #8]
   d4e60:	f7ff fbe2 	bl	d4628 <free>
   d4e64:	e01d      	b.n	d4ea2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4e66:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e68:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e6c:	f04f 0201 	mov.w	r2, #1
   d4e70:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4e74:	42a3      	cmp	r3, r4
   d4e76:	d103      	bne.n	d4e80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4e78:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4e7c:	2900      	cmp	r1, #0
   d4e7e:	d1f7      	bne.n	d4e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4e80:	d002      	beq.n	d4e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4e82:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e86:	e00c      	b.n	d4ea2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4e88:	f110 010c 	adds.w	r1, r0, #12
   d4e8c:	f04f 0301 	mov.w	r3, #1
   d4e90:	bf18      	it	ne
   d4e92:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e94:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4e98:	3004      	adds	r0, #4
   d4e9a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4e9e:	f7ff ff71 	bl	d4d84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4ea2:	a801      	add	r0, sp, #4
   d4ea4:	f7ff fd7f 	bl	d49a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4ea8:	b005      	add	sp, #20
   d4eaa:	bd30      	pop	{r4, r5, pc}

000d4eac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	4611      	mov	r1, r2
   d4eb0:	6840      	ldr	r0, [r0, #4]
   d4eb2:	f7ff bb99 	b.w	d45e8 <network_listening>

000d4eb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	4611      	mov	r1, r2
   d4eba:	6840      	ldr	r0, [r0, #4]
   d4ebc:	f7ff bba4 	b.w	d4608 <network_get_listen_timeout>

000d4ec0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ec0:	2200      	movs	r2, #0
   d4ec2:	6840      	ldr	r0, [r0, #4]
   d4ec4:	f7ff bb98 	b.w	d45f8 <network_set_listen_timeout>

000d4ec8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ec8:	2200      	movs	r2, #0
   d4eca:	f081 0101 	eor.w	r1, r1, #1
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff bb82 	b.w	d45d8 <network_listen>

000d4ed4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	461a      	mov	r2, r3
   d4ed8:	4619      	mov	r1, r3
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bb74 	b.w	d45c8 <network_off>

000d4ee0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ee0:	2300      	movs	r3, #0
   d4ee2:	461a      	mov	r2, r3
   d4ee4:	4619      	mov	r1, r3
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	f7ff bb66 	b.w	d45b8 <network_on>

000d4eec <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4eec:	2200      	movs	r2, #0
   d4eee:	4611      	mov	r1, r2
   d4ef0:	6840      	ldr	r0, [r0, #4]
   d4ef2:	f7ff bb59 	b.w	d45a8 <network_ready>

000d4ef6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ef6:	2200      	movs	r2, #0
   d4ef8:	4611      	mov	r1, r2
   d4efa:	6840      	ldr	r0, [r0, #4]
   d4efc:	f7ff bb44 	b.w	d4588 <network_connecting>

000d4f00 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f00:	2200      	movs	r2, #0
   d4f02:	2102      	movs	r1, #2
   d4f04:	6840      	ldr	r0, [r0, #4]
   d4f06:	f7ff bb47 	b.w	d4598 <network_disconnect>

000d4f0a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	461a      	mov	r2, r3
   d4f0e:	6840      	ldr	r0, [r0, #4]
   d4f10:	f7ff bb32 	b.w	d4578 <network_connect>

000d4f14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4f14:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f16:	2203      	movs	r2, #3
   d4f18:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f1a:	4a02      	ldr	r2, [pc, #8]	; (d4f24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f1c:	601a      	str	r2, [r3, #0]
   d4f1e:	4770      	bx	lr
   d4f20:	2003e3d8 	.word	0x2003e3d8
   d4f24:	000d5de4 	.word	0x000d5de4

000d4f28 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4f28:	4770      	bx	lr

000d4f2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f2c:	4606      	mov	r6, r0
   d4f2e:	4615      	mov	r5, r2
   d4f30:	460c      	mov	r4, r1
   d4f32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f34:	42bc      	cmp	r4, r7
   d4f36:	d006      	beq.n	d4f46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f38:	6833      	ldr	r3, [r6, #0]
   d4f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f3e:	689b      	ldr	r3, [r3, #8]
   d4f40:	4630      	mov	r0, r6
   d4f42:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f44:	e7f6      	b.n	d4f34 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f46:	4628      	mov	r0, r5
   d4f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f4a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	7c00      	ldrb	r0, [r0, #16]
   d4f4e:	f7ff b9ef 	b.w	d4330 <HAL_I2C_Write_Data>

000d4f52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f52:	2100      	movs	r1, #0
   d4f54:	7c00      	ldrb	r0, [r0, #16]
   d4f56:	f7ff b9f3 	b.w	d4340 <HAL_I2C_Available_Data>

000d4f5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f5a:	2100      	movs	r1, #0
   d4f5c:	7c00      	ldrb	r0, [r0, #16]
   d4f5e:	f7ff b9f7 	b.w	d4350 <HAL_I2C_Read_Data>

000d4f62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f62:	2100      	movs	r1, #0
   d4f64:	7c00      	ldrb	r0, [r0, #16]
   d4f66:	f7ff b9fb 	b.w	d4360 <HAL_I2C_Peek_Data>

000d4f6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f6a:	2100      	movs	r1, #0
   d4f6c:	7c00      	ldrb	r0, [r0, #16]
   d4f6e:	f7ff b9ff 	b.w	d4370 <HAL_I2C_Flush_Data>

000d4f72 <_ZN7TwoWireD0Ev>:
   d4f72:	b510      	push	{r4, lr}
   d4f74:	4604      	mov	r4, r0
   d4f76:	f7ff f890 	bl	d409a <_ZdlPv>
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	bd10      	pop	{r4, pc}
	...

000d4f80 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f80:	b510      	push	{r4, lr}
   d4f82:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f88:	4608      	mov	r0, r1
   d4f8a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f8c:	2100      	movs	r1, #0
   d4f8e:	4b04      	ldr	r3, [pc, #16]	; (d4fa0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4f90:	7420      	strb	r0, [r4, #16]
   d4f92:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f94:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4f96:	f7ff f9fb 	bl	d4390 <HAL_I2C_Init>

}
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	bd10      	pop	{r4, pc}
   d4f9e:	bf00      	nop
   d4fa0:	000d5e18 	.word	0x000d5e18

000d4fa4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4fa4:	2100      	movs	r1, #0
   d4fa6:	7c00      	ldrb	r0, [r0, #16]
   d4fa8:	f7ff b9ea 	b.w	d4380 <HAL_I2C_Is_Enabled>

000d4fac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fac:	4770      	bx	lr

000d4fae <_ZN9IPAddressD0Ev>:
   d4fae:	b510      	push	{r4, lr}
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	f7ff f872 	bl	d409a <_ZdlPv>
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	bd10      	pop	{r4, pc}

000d4fba <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fba:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4fbc:	7d03      	ldrb	r3, [r0, #20]
   d4fbe:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fc0:	b08d      	sub	sp, #52	; 0x34
   d4fc2:	460e      	mov	r6, r1
   d4fc4:	f100 0704 	add.w	r7, r0, #4
   d4fc8:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4fcc:	d002      	beq.n	d4fd4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fce:	f100 0508 	add.w	r5, r0, #8
   d4fd2:	e018      	b.n	d5006 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fd4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fd6:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fd8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fdc:	232f      	movs	r3, #47	; 0x2f
   d4fde:	462a      	mov	r2, r5
   d4fe0:	200a      	movs	r0, #10
   d4fe2:	f7ff f9dd 	bl	d43a0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fe6:	4628      	mov	r0, r5
   d4fe8:	f000 fe73 	bl	d5cd2 <strlen>
   d4fec:	6833      	ldr	r3, [r6, #0]
   d4fee:	4602      	mov	r2, r0
   d4ff0:	68db      	ldr	r3, [r3, #12]
   d4ff2:	4629      	mov	r1, r5
   d4ff4:	4630      	mov	r0, r6
   d4ff6:	4798      	blx	r3
   d4ff8:	e00f      	b.n	d501a <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ffa:	b124      	cbz	r4, d5006 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4ffc:	212e      	movs	r1, #46	; 0x2e
   d4ffe:	4630      	mov	r0, r6
   d5000:	f000 f98e 	bl	d5320 <_ZN5Print5printEc>
   d5004:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5006:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d500a:	220a      	movs	r2, #10
   d500c:	4630      	mov	r0, r6
   d500e:	f000 f9b7 	bl	d5380 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5012:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5014:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5016:	d1f0      	bne.n	d4ffa <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5018:	4620      	mov	r0, r4
    }
    return n;
}
   d501a:	b00d      	add	sp, #52	; 0x34
   d501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5020 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"
#include "ifapi.h"
#include <arpa/inet.h>

IPAddress::IPAddress()
   d5020:	b510      	push	{r4, lr}
   d5022:	4b05      	ldr	r3, [pc, #20]	; (d5038 <_ZN9IPAddressC1Ev+0x18>)
   d5024:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5026:	2211      	movs	r2, #17
   d5028:	f840 3b04 	str.w	r3, [r0], #4
   d502c:	2100      	movs	r1, #0
   d502e:	f000 fe1a 	bl	d5c66 <memset>
{
    clear();
}
   d5032:	4620      	mov	r0, r4
   d5034:	bd10      	pop	{r4, pc}
   d5036:	bf00      	nop
   d5038:	000d5e40 	.word	0x000d5e40

000d503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d503c:	4603      	mov	r3, r0
   d503e:	4a07      	ldr	r2, [pc, #28]	; (d505c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5040:	b510      	push	{r4, lr}
   d5042:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5046:	f101 0210 	add.w	r2, r1, #16
   d504a:	f851 4b04 	ldr.w	r4, [r1], #4
   d504e:	f843 4b04 	str.w	r4, [r3], #4
   d5052:	4291      	cmp	r1, r2
   d5054:	d1f9      	bne.n	d504a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5056:	780a      	ldrb	r2, [r1, #0]
   d5058:	701a      	strb	r2, [r3, #0]
}
   d505a:	bd10      	pop	{r4, pc}
   d505c:	000d5e40 	.word	0x000d5e40

000d5060 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5060:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5062:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5066:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d506a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d506e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5072:	2304      	movs	r3, #4
   d5074:	6041      	str	r1, [r0, #4]
   d5076:	7503      	strb	r3, [r0, #20]
   d5078:	bd10      	pop	{r4, pc}

000d507a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d507a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d507c:	780d      	ldrb	r5, [r1, #0]
   d507e:	788b      	ldrb	r3, [r1, #2]
   d5080:	784a      	ldrb	r2, [r1, #1]
   d5082:	78c9      	ldrb	r1, [r1, #3]
   d5084:	9100      	str	r1, [sp, #0]
   d5086:	4629      	mov	r1, r5
   d5088:	f7ff ffea 	bl	d5060 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d508c:	b003      	add	sp, #12
   d508e:	bd30      	pop	{r4, r5, pc}

000d5090 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5090:	4b01      	ldr	r3, [pc, #4]	; (d5098 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5092:	4a02      	ldr	r2, [pc, #8]	; (d509c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5094:	601a      	str	r2, [r3, #0]
   d5096:	4770      	bx	lr
   d5098:	2003e3e0 	.word	0x2003e3e0
   d509c:	000d5eff 	.word	0x000d5eff

000d50a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50a0:	2200      	movs	r2, #0
   d50a2:	4611      	mov	r1, r2
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff ba9f 	b.w	d45e8 <network_listening>

000d50aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50aa:	2200      	movs	r2, #0
   d50ac:	4611      	mov	r1, r2
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff baaa 	b.w	d4608 <network_get_listen_timeout>

000d50b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50b4:	2200      	movs	r2, #0
   d50b6:	6840      	ldr	r0, [r0, #4]
   d50b8:	f7ff ba9e 	b.w	d45f8 <network_set_listen_timeout>

000d50bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50bc:	2200      	movs	r2, #0
   d50be:	f081 0101 	eor.w	r1, r1, #1
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff ba88 	b.w	d45d8 <network_listen>

000d50c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d50c8:	2300      	movs	r3, #0
   d50ca:	461a      	mov	r2, r3
   d50cc:	4619      	mov	r1, r3
   d50ce:	6840      	ldr	r0, [r0, #4]
   d50d0:	f7ff ba7a 	b.w	d45c8 <network_off>

000d50d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50d4:	2300      	movs	r3, #0
   d50d6:	461a      	mov	r2, r3
   d50d8:	4619      	mov	r1, r3
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	f7ff ba6c 	b.w	d45b8 <network_on>

000d50e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50e0:	2200      	movs	r2, #0
   d50e2:	4611      	mov	r1, r2
   d50e4:	6840      	ldr	r0, [r0, #4]
   d50e6:	f7ff ba5f 	b.w	d45a8 <network_ready>

000d50ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50ea:	2200      	movs	r2, #0
   d50ec:	4611      	mov	r1, r2
   d50ee:	6840      	ldr	r0, [r0, #4]
   d50f0:	f7ff ba4a 	b.w	d4588 <network_connecting>

000d50f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d50f4:	2200      	movs	r2, #0
   d50f6:	2102      	movs	r1, #2
   d50f8:	6840      	ldr	r0, [r0, #4]
   d50fa:	f7ff ba4d 	b.w	d4598 <network_disconnect>

000d50fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d50fe:	2300      	movs	r3, #0
   d5100:	461a      	mov	r2, r3
   d5102:	6840      	ldr	r0, [r0, #4]
   d5104:	f7ff ba38 	b.w	d4578 <network_connect>

000d5108 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5108:	b110      	cbz	r0, d5110 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d510a:	6803      	ldr	r3, [r0, #0]
   d510c:	685b      	ldr	r3, [r3, #4]
   d510e:	4718      	bx	r3
   d5110:	4770      	bx	lr

000d5112 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5112:	b538      	push	{r3, r4, r5, lr}
   d5114:	4604      	mov	r4, r0
   d5116:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5118:	b1d0      	cbz	r0, d5150 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d511a:	f7ff f8b9 	bl	d4290 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d511e:	b9b8      	cbnz	r0, d5150 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5120:	7c23      	ldrb	r3, [r4, #16]
   d5122:	b91b      	cbnz	r3, d512c <_ZN6Thread7disposeEv+0x1a>
   d5124:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5126:	b108      	cbz	r0, d512c <_ZN6Thread7disposeEv+0x1a>
   d5128:	f7ff f8ba 	bl	d42a0 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d512c:	6865      	ldr	r5, [r4, #4]
   d512e:	b155      	cbz	r5, d5146 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5130:	68ab      	ldr	r3, [r5, #8]
   d5132:	b11b      	cbz	r3, d513c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5134:	2203      	movs	r2, #3
   d5136:	4629      	mov	r1, r5
   d5138:	4628      	mov	r0, r5
   d513a:	4798      	blx	r3
            delete wrapper;
   d513c:	4628      	mov	r0, r5
   d513e:	f7fe ffac 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d5142:	2300      	movs	r3, #0
   d5144:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5146:	6820      	ldr	r0, [r4, #0]
   d5148:	f7ff f8b2 	bl	d42b0 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d514c:	2300      	movs	r3, #0
   d514e:	6023      	str	r3, [r4, #0]
   d5150:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5154 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5154:	b538      	push	{r3, r4, r5, lr}
   d5156:	4b0b      	ldr	r3, [pc, #44]	; (d5184 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5158:	6003      	str	r3, [r0, #0]
   d515a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d515c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5160:	b108      	cbz	r0, d5166 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5162:	f7fe ff9c 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5166:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d516a:	b12d      	cbz	r5, d5178 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d516c:	4628      	mov	r0, r5
   d516e:	f7ff ffd0 	bl	d5112 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5172:	4628      	mov	r0, r5
   d5174:	f7fe ff91 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5178:	68a0      	ldr	r0, [r4, #8]
   d517a:	b108      	cbz	r0, d5180 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d517c:	f7ff ffc4 	bl	d5108 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5180:	4620      	mov	r0, r4
   d5182:	bd38      	pop	{r3, r4, r5, pc}
   d5184:	000d5f30 	.word	0x000d5f30

000d5188 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5188:	b538      	push	{r3, r4, r5, lr}
   d518a:	4c0d      	ldr	r4, [pc, #52]	; (d51c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d518c:	4b0d      	ldr	r3, [pc, #52]	; (d51c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d518e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5190:	2500      	movs	r5, #0
   d5192:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5194:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5198:	6063      	str	r3, [r4, #4]
   d519a:	60a5      	str	r5, [r4, #8]
   d519c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51a0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d51a4:	f7ff f894 	bl	d42d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d51a8:	4b07      	ldr	r3, [pc, #28]	; (d51c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d51aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d51ae:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d51b0:	4620      	mov	r0, r4
   d51b2:	4a06      	ldr	r2, [pc, #24]	; (d51cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d51b4:	4906      	ldr	r1, [pc, #24]	; (d51d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d51b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d51ba:	f000 bbeb 	b.w	d5994 <__aeabi_atexit>
   d51be:	bf00      	nop
   d51c0:	2003e3e4 	.word	0x2003e3e4
   d51c4:	000d5f64 	.word	0x000d5f64
   d51c8:	000d5f30 	.word	0x000d5f30
   d51cc:	2003e348 	.word	0x2003e348
   d51d0:	000d5155 	.word	0x000d5155

000d51d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d51d4:	2300      	movs	r3, #0
   d51d6:	461a      	mov	r2, r3
   d51d8:	6840      	ldr	r0, [r0, #4]
   d51da:	f7ff b9cd 	b.w	d4578 <network_connect>

000d51de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d51de:	2200      	movs	r2, #0
   d51e0:	2102      	movs	r1, #2
   d51e2:	6840      	ldr	r0, [r0, #4]
   d51e4:	f7ff b9d8 	b.w	d4598 <network_disconnect>

000d51e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d51e8:	2200      	movs	r2, #0
   d51ea:	4611      	mov	r1, r2
   d51ec:	6840      	ldr	r0, [r0, #4]
   d51ee:	f7ff b9cb 	b.w	d4588 <network_connecting>

000d51f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d51f2:	2200      	movs	r2, #0
   d51f4:	4611      	mov	r1, r2
   d51f6:	6840      	ldr	r0, [r0, #4]
   d51f8:	f7ff b9d6 	b.w	d45a8 <network_ready>

000d51fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d51fc:	2300      	movs	r3, #0
   d51fe:	461a      	mov	r2, r3
   d5200:	4619      	mov	r1, r3
   d5202:	6840      	ldr	r0, [r0, #4]
   d5204:	f7ff b9d8 	b.w	d45b8 <network_on>

000d5208 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5208:	2300      	movs	r3, #0
   d520a:	461a      	mov	r2, r3
   d520c:	4619      	mov	r1, r3
   d520e:	6840      	ldr	r0, [r0, #4]
   d5210:	f7ff b9da 	b.w	d45c8 <network_off>

000d5214 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5214:	2200      	movs	r2, #0
   d5216:	f081 0101 	eor.w	r1, r1, #1
   d521a:	6840      	ldr	r0, [r0, #4]
   d521c:	f7ff b9dc 	b.w	d45d8 <network_listen>

000d5220 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5220:	2200      	movs	r2, #0
   d5222:	6840      	ldr	r0, [r0, #4]
   d5224:	f7ff b9e8 	b.w	d45f8 <network_set_listen_timeout>

000d5228 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5228:	2200      	movs	r2, #0
   d522a:	4611      	mov	r1, r2
   d522c:	6840      	ldr	r0, [r0, #4]
   d522e:	f7ff b9eb 	b.w	d4608 <network_get_listen_timeout>

000d5232 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5232:	2200      	movs	r2, #0
   d5234:	4611      	mov	r1, r2
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff b9d6 	b.w	d45e8 <network_listening>

000d523c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d523c:	b570      	push	{r4, r5, r6, lr}
   d523e:	b08c      	sub	sp, #48	; 0x30
   d5240:	4614      	mov	r4, r2
   d5242:	4606      	mov	r6, r0
    IPAddress addr;
   d5244:	f7ff feec 	bl	d5020 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5248:	ab0c      	add	r3, sp, #48	; 0x30
   d524a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d524c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d524e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5252:	4620      	mov	r0, r4
   d5254:	f7ff f8b4 	bl	d43c0 <netdb_getaddrinfo>
    if (!r && ai) {
   d5258:	4601      	mov	r1, r0
   d525a:	bb58      	cbnz	r0, d52b4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d525c:	9b00      	ldr	r3, [sp, #0]
   d525e:	b34b      	cbz	r3, d52b4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5260:	685a      	ldr	r2, [r3, #4]
   d5262:	2a02      	cmp	r2, #2
   d5264:	d00e      	beq.n	d5284 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5266:	2a0a      	cmp	r2, #10
   d5268:	d124      	bne.n	d52b4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d526a:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d526c:	2211      	movs	r2, #17
   d526e:	a801      	add	r0, sp, #4
   d5270:	f000 fcf9 	bl	d5c66 <memset>
                a.v = 6;
   d5274:	2306      	movs	r3, #6
   d5276:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d527a:	ad01      	add	r5, sp, #4
   d527c:	f104 0308 	add.w	r3, r4, #8
   d5280:	3418      	adds	r4, #24
   d5282:	e005      	b.n	d5290 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5284:	6959      	ldr	r1, [r3, #20]
   d5286:	4630      	mov	r0, r6
   d5288:	3104      	adds	r1, #4
   d528a:	f7ff fef6 	bl	d507a <_ZN9IPAddressaSEPKh>
                break;
   d528e:	e011      	b.n	d52b4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5290:	6818      	ldr	r0, [r3, #0]
   d5292:	6859      	ldr	r1, [r3, #4]
   d5294:	462a      	mov	r2, r5
   d5296:	c203      	stmia	r2!, {r0, r1}
   d5298:	3308      	adds	r3, #8
   d529a:	42a3      	cmp	r3, r4
   d529c:	4615      	mov	r5, r2
   d529e:	d1f7      	bne.n	d5290 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d52a0:	a901      	add	r1, sp, #4
   d52a2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d52a4:	ad07      	add	r5, sp, #28
   d52a6:	f7ff fec9 	bl	d503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d52aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d52ac:	1d34      	adds	r4, r6, #4
   d52ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52b0:	682b      	ldr	r3, [r5, #0]
   d52b2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d52b4:	9800      	ldr	r0, [sp, #0]
   d52b6:	f7ff f87b 	bl	d43b0 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d52ba:	4630      	mov	r0, r6
   d52bc:	b00c      	add	sp, #48	; 0x30
   d52be:	bd70      	pop	{r4, r5, r6, pc}

000d52c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d52c0:	4b02      	ldr	r3, [pc, #8]	; (d52cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d52c2:	4a03      	ldr	r2, [pc, #12]	; (d52d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d52c4:	601a      	str	r2, [r3, #0]
   d52c6:	2200      	movs	r2, #0
   d52c8:	605a      	str	r2, [r3, #4]
   d52ca:	4770      	bx	lr
   d52cc:	2003e5b4 	.word	0x2003e5b4
   d52d0:	000d5f64 	.word	0x000d5f64

000d52d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52d6:	4606      	mov	r6, r0
   d52d8:	460d      	mov	r5, r1
   d52da:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d52dc:	2400      	movs	r4, #0
  while (size--) {
   d52de:	42bd      	cmp	r5, r7
   d52e0:	d00c      	beq.n	d52fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d52e2:	6833      	ldr	r3, [r6, #0]
   d52e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d52e8:	689b      	ldr	r3, [r3, #8]
   d52ea:	4630      	mov	r0, r6
   d52ec:	4798      	blx	r3
     if (chunk>=0)
   d52ee:	2800      	cmp	r0, #0
   d52f0:	db01      	blt.n	d52f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d52f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d52f4:	e7f3      	b.n	d52de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d52f6:	2c00      	cmp	r4, #0
   d52f8:	bf08      	it	eq
   d52fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d52fc:	4620      	mov	r0, r4
   d52fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5300 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5300:	b570      	push	{r4, r5, r6, lr}
   d5302:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5304:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5306:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5308:	b149      	cbz	r1, d531e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d530a:	f000 fce2 	bl	d5cd2 <strlen>
   d530e:	682b      	ldr	r3, [r5, #0]
   d5310:	4602      	mov	r2, r0
   d5312:	4621      	mov	r1, r4
   d5314:	4628      	mov	r0, r5
   d5316:	68db      	ldr	r3, [r3, #12]
    }
   d5318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d531c:	4718      	bx	r3
    }
   d531e:	bd70      	pop	{r4, r5, r6, pc}

000d5320 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5320:	6803      	ldr	r3, [r0, #0]
   d5322:	689b      	ldr	r3, [r3, #8]
   d5324:	4718      	bx	r3

000d5326 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5326:	b530      	push	{r4, r5, lr}
   d5328:	b08b      	sub	sp, #44	; 0x2c
   d532a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d532c:	2100      	movs	r1, #0
   d532e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5332:	2a01      	cmp	r2, #1
   d5334:	bf98      	it	ls
   d5336:	220a      	movls	r2, #10
   d5338:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d533c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5340:	fb05 3312 	mls	r3, r5, r2, r3
   d5344:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5348:	2b09      	cmp	r3, #9
   d534a:	bf94      	ite	ls
   d534c:	3330      	addls	r3, #48	; 0x30
   d534e:	3337      	addhi	r3, #55	; 0x37
   d5350:	b2db      	uxtb	r3, r3
   d5352:	4621      	mov	r1, r4
   d5354:	f804 3901 	strb.w	r3, [r4], #-1
   d5358:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d535a:	2d00      	cmp	r5, #0
   d535c:	d1ee      	bne.n	d533c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d535e:	f7ff ffcf 	bl	d5300 <_ZN5Print5writeEPKc>
}
   d5362:	b00b      	add	sp, #44	; 0x2c
   d5364:	bd30      	pop	{r4, r5, pc}

000d5366 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5366:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5368:	b92a      	cbnz	r2, d5376 <_ZN5Print5printEmi+0x10>
   d536a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d536c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5370:	689b      	ldr	r3, [r3, #8]
   d5372:	b2c9      	uxtb	r1, r1
   d5374:	4718      	bx	r3
  else return printNumber(n, base);
   d5376:	b2d2      	uxtb	r2, r2
}
   d5378:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d537c:	f7ff bfd3 	b.w	d5326 <_ZN5Print11printNumberEmh>

000d5380 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5380:	f7ff bff1 	b.w	d5366 <_ZN5Print5printEmi>

000d5384 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5388:	4607      	mov	r7, r0
   d538a:	460e      	mov	r6, r1
  if (base == 0) {
   d538c:	4615      	mov	r5, r2
   d538e:	b92a      	cbnz	r2, d539c <_ZN5Print5printEli+0x18>
    return write(n);
   d5390:	6803      	ldr	r3, [r0, #0]
   d5392:	b2c9      	uxtb	r1, r1
   d5394:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d539a:	4718      	bx	r3
  } else if (base == 10) {
   d539c:	2a0a      	cmp	r2, #10
   d539e:	d102      	bne.n	d53a6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d53a0:	2900      	cmp	r1, #0
   d53a2:	da01      	bge.n	d53a8 <_ZN5Print5printEli+0x24>
   d53a4:	e004      	b.n	d53b0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d53a6:	b2d2      	uxtb	r2, r2
  }
}
   d53a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d53ac:	f7ff bfbb 	b.w	d5326 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d53b0:	212d      	movs	r1, #45	; 0x2d
   d53b2:	f7ff ffb5 	bl	d5320 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d53b6:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d53b8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d53ba:	4271      	negs	r1, r6
   d53bc:	4638      	mov	r0, r7
   d53be:	f7ff ffb2 	bl	d5326 <_ZN5Print11printNumberEmh>
   d53c2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d53c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d53c8 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d53c8:	f7ff bfdc 	b.w	d5384 <_ZN5Print5printEli>

000d53cc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d53cc:	b510      	push	{r4, lr}
   d53ce:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53d0:	f7ff fa94 	bl	d48fc <_ZNSt14_Function_baseD1Ev>
   d53d4:	4620      	mov	r0, r4
   d53d6:	bd10      	pop	{r4, pc}

000d53d8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53d8:	4803      	ldr	r0, [pc, #12]	; (d53e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d53da:	4a04      	ldr	r2, [pc, #16]	; (d53ec <_GLOBAL__sub_I_RGB+0x14>)
   d53dc:	4904      	ldr	r1, [pc, #16]	; (d53f0 <_GLOBAL__sub_I_RGB+0x18>)
   d53de:	2300      	movs	r3, #0
   d53e0:	6083      	str	r3, [r0, #8]
   d53e2:	f000 bad7 	b.w	d5994 <__aeabi_atexit>
   d53e6:	bf00      	nop
   d53e8:	2003e5bc 	.word	0x2003e5bc
   d53ec:	2003e348 	.word	0x2003e348
   d53f0:	000d53cd 	.word	0x000d53cd

000d53f4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d53f4:	4770      	bx	lr

000d53f6 <_ZN8SPIClassD0Ev>:
   d53f6:	b510      	push	{r4, lr}
   d53f8:	4604      	mov	r4, r0
   d53fa:	f7fe fe4e 	bl	d409a <_ZdlPv>
   d53fe:	4620      	mov	r0, r4
   d5400:	bd10      	pop	{r4, pc}
	...

000d5404 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5404:	b570      	push	{r4, r5, r6, lr}
   d5406:	4b08      	ldr	r3, [pc, #32]	; (d5428 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5408:	6003      	str	r3, [r0, #0]
   d540a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d540c:	2500      	movs	r5, #0
   d540e:	460e      	mov	r6, r1
   d5410:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5414:	f7fe ff54 	bl	d42c0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5418:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d541a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d541c:	f7fe ffd8 	bl	d43d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5420:	60a5      	str	r5, [r4, #8]
}
   d5422:	4620      	mov	r0, r4
   d5424:	bd70      	pop	{r4, r5, r6, pc}
   d5426:	bf00      	nop
   d5428:	000d5f98 	.word	0x000d5f98

000d542c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d542c:	7900      	ldrb	r0, [r0, #4]
   d542e:	f7fe bfd7 	b.w	d43e0 <HAL_SPI_Is_Enabled>

000d5432 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5432:	b510      	push	{r4, lr}
   d5434:	4604      	mov	r4, r0
{
	free(buffer);
   d5436:	6800      	ldr	r0, [r0, #0]
   d5438:	f7ff f8f6 	bl	d4628 <free>
}
   d543c:	4620      	mov	r0, r4
   d543e:	bd10      	pop	{r4, pc}

000d5440 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5440:	b510      	push	{r4, lr}
   d5442:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5444:	6800      	ldr	r0, [r0, #0]
   d5446:	b108      	cbz	r0, d544c <_ZN6String10invalidateEv+0xc>
   d5448:	f7ff f8ee 	bl	d4628 <free>
	buffer = NULL;
   d544c:	2300      	movs	r3, #0
   d544e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5450:	60a3      	str	r3, [r4, #8]
   d5452:	6063      	str	r3, [r4, #4]
   d5454:	bd10      	pop	{r4, pc}

000d5456 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5456:	b538      	push	{r3, r4, r5, lr}
   d5458:	4604      	mov	r4, r0
   d545a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d545c:	6800      	ldr	r0, [r0, #0]
   d545e:	3101      	adds	r1, #1
   d5460:	f7ff f8ea 	bl	d4638 <realloc>
	if (newbuffer) {
   d5464:	b110      	cbz	r0, d546c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5466:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d546a:	2001      	movs	r0, #1
	}
	return 0;
}
   d546c:	bd38      	pop	{r3, r4, r5, pc}

000d546e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d546e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5470:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5472:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5474:	b113      	cbz	r3, d547c <_ZN6String7reserveEj+0xe>
   d5476:	6843      	ldr	r3, [r0, #4]
   d5478:	428b      	cmp	r3, r1
   d547a:	d207      	bcs.n	d548c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d547c:	4620      	mov	r0, r4
   d547e:	f7ff ffea 	bl	d5456 <_ZN6String12changeBufferEj>
   d5482:	b120      	cbz	r0, d548e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5484:	68a3      	ldr	r3, [r4, #8]
   d5486:	b90b      	cbnz	r3, d548c <_ZN6String7reserveEj+0x1e>
   d5488:	6822      	ldr	r2, [r4, #0]
   d548a:	7013      	strb	r3, [r2, #0]
   d548c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5490:	b570      	push	{r4, r5, r6, lr}
   d5492:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5494:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5496:	4604      	mov	r4, r0
   d5498:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d549a:	f7ff ffe8 	bl	d546e <_ZN6String7reserveEj>
   d549e:	b918      	cbnz	r0, d54a8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d54a0:	4620      	mov	r0, r4
   d54a2:	f7ff ffcd 	bl	d5440 <_ZN6String10invalidateEv>
		return *this;
   d54a6:	e009      	b.n	d54bc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54a8:	462a      	mov	r2, r5
   d54aa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54ac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54ae:	6820      	ldr	r0, [r4, #0]
   d54b0:	f000 fbce 	bl	d5c50 <memcpy>
	buffer[len] = 0;
   d54b4:	6822      	ldr	r2, [r4, #0]
   d54b6:	68a3      	ldr	r3, [r4, #8]
   d54b8:	2100      	movs	r1, #0
   d54ba:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d54bc:	4620      	mov	r0, r4
   d54be:	bd70      	pop	{r4, r5, r6, pc}

000d54c0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54c0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54c2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54c4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54c6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54c8:	6043      	str	r3, [r0, #4]
	len = 0;
   d54ca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54cc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d54ce:	460d      	mov	r5, r1
   d54d0:	b139      	cbz	r1, d54e2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d54d2:	4608      	mov	r0, r1
   d54d4:	f000 fbfd 	bl	d5cd2 <strlen>
   d54d8:	4629      	mov	r1, r5
   d54da:	4602      	mov	r2, r0
   d54dc:	4620      	mov	r0, r4
   d54de:	f7ff ffd7 	bl	d5490 <_ZN6String4copyEPKcj>
}
   d54e2:	4620      	mov	r0, r4
   d54e4:	bd38      	pop	{r3, r4, r5, pc}

000d54e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d54e6:	b538      	push	{r3, r4, r5, lr}
   d54e8:	4605      	mov	r5, r0
	if (buffer) {
   d54ea:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d54ec:	460c      	mov	r4, r1
	if (buffer) {
   d54ee:	b160      	cbz	r0, d550a <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d54f0:	686a      	ldr	r2, [r5, #4]
   d54f2:	688b      	ldr	r3, [r1, #8]
   d54f4:	429a      	cmp	r2, r3
   d54f6:	d306      	bcc.n	d5506 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d54f8:	6809      	ldr	r1, [r1, #0]
   d54fa:	f000 fbc6 	bl	d5c8a <strcpy>
			len = rhs.len;
   d54fe:	68a3      	ldr	r3, [r4, #8]
   d5500:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5502:	2300      	movs	r3, #0
   d5504:	e00a      	b.n	d551c <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5506:	f7ff f88f 	bl	d4628 <free>
		}
	}
	buffer = rhs.buffer;
   d550a:	6823      	ldr	r3, [r4, #0]
   d550c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d550e:	6863      	ldr	r3, [r4, #4]
   d5510:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5512:	68a3      	ldr	r3, [r4, #8]
   d5514:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5516:	2300      	movs	r3, #0
   d5518:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d551a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d551c:	60a3      	str	r3, [r4, #8]
   d551e:	bd38      	pop	{r3, r4, r5, pc}

000d5520 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5520:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5522:	b510      	push	{r4, lr}
   d5524:	460b      	mov	r3, r1
   d5526:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5528:	d007      	beq.n	d553a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d552a:	6809      	ldr	r1, [r1, #0]
   d552c:	b119      	cbz	r1, d5536 <_ZN6StringaSERKS_+0x16>
   d552e:	689a      	ldr	r2, [r3, #8]
   d5530:	f7ff ffae 	bl	d5490 <_ZN6String4copyEPKcj>
   d5534:	e001      	b.n	d553a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5536:	f7ff ff83 	bl	d5440 <_ZN6String10invalidateEv>

	return *this;
}
   d553a:	4620      	mov	r0, r4
   d553c:	bd10      	pop	{r4, pc}

000d553e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d553e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5540:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5542:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5544:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5546:	6043      	str	r3, [r0, #4]
	len = 0;
   d5548:	6083      	str	r3, [r0, #8]
	flags = 0;
   d554a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d554c:	f7ff ffe8 	bl	d5520 <_ZN6StringaSERKS_>
}
   d5550:	4620      	mov	r0, r4
   d5552:	bd10      	pop	{r4, pc}

000d5554 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5554:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5556:	b510      	push	{r4, lr}
   d5558:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d555a:	d001      	beq.n	d5560 <_ZN6StringaSEOS_+0xc>
   d555c:	f7ff ffc3 	bl	d54e6 <_ZN6String4moveERS_>
	return *this;
}
   d5560:	4620      	mov	r0, r4
   d5562:	bd10      	pop	{r4, pc}

000d5564 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5564:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5566:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5568:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d556a:	b912      	cbnz	r2, d5572 <_ZNK6String6equalsEPKc+0xe>
   d556c:	b919      	cbnz	r1, d5576 <_ZNK6String6equalsEPKc+0x12>
   d556e:	2001      	movs	r0, #1
   d5570:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5572:	b911      	cbnz	r1, d557a <_ZNK6String6equalsEPKc+0x16>
   d5574:	6803      	ldr	r3, [r0, #0]
   d5576:	7818      	ldrb	r0, [r3, #0]
   d5578:	e002      	b.n	d5580 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d557a:	6800      	ldr	r0, [r0, #0]
   d557c:	f000 fb7b 	bl	d5c76 <strcmp>
   d5580:	fab0 f080 	clz	r0, r0
   d5584:	0940      	lsrs	r0, r0, #5
}
   d5586:	bd08      	pop	{r3, pc}

000d5588 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5588:	b40e      	push	{r1, r2, r3}
   d558a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d558c:	ac09      	add	r4, sp, #36	; 0x24
   d558e:	4605      	mov	r5, r0
   d5590:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d5594:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5596:	4623      	mov	r3, r4
   d5598:	463a      	mov	r2, r7
   d559a:	2105      	movs	r1, #5
   d559c:	a802      	add	r0, sp, #8
   d559e:	f7ff f853 	bl	d4648 <vsnprintf>
    va_end(marker);

    String result;
   d55a2:	490c      	ldr	r1, [pc, #48]	; (d55d4 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d55a4:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d55a6:	4628      	mov	r0, r5
   d55a8:	f7ff ff8a 	bl	d54c0 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d55ac:	4631      	mov	r1, r6
   d55ae:	4628      	mov	r0, r5
   d55b0:	f7ff ff5d 	bl	d546e <_ZN6String7reserveEj>
    if (result.buffer) {
   d55b4:	6828      	ldr	r0, [r5, #0]
   d55b6:	b130      	cbz	r0, d55c6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d55b8:	4623      	mov	r3, r4
   d55ba:	463a      	mov	r2, r7
   d55bc:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d55be:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d55c0:	f7ff f842 	bl	d4648 <vsnprintf>
        va_end(marker);
        result.len = n;
   d55c4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d55c6:	4628      	mov	r0, r5
   d55c8:	b004      	add	sp, #16
   d55ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d55ce:	b003      	add	sp, #12
   d55d0:	4770      	bx	lr
   d55d2:	bf00      	nop
   d55d4:	000d5e60 	.word	0x000d5e60

000d55d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d55d8:	4b05      	ldr	r3, [pc, #20]	; (d55f0 <_GLOBAL__sub_I_System+0x18>)
   d55da:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d55de:	2000      	movs	r0, #0
   d55e0:	805a      	strh	r2, [r3, #2]
   d55e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55e6:	7018      	strb	r0, [r3, #0]
   d55e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d55ea:	f7fe bf71 	b.w	d44d0 <set_system_mode>
   d55ee:	bf00      	nop
   d55f0:	2003e5cc 	.word	0x2003e5cc

000d55f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55f4:	4b02      	ldr	r3, [pc, #8]	; (d5600 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55f6:	681a      	ldr	r2, [r3, #0]
   d55f8:	4b02      	ldr	r3, [pc, #8]	; (d5604 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55fa:	601a      	str	r2, [r3, #0]
   d55fc:	4770      	bx	lr
   d55fe:	bf00      	nop
   d5600:	2003e2e0 	.word	0x2003e2e0
   d5604:	2003e5d4 	.word	0x2003e5d4

000d5608 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5608:	4770      	bx	lr

000d560a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d560a:	7441      	strb	r1, [r0, #17]
   d560c:	4770      	bx	lr

000d560e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d560e:	7c00      	ldrb	r0, [r0, #16]
   d5610:	f7fe bf26 	b.w	d4460 <HAL_USART_Available_Data_For_Write>

000d5614 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5614:	7c00      	ldrb	r0, [r0, #16]
   d5616:	f7fe befb 	b.w	d4410 <HAL_USART_Available_Data>

000d561a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d561a:	7c00      	ldrb	r0, [r0, #16]
   d561c:	f7fe bf08 	b.w	d4430 <HAL_USART_Peek_Data>

000d5620 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5620:	7c00      	ldrb	r0, [r0, #16]
   d5622:	f7fe befd 	b.w	d4420 <HAL_USART_Read_Data>

000d5626 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5626:	7c00      	ldrb	r0, [r0, #16]
   d5628:	f7fe bf0a 	b.w	d4440 <HAL_USART_Flush_Data>

000d562c <_ZN11USARTSerialD0Ev>:
   d562c:	b510      	push	{r4, lr}
   d562e:	4604      	mov	r4, r0
   d5630:	f7fe fd33 	bl	d409a <_ZdlPv>
   d5634:	4620      	mov	r0, r4
   d5636:	bd10      	pop	{r4, pc}

000d5638 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5638:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d563a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d563c:	4604      	mov	r4, r0
   d563e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5640:	b925      	cbnz	r5, d564c <_ZN11USARTSerial5writeEh+0x14>
   d5642:	7c00      	ldrb	r0, [r0, #16]
   d5644:	f7fe ff0c 	bl	d4460 <HAL_USART_Available_Data_For_Write>
   d5648:	2800      	cmp	r0, #0
   d564a:	dd05      	ble.n	d5658 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d564c:	4631      	mov	r1, r6
   d564e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5654:	f7fe bed4 	b.w	d4400 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5658:	4628      	mov	r0, r5
   d565a:	bd70      	pop	{r4, r5, r6, pc}

000d565c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d565c:	b510      	push	{r4, lr}
   d565e:	4604      	mov	r4, r0
   d5660:	4608      	mov	r0, r1
   d5662:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5664:	2200      	movs	r2, #0
   d5666:	6062      	str	r2, [r4, #4]
   d5668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d566c:	60a2      	str	r2, [r4, #8]
   d566e:	4a05      	ldr	r2, [pc, #20]	; (d5684 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5670:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5672:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5674:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5676:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5678:	461a      	mov	r2, r3
   d567a:	f7fe feb9 	bl	d43f0 <HAL_USART_Init>
}
   d567e:	4620      	mov	r0, r4
   d5680:	bd10      	pop	{r4, pc}
   d5682:	bf00      	nop
   d5684:	000d5fd4 	.word	0x000d5fd4

000d5688 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5688:	7c00      	ldrb	r0, [r0, #16]
   d568a:	f7fe bee1 	b.w	d4450 <HAL_USART_Is_Enabled>
	...

000d5690 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5690:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5692:	4d0c      	ldr	r5, [pc, #48]	; (d56c4 <_Z22__fetch_global_Serial1v+0x34>)
   d5694:	6829      	ldr	r1, [r5, #0]
   d5696:	f011 0401 	ands.w	r4, r1, #1
   d569a:	d111      	bne.n	d56c0 <_Z22__fetch_global_Serial1v+0x30>
   d569c:	4628      	mov	r0, r5
   d569e:	f7fe fd00 	bl	d40a2 <__cxa_guard_acquire>
   d56a2:	b168      	cbz	r0, d56c0 <_Z22__fetch_global_Serial1v+0x30>
   d56a4:	4a08      	ldr	r2, [pc, #32]	; (d56c8 <_Z22__fetch_global_Serial1v+0x38>)
   d56a6:	4b09      	ldr	r3, [pc, #36]	; (d56cc <_Z22__fetch_global_Serial1v+0x3c>)
   d56a8:	4809      	ldr	r0, [pc, #36]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56aa:	4621      	mov	r1, r4
   d56ac:	f7ff ffd6 	bl	d565c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d56b0:	4628      	mov	r0, r5
   d56b2:	f7fe fcfb 	bl	d40ac <__cxa_guard_release>
   d56b6:	4a07      	ldr	r2, [pc, #28]	; (d56d4 <_Z22__fetch_global_Serial1v+0x44>)
   d56b8:	4907      	ldr	r1, [pc, #28]	; (d56d8 <_Z22__fetch_global_Serial1v+0x48>)
   d56ba:	4805      	ldr	r0, [pc, #20]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56bc:	f000 f96a 	bl	d5994 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d56c0:	4803      	ldr	r0, [pc, #12]	; (d56d0 <_Z22__fetch_global_Serial1v+0x40>)
   d56c2:	bd38      	pop	{r3, r4, r5, pc}
   d56c4:	2003e670 	.word	0x2003e670
   d56c8:	2003e674 	.word	0x2003e674
   d56cc:	2003e5ec 	.word	0x2003e5ec
   d56d0:	2003e5d8 	.word	0x2003e5d8
   d56d4:	2003e348 	.word	0x2003e348
   d56d8:	000d5609 	.word	0x000d5609

000d56dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56dc:	7441      	strb	r1, [r0, #17]
   d56de:	4770      	bx	lr

000d56e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56e0:	4770      	bx	lr

000d56e2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d56e2:	2100      	movs	r1, #0
   d56e4:	7c00      	ldrb	r0, [r0, #16]
   d56e6:	f7fe bedb 	b.w	d44a0 <HAL_USB_USART_Receive_Data>

000d56ea <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d56ea:	2101      	movs	r1, #1
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7fe bed7 	b.w	d44a0 <HAL_USB_USART_Receive_Data>

000d56f2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d56f2:	7c00      	ldrb	r0, [r0, #16]
   d56f4:	f7fe becc 	b.w	d4490 <HAL_USB_USART_Available_Data_For_Write>

000d56f8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d56f8:	7c00      	ldrb	r0, [r0, #16]
   d56fa:	f7fe bec1 	b.w	d4480 <HAL_USB_USART_Available_Data>

000d56fe <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d56fe:	b538      	push	{r3, r4, r5, lr}
   d5700:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5702:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5704:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5706:	f7fe fec3 	bl	d4490 <HAL_USB_USART_Available_Data_For_Write>
   d570a:	2800      	cmp	r0, #0
   d570c:	dc01      	bgt.n	d5712 <_ZN9USBSerial5writeEh+0x14>
   d570e:	7c60      	ldrb	r0, [r4, #17]
   d5710:	b120      	cbz	r0, d571c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5712:	4629      	mov	r1, r5
   d5714:	7c20      	ldrb	r0, [r4, #16]
   d5716:	f7fe fecb 	bl	d44b0 <HAL_USB_USART_Send_Data>
    return 1;
   d571a:	2001      	movs	r0, #1
  }
  return 0;
}
   d571c:	bd38      	pop	{r3, r4, r5, pc}

000d571e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d571e:	7c00      	ldrb	r0, [r0, #16]
   d5720:	f7fe bece 	b.w	d44c0 <HAL_USB_USART_Flush_Data>

000d5724 <_ZN9USBSerialD0Ev>:
   d5724:	b510      	push	{r4, lr}
   d5726:	4604      	mov	r4, r0
   d5728:	f7fe fcb7 	bl	d409a <_ZdlPv>
   d572c:	4620      	mov	r0, r4
   d572e:	bd10      	pop	{r4, pc}

000d5730 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5730:	b510      	push	{r4, lr}
   d5732:	4604      	mov	r4, r0
   d5734:	2300      	movs	r3, #0
   d5736:	6063      	str	r3, [r4, #4]
   d5738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d573c:	60a3      	str	r3, [r4, #8]
   d573e:	4b05      	ldr	r3, [pc, #20]	; (d5754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5740:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5742:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5744:	4608      	mov	r0, r1
{
  _serial = serial;
   d5746:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5748:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d574a:	4611      	mov	r1, r2
   d574c:	f7fe fe90 	bl	d4470 <HAL_USB_USART_Init>
}
   d5750:	4620      	mov	r0, r4
   d5752:	bd10      	pop	{r4, pc}
   d5754:	000d6004 	.word	0x000d6004

000d5758 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5758:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d575a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d575c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d575e:	2100      	movs	r1, #0
   d5760:	f000 fa81 	bl	d5c66 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5764:	4620      	mov	r0, r4
   d5766:	bd10      	pop	{r4, pc}

000d5768 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5768:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d576a:	4d0e      	ldr	r5, [pc, #56]	; (d57a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d576c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d576e:	a801      	add	r0, sp, #4
   d5770:	f7ff fff2 	bl	d5758 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5774:	6829      	ldr	r1, [r5, #0]
   d5776:	f011 0401 	ands.w	r4, r1, #1
   d577a:	d110      	bne.n	d579e <_Z16_fetch_usbserialv+0x36>
   d577c:	4628      	mov	r0, r5
   d577e:	f7fe fc90 	bl	d40a2 <__cxa_guard_acquire>
   d5782:	b160      	cbz	r0, d579e <_Z16_fetch_usbserialv+0x36>
   d5784:	aa01      	add	r2, sp, #4
   d5786:	4621      	mov	r1, r4
   d5788:	4807      	ldr	r0, [pc, #28]	; (d57a8 <_Z16_fetch_usbserialv+0x40>)
   d578a:	f7ff ffd1 	bl	d5730 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d578e:	4628      	mov	r0, r5
   d5790:	f7fe fc8c 	bl	d40ac <__cxa_guard_release>
   d5794:	4a05      	ldr	r2, [pc, #20]	; (d57ac <_Z16_fetch_usbserialv+0x44>)
   d5796:	4906      	ldr	r1, [pc, #24]	; (d57b0 <_Z16_fetch_usbserialv+0x48>)
   d5798:	4803      	ldr	r0, [pc, #12]	; (d57a8 <_Z16_fetch_usbserialv+0x40>)
   d579a:	f000 f8fb 	bl	d5994 <__aeabi_atexit>
	return _usbserial;
}
   d579e:	4802      	ldr	r0, [pc, #8]	; (d57a8 <_Z16_fetch_usbserialv+0x40>)
   d57a0:	b007      	add	sp, #28
   d57a2:	bd30      	pop	{r4, r5, pc}
   d57a4:	2003e6f8 	.word	0x2003e6f8
   d57a8:	2003e6fc 	.word	0x2003e6fc
   d57ac:	2003e348 	.word	0x2003e348
   d57b0:	000d56e1 	.word	0x000d56e1

000d57b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d57b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d57b6:	4b0c      	ldr	r3, [pc, #48]	; (d57e8 <serialEventRun+0x34>)
   d57b8:	b133      	cbz	r3, d57c8 <serialEventRun+0x14>
   d57ba:	f7ff ffd5 	bl	d5768 <_Z16_fetch_usbserialv>
   d57be:	6803      	ldr	r3, [r0, #0]
   d57c0:	691b      	ldr	r3, [r3, #16]
   d57c2:	4798      	blx	r3
   d57c4:	2800      	cmp	r0, #0
   d57c6:	dc09      	bgt.n	d57dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d57c8:	4b08      	ldr	r3, [pc, #32]	; (d57ec <serialEventRun+0x38>)
   d57ca:	b163      	cbz	r3, d57e6 <serialEventRun+0x32>
   d57cc:	f7ff ff60 	bl	d5690 <_Z22__fetch_global_Serial1v>
   d57d0:	6803      	ldr	r3, [r0, #0]
   d57d2:	691b      	ldr	r3, [r3, #16]
   d57d4:	4798      	blx	r3
   d57d6:	2800      	cmp	r0, #0
   d57d8:	dc03      	bgt.n	d57e2 <serialEventRun+0x2e>
   d57da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d57dc:	f3af 8000 	nop.w
   d57e0:	e7f2      	b.n	d57c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d57e2:	f3af 8000 	nop.w
   d57e6:	bd08      	pop	{r3, pc}
	...

000d57f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d57f0:	b508      	push	{r3, lr}
	serialEventRun();
   d57f2:	f7ff ffdf 	bl	d57b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57f6:	f7fe fd73 	bl	d42e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57fa:	4b01      	ldr	r3, [pc, #4]	; (d5800 <_post_loop+0x10>)
   d57fc:	6018      	str	r0, [r3, #0]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	2003e714 	.word	0x2003e714

000d5804 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5804:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5806:	2300      	movs	r3, #0
   d5808:	9300      	str	r3, [sp, #0]
   d580a:	461a      	mov	r2, r3
   d580c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5810:	f7fe fe88 	bl	d4524 <system_ctrl_set_result>
}
   d5814:	b003      	add	sp, #12
   d5816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d581c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d581c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d581e:	8843      	ldrh	r3, [r0, #2]
   d5820:	2b0a      	cmp	r3, #10
   d5822:	d008      	beq.n	d5836 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5824:	2b50      	cmp	r3, #80	; 0x50
   d5826:	d109      	bne.n	d583c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5828:	4b09      	ldr	r3, [pc, #36]	; (d5850 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d582a:	681b      	ldr	r3, [r3, #0]
   d582c:	b13b      	cbz	r3, d583e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d582e:	b003      	add	sp, #12
   d5830:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5834:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5836:	f7ff ffe5 	bl	d5804 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d583a:	e006      	b.n	d584a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d583c:	2300      	movs	r3, #0
   d583e:	9300      	str	r3, [sp, #0]
   d5840:	461a      	mov	r2, r3
   d5842:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5846:	f7fe fe6d 	bl	d4524 <system_ctrl_set_result>
        break;
    }
}
   d584a:	b003      	add	sp, #12
   d584c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5850:	2003e710 	.word	0x2003e710

000d5854 <module_user_init_hook>:

void module_user_init_hook()
{
   d5854:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5856:	2100      	movs	r1, #0
   d5858:	4804      	ldr	r0, [pc, #16]	; (d586c <module_user_init_hook+0x18>)
   d585a:	f7fe fe85 	bl	d4568 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d585e:	2100      	movs	r1, #0
   d5860:	4803      	ldr	r0, [pc, #12]	; (d5870 <module_user_init_hook+0x1c>)
}
   d5862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5866:	f7fe be53 	b.w	d4510 <system_ctrl_set_app_request_handler>
   d586a:	bf00      	nop
   d586c:	00000000 	.word	0x00000000
   d5870:	000d581d 	.word	0x000d581d

000d5874 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5874:	b510      	push	{r4, lr}
   d5876:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5878:	480f      	ldr	r0, [pc, #60]	; (d58b8 <pinAvailable+0x44>)
   d587a:	f7ff fdd7 	bl	d542c <_ZN8SPIClass9isEnabledEv>
   d587e:	b128      	cbz	r0, d588c <pinAvailable+0x18>
   d5880:	f1a4 030b 	sub.w	r3, r4, #11
   d5884:	2b02      	cmp	r3, #2
   d5886:	d801      	bhi.n	d588c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5888:	2000      	movs	r0, #0
   d588a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d588c:	f000 f840 	bl	d5910 <_Z19__fetch_global_Wirev>
   d5890:	f7ff fb88 	bl	d4fa4 <_ZN7TwoWire9isEnabledEv>
   d5894:	b108      	cbz	r0, d589a <pinAvailable+0x26>
   d5896:	2c01      	cmp	r4, #1
   d5898:	d9f6      	bls.n	d5888 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d589a:	f7ff fef9 	bl	d5690 <_Z22__fetch_global_Serial1v>
   d589e:	f7ff fef3 	bl	d5688 <_ZN11USARTSerial9isEnabledEv>
   d58a2:	b118      	cbz	r0, d58ac <pinAvailable+0x38>
   d58a4:	f1a4 0309 	sub.w	r3, r4, #9
   d58a8:	2b01      	cmp	r3, #1
   d58aa:	d9ed      	bls.n	d5888 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d58ac:	2c23      	cmp	r4, #35	; 0x23
   d58ae:	bf8c      	ite	hi
   d58b0:	2000      	movhi	r0, #0
   d58b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d58b4:	bd10      	pop	{r4, pc}
   d58b6:	bf00      	nop
   d58b8:	2003e730 	.word	0x2003e730

000d58bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58bc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d58be:	b538      	push	{r3, r4, r5, lr}
   d58c0:	4604      	mov	r4, r0
   d58c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58c4:	d80a      	bhi.n	d58dc <pinMode+0x20>
   d58c6:	29ff      	cmp	r1, #255	; 0xff
   d58c8:	d008      	beq.n	d58dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d58ca:	f7ff ffd3 	bl	d5874 <pinAvailable>
   d58ce:	b128      	cbz	r0, d58dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58d0:	4629      	mov	r1, r5
   d58d2:	4620      	mov	r0, r4
}
   d58d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d58d8:	f7fe bd12 	b.w	d4300 <HAL_Pin_Mode>
   d58dc:	bd38      	pop	{r3, r4, r5, pc}

000d58de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d58de:	b538      	push	{r3, r4, r5, lr}
   d58e0:	4604      	mov	r4, r0
   d58e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d58e4:	f7fe fd14 	bl	d4310 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d58e8:	28ff      	cmp	r0, #255	; 0xff
   d58ea:	d010      	beq.n	d590e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d58ec:	2806      	cmp	r0, #6
   d58ee:	d804      	bhi.n	d58fa <digitalWrite+0x1c>
   d58f0:	234d      	movs	r3, #77	; 0x4d
   d58f2:	fa23 f000 	lsr.w	r0, r3, r0
   d58f6:	07c3      	lsls	r3, r0, #31
   d58f8:	d409      	bmi.n	d590e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d58fa:	4620      	mov	r0, r4
   d58fc:	f7ff ffba 	bl	d5874 <pinAvailable>
   d5900:	b128      	cbz	r0, d590e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5902:	4629      	mov	r1, r5
   d5904:	4620      	mov	r0, r4
}
   d5906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d590a:	f7fe bd09 	b.w	d4320 <HAL_GPIO_Write>
   d590e:	bd38      	pop	{r3, r4, r5, pc}

000d5910 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5910:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5912:	4d0b      	ldr	r5, [pc, #44]	; (d5940 <_Z19__fetch_global_Wirev+0x30>)
   d5914:	6829      	ldr	r1, [r5, #0]
   d5916:	f011 0401 	ands.w	r4, r1, #1
   d591a:	d10f      	bne.n	d593c <_Z19__fetch_global_Wirev+0x2c>
   d591c:	4628      	mov	r0, r5
   d591e:	f7fe fbc0 	bl	d40a2 <__cxa_guard_acquire>
   d5922:	b158      	cbz	r0, d593c <_Z19__fetch_global_Wirev+0x2c>
   d5924:	4621      	mov	r1, r4
   d5926:	4807      	ldr	r0, [pc, #28]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d5928:	f7ff fb2a 	bl	d4f80 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d592c:	4628      	mov	r0, r5
   d592e:	f7fe fbbd 	bl	d40ac <__cxa_guard_release>
   d5932:	4a05      	ldr	r2, [pc, #20]	; (d5948 <_Z19__fetch_global_Wirev+0x38>)
   d5934:	4905      	ldr	r1, [pc, #20]	; (d594c <_Z19__fetch_global_Wirev+0x3c>)
   d5936:	4803      	ldr	r0, [pc, #12]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d5938:	f000 f82c 	bl	d5994 <__aeabi_atexit>
	return wire;
}
   d593c:	4801      	ldr	r0, [pc, #4]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d593e:	bd38      	pop	{r3, r4, r5, pc}
   d5940:	2003e718 	.word	0x2003e718
   d5944:	2003e71c 	.word	0x2003e71c
   d5948:	2003e348 	.word	0x2003e348
   d594c:	000d4f29 	.word	0x000d4f29

000d5950 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5950:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5952:	4c0c      	ldr	r4, [pc, #48]	; (d5984 <_GLOBAL__sub_I_SPI+0x34>)
   d5954:	4e0c      	ldr	r6, [pc, #48]	; (d5988 <_GLOBAL__sub_I_SPI+0x38>)
   d5956:	4d0d      	ldr	r5, [pc, #52]	; (d598c <_GLOBAL__sub_I_SPI+0x3c>)
   d5958:	2100      	movs	r1, #0
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff fd52 	bl	d5404 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5960:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5962:	4c0b      	ldr	r4, [pc, #44]	; (d5990 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5964:	4632      	mov	r2, r6
   d5966:	4629      	mov	r1, r5
   d5968:	f000 f814 	bl	d5994 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d596c:	2101      	movs	r1, #1
   d596e:	4620      	mov	r0, r4
   d5970:	f7ff fd48 	bl	d5404 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5974:	4632      	mov	r2, r6
   d5976:	4629      	mov	r1, r5
   d5978:	4620      	mov	r0, r4
   d597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d597e:	f000 b809 	b.w	d5994 <__aeabi_atexit>
   d5982:	bf00      	nop
   d5984:	2003e730 	.word	0x2003e730
   d5988:	2003e348 	.word	0x2003e348
   d598c:	000d53f5 	.word	0x000d53f5
   d5990:	2003e740 	.word	0x2003e740

000d5994 <__aeabi_atexit>:
   d5994:	460b      	mov	r3, r1
   d5996:	4601      	mov	r1, r0
   d5998:	4618      	mov	r0, r3
   d599a:	f000 b94b 	b.w	d5c34 <__cxa_atexit>

000d599e <_ZSt25__throw_bad_function_callv>:
   d599e:	b508      	push	{r3, lr}
   d59a0:	f7fe fe5a 	bl	d4658 <abort>

000d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d59a4:	4b24      	ldr	r3, [pc, #144]	; (d5a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d59a6:	681a      	ldr	r2, [r3, #0]
   d59a8:	07d0      	lsls	r0, r2, #31
   d59aa:	bf5c      	itt	pl
   d59ac:	2201      	movpl	r2, #1
   d59ae:	601a      	strpl	r2, [r3, #0]
   d59b0:	4b22      	ldr	r3, [pc, #136]	; (d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d59b2:	681a      	ldr	r2, [r3, #0]
   d59b4:	07d1      	lsls	r1, r2, #31
   d59b6:	bf5c      	itt	pl
   d59b8:	2201      	movpl	r2, #1
   d59ba:	601a      	strpl	r2, [r3, #0]
   d59bc:	4b20      	ldr	r3, [pc, #128]	; (d5a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d59be:	681a      	ldr	r2, [r3, #0]
   d59c0:	07d2      	lsls	r2, r2, #31
   d59c2:	bf5c      	itt	pl
   d59c4:	2201      	movpl	r2, #1
   d59c6:	601a      	strpl	r2, [r3, #0]
   d59c8:	4b1e      	ldr	r3, [pc, #120]	; (d5a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d59ca:	681a      	ldr	r2, [r3, #0]
   d59cc:	07d0      	lsls	r0, r2, #31
   d59ce:	bf5c      	itt	pl
   d59d0:	2201      	movpl	r2, #1
   d59d2:	601a      	strpl	r2, [r3, #0]
   d59d4:	4b1c      	ldr	r3, [pc, #112]	; (d5a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d59d6:	681a      	ldr	r2, [r3, #0]
   d59d8:	07d1      	lsls	r1, r2, #31
   d59da:	bf5c      	itt	pl
   d59dc:	2201      	movpl	r2, #1
   d59de:	601a      	strpl	r2, [r3, #0]
   d59e0:	4b1a      	ldr	r3, [pc, #104]	; (d5a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d59e2:	681a      	ldr	r2, [r3, #0]
   d59e4:	07d2      	lsls	r2, r2, #31
   d59e6:	bf5c      	itt	pl
   d59e8:	2201      	movpl	r2, #1
   d59ea:	601a      	strpl	r2, [r3, #0]
   d59ec:	4b18      	ldr	r3, [pc, #96]	; (d5a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d59ee:	681a      	ldr	r2, [r3, #0]
   d59f0:	07d0      	lsls	r0, r2, #31
   d59f2:	bf5c      	itt	pl
   d59f4:	2201      	movpl	r2, #1
   d59f6:	601a      	strpl	r2, [r3, #0]
   d59f8:	4b16      	ldr	r3, [pc, #88]	; (d5a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d59fa:	681a      	ldr	r2, [r3, #0]
   d59fc:	07d1      	lsls	r1, r2, #31
   d59fe:	bf5c      	itt	pl
   d5a00:	2201      	movpl	r2, #1
   d5a02:	601a      	strpl	r2, [r3, #0]
   d5a04:	4b14      	ldr	r3, [pc, #80]	; (d5a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5a06:	681a      	ldr	r2, [r3, #0]
   d5a08:	07d2      	lsls	r2, r2, #31
   d5a0a:	bf5c      	itt	pl
   d5a0c:	2201      	movpl	r2, #1
   d5a0e:	601a      	strpl	r2, [r3, #0]
   d5a10:	4b12      	ldr	r3, [pc, #72]	; (d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	07d0      	lsls	r0, r2, #31
   d5a16:	bf5c      	itt	pl
   d5a18:	2201      	movpl	r2, #1
   d5a1a:	601a      	strpl	r2, [r3, #0]
   d5a1c:	4b10      	ldr	r3, [pc, #64]	; (d5a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a1e:	681a      	ldr	r2, [r3, #0]
   d5a20:	07d1      	lsls	r1, r2, #31
   d5a22:	bf5c      	itt	pl
   d5a24:	2201      	movpl	r2, #1
   d5a26:	601a      	strpl	r2, [r3, #0]
   d5a28:	4b0e      	ldr	r3, [pc, #56]	; (d5a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5a2a:	681a      	ldr	r2, [r3, #0]
   d5a2c:	07d2      	lsls	r2, r2, #31
   d5a2e:	bf5c      	itt	pl
   d5a30:	2201      	movpl	r2, #1
   d5a32:	601a      	strpl	r2, [r3, #0]
   d5a34:	4770      	bx	lr
   d5a36:	bf00      	nop
   d5a38:	2003e77c 	.word	0x2003e77c
   d5a3c:	2003e778 	.word	0x2003e778
   d5a40:	2003e774 	.word	0x2003e774
   d5a44:	2003e770 	.word	0x2003e770
   d5a48:	2003e76c 	.word	0x2003e76c
   d5a4c:	2003e768 	.word	0x2003e768
   d5a50:	2003e764 	.word	0x2003e764
   d5a54:	2003e760 	.word	0x2003e760
   d5a58:	2003e75c 	.word	0x2003e75c
   d5a5c:	2003e758 	.word	0x2003e758
   d5a60:	2003e754 	.word	0x2003e754
   d5a64:	2003e750 	.word	0x2003e750

000d5a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a68:	4b18      	ldr	r3, [pc, #96]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b16      	ldr	r3, [pc, #88]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b14      	ldr	r3, [pc, #80]	; (d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d0      	lsls	r0, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b12      	ldr	r3, [pc, #72]	; (d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d1      	lsls	r1, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b10      	ldr	r3, [pc, #64]	; (d5adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d2      	lsls	r2, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b0e      	ldr	r3, [pc, #56]	; (d5ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d0      	lsls	r0, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b0c      	ldr	r3, [pc, #48]	; (d5ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d1      	lsls	r1, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b0a      	ldr	r3, [pc, #40]	; (d5ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d2      	lsls	r2, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4770      	bx	lr
   d5aca:	bf00      	nop
   d5acc:	2003e79c 	.word	0x2003e79c
   d5ad0:	2003e798 	.word	0x2003e798
   d5ad4:	2003e794 	.word	0x2003e794
   d5ad8:	2003e790 	.word	0x2003e790
   d5adc:	2003e78c 	.word	0x2003e78c
   d5ae0:	2003e788 	.word	0x2003e788
   d5ae4:	2003e784 	.word	0x2003e784
   d5ae8:	2003e780 	.word	0x2003e780

000d5aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5aec:	4b18      	ldr	r3, [pc, #96]	; (d5b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5aee:	681a      	ldr	r2, [r3, #0]
   d5af0:	07d1      	lsls	r1, r2, #31
   d5af2:	bf5c      	itt	pl
   d5af4:	2201      	movpl	r2, #1
   d5af6:	601a      	strpl	r2, [r3, #0]
   d5af8:	4b16      	ldr	r3, [pc, #88]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5afa:	681a      	ldr	r2, [r3, #0]
   d5afc:	07d2      	lsls	r2, r2, #31
   d5afe:	bf5c      	itt	pl
   d5b00:	2201      	movpl	r2, #1
   d5b02:	601a      	strpl	r2, [r3, #0]
   d5b04:	4b14      	ldr	r3, [pc, #80]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b06:	681a      	ldr	r2, [r3, #0]
   d5b08:	07d0      	lsls	r0, r2, #31
   d5b0a:	bf5c      	itt	pl
   d5b0c:	2201      	movpl	r2, #1
   d5b0e:	601a      	strpl	r2, [r3, #0]
   d5b10:	4b12      	ldr	r3, [pc, #72]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b12:	681a      	ldr	r2, [r3, #0]
   d5b14:	07d1      	lsls	r1, r2, #31
   d5b16:	bf5c      	itt	pl
   d5b18:	2201      	movpl	r2, #1
   d5b1a:	601a      	strpl	r2, [r3, #0]
   d5b1c:	4b10      	ldr	r3, [pc, #64]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b1e:	681a      	ldr	r2, [r3, #0]
   d5b20:	07d2      	lsls	r2, r2, #31
   d5b22:	bf5c      	itt	pl
   d5b24:	2201      	movpl	r2, #1
   d5b26:	601a      	strpl	r2, [r3, #0]
   d5b28:	4b0e      	ldr	r3, [pc, #56]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d0      	lsls	r0, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4b0c      	ldr	r3, [pc, #48]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b36:	681a      	ldr	r2, [r3, #0]
   d5b38:	07d1      	lsls	r1, r2, #31
   d5b3a:	bf5c      	itt	pl
   d5b3c:	2201      	movpl	r2, #1
   d5b3e:	601a      	strpl	r2, [r3, #0]
   d5b40:	4b0a      	ldr	r3, [pc, #40]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b42:	681a      	ldr	r2, [r3, #0]
   d5b44:	07d2      	lsls	r2, r2, #31
   d5b46:	bf5c      	itt	pl
   d5b48:	2201      	movpl	r2, #1
   d5b4a:	601a      	strpl	r2, [r3, #0]
   d5b4c:	4770      	bx	lr
   d5b4e:	bf00      	nop
   d5b50:	2003e7bc 	.word	0x2003e7bc
   d5b54:	2003e7b8 	.word	0x2003e7b8
   d5b58:	2003e7b4 	.word	0x2003e7b4
   d5b5c:	2003e7b0 	.word	0x2003e7b0
   d5b60:	2003e7ac 	.word	0x2003e7ac
   d5b64:	2003e7a8 	.word	0x2003e7a8
   d5b68:	2003e7a4 	.word	0x2003e7a4
   d5b6c:	2003e7a0 	.word	0x2003e7a0

000d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b70:	4b24      	ldr	r3, [pc, #144]	; (d5c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b72:	681a      	ldr	r2, [r3, #0]
   d5b74:	07d0      	lsls	r0, r2, #31
   d5b76:	bf5c      	itt	pl
   d5b78:	2201      	movpl	r2, #1
   d5b7a:	601a      	strpl	r2, [r3, #0]
   d5b7c:	4b22      	ldr	r3, [pc, #136]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b7e:	681a      	ldr	r2, [r3, #0]
   d5b80:	07d1      	lsls	r1, r2, #31
   d5b82:	bf5c      	itt	pl
   d5b84:	2201      	movpl	r2, #1
   d5b86:	601a      	strpl	r2, [r3, #0]
   d5b88:	4b20      	ldr	r3, [pc, #128]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b8a:	681a      	ldr	r2, [r3, #0]
   d5b8c:	07d2      	lsls	r2, r2, #31
   d5b8e:	bf5c      	itt	pl
   d5b90:	2201      	movpl	r2, #1
   d5b92:	601a      	strpl	r2, [r3, #0]
   d5b94:	4b1e      	ldr	r3, [pc, #120]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b96:	681a      	ldr	r2, [r3, #0]
   d5b98:	07d0      	lsls	r0, r2, #31
   d5b9a:	bf5c      	itt	pl
   d5b9c:	2201      	movpl	r2, #1
   d5b9e:	601a      	strpl	r2, [r3, #0]
   d5ba0:	4b1c      	ldr	r3, [pc, #112]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5ba2:	681a      	ldr	r2, [r3, #0]
   d5ba4:	07d1      	lsls	r1, r2, #31
   d5ba6:	bf5c      	itt	pl
   d5ba8:	2201      	movpl	r2, #1
   d5baa:	601a      	strpl	r2, [r3, #0]
   d5bac:	4b1a      	ldr	r3, [pc, #104]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5bae:	681a      	ldr	r2, [r3, #0]
   d5bb0:	07d2      	lsls	r2, r2, #31
   d5bb2:	bf5c      	itt	pl
   d5bb4:	2201      	movpl	r2, #1
   d5bb6:	601a      	strpl	r2, [r3, #0]
   d5bb8:	4b18      	ldr	r3, [pc, #96]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5bba:	681a      	ldr	r2, [r3, #0]
   d5bbc:	07d0      	lsls	r0, r2, #31
   d5bbe:	bf5c      	itt	pl
   d5bc0:	2201      	movpl	r2, #1
   d5bc2:	601a      	strpl	r2, [r3, #0]
   d5bc4:	4b16      	ldr	r3, [pc, #88]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bc6:	681a      	ldr	r2, [r3, #0]
   d5bc8:	07d1      	lsls	r1, r2, #31
   d5bca:	bf5c      	itt	pl
   d5bcc:	2201      	movpl	r2, #1
   d5bce:	601a      	strpl	r2, [r3, #0]
   d5bd0:	4b14      	ldr	r3, [pc, #80]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	07d2      	lsls	r2, r2, #31
   d5bd6:	bf5c      	itt	pl
   d5bd8:	2201      	movpl	r2, #1
   d5bda:	601a      	strpl	r2, [r3, #0]
   d5bdc:	4b12      	ldr	r3, [pc, #72]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bde:	681a      	ldr	r2, [r3, #0]
   d5be0:	07d0      	lsls	r0, r2, #31
   d5be2:	bf5c      	itt	pl
   d5be4:	2201      	movpl	r2, #1
   d5be6:	601a      	strpl	r2, [r3, #0]
   d5be8:	4b10      	ldr	r3, [pc, #64]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bea:	681a      	ldr	r2, [r3, #0]
   d5bec:	07d1      	lsls	r1, r2, #31
   d5bee:	bf5c      	itt	pl
   d5bf0:	2201      	movpl	r2, #1
   d5bf2:	601a      	strpl	r2, [r3, #0]
   d5bf4:	4b0e      	ldr	r3, [pc, #56]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5bf6:	681a      	ldr	r2, [r3, #0]
   d5bf8:	07d2      	lsls	r2, r2, #31
   d5bfa:	bf5c      	itt	pl
   d5bfc:	2201      	movpl	r2, #1
   d5bfe:	601a      	strpl	r2, [r3, #0]
   d5c00:	4770      	bx	lr
   d5c02:	bf00      	nop
   d5c04:	2003e7ec 	.word	0x2003e7ec
   d5c08:	2003e7e8 	.word	0x2003e7e8
   d5c0c:	2003e7e4 	.word	0x2003e7e4
   d5c10:	2003e7e0 	.word	0x2003e7e0
   d5c14:	2003e7dc 	.word	0x2003e7dc
   d5c18:	2003e7d8 	.word	0x2003e7d8
   d5c1c:	2003e7d4 	.word	0x2003e7d4
   d5c20:	2003e7d0 	.word	0x2003e7d0
   d5c24:	2003e7cc 	.word	0x2003e7cc
   d5c28:	2003e7c8 	.word	0x2003e7c8
   d5c2c:	2003e7c4 	.word	0x2003e7c4
   d5c30:	2003e7c0 	.word	0x2003e7c0

000d5c34 <__cxa_atexit>:
   d5c34:	b510      	push	{r4, lr}
   d5c36:	4c05      	ldr	r4, [pc, #20]	; (d5c4c <__cxa_atexit+0x18>)
   d5c38:	4613      	mov	r3, r2
   d5c3a:	b12c      	cbz	r4, d5c48 <__cxa_atexit+0x14>
   d5c3c:	460a      	mov	r2, r1
   d5c3e:	4601      	mov	r1, r0
   d5c40:	2002      	movs	r0, #2
   d5c42:	f3af 8000 	nop.w
   d5c46:	bd10      	pop	{r4, pc}
   d5c48:	4620      	mov	r0, r4
   d5c4a:	bd10      	pop	{r4, pc}
   d5c4c:	00000000 	.word	0x00000000

000d5c50 <memcpy>:
   d5c50:	b510      	push	{r4, lr}
   d5c52:	1e43      	subs	r3, r0, #1
   d5c54:	440a      	add	r2, r1
   d5c56:	4291      	cmp	r1, r2
   d5c58:	d004      	beq.n	d5c64 <memcpy+0x14>
   d5c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5c62:	e7f8      	b.n	d5c56 <memcpy+0x6>
   d5c64:	bd10      	pop	{r4, pc}

000d5c66 <memset>:
   d5c66:	4402      	add	r2, r0
   d5c68:	4603      	mov	r3, r0
   d5c6a:	4293      	cmp	r3, r2
   d5c6c:	d002      	beq.n	d5c74 <memset+0xe>
   d5c6e:	f803 1b01 	strb.w	r1, [r3], #1
   d5c72:	e7fa      	b.n	d5c6a <memset+0x4>
   d5c74:	4770      	bx	lr

000d5c76 <strcmp>:
   d5c76:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5c7e:	2a01      	cmp	r2, #1
   d5c80:	bf28      	it	cs
   d5c82:	429a      	cmpcs	r2, r3
   d5c84:	d0f7      	beq.n	d5c76 <strcmp>
   d5c86:	1ad0      	subs	r0, r2, r3
   d5c88:	4770      	bx	lr

000d5c8a <strcpy>:
   d5c8a:	4603      	mov	r3, r0
   d5c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5c90:	f803 2b01 	strb.w	r2, [r3], #1
   d5c94:	2a00      	cmp	r2, #0
   d5c96:	d1f9      	bne.n	d5c8c <strcpy+0x2>
   d5c98:	4770      	bx	lr
	...

000d5c9c <strdup>:
   d5c9c:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <strdup+0xc>)
   d5c9e:	4601      	mov	r1, r0
   d5ca0:	6818      	ldr	r0, [r3, #0]
   d5ca2:	f000 b803 	b.w	d5cac <_strdup_r>
   d5ca6:	bf00      	nop
   d5ca8:	2003e344 	.word	0x2003e344

000d5cac <_strdup_r>:
   d5cac:	b570      	push	{r4, r5, r6, lr}
   d5cae:	4606      	mov	r6, r0
   d5cb0:	4608      	mov	r0, r1
   d5cb2:	460c      	mov	r4, r1
   d5cb4:	f000 f80d 	bl	d5cd2 <strlen>
   d5cb8:	1c45      	adds	r5, r0, #1
   d5cba:	4629      	mov	r1, r5
   d5cbc:	4630      	mov	r0, r6
   d5cbe:	f7fe fcd3 	bl	d4668 <_malloc_r>
   d5cc2:	4606      	mov	r6, r0
   d5cc4:	b118      	cbz	r0, d5cce <_strdup_r+0x22>
   d5cc6:	462a      	mov	r2, r5
   d5cc8:	4621      	mov	r1, r4
   d5cca:	f7ff ffc1 	bl	d5c50 <memcpy>
   d5cce:	4630      	mov	r0, r6
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}

000d5cd2 <strlen>:
   d5cd2:	4603      	mov	r3, r0
   d5cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5cd8:	2a00      	cmp	r2, #0
   d5cda:	d1fb      	bne.n	d5cd4 <strlen+0x2>
   d5cdc:	1a18      	subs	r0, r3, r0
   d5cde:	3801      	subs	r0, #1
   d5ce0:	4770      	bx	lr

000d5ce2 <link_code_end>:
	...

000d5ce4 <dynalib_user>:
   d5ce4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5cf4:	0000 0000 6e6f 6f00 6666 2c00 6420 7461     ....on.off., dat
   d5d04:	3a61 0020 6e61 6c61 676f 6176 756c 0065     a: .analogvalue.
   d5d14:	7262 6769 7468 656e 7373 7300 7465 6f70     brightness.setpo
   d5d24:	6e69 0074 6973 7367 7274 6c00 6465 5300     int.sigstr.led.S
   d5d34:	4749 253d 2c69 5551 4c41 253d 0069 5352     IG=%i,QUAL=%i.RS
   d5d44:	4953 5300 4749 4e3d 2c41 5551 4c41 4e3d     SI.SIG=NA,QUAL=N
   d5d54:	0041 0000                                   A...

000d5d58 <_ZTVN5spark13CellularClassE>:
	...
   d5d60:	4703 000d 46f9 000d 46ef 000d 46a5 000d     .G...F...F...F..
   d5d70:	46e3 000d 46d7 000d 46cb 000d 46c3 000d     .F...F...F...F..
   d5d80:	46b9 000d 46af 000d 523d 000d               .F...F..=R..

000d5d8c <_ZTV14CellularSignal>:
	...
   d5d94:	47c1 000d 4853 000d 47c3 000d 4895 000d     .G..SH...G...H..
   d5da4:	47c9 000d 4861 000d 47f5 000d 4821 000d     .G..aH...G..!H..
   d5db4:	fffc ffff 0000 0000 484b 000d               ........KH..

000d5dc0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5dc8:	48e1 000d 48e7 000d 490f 000d 48f3 000d     .H...H...I...H..
   d5dd8:	48e3 000d                                   .H..

000d5ddc <_ZTVN5spark13EthernetClassE>:
	...
   d5de4:	4f0b 000d 4f01 000d 4ef7 000d 4eed 000d     .O...O...N...N..
   d5df4:	4ee1 000d 4ed5 000d 4ec9 000d 4ec1 000d     .N...N...N...N..
   d5e04:	4eb7 000d 4ead 000d 523d 000d               .N...N..=R..

000d5e10 <_ZTV7TwoWire>:
	...
   d5e18:	4f29 000d 4f73 000d 4f4b 000d 4f2b 000d     )O..sO..KO..+O..
   d5e28:	4f53 000d 4f5b 000d 4f63 000d 4f6b 000d     SO..[O..cO..kO..

000d5e38 <_ZTV9IPAddress>:
	...
   d5e40:	4fbb 000d 4fad 000d 4faf 000d 6e6c 6600     .O...O...O..ln.f
   d5e50:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d5e60:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d5e70:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d5e80:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   d5e90:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5ea0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5eb0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5ec0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5ed0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5ee0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5ef0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5f00:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   d5f10:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d5f20:	696e 0063 6c61 006c                         nic.all.

000d5f28 <_ZTVN5spark9MeshClassE>:
	...
   d5f30:	50ff 000d 50f5 000d 50eb 000d 50e1 000d     .P...P...P...P..
   d5f40:	50d5 000d 50c9 000d 50bd 000d 50b5 000d     .P...P...P...P..
   d5f50:	50ab 000d 50a1 000d 523d 000d               .P...P..=R..

000d5f5c <_ZTVN5spark12NetworkClassE>:
	...
   d5f64:	51d5 000d 51df 000d 51e9 000d 51f3 000d     .Q...Q...Q...Q..
   d5f74:	51fd 000d 5209 000d 5215 000d 5221 000d     .Q...R...R..!R..
   d5f84:	5229 000d 5233 000d 523d 000d               )R..3R..=R..

000d5f90 <_ZTV8SPIClass>:
	...
   d5f98:	53f5 000d 53f7 000d 005a 2b25 3330 3a64     .S...S..Z.%+03d:
   d5fa8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d5fb8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d5fc8:	0000 0000                                   ....

000d5fcc <_ZTV11USARTSerial>:
	...
   d5fd4:	5609 000d 562d 000d 5639 000d 52d5 000d     .V..-V..9V...R..
   d5fe4:	5615 000d 5621 000d 561b 000d 5627 000d     .V..!V...V..'V..
   d5ff4:	560b 000d 560f 000d                         .V...V..

000d5ffc <_ZTV9USBSerial>:
	...
   d6004:	56e1 000d 5725 000d 56ff 000d 52d5 000d     .V..%W...V...R..
   d6014:	56f9 000d 56e3 000d 56eb 000d 571f 000d     .V...V...V...W..
   d6024:	56f3 000d 56dd 000d                         .V...V..

000d602c <__sf_fake_stdin>:
	...

000d604c <__sf_fake_stdout>:
	...

000d606c <__sf_fake_stderr>:
	...
   d608c:	0043                                        C.

000d608e <link_const_variable_data_end>:
	...

000d6090 <link_constructors_location>:
   d6090:	000d4249 	.word	0x000d4249
   d6094:	000d4781 	.word	0x000d4781
   d6098:	000d4f15 	.word	0x000d4f15
   d609c:	000d5091 	.word	0x000d5091
   d60a0:	000d5189 	.word	0x000d5189
   d60a4:	000d52c1 	.word	0x000d52c1
   d60a8:	000d53d9 	.word	0x000d53d9
   d60ac:	000d55d9 	.word	0x000d55d9
   d60b0:	000d55f5 	.word	0x000d55f5
   d60b4:	000d5951 	.word	0x000d5951
   d60b8:	000d59a5 	.word	0x000d59a5
   d60bc:	000d5a69 	.word	0x000d5a69
   d60c0:	000d5aed 	.word	0x000d5aed
   d60c4:	000d5b71 	.word	0x000d5b71

000d60c8 <link_constructors_end>:
	...
