
/Users/simonxu/Projects/Github-simjxu/partiscripts/particle_led_ARG/target/particle_led_ARG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d7290  000d7290  00007290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  000172f8  2**0
                  CONTENTS
  4 .data         00000034  2003e380  000d7298  0000e380  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000440  2003e3b8  2003e3b8  0001e3b8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d72cc  000d72cc  000172cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d72f4  000d72f4  000172f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b1d15  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fdc6  00000000  00000000  000c900d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001557a  00000000  00000000  000d8dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002188  00000000  00000000  000ee34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000036b8  00000000  00000000  000f04d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031d57  00000000  00000000  000f3b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024d40  00000000  00000000  001258e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d52c0  00000000  00000000  0014a624  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb5c  00000000  00000000  0021f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	74 6e 0d 00                                         tn..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fef3 	bl	d6e18 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fef8 	bl	d6e2e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e380 	.word	0x2003e380
   d4048:	000d7298 	.word	0x000d7298
   d404c:	2003e3b4 	.word	0x2003e3b4
   d4050:	2003e3b8 	.word	0x2003e3b8
   d4054:	2003e7f8 	.word	0x2003e7f8

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe81 	bl	d5d60 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7284 	.word	0x000d7284
   d4080:	000d724c 	.word	0x000d724c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f88d 	bl	d41a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be33 	b.w	d5cfc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbc1 	b.w	d481c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bbbf 	b.w	d481c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbc5 	b.w	d482c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bbc3 	b.w	d482c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9ledToggle6String>:
}


// Finally, we will write out our ledToggle function, which is referenced by the Particle.function() called "led"

int ledToggle(String command) {
   d40b8:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	490e      	ldr	r1, [pc, #56]	; (d40f4 <_Z9ledToggle6String+0x3c>)
   d40bc:	4605      	mov	r5, r0
   d40be:	f001 f8ce 	bl	d525e <_ZNK6String6equalsEPKc>

	if (command=="on") {
   d40c2:	4604      	mov	r4, r0
   d40c4:	b130      	cbz	r0, d40d4 <_Z9ledToggle6String+0x1c>
		digitalWrite(boardled,HIGH);
   d40c6:	4b0c      	ldr	r3, [pc, #48]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40c8:	2101      	movs	r1, #1
   d40ca:	8818      	ldrh	r0, [r3, #0]
   d40cc:	f001 fe8d 	bl	d5dea <digitalWrite>
   d40d0:	2001      	movs	r0, #1
   d40d2:	bd38      	pop	{r3, r4, r5, pc}
   d40d4:	4909      	ldr	r1, [pc, #36]	; (d40fc <_Z9ledToggle6String+0x44>)
   d40d6:	4628      	mov	r0, r5
   d40d8:	f001 f8c1 	bl	d525e <_ZNK6String6equalsEPKc>
		return 1;
	}
	else if (command=="off") {
   d40dc:	b130      	cbz	r0, d40ec <_Z9ledToggle6String+0x34>
		digitalWrite(boardled,LOW);
   d40de:	4b06      	ldr	r3, [pc, #24]	; (d40f8 <_Z9ledToggle6String+0x40>)
   d40e0:	4621      	mov	r1, r4
   d40e2:	8818      	ldrh	r0, [r3, #0]
   d40e4:	f001 fe81 	bl	d5dea <digitalWrite>
		return 0;
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		return -1;
   d40ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

   d40f0:	bd38      	pop	{r3, r4, r5, pc}
   d40f2:	bf00      	nop
   d40f4:	000d6e88 	.word	0x000d6e88
   d40f8:	2003e3a8 	.word	0x2003e3a8
   d40fc:	000d6e8b 	.word	0x000d6e8b

000d4100 <setup>:
  Serial.print(", data: ");
  Serial.println(data);
  analogWrite(pwm, 250);
}

void setup() {
   d4100:	b510      	push	{r4, lr}

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4102:	4b1b      	ldr	r3, [pc, #108]	; (d4170 <setup+0x70>)
	pinMode(boardled,OUTPUT);		// This is the onboard led
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4104:	4c1b      	ldr	r4, [pc, #108]	; (d4174 <setup+0x74>)

void setup() {

	// First, declare all of our pins. This lets our device know which ones will be 
	// used for outputting voltage, and which ones will read incoming voltage.
	pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
   d4106:	8818      	ldrh	r0, [r3, #0]
   d4108:	2101      	movs	r1, #1
   d410a:	f001 fe5d 	bl	d5dc8 <pinMode>
	pinMode(boardled,OUTPUT);		// This is the onboard led
   d410e:	4b1a      	ldr	r3, [pc, #104]	; (d4178 <setup+0x78>)
   d4110:	2101      	movs	r1, #1
   d4112:	8818      	ldrh	r0, [r3, #0]
   d4114:	f001 fe58 	bl	d5dc8 <pinMode>
	pinMode(photoresistor,INPUT);  // Our photoresistor pin is input 
   d4118:	4b18      	ldr	r3, [pc, #96]	; (d417c <setup+0x7c>)
   d411a:	2100      	movs	r1, #0
   d411c:	8818      	ldrh	r0, [r3, #0]
   d411e:	f001 fe53 	bl	d5dc8 <pinMode>
																 // (reading the photoresistor)
	pinMode(power,OUTPUT); // The pin powering the photoresistor is output 
   d4122:	8820      	ldrh	r0, [r4, #0]
   d4124:	2101      	movs	r1, #1
   d4126:	f001 fe4f 	bl	d5dc8 <pinMode>
												 // (sending out consistent power)
	pinMode(pwm, OUTPUT); // Pin for the pwm output
   d412a:	4b15      	ldr	r3, [pc, #84]	; (d4180 <setup+0x80>)
   d412c:	2101      	movs	r1, #1
   d412e:	8818      	ldrh	r0, [r3, #0]
   d4130:	f001 fe4a 	bl	d5dc8 <pinMode>

	// Next, write one pin of the photoresistor to be the maximum possible, so that 
	// we can use this for power.
	digitalWrite(power,HIGH);
   d4134:	8820      	ldrh	r0, [r4, #0]
   d4136:	2101      	movs	r1, #1
   d4138:	f001 fe57 	bl	d5dea <digitalWrite>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d413c:	2300      	movs	r3, #0
   d413e:	2209      	movs	r2, #9
   d4140:	4910      	ldr	r1, [pc, #64]	; (d4184 <setup+0x84>)
   d4142:	4811      	ldr	r0, [pc, #68]	; (d4188 <setup+0x88>)
   d4144:	f000 fb02 	bl	d474c <spark_variable>
   d4148:	2300      	movs	r3, #0
   d414a:	2209      	movs	r2, #9
   d414c:	490f      	ldr	r1, [pc, #60]	; (d418c <setup+0x8c>)
   d414e:	4810      	ldr	r0, [pc, #64]	; (d4190 <setup+0x90>)
   d4150:	f000 fafc 	bl	d474c <spark_variable>
   d4154:	2209      	movs	r2, #9
   d4156:	490f      	ldr	r1, [pc, #60]	; (d4194 <setup+0x94>)
   d4158:	480f      	ldr	r0, [pc, #60]	; (d4198 <setup+0x98>)
   d415a:	2300      	movs	r3, #0
   d415c:	f000 faf6 	bl	d474c <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4160:	4a0e      	ldr	r2, [pc, #56]	; (d419c <setup+0x9c>)
   d4162:	490f      	ldr	r1, [pc, #60]	; (d41a0 <setup+0xa0>)
   d4164:	480f      	ldr	r0, [pc, #60]	; (d41a4 <setup+0xa4>)
	// This is saying that when we ask the cloud for the function "led", it will employ 
	//the function ledToggle() from this app.

	// // Subscribe to the light_level and point to Handler
  // Mesh.subscribe("light_level", myHandler);
}
   d4166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d416a:	f000 bb91 	b.w	d4890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d416e:	bf00      	nop
   d4170:	2003e3ac 	.word	0x2003e3ac
   d4174:	2003e384 	.word	0x2003e384
   d4178:	2003e3a8 	.word	0x2003e3a8
   d417c:	2003e398 	.word	0x2003e398
   d4180:	2003e380 	.word	0x2003e380
   d4184:	2003e3d0 	.word	0x2003e3d0
   d4188:	000d6e98 	.word	0x000d6e98
   d418c:	2003e3c0 	.word	0x2003e3c0
   d4190:	000d6ea4 	.word	0x000d6ea4
   d4194:	2003e3c8 	.word	0x2003e3c8
   d4198:	000d6eaf 	.word	0x000d6eaf
   d419c:	000d6eb8 	.word	0x000d6eb8
   d41a0:	000d40b9 	.word	0x000d40b9
   d41a4:	000d4865 	.word	0x000d4865

000d41a8 <loop>:


// Next is the loop function...

void loop() {
   d41a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// check to see what the value of the photoresistor is and store it in the int variable analogvalue
	analogvalue = analogRead(photoresistor);
   d41ac:	4b60      	ldr	r3, [pc, #384]	; (d4330 <loop+0x188>)
   d41ae:	4f61      	ldr	r7, [pc, #388]	; (d4334 <loop+0x18c>)
   d41b0:	8818      	ldrh	r0, [r3, #0]
   d41b2:	4e61      	ldr	r6, [pc, #388]	; (d4338 <loop+0x190>)
}


// Next is the loop function...

void loop() {
   d41b4:	b087      	sub	sp, #28

	// check to see what the value of the photoresistor is and store it in the int variable analogvalue
	analogvalue = analogRead(photoresistor);
   d41b6:	f001 fe31 	bl	d5e1c <analogRead>
   d41ba:	f002 f94f 	bl	d645c <__aeabi_i2d>
   d41be:	e9c7 0100 	strd	r0, r1, [r7]
	delay(5);
   d41c2:	2005      	movs	r0, #5
   d41c4:	f000 fb42 	bl	d484c <delay>
	// else if (analogvalue > 2500) {
	//     digitalWrite(led,LOW);
	// }

	// min is 40, max is 340
	if (analogvalue > minim && analogvalue < maxim) {
   d41c8:	4b5c      	ldr	r3, [pc, #368]	; (d433c <loop+0x194>)
   d41ca:	e9d7 4500 	ldrd	r4, r5, [r7]
   d41ce:	e9d3 8900 	ldrd	r8, r9, [r3]
   d41d2:	4620      	mov	r0, r4
   d41d4:	4642      	mov	r2, r8
   d41d6:	464b      	mov	r3, r9
   d41d8:	4629      	mov	r1, r5
   d41da:	f002 fc35 	bl	d6a48 <__aeabi_dcmpgt>
   d41de:	b308      	cbz	r0, d4224 <loop+0x7c>
   d41e0:	4b57      	ldr	r3, [pc, #348]	; (d4340 <loop+0x198>)
   d41e2:	4620      	mov	r0, r4
   d41e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41e8:	4629      	mov	r1, r5
   d41ea:	f002 fc0f 	bl	d6a0c <__aeabi_dcmplt>
   d41ee:	b1c8      	cbz	r0, d4224 <loop+0x7c>
			setpoint = 255-(analogvalue-minim)/300*255;
   d41f0:	4642      	mov	r2, r8
   d41f2:	464b      	mov	r3, r9
   d41f4:	4620      	mov	r0, r4
   d41f6:	4629      	mov	r1, r5
   d41f8:	f001 ffe2 	bl	d61c0 <__aeabi_dsub>
   d41fc:	a344      	add	r3, pc, #272	; (adr r3, d4310 <loop+0x168>)
   d41fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4202:	f002 fabb 	bl	d677c <__aeabi_ddiv>
   d4206:	a344      	add	r3, pc, #272	; (adr r3, d4318 <loop+0x170>)
   d4208:	e9d3 2300 	ldrd	r2, r3, [r3]
   d420c:	f002 f98c 	bl	d6528 <__aeabi_dmul>
   d4210:	4602      	mov	r2, r0
   d4212:	460b      	mov	r3, r1
   d4214:	a140      	add	r1, pc, #256	; (adr r1, d4318 <loop+0x170>)
   d4216:	e9d1 0100 	ldrd	r0, r1, [r1]
   d421a:	f001 ffd1 	bl	d61c0 <__aeabi_dsub>
   d421e:	e9c6 0100 	strd	r0, r1, [r6]
   d4222:	e00e      	b.n	d4242 <loop+0x9a>
	} else if (analogvalue <= minim) {
   d4224:	4642      	mov	r2, r8
   d4226:	464b      	mov	r3, r9
   d4228:	4620      	mov	r0, r4
   d422a:	4629      	mov	r1, r5
   d422c:	f002 fbf8 	bl	d6a20 <__aeabi_dcmple>
   d4230:	b118      	cbz	r0, d423a <loop+0x92>
		setpoint = 254;
   d4232:	a33b      	add	r3, pc, #236	; (adr r3, d4320 <loop+0x178>)
   d4234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4238:	e001      	b.n	d423e <loop+0x96>
		// Mesh.publish("low_light", String(setpoint));
	} else if (analogvalue >= maxim) {
		setpoint = 0;
   d423a:	2200      	movs	r2, #0
   d423c:	2300      	movs	r3, #0
   d423e:	e9c6 2300 	strd	r2, r3, [r6]
		// Mesh.publish("low_light", String(setpoint));
	} else {
		setpoint = 0;
		// Mesh.publish("low_light", String(setpoint));
	}
	pinMode(pwm, OUTPUT);
   d4242:	f8df 8114 	ldr.w	r8, [pc, #276]	; d4358 <loop+0x1b0>
	// } else {
	// 	digitalWrite(boardled, HIGH);
	// }

	// Check the setpoint vs the brightness
	if (brightness < setpoint && brightness < 252) {
   d4246:	f8df 9114 	ldr.w	r9, [pc, #276]	; d435c <loop+0x1b4>
		// Mesh.publish("low_light", String(setpoint));
	} else {
		setpoint = 0;
		// Mesh.publish("low_light", String(setpoint));
	}
	pinMode(pwm, OUTPUT);
   d424a:	f8b8 0000 	ldrh.w	r0, [r8]
   d424e:	2101      	movs	r1, #1
   d4250:	f001 fdba 	bl	d5dc8 <pinMode>
	// } else {
	// 	digitalWrite(boardled, HIGH);
	// }

	// Check the setpoint vs the brightness
	if (brightness < setpoint && brightness < 252) {
   d4254:	ed96 7b00 	vldr	d7, [r6]
   d4258:	e9d9 4500 	ldrd	r4, r5, [r9]
   d425c:	ec53 2b17 	vmov	r2, r3, d7
   d4260:	4620      	mov	r0, r4
   d4262:	4629      	mov	r1, r5
   d4264:	ed8d 7b00 	vstr	d7, [sp]
   d4268:	f002 fbd0 	bl	d6a0c <__aeabi_dcmplt>
   d426c:	46c2      	mov	sl, r8
   d426e:	46cb      	mov	fp, r9
   d4270:	b1a8      	cbz	r0, d429e <loop+0xf6>
   d4272:	2200      	movs	r2, #0
   d4274:	4b33      	ldr	r3, [pc, #204]	; (d4344 <loop+0x19c>)
   d4276:	4620      	mov	r0, r4
   d4278:	4629      	mov	r1, r5
   d427a:	f002 fbc7 	bl	d6a0c <__aeabi_dcmplt>
   d427e:	b170      	cbz	r0, d429e <loop+0xf6>
		brightness = brightness + fadeamount;
   d4280:	4b31      	ldr	r3, [pc, #196]	; (d4348 <loop+0x1a0>)
   d4282:	4620      	mov	r0, r4
   d4284:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4288:	4629      	mov	r1, r5
   d428a:	f001 ff9b 	bl	d61c4 <__adddf3>
   d428e:	e9c9 0100 	strd	r0, r1, [r9]
		analogWrite(pwm, brightness);
   d4292:	f002 fbe3 	bl	d6a5c <__aeabi_d2uiz>
   d4296:	4601      	mov	r1, r0
   d4298:	f8b8 0000 	ldrh.w	r0, [r8]
   d429c:	e01c      	b.n	d42d8 <loop+0x130>
	} else if (brightness > setpoint && brightness > 1.3) {
   d429e:	e9dd 2300 	ldrd	r2, r3, [sp]
   d42a2:	4620      	mov	r0, r4
   d42a4:	4629      	mov	r1, r5
   d42a6:	f002 fbcf 	bl	d6a48 <__aeabi_dcmpgt>
   d42aa:	b1b8      	cbz	r0, d42dc <loop+0x134>
   d42ac:	a31e      	add	r3, pc, #120	; (adr r3, d4328 <loop+0x180>)
   d42ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b2:	4620      	mov	r0, r4
   d42b4:	4629      	mov	r1, r5
   d42b6:	f002 fbc7 	bl	d6a48 <__aeabi_dcmpgt>
   d42ba:	b178      	cbz	r0, d42dc <loop+0x134>
		brightness = brightness - fadeamount;
   d42bc:	4b22      	ldr	r3, [pc, #136]	; (d4348 <loop+0x1a0>)
   d42be:	4620      	mov	r0, r4
   d42c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c4:	4629      	mov	r1, r5
   d42c6:	f001 ff7b 	bl	d61c0 <__aeabi_dsub>
   d42ca:	e9cb 0100 	strd	r0, r1, [fp]
		analogWrite(pwm, brightness);
   d42ce:	f002 fbc5 	bl	d6a5c <__aeabi_d2uiz>
   d42d2:	4601      	mov	r1, r0
   d42d4:	f8ba 0000 	ldrh.w	r0, [sl]
   d42d8:	f001 fdb7 	bl	d5e4a <_Z11analogWritetm>
	}

	

	
	if (analogvalue < 50) {
   d42dc:	2200      	movs	r2, #0
   d42de:	4b1b      	ldr	r3, [pc, #108]	; (d434c <loop+0x1a4>)
   d42e0:	e9d7 0100 	ldrd	r0, r1, [r7]
   d42e4:	f002 fb92 	bl	d6a0c <__aeabi_dcmplt>
   d42e8:	b168      	cbz	r0, d4306 <loop+0x15e>
    Mesh.publish("low_light", String(setpoint));
   d42ea:	2106      	movs	r1, #6
   d42ec:	ed96 0b00 	vldr	d0, [r6]
   d42f0:	a802      	add	r0, sp, #8
   d42f2:	f000 ff6e 	bl	d51d2 <_ZN6StringC1Edi>
   d42f6:	9a02      	ldr	r2, [sp, #8]
   d42f8:	4915      	ldr	r1, [pc, #84]	; (d4350 <loop+0x1a8>)
   d42fa:	4816      	ldr	r0, [pc, #88]	; (d4354 <loop+0x1ac>)
   d42fc:	f000 fcd0 	bl	d4ca0 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4300:	a802      	add	r0, sp, #8
   d4302:	f000 fee1 	bl	d50c8 <_ZN6StringD1Ev>
  }

	// // Make sure it doesn't publish too much
	// delay(2000);
}
   d4306:	b007      	add	sp, #28
   d4308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d430c:	f3af 8000 	nop.w
   d4310:	00000000 	.word	0x00000000
   d4314:	4072c000 	.word	0x4072c000
   d4318:	00000000 	.word	0x00000000
   d431c:	406fe000 	.word	0x406fe000
   d4320:	00000000 	.word	0x00000000
   d4324:	406fc000 	.word	0x406fc000
   d4328:	cccccccd 	.word	0xcccccccd
   d432c:	3ff4cccc 	.word	0x3ff4cccc
   d4330:	2003e398 	.word	0x2003e398
   d4334:	2003e3d0 	.word	0x2003e3d0
   d4338:	2003e3c8 	.word	0x2003e3c8
   d433c:	2003e390 	.word	0x2003e390
   d4340:	2003e3a0 	.word	0x2003e3a0
   d4344:	406f8000 	.word	0x406f8000
   d4348:	2003e388 	.word	0x2003e388
   d434c:	40490000 	.word	0x40490000
   d4350:	000d6ebc 	.word	0x000d6ebc
   d4354:	2003e3ec 	.word	0x2003e3ec
   d4358:	2003e380 	.word	0x2003e380
   d435c:	2003e3c0 	.word	0x2003e3c0

000d4360 <_GLOBAL__sub_I_led>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4360:	f000 b840 	b.w	d43e4 <HAL_Pin_Map>

000d4364 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <os_thread_is_current+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	689b      	ldr	r3, [r3, #8]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030248 	.word	0x00030248

000d4374 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <os_thread_join+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	691b      	ldr	r3, [r3, #16]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030248 	.word	0x00030248

000d4384 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <os_thread_cleanup+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	695b      	ldr	r3, [r3, #20]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030248 	.word	0x00030248

000d4394 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <os_mutex_create+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030248 	.word	0x00030248

000d43a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <os_mutex_recursive_create+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030248 	.word	0x00030248

000d43b4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <os_mutex_recursive_lock+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030248 	.word	0x00030248

000d43c4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <os_mutex_recursive_unlock+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030248 	.word	0x00030248

000d43d4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030218 	.word	0x00030218

000d43e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_Pin_Map+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	681b      	ldr	r3, [r3, #0]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003022c 	.word	0x0003022c

000d43f4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_Validate_Pin_Function+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	685b      	ldr	r3, [r3, #4]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003022c 	.word	0x0003022c

000d4404 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_Pin_Mode+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	689b      	ldr	r3, [r3, #8]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003022c 	.word	0x0003022c

000d4414 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_Get_Pin_Mode+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	68db      	ldr	r3, [r3, #12]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003022c 	.word	0x0003022c

000d4424 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_GPIO_Write+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	691b      	ldr	r3, [r3, #16]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003022c 	.word	0x0003022c

000d4434 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_DAC_Write+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003022c 	.word	0x0003022c

000d4444 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_ADC_Read+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003022c 	.word	0x0003022c

000d4454 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_PWM_Write_Ext+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003022c 	.word	0x0003022c

000d4464 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_I2C_Write_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6a1b      	ldr	r3, [r3, #32]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030228 	.word	0x00030228

000d4474 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_I2C_Available_Data+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030228 	.word	0x00030228

000d4484 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_I2C_Read_Data+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030228 	.word	0x00030228

000d4494 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_I2C_Peek_Data+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030228 	.word	0x00030228

000d44a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_I2C_Flush_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030228 	.word	0x00030228

000d44b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_I2C_Is_Enabled+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030228 	.word	0x00030228

000d44c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_I2C_Init+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030228 	.word	0x00030228

000d44d4 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <if_name_to_index+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	691b      	ldr	r3, [r3, #16]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003026c 	.word	0x0003026c

000d44e4 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <if_index_to_name+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003026c 	.word	0x0003026c

000d44f4 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <if_get_by_index+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	699b      	ldr	r3, [r3, #24]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003026c 	.word	0x0003026c

000d4504 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <if_get_addrs+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003026c 	.word	0x0003026c

000d4514 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <if_free_if_addrs+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003026c 	.word	0x0003026c

000d4524 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <inet_inet_ntop+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	695b      	ldr	r3, [r3, #20]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030264 	.word	0x00030264

000d4534 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <inet_inet_pton+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	699b      	ldr	r3, [r3, #24]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030264 	.word	0x00030264

000d4544 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <inet_htonl+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6a1b      	ldr	r3, [r3, #32]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030264 	.word	0x00030264

000d4554 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <inet_ntohs+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030264 	.word	0x00030264

000d4564 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <inet_htons+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030264 	.word	0x00030264

000d4574 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <netdb_freeaddrinfo+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	689b      	ldr	r3, [r3, #8]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030268 	.word	0x00030268

000d4584 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <netdb_getaddrinfo+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	68db      	ldr	r3, [r3, #12]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030268 	.word	0x00030268

000d4594 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <sock_bind+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	685b      	ldr	r3, [r3, #4]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030238 	.word	0x00030238

000d45a4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <sock_setsockopt+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	699b      	ldr	r3, [r3, #24]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030238 	.word	0x00030238

000d45b4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <sock_close+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	69db      	ldr	r3, [r3, #28]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030238 	.word	0x00030238

000d45c4 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <sock_recvfrom+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030238 	.word	0x00030238

000d45d4 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <sock_sendto+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030238 	.word	0x00030238

000d45e4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <sock_socket+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030238 	.word	0x00030238

000d45f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_SPI_Init+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	69db      	ldr	r3, [r3, #28]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030230 	.word	0x00030230

000d4604 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_SPI_Is_Enabled+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6a1b      	ldr	r3, [r3, #32]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030230 	.word	0x00030230

000d4614 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_USART_Init+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	681b      	ldr	r3, [r3, #0]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003023c 	.word	0x0003023c

000d4624 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USART_Write_Data+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003023c 	.word	0x0003023c

000d4634 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_USART_Available_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	691b      	ldr	r3, [r3, #16]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USART_Read_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	695b      	ldr	r3, [r3, #20]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USART_Peek_Data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	699b      	ldr	r3, [r3, #24]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USART_Flush_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	69db      	ldr	r3, [r3, #28]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003023c 	.word	0x0003023c

000d4674 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USART_Is_Enabled+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a1b      	ldr	r3, [r3, #32]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USART_Available_Data_For_Write+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USB_USART_Init+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003024c 	.word	0x0003024c

000d46a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Available_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	691b      	ldr	r3, [r3, #16]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	695b      	ldr	r3, [r3, #20]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003024c 	.word	0x0003024c

000d46c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USB_USART_Receive_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	699b      	ldr	r3, [r3, #24]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003024c 	.word	0x0003024c

000d46d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Send_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	69db      	ldr	r3, [r3, #28]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Flush_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a1b      	ldr	r3, [r3, #32]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <log_message+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030260 	.word	0x00030260

000d4704 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <set_system_mode+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030220 	.word	0x00030220

000d4714 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <system_delay_ms+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030220 	.word	0x00030220

000d4724 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b03      	ldr	r3, [pc, #12]	; (d4734 <system_ctrl_set_app_request_handler+0x10>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d472e:	9301      	str	r3, [sp, #4]
   d4730:	bd08      	pop	{r3, pc}
   d4732:	0000      	.short	0x0000
   d4734:	00030220 	.word	0x00030220

000d4738 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b03      	ldr	r3, [pc, #12]	; (d4748 <system_ctrl_set_result+0x10>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4742:	9301      	str	r3, [sp, #4]
   d4744:	bd08      	pop	{r3, pc}
   d4746:	0000      	.short	0x0000
   d4748:	00030220 	.word	0x00030220

000d474c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <spark_variable+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	681b      	ldr	r3, [r3, #0]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030244 	.word	0x00030244

000d475c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <spark_function+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	685b      	ldr	r3, [r3, #4]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030244 	.word	0x00030244

000d476c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030244 	.word	0x00030244

000d477c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_connect+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	685b      	ldr	r3, [r3, #4]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_connecting+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	689b      	ldr	r3, [r3, #8]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_disconnect+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	68db      	ldr	r3, [r3, #12]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_ready+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	691b      	ldr	r3, [r3, #16]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_on+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	695b      	ldr	r3, [r3, #20]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_off+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	699b      	ldr	r3, [r3, #24]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_listen+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	69db      	ldr	r3, [r3, #28]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_listening+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6a1b      	ldr	r3, [r3, #32]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_set_listen_timeout+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_get_listen_timeout+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <malloc>:
#include <errno.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <malloc+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	681b      	ldr	r3, [r3, #0]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003021c 	.word	0x0003021c

000d482c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <free+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	685b      	ldr	r3, [r3, #4]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003021c 	.word	0x0003021c

000d483c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <realloc+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003021c 	.word	0x0003021c

000d484c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d484c:	2100      	movs	r1, #0
   d484e:	f7ff bf61 	b.w	d4714 <system_delay_ms>

000d4852 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4852:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4854:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4856:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4858:	b113      	cbz	r3, d4860 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d485a:	2203      	movs	r2, #3
   d485c:	4601      	mov	r1, r0
   d485e:	4798      	blx	r3
    }
   d4860:	4620      	mov	r0, r4
   d4862:	bd10      	pop	{r4, pc}

000d4864 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4864:	b510      	push	{r4, lr}
   d4866:	b088      	sub	sp, #32
   d4868:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d486a:	4668      	mov	r0, sp
   d486c:	f000 fc73 	bl	d5156 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4870:	4669      	mov	r1, sp
   d4872:	a804      	add	r0, sp, #16
   d4874:	f000 fc91 	bl	d519a <_ZN6StringC1ERKS_>
   d4878:	a804      	add	r0, sp, #16
   d487a:	47a0      	blx	r4
   d487c:	4604      	mov	r4, r0
   d487e:	a804      	add	r0, sp, #16
   d4880:	f000 fc22 	bl	d50c8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4884:	4668      	mov	r0, sp
   d4886:	f000 fc1f 	bl	d50c8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d488a:	4620      	mov	r0, r4
   d488c:	b008      	add	sp, #32
   d488e:	bd10      	pop	{r4, pc}

000d4890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4890:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4892:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4894:	b085      	sub	sp, #20
   d4896:	4607      	mov	r7, r0
   d4898:	460e      	mov	r6, r1
   d489a:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d489c:	2100      	movs	r1, #0
   d489e:	4622      	mov	r2, r4
   d48a0:	4668      	mov	r0, sp
   d48a2:	f002 fac4 	bl	d6e2e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d48a6:	2200      	movs	r2, #0
   d48a8:	4669      	mov	r1, sp
   d48aa:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d48ac:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d48b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d48b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d48b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d48b6:	f7ff ff51 	bl	d475c <spark_function>
}
   d48ba:	b005      	add	sp, #20
   d48bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48be <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48be:	2200      	movs	r2, #0
   d48c0:	4611      	mov	r1, r2
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff bf92 	b.w	d47ec <network_listening>

000d48c8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48c8:	2200      	movs	r2, #0
   d48ca:	4611      	mov	r1, r2
   d48cc:	6840      	ldr	r0, [r0, #4]
   d48ce:	f7ff bf9d 	b.w	d480c <network_get_listen_timeout>

000d48d2 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48d2:	2200      	movs	r2, #0
   d48d4:	6840      	ldr	r0, [r0, #4]
   d48d6:	f7ff bf91 	b.w	d47fc <network_set_listen_timeout>

000d48da <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48da:	2200      	movs	r2, #0
   d48dc:	f081 0101 	eor.w	r1, r1, #1
   d48e0:	6840      	ldr	r0, [r0, #4]
   d48e2:	f7ff bf7b 	b.w	d47dc <network_listen>

000d48e6 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48e6:	2300      	movs	r3, #0
   d48e8:	461a      	mov	r2, r3
   d48ea:	4619      	mov	r1, r3
   d48ec:	6840      	ldr	r0, [r0, #4]
   d48ee:	f7ff bf6d 	b.w	d47cc <network_off>

000d48f2 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48f2:	2300      	movs	r3, #0
   d48f4:	461a      	mov	r2, r3
   d48f6:	4619      	mov	r1, r3
   d48f8:	6840      	ldr	r0, [r0, #4]
   d48fa:	f7ff bf5f 	b.w	d47bc <network_on>

000d48fe <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48fe:	2200      	movs	r2, #0
   d4900:	4611      	mov	r1, r2
   d4902:	6840      	ldr	r0, [r0, #4]
   d4904:	f7ff bf52 	b.w	d47ac <network_ready>

000d4908 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4908:	2200      	movs	r2, #0
   d490a:	4611      	mov	r1, r2
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	f7ff bf3d 	b.w	d478c <network_connecting>

000d4912 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4912:	2200      	movs	r2, #0
   d4914:	2102      	movs	r1, #2
   d4916:	6840      	ldr	r0, [r0, #4]
   d4918:	f7ff bf40 	b.w	d479c <network_disconnect>

000d491c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d491c:	2300      	movs	r3, #0
   d491e:	461a      	mov	r2, r3
   d4920:	6840      	ldr	r0, [r0, #4]
   d4922:	f7ff bf2b 	b.w	d477c <network_connect>
	...

000d4928 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4928:	4b02      	ldr	r3, [pc, #8]	; (d4934 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d492a:	2203      	movs	r2, #3
   d492c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d492e:	4a02      	ldr	r2, [pc, #8]	; (d4938 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4930:	601a      	str	r2, [r3, #0]
   d4932:	4770      	bx	lr
   d4934:	2003e3d8 	.word	0x2003e3d8
   d4938:	000d6ed0 	.word	0x000d6ed0

000d493c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d493c:	4770      	bx	lr

000d493e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d493e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4940:	4606      	mov	r6, r0
   d4942:	4615      	mov	r5, r2
   d4944:	460c      	mov	r4, r1
   d4946:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4948:	42bc      	cmp	r4, r7
   d494a:	d006      	beq.n	d495a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d494c:	6833      	ldr	r3, [r6, #0]
   d494e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4952:	689b      	ldr	r3, [r3, #8]
   d4954:	4630      	mov	r0, r6
   d4956:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4958:	e7f6      	b.n	d4948 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d495a:	4628      	mov	r0, r5
   d495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d495e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d495e:	2200      	movs	r2, #0
   d4960:	7c00      	ldrb	r0, [r0, #16]
   d4962:	f7ff bd7f 	b.w	d4464 <HAL_I2C_Write_Data>

000d4966 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4966:	2100      	movs	r1, #0
   d4968:	7c00      	ldrb	r0, [r0, #16]
   d496a:	f7ff bd83 	b.w	d4474 <HAL_I2C_Available_Data>

000d496e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d496e:	2100      	movs	r1, #0
   d4970:	7c00      	ldrb	r0, [r0, #16]
   d4972:	f7ff bd87 	b.w	d4484 <HAL_I2C_Read_Data>

000d4976 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4976:	2100      	movs	r1, #0
   d4978:	7c00      	ldrb	r0, [r0, #16]
   d497a:	f7ff bd8b 	b.w	d4494 <HAL_I2C_Peek_Data>

000d497e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d497e:	2100      	movs	r1, #0
   d4980:	7c00      	ldrb	r0, [r0, #16]
   d4982:	f7ff bd8f 	b.w	d44a4 <HAL_I2C_Flush_Data>

000d4986 <_ZN7TwoWireD0Ev>:
   d4986:	b510      	push	{r4, lr}
   d4988:	4604      	mov	r4, r0
   d498a:	f7ff fb88 	bl	d409e <_ZdlPv>
   d498e:	4620      	mov	r0, r4
   d4990:	bd10      	pop	{r4, pc}
	...

000d4994 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4994:	b510      	push	{r4, lr}
   d4996:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d499c:	4608      	mov	r0, r1
   d499e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d49a0:	2100      	movs	r1, #0
   d49a2:	4b04      	ldr	r3, [pc, #16]	; (d49b4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d49a4:	7420      	strb	r0, [r4, #16]
   d49a6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d49a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d49aa:	f7ff fd8b 	bl	d44c4 <HAL_I2C_Init>

}
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
   d49b2:	bf00      	nop
   d49b4:	000d6f04 	.word	0x000d6f04

000d49b8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d49b8:	2100      	movs	r1, #0
   d49ba:	7c00      	ldrb	r0, [r0, #16]
   d49bc:	f7ff bd7a 	b.w	d44b4 <HAL_I2C_Is_Enabled>

000d49c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d49c0:	4770      	bx	lr

000d49c2 <_ZN9IPAddressD0Ev>:
   d49c2:	b510      	push	{r4, lr}
   d49c4:	4604      	mov	r4, r0
   d49c6:	f7ff fb6a 	bl	d409e <_ZdlPv>
   d49ca:	4620      	mov	r0, r4
   d49cc:	bd10      	pop	{r4, pc}

000d49ce <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49ce:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d49d0:	7d03      	ldrb	r3, [r0, #20]
   d49d2:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49d4:	b08d      	sub	sp, #52	; 0x34
   d49d6:	460e      	mov	r6, r1
   d49d8:	f100 0704 	add.w	r7, r0, #4
   d49dc:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d49e0:	d002      	beq.n	d49e8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d49e2:	f100 0508 	add.w	r5, r0, #8
   d49e6:	e018      	b.n	d4a1a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49e8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49ea:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49ec:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49f0:	232f      	movs	r3, #47	; 0x2f
   d49f2:	462a      	mov	r2, r5
   d49f4:	200a      	movs	r0, #10
   d49f6:	f7ff fd95 	bl	d4524 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d49fa:	4628      	mov	r0, r5
   d49fc:	f002 fa31 	bl	d6e62 <strlen>
   d4a00:	6833      	ldr	r3, [r6, #0]
   d4a02:	4602      	mov	r2, r0
   d4a04:	68db      	ldr	r3, [r3, #12]
   d4a06:	4629      	mov	r1, r5
   d4a08:	4630      	mov	r0, r6
   d4a0a:	4798      	blx	r3
   d4a0c:	e00f      	b.n	d4a2e <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a0e:	b124      	cbz	r4, d4a1a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a10:	212e      	movs	r1, #46	; 0x2e
   d4a12:	4630      	mov	r0, r6
   d4a14:	f000 fa88 	bl	d4f28 <_ZN5Print5printEc>
   d4a18:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4a1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a1e:	220a      	movs	r2, #10
   d4a20:	4630      	mov	r0, r6
   d4a22:	f000 fab1 	bl	d4f88 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a26:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a28:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a2a:	d1f0      	bne.n	d4a0e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a2c:	4620      	mov	r0, r4
    }
    return n;
}
   d4a2e:	b00d      	add	sp, #52	; 0x34
   d4a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a34 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"
#include "ifapi.h"
#include <arpa/inet.h>

IPAddress::IPAddress()
   d4a34:	b510      	push	{r4, lr}
   d4a36:	4b05      	ldr	r3, [pc, #20]	; (d4a4c <_ZN9IPAddressC1Ev+0x18>)
   d4a38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a3a:	2211      	movs	r2, #17
   d4a3c:	f840 3b04 	str.w	r3, [r0], #4
   d4a40:	2100      	movs	r1, #0
   d4a42:	f002 f9f4 	bl	d6e2e <memset>
{
    clear();
}
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}
   d4a4a:	bf00      	nop
   d4a4c:	000d6f2c 	.word	0x000d6f2c

000d4a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a50:	4603      	mov	r3, r0
   d4a52:	4a07      	ldr	r2, [pc, #28]	; (d4a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a54:	b510      	push	{r4, lr}
   d4a56:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4a5a:	f101 0210 	add.w	r2, r1, #16
   d4a5e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a62:	f843 4b04 	str.w	r4, [r3], #4
   d4a66:	4291      	cmp	r1, r2
   d4a68:	d1f9      	bne.n	d4a5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4a6a:	780a      	ldrb	r2, [r1, #0]
   d4a6c:	701a      	strb	r2, [r3, #0]
}
   d4a6e:	bd10      	pop	{r4, pc}
   d4a70:	000d6f2c 	.word	0x000d6f2c

000d4a74 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4a74:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4a76:	2b04      	cmp	r3, #4
   d4a78:	d101      	bne.n	d4a7e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4a7a:	6840      	ldr	r0, [r0, #4]
   d4a7c:	e008      	b.n	d4a90 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4a7e:	2b06      	cmp	r3, #6
   d4a80:	d10a      	bne.n	d4a98 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4a82:	6843      	ldr	r3, [r0, #4]
   d4a84:	b153      	cbz	r3, d4a9c <_ZNK9IPAddresscvbEv+0x28>
   d4a86:	6883      	ldr	r3, [r0, #8]
   d4a88:	b143      	cbz	r3, d4a9c <_ZNK9IPAddresscvbEv+0x28>
   d4a8a:	68c3      	ldr	r3, [r0, #12]
   d4a8c:	b133      	cbz	r3, d4a9c <_ZNK9IPAddresscvbEv+0x28>
   d4a8e:	6900      	ldr	r0, [r0, #16]
   d4a90:	3000      	adds	r0, #0
   d4a92:	bf18      	it	ne
   d4a94:	2001      	movne	r0, #1
   d4a96:	4770      	bx	lr
   d4a98:	2000      	movs	r0, #0
   d4a9a:	4770      	bx	lr
   d4a9c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4a9e:	4770      	bx	lr

000d4aa0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4aa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4aa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4aa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4aaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4aae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4ab2:	2304      	movs	r3, #4
   d4ab4:	6041      	str	r1, [r0, #4]
   d4ab6:	7503      	strb	r3, [r0, #20]
   d4ab8:	bd10      	pop	{r4, pc}

000d4aba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4abc:	780d      	ldrb	r5, [r1, #0]
   d4abe:	788b      	ldrb	r3, [r1, #2]
   d4ac0:	784a      	ldrb	r2, [r1, #1]
   d4ac2:	78c9      	ldrb	r1, [r1, #3]
   d4ac4:	9100      	str	r1, [sp, #0]
   d4ac6:	4629      	mov	r1, r5
   d4ac8:	f7ff ffea 	bl	d4aa0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4acc:	b003      	add	sp, #12
   d4ace:	bd30      	pop	{r4, r5, pc}

000d4ad0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ad0:	4b01      	ldr	r3, [pc, #4]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ad2:	4a02      	ldr	r2, [pc, #8]	; (d4adc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ad4:	601a      	str	r2, [r3, #0]
   d4ad6:	4770      	bx	lr
   d4ad8:	2003e3e0 	.word	0x2003e3e0
   d4adc:	000d6feb 	.word	0x000d6feb

000d4ae0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae0:	2200      	movs	r2, #0
   d4ae2:	4611      	mov	r1, r2
   d4ae4:	6840      	ldr	r0, [r0, #4]
   d4ae6:	f7ff be81 	b.w	d47ec <network_listening>

000d4aea <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4aea:	2200      	movs	r2, #0
   d4aec:	4611      	mov	r1, r2
   d4aee:	6840      	ldr	r0, [r0, #4]
   d4af0:	f7ff be8c 	b.w	d480c <network_get_listen_timeout>

000d4af4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4af4:	2200      	movs	r2, #0
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	f7ff be80 	b.w	d47fc <network_set_listen_timeout>

000d4afc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4afc:	2200      	movs	r2, #0
   d4afe:	f081 0101 	eor.w	r1, r1, #1
   d4b02:	6840      	ldr	r0, [r0, #4]
   d4b04:	f7ff be6a 	b.w	d47dc <network_listen>

000d4b08 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b08:	2300      	movs	r3, #0
   d4b0a:	461a      	mov	r2, r3
   d4b0c:	4619      	mov	r1, r3
   d4b0e:	6840      	ldr	r0, [r0, #4]
   d4b10:	f7ff be5c 	b.w	d47cc <network_off>

000d4b14 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b14:	2300      	movs	r3, #0
   d4b16:	461a      	mov	r2, r3
   d4b18:	4619      	mov	r1, r3
   d4b1a:	6840      	ldr	r0, [r0, #4]
   d4b1c:	f7ff be4e 	b.w	d47bc <network_on>

000d4b20 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b20:	2200      	movs	r2, #0
   d4b22:	4611      	mov	r1, r2
   d4b24:	6840      	ldr	r0, [r0, #4]
   d4b26:	f7ff be41 	b.w	d47ac <network_ready>

000d4b2a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	4611      	mov	r1, r2
   d4b2e:	6840      	ldr	r0, [r0, #4]
   d4b30:	f7ff be2c 	b.w	d478c <network_connecting>

000d4b34 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b34:	2200      	movs	r2, #0
   d4b36:	2102      	movs	r1, #2
   d4b38:	6840      	ldr	r0, [r0, #4]
   d4b3a:	f7ff be2f 	b.w	d479c <network_disconnect>

000d4b3e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b3e:	2300      	movs	r3, #0
   d4b40:	461a      	mov	r2, r3
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	f7ff be1a 	b.w	d477c <network_connect>

000d4b48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b48:	b110      	cbz	r0, d4b50 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4b4a:	6803      	ldr	r3, [r0, #0]
   d4b4c:	685b      	ldr	r3, [r3, #4]
   d4b4e:	4718      	bx	r3
   d4b50:	4770      	bx	lr

000d4b52 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4b52:	b538      	push	{r3, r4, r5, lr}
   d4b54:	4604      	mov	r4, r0
   d4b56:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4b58:	b1d0      	cbz	r0, d4b90 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4b5a:	f7ff fc03 	bl	d4364 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4b5e:	b9b8      	cbnz	r0, d4b90 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4b60:	7c23      	ldrb	r3, [r4, #16]
   d4b62:	b91b      	cbnz	r3, d4b6c <_ZN6Thread7disposeEv+0x1a>
   d4b64:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4b66:	b108      	cbz	r0, d4b6c <_ZN6Thread7disposeEv+0x1a>
   d4b68:	f7ff fc04 	bl	d4374 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4b6c:	6865      	ldr	r5, [r4, #4]
   d4b6e:	b155      	cbz	r5, d4b86 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4b70:	68ab      	ldr	r3, [r5, #8]
   d4b72:	b11b      	cbz	r3, d4b7c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b74:	2203      	movs	r2, #3
   d4b76:	4629      	mov	r1, r5
   d4b78:	4628      	mov	r0, r5
   d4b7a:	4798      	blx	r3
            delete wrapper;
   d4b7c:	4628      	mov	r0, r5
   d4b7e:	f7ff fa8e 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d4b82:	2300      	movs	r3, #0
   d4b84:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4b86:	6820      	ldr	r0, [r4, #0]
   d4b88:	f7ff fbfc 	bl	d4384 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4b8c:	2300      	movs	r3, #0
   d4b8e:	6023      	str	r3, [r4, #0]
   d4b90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b94 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4b94:	b538      	push	{r3, r4, r5, lr}
   d4b96:	4b0b      	ldr	r3, [pc, #44]	; (d4bc4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4b98:	6003      	str	r3, [r0, #0]
   d4b9a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b9c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4ba0:	b108      	cbz	r0, d4ba6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4ba2:	f7ff fa7e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ba6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4baa:	b12d      	cbz	r5, d4bb8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4bac:	4628      	mov	r0, r5
   d4bae:	f7ff ffd0 	bl	d4b52 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bb2:	4628      	mov	r0, r5
   d4bb4:	f7ff fa73 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bb8:	68a0      	ldr	r0, [r4, #8]
   d4bba:	b108      	cbz	r0, d4bc0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4bbc:	f7ff ffc4 	bl	d4b48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4bc0:	4620      	mov	r0, r4
   d4bc2:	bd38      	pop	{r3, r4, r5, pc}
   d4bc4:	000d701c 	.word	0x000d701c

000d4bc8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4bc8:	6800      	ldr	r0, [r0, #0]
   d4bca:	f7ff bbf3 	b.w	d43b4 <os_mutex_recursive_lock>
	...

000d4bd0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d4bd0:	b530      	push	{r4, r5, lr}
   d4bd2:	b08d      	sub	sp, #52	; 0x34
   d4bd4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d4bd6:	2211      	movs	r2, #17
   d4bd8:	2100      	movs	r1, #0
   d4bda:	a801      	add	r0, sp, #4
   d4bdc:	f002 f927 	bl	d6e2e <memset>
    addr.v = 6;
   d4be0:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4be2:	aa01      	add	r2, sp, #4
   d4be4:	4909      	ldr	r1, [pc, #36]	; (d4c0c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d4be6:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d4bea:	200a      	movs	r0, #10
   d4bec:	f7ff fca2 	bl	d4534 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4bf0:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d4bf2:	a901      	add	r1, sp, #4
   d4bf4:	a806      	add	r0, sp, #24
   d4bf6:	f7ff ff2b 	bl	d4a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bfc:	3404      	adds	r4, #4
   d4bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c00:	682b      	ldr	r3, [r5, #0]
   d4c02:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d4c04:	2000      	movs	r0, #0
   d4c06:	b00d      	add	sp, #52	; 0x34
   d4c08:	bd30      	pop	{r4, r5, pc}
   d4c0a:	bf00      	nop
   d4c0c:	000d7048 	.word	0x000d7048

000d4c10 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d4c10:	b530      	push	{r4, r5, lr}
   d4c12:	4604      	mov	r4, r0
   d4c14:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4c16:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d4c1a:	f7ff ffd5 	bl	d4bc8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d4c1e:	6823      	ldr	r3, [r4, #0]
   d4c20:	bb83      	cbnz	r3, d4c84 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d4c22:	204c      	movs	r0, #76	; 0x4c
   d4c24:	f7ff fa37 	bl	d4096 <_Znwj>
   d4c28:	4605      	mov	r5, r0
   d4c2a:	b108      	cbz	r0, d4c30 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d4c2c:	f000 fe38 	bl	d58a0 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c30:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c32:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c34:	b108      	cbz	r0, d4c3a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d4c36:	f7ff ff87 	bl	d4b48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4c3a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d4c3c:	b320      	cbz	r0, d4c88 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d4c3e:	2200      	movs	r2, #0
   d4c40:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d4c44:	f000 fe5b 	bl	d58fe <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d4c48:	a908      	add	r1, sp, #32
   d4c4a:	2500      	movs	r5, #0
   d4c4c:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d4c50:	4811      	ldr	r0, [pc, #68]	; (d4c98 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d4c52:	f7ff fc3f 	bl	d44d4 <if_name_to_index>
   d4c56:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d4c58:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4c5c:	6803      	ldr	r3, [r0, #0]
   d4c5e:	f249 0169 	movw	r1, #36969	; 0x9069
   d4c62:	6a1b      	ldr	r3, [r3, #32]
   d4c64:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d4c66:	a802      	add	r0, sp, #8
   d4c68:	f7ff fee4 	bl	d4a34 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4c6c:	a802      	add	r0, sp, #8
   d4c6e:	f7ff ffaf 	bl	d4bd0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4c72:	2800      	cmp	r0, #0
   d4c74:	db04      	blt.n	d4c80 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d4c76:	a902      	add	r1, sp, #8
   d4c78:	6820      	ldr	r0, [r4, #0]
   d4c7a:	f000 fec6 	bl	d5a0a <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d4c7e:	e004      	b.n	d4c8a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d4c80:	4605      	mov	r5, r0
   d4c82:	e002      	b.n	d4c8a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d4c84:	2500      	movs	r5, #0
   d4c86:	e000      	b.n	d4c8a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d4c88:	4d04      	ldr	r5, [pc, #16]	; (d4c9c <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4c8a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4c8e:	f7ff fb99 	bl	d43c4 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d4c92:	4628      	mov	r0, r5
   d4c94:	b009      	add	sp, #36	; 0x24
   d4c96:	bd30      	pop	{r4, r5, pc}
   d4c98:	000d7055 	.word	0x000d7055
   d4c9c:	fffffefc 	.word	0xfffffefc

000d4ca0 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d4ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ca4:	4605      	mov	r5, r0
   d4ca6:	b08c      	sub	sp, #48	; 0x30
   d4ca8:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d4caa:	460f      	mov	r7, r1
   d4cac:	b109      	cbz	r1, d4cb2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d4cae:	780b      	ldrb	r3, [r1, #0]
   d4cb0:	b90b      	cbnz	r3, d4cb6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d4cb2:	4c35      	ldr	r4, [pc, #212]	; (d4d88 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d4cb4:	e064      	b.n	d4d80 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d4cb6:	4608      	mov	r0, r1
   d4cb8:	f002 f8d3 	bl	d6e62 <strlen>
   d4cbc:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4cbe:	2e00      	cmp	r6, #0
   d4cc0:	d05c      	beq.n	d4d7c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d4cc2:	4630      	mov	r0, r6
   d4cc4:	f002 f8cd 	bl	d6e62 <strlen>
   d4cc8:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4cca:	f108 0302 	add.w	r3, r8, #2
   d4cce:	4423      	add	r3, r4
   d4cd0:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d4cd4:	d84f      	bhi.n	d4d76 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d4cd6:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d4cda:	f7ff ff75 	bl	d4bc8 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d4cde:	4628      	mov	r0, r5
   d4ce0:	f7ff ff96 	bl	d4c10 <_ZN5spark11MeshPublish14initialize_udpEv>
   d4ce4:	2800      	cmp	r0, #0
   d4ce6:	db40      	blt.n	d4d6a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d4ce8:	4668      	mov	r0, sp
   d4cea:	f7ff fea3 	bl	d4a34 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d4cee:	4668      	mov	r0, sp
   d4cf0:	f7ff ff6e 	bl	d4bd0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d4cf4:	2800      	cmp	r0, #0
   d4cf6:	db38      	blt.n	d4d6a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d4cf8:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d4cfc:	f8da 3000 	ldr.w	r3, [sl]
   d4d00:	f10d 0c04 	add.w	ip, sp, #4
   d4d04:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d4d08:	4b20      	ldr	r3, [pc, #128]	; (d4d8c <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d4d0a:	9306      	str	r3, [sp, #24]
   d4d0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4d10:	f10d 0e1c 	add.w	lr, sp, #28
   d4d14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4d18:	f8dc 3000 	ldr.w	r3, [ip]
   d4d1c:	f88e 3000 	strb.w	r3, [lr]
   d4d20:	f249 0269 	movw	r2, #36969	; 0x9069
   d4d24:	a906      	add	r1, sp, #24
   d4d26:	4650      	mov	r0, sl
   d4d28:	47c8      	blx	r9
   d4d2a:	2800      	cmp	r0, #0
   d4d2c:	db1d      	blt.n	d4d6a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d4d2e:	2300      	movs	r3, #0
   d4d30:	6828      	ldr	r0, [r5, #0]
   d4d32:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d4d36:	6803      	ldr	r3, [r0, #0]
   d4d38:	2201      	movs	r2, #1
   d4d3a:	68db      	ldr	r3, [r3, #12]
   d4d3c:	a906      	add	r1, sp, #24
   d4d3e:	4798      	blx	r3
   d4d40:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d4d42:	6803      	ldr	r3, [r0, #0]
   d4d44:	f108 0201 	add.w	r2, r8, #1
   d4d48:	68db      	ldr	r3, [r3, #12]
   d4d4a:	4639      	mov	r1, r7
   d4d4c:	4798      	blx	r3
    if (dataLen > 0) {
   d4d4e:	b12c      	cbz	r4, d4d5c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d4d50:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d4d52:	6803      	ldr	r3, [r0, #0]
   d4d54:	4622      	mov	r2, r4
   d4d56:	68db      	ldr	r3, [r3, #12]
   d4d58:	4631      	mov	r1, r6
   d4d5a:	4798      	blx	r3
   d4d5c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d4d5e:	6803      	ldr	r3, [r0, #0]
   d4d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d62:	4798      	blx	r3
   d4d64:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d4d68:	e000      	b.n	d4d6c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d4d6a:	4604      	mov	r4, r0
   d4d6c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d4d70:	f7ff fb28 	bl	d43c4 <os_mutex_recursive_unlock>
   d4d74:	e004      	b.n	d4d80 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d4d76:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d4d7a:	e001      	b.n	d4d80 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d4d7c:	4634      	mov	r4, r6
   d4d7e:	e7a4      	b.n	d4cca <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d4d80:	4620      	mov	r0, r4
   d4d82:	b00c      	add	sp, #48	; 0x30
   d4d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4d88:	fffffef2 	.word	0xfffffef2
   d4d8c:	000d6f2c 	.word	0x000d6f2c

000d4d90 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d90:	b538      	push	{r3, r4, r5, lr}
   d4d92:	4c0d      	ldr	r4, [pc, #52]	; (d4dc8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4d94:	4b0d      	ldr	r3, [pc, #52]	; (d4dcc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4d96:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d98:	2500      	movs	r5, #0
   d4d9a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d9c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4da0:	6063      	str	r3, [r4, #4]
   d4da2:	60a5      	str	r5, [r4, #8]
   d4da4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4da8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4dac:	f7ff fafa 	bl	d43a4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4db0:	4b07      	ldr	r3, [pc, #28]	; (d4dd0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4db2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4db6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4db8:	4620      	mov	r0, r4
   d4dba:	4a06      	ldr	r2, [pc, #24]	; (d4dd4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4dbc:	4906      	ldr	r1, [pc, #24]	; (d4dd8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4dc2:	f001 b8ab 	b.w	d5f1c <__aeabi_atexit>
   d4dc6:	bf00      	nop
   d4dc8:	2003e3e4 	.word	0x2003e3e4
   d4dcc:	000d7080 	.word	0x000d7080
   d4dd0:	000d701c 	.word	0x000d701c
   d4dd4:	2003e3b8 	.word	0x2003e3b8
   d4dd8:	000d4b95 	.word	0x000d4b95

000d4ddc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ddc:	2300      	movs	r3, #0
   d4dde:	461a      	mov	r2, r3
   d4de0:	6840      	ldr	r0, [r0, #4]
   d4de2:	f7ff bccb 	b.w	d477c <network_connect>

000d4de6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4de6:	2200      	movs	r2, #0
   d4de8:	2102      	movs	r1, #2
   d4dea:	6840      	ldr	r0, [r0, #4]
   d4dec:	f7ff bcd6 	b.w	d479c <network_disconnect>

000d4df0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4df0:	2200      	movs	r2, #0
   d4df2:	4611      	mov	r1, r2
   d4df4:	6840      	ldr	r0, [r0, #4]
   d4df6:	f7ff bcc9 	b.w	d478c <network_connecting>

000d4dfa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	4611      	mov	r1, r2
   d4dfe:	6840      	ldr	r0, [r0, #4]
   d4e00:	f7ff bcd4 	b.w	d47ac <network_ready>

000d4e04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e04:	2300      	movs	r3, #0
   d4e06:	461a      	mov	r2, r3
   d4e08:	4619      	mov	r1, r3
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	f7ff bcd6 	b.w	d47bc <network_on>

000d4e10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e10:	2300      	movs	r3, #0
   d4e12:	461a      	mov	r2, r3
   d4e14:	4619      	mov	r1, r3
   d4e16:	6840      	ldr	r0, [r0, #4]
   d4e18:	f7ff bcd8 	b.w	d47cc <network_off>

000d4e1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e1c:	2200      	movs	r2, #0
   d4e1e:	f081 0101 	eor.w	r1, r1, #1
   d4e22:	6840      	ldr	r0, [r0, #4]
   d4e24:	f7ff bcda 	b.w	d47dc <network_listen>

000d4e28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e28:	2200      	movs	r2, #0
   d4e2a:	6840      	ldr	r0, [r0, #4]
   d4e2c:	f7ff bce6 	b.w	d47fc <network_set_listen_timeout>

000d4e30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e30:	2200      	movs	r2, #0
   d4e32:	4611      	mov	r1, r2
   d4e34:	6840      	ldr	r0, [r0, #4]
   d4e36:	f7ff bce9 	b.w	d480c <network_get_listen_timeout>

000d4e3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e3a:	2200      	movs	r2, #0
   d4e3c:	4611      	mov	r1, r2
   d4e3e:	6840      	ldr	r0, [r0, #4]
   d4e40:	f7ff bcd4 	b.w	d47ec <network_listening>

000d4e44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e44:	b570      	push	{r4, r5, r6, lr}
   d4e46:	b08c      	sub	sp, #48	; 0x30
   d4e48:	4614      	mov	r4, r2
   d4e4a:	4606      	mov	r6, r0
    IPAddress addr;
   d4e4c:	f7ff fdf2 	bl	d4a34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e50:	ab0c      	add	r3, sp, #48	; 0x30
   d4e52:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4e54:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e56:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	f7ff fb92 	bl	d4584 <netdb_getaddrinfo>
    if (!r && ai) {
   d4e60:	4601      	mov	r1, r0
   d4e62:	bb58      	cbnz	r0, d4ebc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d4e64:	9b00      	ldr	r3, [sp, #0]
   d4e66:	b34b      	cbz	r3, d4ebc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d4e68:	685a      	ldr	r2, [r3, #4]
   d4e6a:	2a02      	cmp	r2, #2
   d4e6c:	d00e      	beq.n	d4e8c <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d4e6e:	2a0a      	cmp	r2, #10
   d4e70:	d124      	bne.n	d4ebc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d4e72:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d4e74:	2211      	movs	r2, #17
   d4e76:	a801      	add	r0, sp, #4
   d4e78:	f001 ffd9 	bl	d6e2e <memset>
                a.v = 6;
   d4e7c:	2306      	movs	r3, #6
   d4e7e:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e82:	ad01      	add	r5, sp, #4
   d4e84:	f104 0308 	add.w	r3, r4, #8
   d4e88:	3418      	adds	r4, #24
   d4e8a:	e005      	b.n	d4e98 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e8c:	6959      	ldr	r1, [r3, #20]
   d4e8e:	4630      	mov	r0, r6
   d4e90:	3104      	adds	r1, #4
   d4e92:	f7ff fe12 	bl	d4aba <_ZN9IPAddressaSEPKh>
                break;
   d4e96:	e011      	b.n	d4ebc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e98:	6818      	ldr	r0, [r3, #0]
   d4e9a:	6859      	ldr	r1, [r3, #4]
   d4e9c:	462a      	mov	r2, r5
   d4e9e:	c203      	stmia	r2!, {r0, r1}
   d4ea0:	3308      	adds	r3, #8
   d4ea2:	42a3      	cmp	r3, r4
   d4ea4:	4615      	mov	r5, r2
   d4ea6:	d1f7      	bne.n	d4e98 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d4ea8:	a901      	add	r1, sp, #4
   d4eaa:	a806      	add	r0, sp, #24
   d4eac:	ad07      	add	r5, sp, #28
   d4eae:	f7ff fdcf 	bl	d4a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4eb4:	1d34      	adds	r4, r6, #4
   d4eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4eb8:	682b      	ldr	r3, [r5, #0]
   d4eba:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4ebc:	9800      	ldr	r0, [sp, #0]
   d4ebe:	f7ff fb59 	bl	d4574 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ec2:	4630      	mov	r0, r6
   d4ec4:	b00c      	add	sp, #48	; 0x30
   d4ec6:	bd70      	pop	{r4, r5, r6, pc}

000d4ec8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4ec8:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4eca:	4a03      	ldr	r2, [pc, #12]	; (d4ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4ecc:	601a      	str	r2, [r3, #0]
   d4ece:	2200      	movs	r2, #0
   d4ed0:	605a      	str	r2, [r3, #4]
   d4ed2:	4770      	bx	lr
   d4ed4:	2003e5b4 	.word	0x2003e5b4
   d4ed8:	000d7080 	.word	0x000d7080

000d4edc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ede:	4606      	mov	r6, r0
   d4ee0:	460d      	mov	r5, r1
   d4ee2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4ee4:	2400      	movs	r4, #0
  while (size--) {
   d4ee6:	42bd      	cmp	r5, r7
   d4ee8:	d00c      	beq.n	d4f04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4eea:	6833      	ldr	r3, [r6, #0]
   d4eec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ef0:	689b      	ldr	r3, [r3, #8]
   d4ef2:	4630      	mov	r0, r6
   d4ef4:	4798      	blx	r3
     if (chunk>=0)
   d4ef6:	2800      	cmp	r0, #0
   d4ef8:	db01      	blt.n	d4efe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4efa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4efc:	e7f3      	b.n	d4ee6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4efe:	2c00      	cmp	r4, #0
   d4f00:	bf08      	it	eq
   d4f02:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f04:	4620      	mov	r0, r4
   d4f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f08:	b570      	push	{r4, r5, r6, lr}
   d4f0a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4f0c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4f0e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4f10:	b149      	cbz	r1, d4f26 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4f12:	f001 ffa6 	bl	d6e62 <strlen>
   d4f16:	682b      	ldr	r3, [r5, #0]
   d4f18:	4602      	mov	r2, r0
   d4f1a:	4621      	mov	r1, r4
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	68db      	ldr	r3, [r3, #12]
    }
   d4f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f24:	4718      	bx	r3
    }
   d4f26:	bd70      	pop	{r4, r5, r6, pc}

000d4f28 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4f28:	6803      	ldr	r3, [r0, #0]
   d4f2a:	689b      	ldr	r3, [r3, #8]
   d4f2c:	4718      	bx	r3

000d4f2e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f2e:	b530      	push	{r4, r5, lr}
   d4f30:	b08b      	sub	sp, #44	; 0x2c
   d4f32:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f34:	2100      	movs	r1, #0
   d4f36:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f3a:	2a01      	cmp	r2, #1
   d4f3c:	bf98      	it	ls
   d4f3e:	220a      	movls	r2, #10
   d4f40:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4f44:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4f48:	fb05 3312 	mls	r3, r5, r2, r3
   d4f4c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f50:	2b09      	cmp	r3, #9
   d4f52:	bf94      	ite	ls
   d4f54:	3330      	addls	r3, #48	; 0x30
   d4f56:	3337      	addhi	r3, #55	; 0x37
   d4f58:	b2db      	uxtb	r3, r3
   d4f5a:	4621      	mov	r1, r4
   d4f5c:	f804 3901 	strb.w	r3, [r4], #-1
   d4f60:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4f62:	2d00      	cmp	r5, #0
   d4f64:	d1ee      	bne.n	d4f44 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4f66:	f7ff ffcf 	bl	d4f08 <_ZN5Print5writeEPKc>
}
   d4f6a:	b00b      	add	sp, #44	; 0x2c
   d4f6c:	bd30      	pop	{r4, r5, pc}

000d4f6e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4f6e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4f70:	b92a      	cbnz	r2, d4f7e <_ZN5Print5printEmi+0x10>
   d4f72:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4f74:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4f78:	689b      	ldr	r3, [r3, #8]
   d4f7a:	b2c9      	uxtb	r1, r1
   d4f7c:	4718      	bx	r3
  else return printNumber(n, base);
   d4f7e:	b2d2      	uxtb	r2, r2
}
   d4f80:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4f84:	f7ff bfd3 	b.w	d4f2e <_ZN5Print11printNumberEmh>

000d4f88 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4f88:	f7ff bff1 	b.w	d4f6e <_ZN5Print5printEmi>

000d4f8c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f8c:	b510      	push	{r4, lr}
   d4f8e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f90:	f7ff fc5f 	bl	d4852 <_ZNSt14_Function_baseD1Ev>
   d4f94:	4620      	mov	r0, r4
   d4f96:	bd10      	pop	{r4, pc}

000d4f98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f98:	4803      	ldr	r0, [pc, #12]	; (d4fa8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f9a:	4a04      	ldr	r2, [pc, #16]	; (d4fac <_GLOBAL__sub_I_RGB+0x14>)
   d4f9c:	4904      	ldr	r1, [pc, #16]	; (d4fb0 <_GLOBAL__sub_I_RGB+0x18>)
   d4f9e:	2300      	movs	r3, #0
   d4fa0:	6083      	str	r3, [r0, #8]
   d4fa2:	f000 bfbb 	b.w	d5f1c <__aeabi_atexit>
   d4fa6:	bf00      	nop
   d4fa8:	2003e5bc 	.word	0x2003e5bc
   d4fac:	2003e3b8 	.word	0x2003e3b8
   d4fb0:	000d4f8d 	.word	0x000d4f8d

000d4fb4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4fb4:	4770      	bx	lr

000d4fb6 <_ZN8SPIClassD0Ev>:
   d4fb6:	b510      	push	{r4, lr}
   d4fb8:	4604      	mov	r4, r0
   d4fba:	f7ff f870 	bl	d409e <_ZdlPv>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd10      	pop	{r4, pc}
	...

000d4fc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4fc4:	b570      	push	{r4, r5, r6, lr}
   d4fc6:	4b08      	ldr	r3, [pc, #32]	; (d4fe8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4fc8:	6003      	str	r3, [r0, #0]
   d4fca:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4fcc:	2500      	movs	r5, #0
   d4fce:	460e      	mov	r6, r1
   d4fd0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4fd4:	f7ff f9de 	bl	d4394 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4fd8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4fda:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4fdc:	f7ff fb0a 	bl	d45f4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4fe0:	60a5      	str	r5, [r4, #8]
}
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	bd70      	pop	{r4, r5, r6, pc}
   d4fe6:	bf00      	nop
   d4fe8:	000d70b4 	.word	0x000d70b4

000d4fec <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4fec:	7900      	ldrb	r0, [r0, #4]
   d4fee:	f7ff bb09 	b.w	d4604 <HAL_SPI_Is_Enabled>

000d4ff2 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d4ff2:	4770      	bx	lr

000d4ff4 <_ZN21StringPrintableHelperD0Ev>:
   d4ff4:	b510      	push	{r4, lr}
   d4ff6:	4604      	mov	r4, r0
   d4ff8:	f7ff f851 	bl	d409e <_ZdlPv>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5000:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5004:	ec59 8b10 	vmov	r8, r9, d0
   d5008:	4607      	mov	r7, r0
   d500a:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d500c:	2200      	movs	r2, #0
   d500e:	2300      	movs	r3, #0
   d5010:	ee10 0a10 	vmov	r0, s0
   d5014:	4649      	mov	r1, r9
   d5016:	f001 fcf9 	bl	d6a0c <__aeabi_dcmplt>
   d501a:	b128      	cbz	r0, d5028 <_Z4dtoadhPc+0x28>
        val = -val;
   d501c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5020:	4699      	mov	r9, r3
        *sout++ = '-';
   d5022:	232d      	movs	r3, #45	; 0x2d
   d5024:	7033      	strb	r3, [r6, #0]
   d5026:	3601      	adds	r6, #1
   d5028:	2300      	movs	r3, #0
    }
    long scale = 1;
   d502a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d502c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d502e:	b2d9      	uxtb	r1, r3
   d5030:	428f      	cmp	r7, r1
   d5032:	d902      	bls.n	d503a <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5034:	4354      	muls	r4, r2
   d5036:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5038:	e7f9      	b.n	d502e <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d503a:	4620      	mov	r0, r4
   d503c:	f001 fa0e 	bl	d645c <__aeabi_i2d>
   d5040:	4642      	mov	r2, r8
   d5042:	464b      	mov	r3, r9
   d5044:	f001 fa70 	bl	d6528 <__aeabi_dmul>
   d5048:	4682      	mov	sl, r0
   d504a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d504c:	f001 fd3e 	bl	d6acc <__aeabi_d2ulz>
   d5050:	4680      	mov	r8, r0
   d5052:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5054:	f001 fa32 	bl	d64bc <__aeabi_ul2d>
   d5058:	4602      	mov	r2, r0
   d505a:	460b      	mov	r3, r1
   d505c:	4650      	mov	r0, sl
   d505e:	4659      	mov	r1, fp
   d5060:	f001 f8ae 	bl	d61c0 <__aeabi_dsub>
   d5064:	2200      	movs	r2, #0
   d5066:	4b17      	ldr	r3, [pc, #92]	; (d50c4 <_Z4dtoadhPc+0xc4>)
   d5068:	f001 fce4 	bl	d6a34 <__aeabi_dcmpge>
   d506c:	b118      	cbz	r0, d5076 <_Z4dtoadhPc+0x76>
        fixed++;
   d506e:	f118 0801 	adds.w	r8, r8, #1
   d5072:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5076:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5078:	4622      	mov	r2, r4
   d507a:	462b      	mov	r3, r5
   d507c:	4640      	mov	r0, r8
   d507e:	4649      	mov	r1, r9
   d5080:	f001 fd0c 	bl	d6a9c <__aeabi_uldivmod>
   d5084:	2301      	movs	r3, #1
   d5086:	220a      	movs	r2, #10
   d5088:	4631      	mov	r1, r6
   d508a:	f000 fdf0 	bl	d5c6e <ultoa>
    if (prec) {
   d508e:	b1af      	cbz	r7, d50bc <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d5090:	4630      	mov	r0, r6
   d5092:	f001 fee6 	bl	d6e62 <strlen>
        *sout++ = '.';
   d5096:	232e      	movs	r3, #46	; 0x2e
   d5098:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d509a:	3001      	adds	r0, #1
   d509c:	4406      	add	r6, r0
   d509e:	4622      	mov	r2, r4
   d50a0:	462b      	mov	r3, r5
   d50a2:	4640      	mov	r0, r8
   d50a4:	4649      	mov	r1, r9
   d50a6:	f001 fcf9 	bl	d6a9c <__aeabi_uldivmod>
   d50aa:	463b      	mov	r3, r7
   d50ac:	4610      	mov	r0, r2
   d50ae:	4631      	mov	r1, r6
   d50b0:	220a      	movs	r2, #10
    }
}
   d50b2:	b001      	add	sp, #4
   d50b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d50b8:	f000 bdd9 	b.w	d5c6e <ultoa>
    }
}
   d50bc:	b001      	add	sp, #4
   d50be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50c2:	bf00      	nop
   d50c4:	3fe00000 	.word	0x3fe00000

000d50c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d50c8:	b510      	push	{r4, lr}
   d50ca:	4604      	mov	r4, r0
{
	free(buffer);
   d50cc:	6800      	ldr	r0, [r0, #0]
   d50ce:	f7ff fbad 	bl	d482c <free>
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd10      	pop	{r4, pc}

000d50d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d50d6:	b510      	push	{r4, lr}
   d50d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d50da:	6800      	ldr	r0, [r0, #0]
   d50dc:	b108      	cbz	r0, d50e2 <_ZN6String10invalidateEv+0xc>
   d50de:	f7ff fba5 	bl	d482c <free>
	buffer = NULL;
   d50e2:	2300      	movs	r3, #0
   d50e4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d50e6:	60a3      	str	r3, [r4, #8]
   d50e8:	6063      	str	r3, [r4, #4]
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d50ec:	b538      	push	{r3, r4, r5, lr}
   d50ee:	4604      	mov	r4, r0
   d50f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d50f2:	6800      	ldr	r0, [r0, #0]
   d50f4:	3101      	adds	r1, #1
   d50f6:	f7ff fba1 	bl	d483c <realloc>
	if (newbuffer) {
   d50fa:	b110      	cbz	r0, d5102 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d50fc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5100:	2001      	movs	r0, #1
	}
	return 0;
}
   d5102:	bd38      	pop	{r3, r4, r5, pc}

000d5104 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5104:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5106:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5108:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d510a:	b113      	cbz	r3, d5112 <_ZN6String7reserveEj+0xe>
   d510c:	6843      	ldr	r3, [r0, #4]
   d510e:	428b      	cmp	r3, r1
   d5110:	d207      	bcs.n	d5122 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5112:	4620      	mov	r0, r4
   d5114:	f7ff ffea 	bl	d50ec <_ZN6String12changeBufferEj>
   d5118:	b120      	cbz	r0, d5124 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d511a:	68a3      	ldr	r3, [r4, #8]
   d511c:	b90b      	cbnz	r3, d5122 <_ZN6String7reserveEj+0x1e>
   d511e:	6822      	ldr	r2, [r4, #0]
   d5120:	7013      	strb	r3, [r2, #0]
   d5122:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5124:	bd10      	pop	{r4, pc}

000d5126 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5126:	b570      	push	{r4, r5, r6, lr}
   d5128:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d512a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d512c:	4604      	mov	r4, r0
   d512e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5130:	f7ff ffe8 	bl	d5104 <_ZN6String7reserveEj>
   d5134:	b918      	cbnz	r0, d513e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5136:	4620      	mov	r0, r4
   d5138:	f7ff ffcd 	bl	d50d6 <_ZN6String10invalidateEv>
		return *this;
   d513c:	e009      	b.n	d5152 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d513e:	462a      	mov	r2, r5
   d5140:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5142:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5144:	6820      	ldr	r0, [r4, #0]
   d5146:	f001 fe67 	bl	d6e18 <memcpy>
	buffer[len] = 0;
   d514a:	6822      	ldr	r2, [r4, #0]
   d514c:	68a3      	ldr	r3, [r4, #8]
   d514e:	2100      	movs	r1, #0
   d5150:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5152:	4620      	mov	r0, r4
   d5154:	bd70      	pop	{r4, r5, r6, pc}

000d5156 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5156:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5158:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d515a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d515c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d515e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5160:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5162:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5164:	460d      	mov	r5, r1
   d5166:	b139      	cbz	r1, d5178 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5168:	4608      	mov	r0, r1
   d516a:	f001 fe7a 	bl	d6e62 <strlen>
   d516e:	4629      	mov	r1, r5
   d5170:	4602      	mov	r2, r0
   d5172:	4620      	mov	r0, r4
   d5174:	f7ff ffd7 	bl	d5126 <_ZN6String4copyEPKcj>
}
   d5178:	4620      	mov	r0, r4
   d517a:	bd38      	pop	{r3, r4, r5, pc}

000d517c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d517c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d517e:	b510      	push	{r4, lr}
   d5180:	460b      	mov	r3, r1
   d5182:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5184:	d007      	beq.n	d5196 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5186:	6809      	ldr	r1, [r1, #0]
   d5188:	b119      	cbz	r1, d5192 <_ZN6StringaSERKS_+0x16>
   d518a:	689a      	ldr	r2, [r3, #8]
   d518c:	f7ff ffcb 	bl	d5126 <_ZN6String4copyEPKcj>
   d5190:	e001      	b.n	d5196 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5192:	f7ff ffa0 	bl	d50d6 <_ZN6String10invalidateEv>

	return *this;
}
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d519a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d519c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d519e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d51a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51a6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d51a8:	f7ff ffe8 	bl	d517c <_ZN6StringaSERKS_>
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	bd10      	pop	{r4, pc}

000d51b0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d51b0:	b538      	push	{r3, r4, r5, lr}
   d51b2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d51b4:	460c      	mov	r4, r1
   d51b6:	b141      	cbz	r1, d51ca <_ZN6StringaSEPKc+0x1a>
   d51b8:	4608      	mov	r0, r1
   d51ba:	f001 fe52 	bl	d6e62 <strlen>
   d51be:	4621      	mov	r1, r4
   d51c0:	4602      	mov	r2, r0
   d51c2:	4628      	mov	r0, r5
   d51c4:	f7ff ffaf 	bl	d5126 <_ZN6String4copyEPKcj>
   d51c8:	e001      	b.n	d51ce <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d51ca:	f7ff ff84 	bl	d50d6 <_ZN6String10invalidateEv>

	return *this;
}
   d51ce:	4628      	mov	r0, r5
   d51d0:	bd38      	pop	{r3, r4, r5, pc}

000d51d2 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d51d2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51d4:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d51d6:	b08a      	sub	sp, #40	; 0x28
   d51d8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51da:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51dc:	6043      	str	r3, [r0, #4]
	len = 0;
   d51de:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51e0:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d51e2:	b2c8      	uxtb	r0, r1
   d51e4:	a901      	add	r1, sp, #4
   d51e6:	f7ff ff0b 	bl	d5000 <_Z4dtoadhPc>
        *this = buf;
   d51ea:	a901      	add	r1, sp, #4
   d51ec:	4620      	mov	r0, r4
   d51ee:	f7ff ffdf 	bl	d51b0 <_ZN6StringaSEPKc>
}
   d51f2:	4620      	mov	r0, r4
   d51f4:	b00a      	add	sp, #40	; 0x28
   d51f6:	bd10      	pop	{r4, pc}

000d51f8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d51f8:	b570      	push	{r4, r5, r6, lr}
   d51fa:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d51fc:	460e      	mov	r6, r1
   d51fe:	b909      	cbnz	r1, d5204 <_ZN6String6concatEPKcj+0xc>
   d5200:	2000      	movs	r0, #0
   d5202:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5204:	b16a      	cbz	r2, d5222 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5206:	6883      	ldr	r3, [r0, #8]
   d5208:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d520a:	4629      	mov	r1, r5
   d520c:	f7ff ff7a 	bl	d5104 <_ZN6String7reserveEj>
   d5210:	2800      	cmp	r0, #0
   d5212:	d0f5      	beq.n	d5200 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5214:	6820      	ldr	r0, [r4, #0]
   d5216:	68a3      	ldr	r3, [r4, #8]
   d5218:	4631      	mov	r1, r6
   d521a:	4418      	add	r0, r3
   d521c:	f001 fe19 	bl	d6e52 <strcpy>
	len = newlen;
   d5220:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5222:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5224:	bd70      	pop	{r4, r5, r6, pc}

000d5226 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d5226:	b538      	push	{r3, r4, r5, lr}
   d5228:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d522a:	6880      	ldr	r0, [r0, #8]
   d522c:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d522e:	f7ff ffe3 	bl	d51f8 <_ZN6String6concatEPKcj>
   d5232:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5234:	6898      	ldr	r0, [r3, #8]
    }
   d5236:	1b40      	subs	r0, r0, r5
   d5238:	bd38      	pop	{r3, r4, r5, pc}

000d523a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d523a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d523c:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d523e:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5242:	2201      	movs	r2, #1
   d5244:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5246:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d524a:	f7ff ffd5 	bl	d51f8 <_ZN6String6concatEPKcj>
}
   d524e:	b003      	add	sp, #12
   d5250:	f85d fb04 	ldr.w	pc, [sp], #4

000d5254 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5254:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d5256:	6880      	ldr	r0, [r0, #8]
   d5258:	f7ff ffef 	bl	d523a <_ZN6String6concatEc>
    }
   d525c:	bd08      	pop	{r3, pc}

000d525e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d525e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5260:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5262:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5264:	b912      	cbnz	r2, d526c <_ZNK6String6equalsEPKc+0xe>
   d5266:	b919      	cbnz	r1, d5270 <_ZNK6String6equalsEPKc+0x12>
   d5268:	2001      	movs	r0, #1
   d526a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d526c:	b911      	cbnz	r1, d5274 <_ZNK6String6equalsEPKc+0x16>
   d526e:	6803      	ldr	r3, [r0, #0]
   d5270:	7818      	ldrb	r0, [r3, #0]
   d5272:	e002      	b.n	d527a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5274:	6800      	ldr	r0, [r0, #0]
   d5276:	f001 fde2 	bl	d6e3e <strcmp>
   d527a:	fab0 f080 	clz	r0, r0
   d527e:	0940      	lsrs	r0, r0, #5
}
   d5280:	bd08      	pop	{r3, pc}
	...

000d5284 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5284:	b530      	push	{r4, r5, lr}
   d5286:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5288:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d528a:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d528c:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d528e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5290:	6043      	str	r3, [r0, #4]
	len = 0;
   d5292:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5294:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d5296:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5298:	4b06      	ldr	r3, [pc, #24]	; (d52b4 <_ZN6StringC1ERK9Printable+0x30>)
   d529a:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d529c:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d529e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d52a0:	f7ff ff30 	bl	d5104 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d52a4:	682b      	ldr	r3, [r5, #0]
   d52a6:	a901      	add	r1, sp, #4
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	4628      	mov	r0, r5
   d52ac:	4798      	blx	r3
}
   d52ae:	4620      	mov	r0, r4
   d52b0:	b005      	add	sp, #20
   d52b2:	bd30      	pop	{r4, r5, pc}
   d52b4:	000d70c4 	.word	0x000d70c4

000d52b8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d52b8:	4b05      	ldr	r3, [pc, #20]	; (d52d0 <_GLOBAL__sub_I_System+0x18>)
   d52ba:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d52be:	2000      	movs	r0, #0
   d52c0:	805a      	strh	r2, [r3, #2]
   d52c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d52c6:	7018      	strb	r0, [r3, #0]
   d52c8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d52ca:	f7ff ba1b 	b.w	d4704 <set_system_mode>
   d52ce:	bf00      	nop
   d52d0:	2003e5cc 	.word	0x2003e5cc

000d52d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52d4:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52d6:	681a      	ldr	r2, [r3, #0]
   d52d8:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52da:	601a      	str	r2, [r3, #0]
   d52dc:	4770      	bx	lr
   d52de:	bf00      	nop
   d52e0:	2003e3b0 	.word	0x2003e3b0
   d52e4:	2003e5d4 	.word	0x2003e5d4

000d52e8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d52e8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d52ea:	6804      	ldr	r4, [r0, #0]
   d52ec:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d52ee:	46a4      	mov	ip, r4
    }
   d52f0:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d52f4:	4760      	bx	ip

000d52f6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d52f6:	6803      	ldr	r3, [r0, #0]
   d52f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d52fa:	4718      	bx	r3

000d52fc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d52fc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d52fe:	4770      	bx	lr

000d5300 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5300:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5302:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5304:	1a10      	subs	r0, r2, r0
   d5306:	4770      	bx	lr

000d5308 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5308:	b513      	push	{r0, r1, r4, lr}
   d530a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d530c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d530e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5312:	68d4      	ldr	r4, [r2, #12]
   d5314:	4619      	mov	r1, r3
   d5316:	2201      	movs	r2, #1
   d5318:	47a0      	blx	r4
}
   d531a:	b002      	add	sp, #8
   d531c:	bd10      	pop	{r4, pc}

000d531e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d531e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5320:	6803      	ldr	r3, [r0, #0]
   d5322:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5324:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5326:	4798      	blx	r3
   d5328:	b128      	cbz	r0, d5336 <_ZN3UDP4readEv+0x18>
   d532a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d532c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d532e:	1c59      	adds	r1, r3, #1
   d5330:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5332:	5cd0      	ldrb	r0, [r2, r3]
   d5334:	bd10      	pop	{r4, pc}
   d5336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d533c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d533e:	6803      	ldr	r3, [r0, #0]
   d5340:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5342:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5344:	4798      	blx	r3
   d5346:	b118      	cbz	r0, d5350 <_ZN3UDP4peekEv+0x14>
   d5348:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d534a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d534c:	5cd0      	ldrb	r0, [r2, r3]
   d534e:	bd10      	pop	{r4, pc}
   d5350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5354:	bd10      	pop	{r4, pc}

000d5356 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5356:	4770      	bx	lr

000d5358 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5358:	b410      	push	{r4}
   d535a:	4603      	mov	r3, r0
   d535c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d535e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5360:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5362:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5364:	6803      	ldr	r3, [r0, #0]
   d5366:	1a52      	subs	r2, r2, r1
   d5368:	68db      	ldr	r3, [r3, #12]
   d536a:	4421      	add	r1, r4
}
   d536c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5370:	4718      	bx	r3

000d5372 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5372:	f1a0 0010 	sub.w	r0, r0, #16
   d5376:	f7ff bfef 	b.w	d5358 <_ZNK3UDP7printToER5Print>

000d537a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d537a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d537c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d537e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5380:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5384:	4604      	mov	r4, r0
   d5386:	460f      	mov	r7, r1
   d5388:	4615      	mov	r5, r2
    stop();
   d538a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d538c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d538e:	4632      	mov	r2, r6
   d5390:	2100      	movs	r1, #0
   d5392:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5394:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5396:	f001 fd4a 	bl	d6e2e <memset>
    saddr.sin6_len = sizeof(saddr);
   d539a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d539e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d53a0:	260a      	movs	r6, #10
   d53a2:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d53a6:	f7ff f8dd 	bl	d4564 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d53aa:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d53ac:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d53b0:	2102      	movs	r1, #2
   d53b2:	4630      	mov	r0, r6
   d53b4:	f7ff f916 	bl	d45e4 <sock_socket>

    if (_sock < 0) {
   d53b8:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d53ba:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d53bc:	db24      	blt.n	d5408 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d53be:	2204      	movs	r2, #4
   d53c0:	9200      	str	r2, [sp, #0]
   d53c2:	ab02      	add	r3, sp, #8
   d53c4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d53c8:	f7ff f8ec 	bl	d45a4 <sock_setsockopt>
   d53cc:	b9e0      	cbnz	r0, d5408 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d53ce:	b195      	cbz	r5, d53f6 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d53d0:	9003      	str	r0, [sp, #12]
   d53d2:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d53d6:	a903      	add	r1, sp, #12
   d53d8:	b2e8      	uxtb	r0, r5
   d53da:	f7ff f883 	bl	d44e4 <if_index_to_name>
   d53de:	b998      	cbnz	r0, d5408 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d53e0:	2306      	movs	r3, #6
   d53e2:	9300      	str	r3, [sp, #0]
   d53e4:	f241 020b 	movw	r2, #4107	; 0x100b
   d53e8:	ab03      	add	r3, sp, #12
   d53ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   d53ee:	6960      	ldr	r0, [r4, #20]
   d53f0:	f7ff f8d8 	bl	d45a4 <sock_setsockopt>
   d53f4:	b940      	cbnz	r0, d5408 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d53f6:	221c      	movs	r2, #28
   d53f8:	a905      	add	r1, sp, #20
   d53fa:	6960      	ldr	r0, [r4, #20]
   d53fc:	f7ff f8ca 	bl	d4594 <sock_bind>
   d5400:	b910      	cbnz	r0, d5408 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5402:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5404:	2001      	movs	r0, #1
   d5406:	e004      	b.n	d5412 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5408:	6823      	ldr	r3, [r4, #0]
   d540a:	4620      	mov	r0, r4
   d540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d540e:	4798      	blx	r3
   d5410:	2000      	movs	r0, #0
    }
    return bound;
}
   d5412:	b00d      	add	sp, #52	; 0x34
   d5414:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5416 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5416:	b510      	push	{r4, lr}
   d5418:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d541a:	6940      	ldr	r0, [r0, #20]
   d541c:	2800      	cmp	r0, #0
   d541e:	db01      	blt.n	d5424 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5420:	f7ff f8c8 	bl	d45b4 <sock_close>
    }

    _sock = -1;
   d5424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5428:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d542a:	2300      	movs	r3, #0
   d542c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d542e:	8723      	strh	r3, [r4, #56]	; 0x38
   d5430:	bd10      	pop	{r4, pc}

000d5432 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5432:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5434:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5436:	4605      	mov	r5, r0
   d5438:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d543a:	b113      	cbz	r3, d5442 <_ZN3UDP5writeEPKhj+0x10>
   d543c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d543e:	1a24      	subs	r4, r4, r0
   d5440:	e000      	b.n	d5444 <_ZN3UDP5writeEPKhj+0x12>
   d5442:	461c      	mov	r4, r3
   d5444:	4294      	cmp	r4, r2
   d5446:	bf28      	it	cs
   d5448:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d544a:	4622      	mov	r2, r4
   d544c:	4418      	add	r0, r3
   d544e:	f001 fce3 	bl	d6e18 <memcpy>
    _offset += size;
   d5452:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5454:	4423      	add	r3, r4
   d5456:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d5458:	4620      	mov	r0, r4
   d545a:	bd38      	pop	{r3, r4, r5, pc}

000d545c <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d545c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d545e:	6803      	ldr	r3, [r0, #0]
   d5460:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5462:	4604      	mov	r4, r0
   d5464:	460e      	mov	r6, r1
   d5466:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5468:	4798      	blx	r3
   d546a:	b188      	cbz	r0, d5490 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d546c:	6823      	ldr	r3, [r4, #0]
   d546e:	4620      	mov	r0, r4
   d5470:	691b      	ldr	r3, [r3, #16]
   d5472:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5474:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5476:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5478:	4285      	cmp	r5, r0
   d547a:	bfa8      	it	ge
   d547c:	4605      	movge	r5, r0
   d547e:	4419      	add	r1, r3
   d5480:	462a      	mov	r2, r5
   d5482:	4630      	mov	r0, r6
   d5484:	f001 fcc8 	bl	d6e18 <memcpy>
        _offset += read;
   d5488:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d548a:	442b      	add	r3, r5
   d548c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d548e:	e001      	b.n	d5494 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5490:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5494:	4628      	mov	r0, r5
   d5496:	bd70      	pop	{r4, r5, r6, pc}

000d5498 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5498:	b570      	push	{r4, r5, r6, lr}
   d549a:	4604      	mov	r4, r0
   d549c:	4b05      	ldr	r3, [pc, #20]	; (d54b4 <_ZN3UDP8remoteIPEv+0x1c>)
   d549e:	f844 3b04 	str.w	r3, [r4], #4
   d54a2:	f101 0520 	add.w	r5, r1, #32
   d54a6:	4606      	mov	r6, r0
   d54a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54ac:	682b      	ldr	r3, [r5, #0]
   d54ae:	7023      	strb	r3, [r4, #0]
   d54b0:	4630      	mov	r0, r6
   d54b2:	bd70      	pop	{r4, r5, r6, pc}
   d54b4:	000d6f2c 	.word	0x000d6f2c

000d54b8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54ba:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d54bc:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d54be:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d54c0:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d54c2:	4a0a      	ldr	r2, [pc, #40]	; (d54ec <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d54c4:	9202      	str	r2, [sp, #8]
   d54c6:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d54c8:	468e      	mov	lr, r1
   d54ca:	4606      	mov	r6, r0
   d54cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54ce:	ac03      	add	r4, sp, #12
   d54d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54d2:	682b      	ldr	r3, [r5, #0]
   d54d4:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d54d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d54da:	9300      	str	r3, [sp, #0]
   d54dc:	4662      	mov	r2, ip
   d54de:	ab02      	add	r3, sp, #8
   d54e0:	4671      	mov	r1, lr
   d54e2:	4630      	mov	r0, r6
   d54e4:	47b8      	blx	r7
    }
   d54e6:	b009      	add	sp, #36	; 0x24
   d54e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54ea:	bf00      	nop
   d54ec:	000d6f2c 	.word	0x000d6f2c

000d54f0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d54f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d54f2:	6803      	ldr	r3, [r0, #0]
   d54f4:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d54f8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d54fa:	4b0d      	ldr	r3, [pc, #52]	; (d5530 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d54fc:	b089      	sub	sp, #36	; 0x24
   d54fe:	f100 0620 	add.w	r6, r0, #32
   d5502:	4604      	mov	r4, r0
   d5504:	9302      	str	r3, [sp, #8]
   d5506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5508:	ad03      	add	r5, sp, #12
   d550a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d550c:	6833      	ldr	r3, [r6, #0]
   d550e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5510:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5512:	9300      	str	r3, [sp, #0]
   d5514:	4672      	mov	r2, lr
   d5516:	ab02      	add	r3, sp, #8
   d5518:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d551a:	4620      	mov	r0, r4
   d551c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d551e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5520:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5522:	69db      	ldr	r3, [r3, #28]
   d5524:	4620      	mov	r0, r4
   d5526:	4798      	blx	r3
    return result;
}
   d5528:	4628      	mov	r0, r5
   d552a:	b009      	add	sp, #36	; 0x24
   d552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d552e:	bf00      	nop
   d5530:	000d6f2c 	.word	0x000d6f2c

000d5534 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5534:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5536:	7843      	ldrb	r3, [r0, #1]
   d5538:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d553a:	b08d      	sub	sp, #52	; 0x34
   d553c:	4605      	mov	r5, r0
   d553e:	460c      	mov	r4, r1
   d5540:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5542:	d101      	bne.n	d5548 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5544:	1d01      	adds	r1, r0, #4
   d5546:	e033      	b.n	d55b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5548:	2b0a      	cmp	r3, #10
   d554a:	d135      	bne.n	d55b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d554c:	2211      	movs	r2, #17
   d554e:	2100      	movs	r1, #0
   d5550:	a801      	add	r0, sp, #4
   d5552:	f001 fc6c 	bl	d6e2e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5556:	68ab      	ldr	r3, [r5, #8]
   d5558:	b943      	cbnz	r3, d556c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d555a:	68eb      	ldr	r3, [r5, #12]
   d555c:	b933      	cbnz	r3, d556c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d555e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5562:	692e      	ldr	r6, [r5, #16]
   d5564:	f7fe ffee 	bl	d4544 <inet_htonl>
   d5568:	4286      	cmp	r6, r0
   d556a:	d01f      	beq.n	d55ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d556c:	f105 0308 	add.w	r3, r5, #8
   d5570:	ae01      	add	r6, sp, #4
   d5572:	f105 0e18 	add.w	lr, r5, #24
   d5576:	6818      	ldr	r0, [r3, #0]
   d5578:	6859      	ldr	r1, [r3, #4]
   d557a:	4632      	mov	r2, r6
   d557c:	c203      	stmia	r2!, {r0, r1}
   d557e:	3308      	adds	r3, #8
   d5580:	4573      	cmp	r3, lr
   d5582:	4616      	mov	r6, r2
   d5584:	d1f7      	bne.n	d5576 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5586:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5588:	a901      	add	r1, sp, #4
   d558a:	a806      	add	r0, sp, #24
   d558c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d558e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5592:	f7ff fa5d 	bl	d4a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5596:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5598:	3404      	adds	r4, #4
   d559a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d559c:	6833      	ldr	r3, [r6, #0]
   d559e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d55a0:	b157      	cbz	r7, d55b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d55a2:	8868      	ldrh	r0, [r5, #2]
   d55a4:	f7fe ffd6 	bl	d4554 <inet_ntohs>
   d55a8:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d55aa:	e005      	b.n	d55b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d55ac:	f105 0114 	add.w	r1, r5, #20
   d55b0:	4620      	mov	r0, r4
   d55b2:	f7ff fa82 	bl	d4aba <_ZN9IPAddressaSEPKh>
   d55b6:	e7f3      	b.n	d55a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d55b8:	b00d      	add	sp, #52	; 0x34
   d55ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55bc <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d55bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d55c0:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d55c2:	ab0e      	add	r3, sp, #56	; 0x38
   d55c4:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d55c6:	4606      	mov	r6, r0
   d55c8:	4617      	mov	r7, r2
   d55ca:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d55cc:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d55d0:	462a      	mov	r2, r5
   d55d2:	4629      	mov	r1, r5
   d55d4:	f7fe ffd6 	bl	d4584 <netdb_getaddrinfo>
   d55d8:	2800      	cmp	r0, #0
   d55da:	db1f      	blt.n	d561c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d55dc:	9b01      	ldr	r3, [sp, #4]
   d55de:	b1fb      	cbz	r3, d5620 <_ZN3UDP11beginPacketEPKct+0x64>
   d55e0:	695b      	ldr	r3, [r3, #20]
   d55e2:	b1eb      	cbz	r3, d5620 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d55e4:	a802      	add	r0, sp, #8
   d55e6:	f7ff fa25 	bl	d4a34 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d55ea:	9b01      	ldr	r3, [sp, #4]
   d55ec:	462a      	mov	r2, r5
   d55ee:	6958      	ldr	r0, [r3, #20]
   d55f0:	a902      	add	r1, sp, #8
   d55f2:	f7ff ff9f 	bl	d5534 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d55f6:	a802      	add	r0, sp, #8
   d55f8:	f7ff fa3c 	bl	d4a74 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d55fc:	b180      	cbz	r0, d5620 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d55fe:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5600:	ad03      	add	r5, sp, #12
   d5602:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5606:	4b0b      	ldr	r3, [pc, #44]	; (d5634 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5608:	9308      	str	r3, [sp, #32]
   d560a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d560c:	ac09      	add	r4, sp, #36	; 0x24
   d560e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5610:	682b      	ldr	r3, [r5, #0]
   d5612:	7023      	strb	r3, [r4, #0]
   d5614:	463a      	mov	r2, r7
   d5616:	a908      	add	r1, sp, #32
   d5618:	4630      	mov	r0, r6
   d561a:	47c0      	blx	r8
   d561c:	4604      	mov	r4, r0
   d561e:	e001      	b.n	d5624 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5624:	9801      	ldr	r0, [sp, #4]
   d5626:	f7fe ffa5 	bl	d4574 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d562a:	4620      	mov	r0, r4
   d562c:	b00e      	add	sp, #56	; 0x38
   d562e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5632:	bf00      	nop
   d5634:	000d6f2c 	.word	0x000d6f2c

000d5638 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d563c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5640:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5644:	b098      	sub	sp, #96	; 0x60
   d5646:	4605      	mov	r5, r0
   d5648:	460c      	mov	r4, r1
   d564a:	4617      	mov	r7, r2
   d564c:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d564e:	db00      	blt.n	d5652 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5650:	b911      	cbnz	r1, d5658 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5656:	e04e      	b.n	d56f6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5658:	f04f 0a1c 	mov.w	sl, #28
   d565c:	ae09      	add	r6, sp, #36	; 0x24
   d565e:	4652      	mov	r2, sl
   d5660:	2100      	movs	r1, #0
   d5662:	4630      	mov	r0, r6
   d5664:	f001 fbe3 	bl	d6e2e <memset>
        socklen_t slen = sizeof(saddr);
   d5668:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d566c:	f1b9 0f00 	cmp.w	r9, #0
   d5670:	d014      	beq.n	d569c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5676:	fbb9 f1f2 	udiv	r1, r9, r2
   d567a:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d567c:	fb02 9111 	mls	r1, r2, r1, r9
   d5680:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5682:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5684:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5686:	9300      	str	r3, [sp, #0]
   d5688:	f241 0206 	movw	r2, #4102	; 0x1006
   d568c:	ab10      	add	r3, sp, #64	; 0x40
   d568e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5692:	4640      	mov	r0, r8
   d5694:	f7fe ff86 	bl	d45a4 <sock_setsockopt>
            if (ret) {
   d5698:	b108      	cbz	r0, d569e <_ZN3UDP13receivePacketEPhjm+0x66>
   d569a:	e02c      	b.n	d56f6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d569c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d569e:	ab04      	add	r3, sp, #16
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	4621      	mov	r1, r4
   d56a4:	4603      	mov	r3, r0
   d56a6:	9600      	str	r6, [sp, #0]
   d56a8:	463a      	mov	r2, r7
   d56aa:	6968      	ldr	r0, [r5, #20]
   d56ac:	f7fe ff8a 	bl	d45c4 <sock_recvfrom>
        if (ret >= 0) {
   d56b0:	1e04      	subs	r4, r0, #0
   d56b2:	db1f      	blt.n	d56f4 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d56b4:	f105 071c 	add.w	r7, r5, #28
   d56b8:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d56bc:	4630      	mov	r0, r6
   d56be:	4639      	mov	r1, r7
   d56c0:	f7ff ff38 	bl	d5534 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d56c4:	2600      	movs	r6, #0
   d56c6:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d56c8:	4639      	mov	r1, r7
   d56ca:	a805      	add	r0, sp, #20
   d56cc:	9310      	str	r3, [sp, #64]	; 0x40
   d56ce:	9611      	str	r6, [sp, #68]	; 0x44
   d56d0:	f7ff fdd8 	bl	d5284 <_ZN6StringC1ERK9Printable>
   d56d4:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d56d6:	9303      	str	r3, [sp, #12]
   d56d8:	9b05      	ldr	r3, [sp, #20]
   d56da:	9302      	str	r3, [sp, #8]
   d56dc:	4b07      	ldr	r3, [pc, #28]	; (d56fc <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d56de:	9300      	str	r3, [sp, #0]
   d56e0:	2001      	movs	r0, #1
   d56e2:	9401      	str	r4, [sp, #4]
   d56e4:	4633      	mov	r3, r6
   d56e6:	aa10      	add	r2, sp, #64	; 0x40
   d56e8:	4905      	ldr	r1, [pc, #20]	; (d5700 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d56ea:	f7ff f803 	bl	d46f4 <log_message>
   d56ee:	a805      	add	r0, sp, #20
   d56f0:	f7ff fcea 	bl	d50c8 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d56f4:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d56f6:	b018      	add	sp, #96	; 0x60
   d56f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d56fc:	000d70fd 	.word	0x000d70fd
   d5700:	000d7061 	.word	0x000d7061

000d5704 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5704:	b538      	push	{r3, r4, r5, lr}
   d5706:	4605      	mov	r5, r0
   d5708:	4614      	mov	r4, r2
   d570a:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d570c:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d570e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5710:	d111      	bne.n	d5736 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5712:	231c      	movs	r3, #28
   d5714:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5716:	230a      	movs	r3, #10
   d5718:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d571a:	f7fe ff23 	bl	d4564 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d571e:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5720:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5724:	1d2b      	adds	r3, r5, #4
   d5726:	3514      	adds	r5, #20
   d5728:	f853 2b04 	ldr.w	r2, [r3], #4
   d572c:	f844 2b04 	str.w	r2, [r4], #4
   d5730:	42ab      	cmp	r3, r5
   d5732:	d1f9      	bne.n	d5728 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5734:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5736:	2b04      	cmp	r3, #4
   d5738:	d108      	bne.n	d574c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x48>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d573a:	2310      	movs	r3, #16
   d573c:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d573e:	2302      	movs	r3, #2
   d5740:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5742:	f7fe ff0f 	bl	d4564 <inet_htons>
   d5746:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   d5748:	686b      	ldr	r3, [r5, #4]
   d574a:	6063      	str	r3, [r4, #4]
   d574c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5750 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5754:	4698      	mov	r8, r3
   d5756:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5758:	2320      	movs	r3, #32
   d575a:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d575c:	4682      	mov	sl, r0
   d575e:	468b      	mov	fp, r1
   d5760:	a804      	add	r0, sp, #16
   d5762:	4641      	mov	r1, r8
   d5764:	4616      	mov	r6, r2
   d5766:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d576a:	9308      	str	r3, [sp, #32]
   d576c:	9409      	str	r4, [sp, #36]	; 0x24
   d576e:	f7ff fd89 	bl	d5284 <_ZN6StringC1ERK9Printable>
   d5772:	9b04      	ldr	r3, [sp, #16]
   d5774:	9302      	str	r3, [sp, #8]
   d5776:	ad08      	add	r5, sp, #32
   d5778:	4b15      	ldr	r3, [pc, #84]	; (d57d0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d577a:	4916      	ldr	r1, [pc, #88]	; (d57d4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d577c:	9300      	str	r3, [sp, #0]
   d577e:	462a      	mov	r2, r5
   d5780:	4623      	mov	r3, r4
   d5782:	2001      	movs	r0, #1
   d5784:	f8cd 900c 	str.w	r9, [sp, #12]
   d5788:	9601      	str	r6, [sp, #4]
   d578a:	f7fe ffb3 	bl	d46f4 <log_message>
	sockaddr_storage s = {};
   d578e:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5790:	a804      	add	r0, sp, #16
   d5792:	f7ff fc99 	bl	d50c8 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5796:	463a      	mov	r2, r7
   d5798:	4621      	mov	r1, r4
   d579a:	4628      	mov	r0, r5
   d579c:	f001 fb47 	bl	d6e2e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d57a0:	462a      	mov	r2, r5
   d57a2:	4649      	mov	r1, r9
   d57a4:	4640      	mov	r0, r8
   d57a6:	f7ff ffad 	bl	d5704 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d57aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d57ae:	b14b      	cbz	r3, d57c4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d57b0:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d57b4:	4623      	mov	r3, r4
   d57b6:	4632      	mov	r2, r6
   d57b8:	4659      	mov	r1, fp
   d57ba:	f8da 0014 	ldr.w	r0, [sl, #20]
   d57be:	f7fe ff09 	bl	d45d4 <sock_sendto>
   d57c2:	e001      	b.n	d57c8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d57c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d57c8:	b011      	add	sp, #68	; 0x44
   d57ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57ce:	bf00      	nop
   d57d0:	000d711a 	.word	0x000d711a
   d57d4:	000d7061 	.word	0x000d7061

000d57d8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57da:	b091      	sub	sp, #68	; 0x44
   d57dc:	460c      	mov	r4, r1
   d57de:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d57e0:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d57e2:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d57e4:	a809      	add	r0, sp, #36	; 0x24
   d57e6:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d57e8:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d57ea:	f001 fb20 	bl	d6e2e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d57ee:	aa09      	add	r2, sp, #36	; 0x24
   d57f0:	2100      	movs	r1, #0
   d57f2:	4620      	mov	r0, r4
   d57f4:	f7ff ff86 	bl	d5704 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d57f8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d57fc:	2b02      	cmp	r3, #2
   d57fe:	d12e      	bne.n	d585e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d5800:	2300      	movs	r3, #0
   d5802:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5806:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5808:	b1dd      	cbz	r5, d5842 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d580a:	a902      	add	r1, sp, #8
   d580c:	4628      	mov	r0, r5
   d580e:	f7fe fe71 	bl	d44f4 <if_get_by_index>
   d5812:	b9b0      	cbnz	r0, d5842 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d5814:	a910      	add	r1, sp, #64	; 0x40
   d5816:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d581a:	9802      	ldr	r0, [sp, #8]
   d581c:	f7fe fe72 	bl	d4504 <if_get_addrs>
   d5820:	b960      	cbnz	r0, d583c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5822:	9b03      	ldr	r3, [sp, #12]
   d5824:	b153      	cbz	r3, d583c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5826:	68da      	ldr	r2, [r3, #12]
   d5828:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d582a:	7851      	ldrb	r1, [r2, #1]
   d582c:	2902      	cmp	r1, #2
   d582e:	d103      	bne.n	d5838 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5830:	6852      	ldr	r2, [r2, #4]
   d5832:	b10a      	cbz	r2, d5838 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5834:	9205      	str	r2, [sp, #20]
   d5836:	e001      	b.n	d583c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	e7f3      	b.n	d5824 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d583c:	9803      	ldr	r0, [sp, #12]
   d583e:	f7fe fe69 	bl	d4514 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5842:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5844:	f04f 0308 	mov.w	r3, #8
   d5848:	9300      	str	r3, [sp, #0]
   d584a:	bf18      	it	ne
   d584c:	2203      	movne	r2, #3
   d584e:	ab04      	add	r3, sp, #16
   d5850:	bf08      	it	eq
   d5852:	2204      	moveq	r2, #4
   d5854:	2100      	movs	r1, #0
   d5856:	4630      	mov	r0, r6
   d5858:	f7fe fea4 	bl	d45a4 <sock_setsockopt>
   d585c:	e01e      	b.n	d589c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d585e:	2b0a      	cmp	r3, #10
   d5860:	d11a      	bne.n	d5898 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d5862:	ac04      	add	r4, sp, #16
   d5864:	2214      	movs	r2, #20
   d5866:	2100      	movs	r1, #0
   d5868:	4620      	mov	r0, r4
   d586a:	f001 fae0 	bl	d6e2e <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d586e:	ab0b      	add	r3, sp, #44	; 0x2c
   d5870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5872:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5878:	f04f 0314 	mov.w	r3, #20
   d587c:	9300      	str	r3, [sp, #0]
   d587e:	bf18      	it	ne
   d5880:	220c      	movne	r2, #12
   d5882:	4623      	mov	r3, r4
   d5884:	bf08      	it	eq
   d5886:	220d      	moveq	r2, #13
   d5888:	2129      	movs	r1, #41	; 0x29
   d588a:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d588c:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d588e:	f7fe fe89 	bl	d45a4 <sock_setsockopt>
   d5892:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5896:	e001      	b.n	d589c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d589c:	b011      	add	sp, #68	; 0x44
   d589e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58a0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d58a0:	b538      	push	{r3, r4, r5, lr}
   d58a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58a6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d58a8:	4b0b      	ldr	r3, [pc, #44]	; (d58d8 <_ZN3UDPC1Ev+0x38>)
   d58aa:	f103 0208 	add.w	r2, r3, #8
   d58ae:	336c      	adds	r3, #108	; 0x6c
   d58b0:	2500      	movs	r5, #0
   d58b2:	6103      	str	r3, [r0, #16]
   d58b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d58b8:	4604      	mov	r4, r0
   d58ba:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d58bc:	6002      	str	r2, [r0, #0]
   d58be:	6143      	str	r3, [r0, #20]
   d58c0:	301c      	adds	r0, #28
   d58c2:	f7ff f8b7 	bl	d4a34 <_ZN9IPAddressC1Ev>
   d58c6:	f44f 7300 	mov.w	r3, #512	; 0x200
   d58ca:	86e5      	strh	r5, [r4, #54]	; 0x36
   d58cc:	8725      	strh	r5, [r4, #56]	; 0x38
   d58ce:	63e5      	str	r5, [r4, #60]	; 0x3c
   d58d0:	6423      	str	r3, [r4, #64]	; 0x40
   d58d2:	6465      	str	r5, [r4, #68]	; 0x44
}
   d58d4:	4620      	mov	r0, r4
   d58d6:	bd38      	pop	{r3, r4, r5, pc}
   d58d8:	000d7148 	.word	0x000d7148

000d58dc <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d58dc:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d58de:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d58e2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d58e4:	b11b      	cbz	r3, d58ee <_ZN3UDP13releaseBufferEv+0x12>
   d58e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d58e8:	b108      	cbz	r0, d58ee <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d58ea:	f7fe fbd8 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d58ee:	2300      	movs	r3, #0
   d58f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d58f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d58f6:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d58f8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d58fa:	8723      	strh	r3, [r4, #56]	; 0x38
   d58fc:	bd10      	pop	{r4, pc}

000d58fe <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d58fe:	b570      	push	{r4, r5, r6, lr}
   d5900:	4604      	mov	r4, r0
   d5902:	4616      	mov	r6, r2
   d5904:	460d      	mov	r5, r1
    releaseBuffer();
   d5906:	f7ff ffe9 	bl	d58dc <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d590a:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d590c:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d590e:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5910:	b93e      	cbnz	r6, d5922 <_ZN3UDP9setBufferEjPh+0x24>
   d5912:	b135      	cbz	r5, d5922 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5914:	4628      	mov	r0, r5
   d5916:	f7fe fbc0 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d591a:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d591c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d591e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5924:	b103      	cbz	r3, d5928 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5926:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5928:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d592a:	3000      	adds	r0, #0
   d592c:	bf18      	it	ne
   d592e:	2001      	movne	r0, #1
   d5930:	bd70      	pop	{r4, r5, r6, pc}

000d5932 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5932:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5934:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5936:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d5938:	b91a      	cbnz	r2, d5942 <_ZN3UDP11parsePacketEm+0x10>
   d593a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d593c:	b109      	cbz	r1, d5942 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d593e:	f7ff ffde 	bl	d58fe <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5942:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5944:	2300      	movs	r3, #0
   d5946:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5948:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d594a:	b141      	cbz	r1, d595e <_ZN3UDP11parsePacketEm+0x2c>
   d594c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d594e:	b132      	cbz	r2, d595e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5950:	6820      	ldr	r0, [r4, #0]
   d5952:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5954:	4620      	mov	r0, r4
   d5956:	47a8      	blx	r5
        if (result > 0) {
   d5958:	2800      	cmp	r0, #0
            _total = result;
   d595a:	bfc8      	it	gt
   d595c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d595e:	6823      	ldr	r3, [r4, #0]
   d5960:	4620      	mov	r0, r4
   d5962:	691b      	ldr	r3, [r3, #16]
}
   d5964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5968:	4718      	bx	r3
	...

000d596c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d596c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d596e:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5970:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5972:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5974:	2600      	movs	r6, #0
   d5976:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5978:	4617      	mov	r7, r2
   d597a:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d597c:	9308      	str	r3, [sp, #32]
   d597e:	9609      	str	r6, [sp, #36]	; 0x24
   d5980:	f7ff fc80 	bl	d5284 <_ZN6StringC1ERK9Printable>
   d5984:	9b04      	ldr	r3, [sp, #16]
   d5986:	9301      	str	r3, [sp, #4]
   d5988:	4b10      	ldr	r3, [pc, #64]	; (d59cc <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d598a:	9300      	str	r3, [sp, #0]
   d598c:	aa08      	add	r2, sp, #32
   d598e:	4633      	mov	r3, r6
   d5990:	490f      	ldr	r1, [pc, #60]	; (d59d0 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5992:	9702      	str	r7, [sp, #8]
   d5994:	2001      	movs	r0, #1
   d5996:	f7fe fead 	bl	d46f4 <log_message>
   d599a:	a804      	add	r0, sp, #16
   d599c:	f7ff fb94 	bl	d50c8 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d59a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d59a2:	b922      	cbnz	r2, d59ae <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d59a4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d59a6:	b111      	cbz	r1, d59ae <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d59a8:	4628      	mov	r0, r5
   d59aa:	f7ff ffa8 	bl	d58fe <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59ae:	3404      	adds	r4, #4
   d59b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d59b2:	f105 0620 	add.w	r6, r5, #32
   d59b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d59b8:	6823      	ldr	r3, [r4, #0]
   d59ba:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d59bc:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d59be:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d59c0:	2300      	movs	r3, #0
   d59c2:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d59c4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d59c6:	b011      	add	sp, #68	; 0x44
   d59c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d59ca:	bf00      	nop
   d59cc:	000d7134 	.word	0x000d7134
   d59d0:	000d7061 	.word	0x000d7061

000d59d4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d59d4:	b510      	push	{r4, lr}
   d59d6:	4b07      	ldr	r3, [pc, #28]	; (d59f4 <_ZN3UDPD1Ev+0x20>)
   d59d8:	f103 0208 	add.w	r2, r3, #8
   d59dc:	336c      	adds	r3, #108	; 0x6c
   d59de:	4604      	mov	r4, r0
   d59e0:	6002      	str	r2, [r0, #0]
   d59e2:	6103      	str	r3, [r0, #16]
   d59e4:	f7ff fd17 	bl	d5416 <_ZN3UDP4stopEv>
   d59e8:	4620      	mov	r0, r4
   d59ea:	f7ff ff77 	bl	d58dc <_ZN3UDP13releaseBufferEv>
   d59ee:	4620      	mov	r0, r4
   d59f0:	bd10      	pop	{r4, pc}
   d59f2:	bf00      	nop
   d59f4:	000d7148 	.word	0x000d7148

000d59f8 <_ZN3UDPD0Ev>:
   d59f8:	b510      	push	{r4, lr}
   d59fa:	4604      	mov	r4, r0
   d59fc:	f7ff ffea 	bl	d59d4 <_ZN3UDPD1Ev>
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7fe fb4c 	bl	d409e <_ZdlPv>
   d5a06:	4620      	mov	r0, r4
   d5a08:	bd10      	pop	{r4, pc}

000d5a0a <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5a0a:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5a0c:	6940      	ldr	r0, [r0, #20]
   d5a0e:	2800      	cmp	r0, #0
   d5a10:	db04      	blt.n	d5a1c <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5a12:	2301      	movs	r3, #1
   d5a14:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5a18:	f7ff bede 	b.w	d57d8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5a20:	4770      	bx	lr

000d5a22 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a22:	4770      	bx	lr

000d5a24 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a24:	7441      	strb	r1, [r0, #17]
   d5a26:	4770      	bx	lr

000d5a28 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5a28:	7c00      	ldrb	r0, [r0, #16]
   d5a2a:	f7fe be2b 	b.w	d4684 <HAL_USART_Available_Data_For_Write>

000d5a2e <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5a2e:	7c00      	ldrb	r0, [r0, #16]
   d5a30:	f7fe be00 	b.w	d4634 <HAL_USART_Available_Data>

000d5a34 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5a34:	7c00      	ldrb	r0, [r0, #16]
   d5a36:	f7fe be0d 	b.w	d4654 <HAL_USART_Peek_Data>

000d5a3a <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5a3a:	7c00      	ldrb	r0, [r0, #16]
   d5a3c:	f7fe be02 	b.w	d4644 <HAL_USART_Read_Data>

000d5a40 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a40:	7c00      	ldrb	r0, [r0, #16]
   d5a42:	f7fe be0f 	b.w	d4664 <HAL_USART_Flush_Data>

000d5a46 <_ZN11USARTSerialD0Ev>:
   d5a46:	b510      	push	{r4, lr}
   d5a48:	4604      	mov	r4, r0
   d5a4a:	f7fe fb28 	bl	d409e <_ZdlPv>
   d5a4e:	4620      	mov	r0, r4
   d5a50:	bd10      	pop	{r4, pc}

000d5a52 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a52:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a54:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5a56:	4604      	mov	r4, r0
   d5a58:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a5a:	b925      	cbnz	r5, d5a66 <_ZN11USARTSerial5writeEh+0x14>
   d5a5c:	7c00      	ldrb	r0, [r0, #16]
   d5a5e:	f7fe fe11 	bl	d4684 <HAL_USART_Available_Data_For_Write>
   d5a62:	2800      	cmp	r0, #0
   d5a64:	dd05      	ble.n	d5a72 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a66:	4631      	mov	r1, r6
   d5a68:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a6e:	f7fe bdd9 	b.w	d4624 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a72:	4628      	mov	r0, r5
   d5a74:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5a78:	b510      	push	{r4, lr}
   d5a7a:	4604      	mov	r4, r0
   d5a7c:	4608      	mov	r0, r1
   d5a7e:	4611      	mov	r1, r2
   d5a80:	2200      	movs	r2, #0
   d5a82:	6062      	str	r2, [r4, #4]
   d5a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a88:	60a2      	str	r2, [r4, #8]
   d5a8a:	4a05      	ldr	r2, [pc, #20]	; (d5aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5a8c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5a8e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5a90:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5a92:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5a94:	461a      	mov	r2, r3
   d5a96:	f7fe fdbd 	bl	d4614 <HAL_USART_Init>
}
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	bd10      	pop	{r4, pc}
   d5a9e:	bf00      	nop
   d5aa0:	000d71c0 	.word	0x000d71c0

000d5aa4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5aa4:	7c00      	ldrb	r0, [r0, #16]
   d5aa6:	f7fe bde5 	b.w	d4674 <HAL_USART_Is_Enabled>
	...

000d5aac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5aac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5aae:	4d0c      	ldr	r5, [pc, #48]	; (d5ae0 <_Z22__fetch_global_Serial1v+0x34>)
   d5ab0:	6829      	ldr	r1, [r5, #0]
   d5ab2:	f011 0401 	ands.w	r4, r1, #1
   d5ab6:	d111      	bne.n	d5adc <_Z22__fetch_global_Serial1v+0x30>
   d5ab8:	4628      	mov	r0, r5
   d5aba:	f7fe faf4 	bl	d40a6 <__cxa_guard_acquire>
   d5abe:	b168      	cbz	r0, d5adc <_Z22__fetch_global_Serial1v+0x30>
   d5ac0:	4a08      	ldr	r2, [pc, #32]	; (d5ae4 <_Z22__fetch_global_Serial1v+0x38>)
   d5ac2:	4b09      	ldr	r3, [pc, #36]	; (d5ae8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ac4:	4809      	ldr	r0, [pc, #36]	; (d5aec <_Z22__fetch_global_Serial1v+0x40>)
   d5ac6:	4621      	mov	r1, r4
   d5ac8:	f7ff ffd6 	bl	d5a78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5acc:	4628      	mov	r0, r5
   d5ace:	f7fe faef 	bl	d40b0 <__cxa_guard_release>
   d5ad2:	4a07      	ldr	r2, [pc, #28]	; (d5af0 <_Z22__fetch_global_Serial1v+0x44>)
   d5ad4:	4907      	ldr	r1, [pc, #28]	; (d5af4 <_Z22__fetch_global_Serial1v+0x48>)
   d5ad6:	4805      	ldr	r0, [pc, #20]	; (d5aec <_Z22__fetch_global_Serial1v+0x40>)
   d5ad8:	f000 fa20 	bl	d5f1c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5adc:	4803      	ldr	r0, [pc, #12]	; (d5aec <_Z22__fetch_global_Serial1v+0x40>)
   d5ade:	bd38      	pop	{r3, r4, r5, pc}
   d5ae0:	2003e670 	.word	0x2003e670
   d5ae4:	2003e674 	.word	0x2003e674
   d5ae8:	2003e5ec 	.word	0x2003e5ec
   d5aec:	2003e5d8 	.word	0x2003e5d8
   d5af0:	2003e3b8 	.word	0x2003e3b8
   d5af4:	000d5a23 	.word	0x000d5a23

000d5af8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5af8:	7441      	strb	r1, [r0, #17]
   d5afa:	4770      	bx	lr

000d5afc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5afc:	4770      	bx	lr

000d5afe <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5afe:	2100      	movs	r1, #0
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7fe bddf 	b.w	d46c4 <HAL_USB_USART_Receive_Data>

000d5b06 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5b06:	2101      	movs	r1, #1
   d5b08:	7c00      	ldrb	r0, [r0, #16]
   d5b0a:	f7fe bddb 	b.w	d46c4 <HAL_USB_USART_Receive_Data>

000d5b0e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5b0e:	7c00      	ldrb	r0, [r0, #16]
   d5b10:	f7fe bdd0 	b.w	d46b4 <HAL_USB_USART_Available_Data_For_Write>

000d5b14 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5b14:	7c00      	ldrb	r0, [r0, #16]
   d5b16:	f7fe bdc5 	b.w	d46a4 <HAL_USB_USART_Available_Data>

000d5b1a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5b1a:	b538      	push	{r3, r4, r5, lr}
   d5b1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b1e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5b20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b22:	f7fe fdc7 	bl	d46b4 <HAL_USB_USART_Available_Data_For_Write>
   d5b26:	2800      	cmp	r0, #0
   d5b28:	dc01      	bgt.n	d5b2e <_ZN9USBSerial5writeEh+0x14>
   d5b2a:	7c60      	ldrb	r0, [r4, #17]
   d5b2c:	b120      	cbz	r0, d5b38 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5b2e:	4629      	mov	r1, r5
   d5b30:	7c20      	ldrb	r0, [r4, #16]
   d5b32:	f7fe fdcf 	bl	d46d4 <HAL_USB_USART_Send_Data>
    return 1;
   d5b36:	2001      	movs	r0, #1
  }
  return 0;
}
   d5b38:	bd38      	pop	{r3, r4, r5, pc}

000d5b3a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5b3a:	7c00      	ldrb	r0, [r0, #16]
   d5b3c:	f7fe bdd2 	b.w	d46e4 <HAL_USB_USART_Flush_Data>

000d5b40 <_ZN9USBSerialD0Ev>:
   d5b40:	b510      	push	{r4, lr}
   d5b42:	4604      	mov	r4, r0
   d5b44:	f7fe faab 	bl	d409e <_ZdlPv>
   d5b48:	4620      	mov	r0, r4
   d5b4a:	bd10      	pop	{r4, pc}

000d5b4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	4604      	mov	r4, r0
   d5b50:	2300      	movs	r3, #0
   d5b52:	6063      	str	r3, [r4, #4]
   d5b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b58:	60a3      	str	r3, [r4, #8]
   d5b5a:	4b05      	ldr	r3, [pc, #20]	; (d5b70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5b5c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5b5e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b60:	4608      	mov	r0, r1
{
  _serial = serial;
   d5b62:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5b64:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5b66:	4611      	mov	r1, r2
   d5b68:	f7fe fd94 	bl	d4694 <HAL_USB_USART_Init>
}
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	bd10      	pop	{r4, pc}
   d5b70:	000d71f0 	.word	0x000d71f0

000d5b74 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5b76:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5b78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5b7a:	2100      	movs	r1, #0
   d5b7c:	f001 f957 	bl	d6e2e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5b80:	4620      	mov	r0, r4
   d5b82:	bd10      	pop	{r4, pc}

000d5b84 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5b84:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b86:	4d0e      	ldr	r5, [pc, #56]	; (d5bc0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5b88:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5b8a:	a801      	add	r0, sp, #4
   d5b8c:	f7ff fff2 	bl	d5b74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5b90:	6829      	ldr	r1, [r5, #0]
   d5b92:	f011 0401 	ands.w	r4, r1, #1
   d5b96:	d110      	bne.n	d5bba <_Z16_fetch_usbserialv+0x36>
   d5b98:	4628      	mov	r0, r5
   d5b9a:	f7fe fa84 	bl	d40a6 <__cxa_guard_acquire>
   d5b9e:	b160      	cbz	r0, d5bba <_Z16_fetch_usbserialv+0x36>
   d5ba0:	aa01      	add	r2, sp, #4
   d5ba2:	4621      	mov	r1, r4
   d5ba4:	4807      	ldr	r0, [pc, #28]	; (d5bc4 <_Z16_fetch_usbserialv+0x40>)
   d5ba6:	f7ff ffd1 	bl	d5b4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5baa:	4628      	mov	r0, r5
   d5bac:	f7fe fa80 	bl	d40b0 <__cxa_guard_release>
   d5bb0:	4a05      	ldr	r2, [pc, #20]	; (d5bc8 <_Z16_fetch_usbserialv+0x44>)
   d5bb2:	4906      	ldr	r1, [pc, #24]	; (d5bcc <_Z16_fetch_usbserialv+0x48>)
   d5bb4:	4803      	ldr	r0, [pc, #12]	; (d5bc4 <_Z16_fetch_usbserialv+0x40>)
   d5bb6:	f000 f9b1 	bl	d5f1c <__aeabi_atexit>
	return _usbserial;
}
   d5bba:	4802      	ldr	r0, [pc, #8]	; (d5bc4 <_Z16_fetch_usbserialv+0x40>)
   d5bbc:	b007      	add	sp, #28
   d5bbe:	bd30      	pop	{r4, r5, pc}
   d5bc0:	2003e6f8 	.word	0x2003e6f8
   d5bc4:	2003e6fc 	.word	0x2003e6fc
   d5bc8:	2003e3b8 	.word	0x2003e3b8
   d5bcc:	000d5afd 	.word	0x000d5afd

000d5bd0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5bd0:	2200      	movs	r2, #0
   d5bd2:	4611      	mov	r1, r2
   d5bd4:	6840      	ldr	r0, [r0, #4]
   d5bd6:	f7fe bde9 	b.w	d47ac <network_ready>

000d5bda <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bda:	2200      	movs	r2, #0
   d5bdc:	4611      	mov	r1, r2
   d5bde:	6840      	ldr	r0, [r0, #4]
   d5be0:	f7fe be04 	b.w	d47ec <network_listening>

000d5be4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5be4:	2200      	movs	r2, #0
   d5be6:	4611      	mov	r1, r2
   d5be8:	6840      	ldr	r0, [r0, #4]
   d5bea:	f7fe be0f 	b.w	d480c <network_get_listen_timeout>

000d5bee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bee:	2200      	movs	r2, #0
   d5bf0:	6840      	ldr	r0, [r0, #4]
   d5bf2:	f7fe be03 	b.w	d47fc <network_set_listen_timeout>

000d5bf6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bf6:	2200      	movs	r2, #0
   d5bf8:	f081 0101 	eor.w	r1, r1, #1
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f7fe bded 	b.w	d47dc <network_listen>

000d5c02 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5c02:	2300      	movs	r3, #0
   d5c04:	461a      	mov	r2, r3
   d5c06:	4619      	mov	r1, r3
   d5c08:	6840      	ldr	r0, [r0, #4]
   d5c0a:	f7fe bddf 	b.w	d47cc <network_off>

000d5c0e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5c0e:	2300      	movs	r3, #0
   d5c10:	461a      	mov	r2, r3
   d5c12:	4619      	mov	r1, r3
   d5c14:	6840      	ldr	r0, [r0, #4]
   d5c16:	f7fe bdd1 	b.w	d47bc <network_on>

000d5c1a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c1a:	2200      	movs	r2, #0
   d5c1c:	4611      	mov	r1, r2
   d5c1e:	6840      	ldr	r0, [r0, #4]
   d5c20:	f7fe bdb4 	b.w	d478c <network_connecting>

000d5c24 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c24:	2200      	movs	r2, #0
   d5c26:	2102      	movs	r1, #2
   d5c28:	6840      	ldr	r0, [r0, #4]
   d5c2a:	f7fe bdb7 	b.w	d479c <network_disconnect>

000d5c2e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c2e:	2300      	movs	r3, #0
   d5c30:	461a      	mov	r2, r3
   d5c32:	6840      	ldr	r0, [r0, #4]
   d5c34:	f7fe bda2 	b.w	d477c <network_connect>

000d5c38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5c38:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5c3a:	2204      	movs	r2, #4
   d5c3c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5c3e:	4a02      	ldr	r2, [pc, #8]	; (d5c48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5c40:	601a      	str	r2, [r3, #0]
   d5c42:	4770      	bx	lr
   d5c44:	2003e710 	.word	0x2003e710
   d5c48:	000d7220 	.word	0x000d7220

000d5c4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5c4c:	b510      	push	{r4, lr}
   d5c4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5c50:	f001 f907 	bl	d6e62 <strlen>
   d5c54:	3801      	subs	r0, #1
   d5c56:	1823      	adds	r3, r4, r0
   d5c58:	4620      	mov	r0, r4
	while(i<j){
   d5c5a:	4298      	cmp	r0, r3
   d5c5c:	d206      	bcs.n	d5c6c <_Z11str_reversePc+0x20>
		c = *i;
   d5c5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5c60:	7819      	ldrb	r1, [r3, #0]
   d5c62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5c66:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5c6a:	e7f6      	b.n	d5c5a <_Z11str_reversePc+0xe>
   d5c6c:	bd10      	pop	{r4, pc}

000d5c6e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5c6e:	b570      	push	{r4, r5, r6, lr}
   d5c70:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5c72:	1e91      	subs	r1, r2, #2
   d5c74:	2922      	cmp	r1, #34	; 0x22
   d5c76:	d820      	bhi.n	d5cba <ultoa+0x4c>
   d5c78:	4625      	mov	r5, r4
   d5c7a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5c7c:	b910      	cbnz	r0, d5c84 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5c7e:	4423      	add	r3, r4
            *ptr++ = '0';
   d5c80:	2230      	movs	r2, #48	; 0x30
   d5c82:	e00e      	b.n	d5ca2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5c84:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5c88:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5c8c:	b2c1      	uxtb	r1, r0
   d5c8e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5c92:	2809      	cmp	r0, #9
                *ptr += '0';
   d5c94:	bf94      	ite	ls
   d5c96:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5c98:	3157      	addhi	r1, #87	; 0x57
   d5c9a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5c9e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5ca0:	e7eb      	b.n	d5c7a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5ca2:	4299      	cmp	r1, r3
   d5ca4:	d202      	bcs.n	d5cac <ultoa+0x3e>
            *ptr++ = '0';
   d5ca6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5caa:	e7fa      	b.n	d5ca2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5cac:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5cae:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5cb0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5cb2:	f7ff ffcb 	bl	d5c4c <_Z11str_reversePc>
	return buffer;
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5cba:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5cc0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5cc0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5cc2:	4b0c      	ldr	r3, [pc, #48]	; (d5cf4 <serialEventRun+0x34>)
   d5cc4:	b133      	cbz	r3, d5cd4 <serialEventRun+0x14>
   d5cc6:	f7ff ff5d 	bl	d5b84 <_Z16_fetch_usbserialv>
   d5cca:	6803      	ldr	r3, [r0, #0]
   d5ccc:	691b      	ldr	r3, [r3, #16]
   d5cce:	4798      	blx	r3
   d5cd0:	2800      	cmp	r0, #0
   d5cd2:	dc09      	bgt.n	d5ce8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5cd4:	4b08      	ldr	r3, [pc, #32]	; (d5cf8 <serialEventRun+0x38>)
   d5cd6:	b163      	cbz	r3, d5cf2 <serialEventRun+0x32>
   d5cd8:	f7ff fee8 	bl	d5aac <_Z22__fetch_global_Serial1v>
   d5cdc:	6803      	ldr	r3, [r0, #0]
   d5cde:	691b      	ldr	r3, [r3, #16]
   d5ce0:	4798      	blx	r3
   d5ce2:	2800      	cmp	r0, #0
   d5ce4:	dc03      	bgt.n	d5cee <serialEventRun+0x2e>
   d5ce6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ce8:	f3af 8000 	nop.w
   d5cec:	e7f2      	b.n	d5cd4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5cee:	f3af 8000 	nop.w
   d5cf2:	bd08      	pop	{r3, pc}
	...

000d5cfc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5cfc:	b508      	push	{r3, lr}
	serialEventRun();
   d5cfe:	f7ff ffdf 	bl	d5cc0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d02:	f7fe fb67 	bl	d43d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d06:	4b01      	ldr	r3, [pc, #4]	; (d5d0c <_post_loop+0x10>)
   d5d08:	6018      	str	r0, [r3, #0]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	2003e71c 	.word	0x2003e71c

000d5d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d12:	2300      	movs	r3, #0
   d5d14:	9300      	str	r3, [sp, #0]
   d5d16:	461a      	mov	r2, r3
   d5d18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d1c:	f7fe fd0c 	bl	d4738 <system_ctrl_set_result>
}
   d5d20:	b003      	add	sp, #12
   d5d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d28 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5d28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5d2a:	8843      	ldrh	r3, [r0, #2]
   d5d2c:	2b0a      	cmp	r3, #10
   d5d2e:	d008      	beq.n	d5d42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5d30:	2b50      	cmp	r3, #80	; 0x50
   d5d32:	d109      	bne.n	d5d48 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5d34:	4b09      	ldr	r3, [pc, #36]	; (d5d5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5d36:	681b      	ldr	r3, [r3, #0]
   d5d38:	b13b      	cbz	r3, d5d4a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5d3a:	b003      	add	sp, #12
   d5d3c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5d40:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5d42:	f7ff ffe5 	bl	d5d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5d46:	e006      	b.n	d5d56 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d48:	2300      	movs	r3, #0
   d5d4a:	9300      	str	r3, [sp, #0]
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d52:	f7fe fcf1 	bl	d4738 <system_ctrl_set_result>
        break;
    }
}
   d5d56:	b003      	add	sp, #12
   d5d58:	f85d fb04 	ldr.w	pc, [sp], #4
   d5d5c:	2003e718 	.word	0x2003e718

000d5d60 <module_user_init_hook>:

void module_user_init_hook()
{
   d5d60:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d62:	2100      	movs	r1, #0
   d5d64:	4804      	ldr	r0, [pc, #16]	; (d5d78 <module_user_init_hook+0x18>)
   d5d66:	f7fe fd01 	bl	d476c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	4803      	ldr	r0, [pc, #12]	; (d5d7c <module_user_init_hook+0x1c>)
}
   d5d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d72:	f7fe bcd7 	b.w	d4724 <system_ctrl_set_app_request_handler>
   d5d76:	bf00      	nop
   d5d78:	00000000 	.word	0x00000000
   d5d7c:	000d5d29 	.word	0x000d5d29

000d5d80 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5d80:	b510      	push	{r4, lr}
   d5d82:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5d84:	480f      	ldr	r0, [pc, #60]	; (d5dc4 <pinAvailable+0x44>)
   d5d86:	f7ff f931 	bl	d4fec <_ZN8SPIClass9isEnabledEv>
   d5d8a:	b128      	cbz	r0, d5d98 <pinAvailable+0x18>
   d5d8c:	f1a4 030b 	sub.w	r3, r4, #11
   d5d90:	2b02      	cmp	r3, #2
   d5d92:	d801      	bhi.n	d5d98 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5d94:	2000      	movs	r0, #0
   d5d96:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5d98:	f000 f87e 	bl	d5e98 <_Z19__fetch_global_Wirev>
   d5d9c:	f7fe fe0c 	bl	d49b8 <_ZN7TwoWire9isEnabledEv>
   d5da0:	b108      	cbz	r0, d5da6 <pinAvailable+0x26>
   d5da2:	2c01      	cmp	r4, #1
   d5da4:	d9f6      	bls.n	d5d94 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5da6:	f7ff fe81 	bl	d5aac <_Z22__fetch_global_Serial1v>
   d5daa:	f7ff fe7b 	bl	d5aa4 <_ZN11USARTSerial9isEnabledEv>
   d5dae:	b118      	cbz	r0, d5db8 <pinAvailable+0x38>
   d5db0:	f1a4 0309 	sub.w	r3, r4, #9
   d5db4:	2b01      	cmp	r3, #1
   d5db6:	d9ed      	bls.n	d5d94 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5db8:	2c23      	cmp	r4, #35	; 0x23
   d5dba:	bf8c      	ite	hi
   d5dbc:	2000      	movhi	r0, #0
   d5dbe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5dc0:	bd10      	pop	{r4, pc}
   d5dc2:	bf00      	nop
   d5dc4:	2003e738 	.word	0x2003e738

000d5dc8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dc8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5dca:	b538      	push	{r3, r4, r5, lr}
   d5dcc:	4604      	mov	r4, r0
   d5dce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dd0:	d80a      	bhi.n	d5de8 <pinMode+0x20>
   d5dd2:	29ff      	cmp	r1, #255	; 0xff
   d5dd4:	d008      	beq.n	d5de8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5dd6:	f7ff ffd3 	bl	d5d80 <pinAvailable>
   d5dda:	b128      	cbz	r0, d5de8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ddc:	4629      	mov	r1, r5
   d5dde:	4620      	mov	r0, r4
}
   d5de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5de4:	f7fe bb0e 	b.w	d4404 <HAL_Pin_Mode>
   d5de8:	bd38      	pop	{r3, r4, r5, pc}

000d5dea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5dea:	b538      	push	{r3, r4, r5, lr}
   d5dec:	4604      	mov	r4, r0
   d5dee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5df0:	f7fe fb10 	bl	d4414 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5df4:	28ff      	cmp	r0, #255	; 0xff
   d5df6:	d010      	beq.n	d5e1a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5df8:	2806      	cmp	r0, #6
   d5dfa:	d804      	bhi.n	d5e06 <digitalWrite+0x1c>
   d5dfc:	234d      	movs	r3, #77	; 0x4d
   d5dfe:	fa23 f000 	lsr.w	r0, r3, r0
   d5e02:	07c3      	lsls	r3, r0, #31
   d5e04:	d409      	bmi.n	d5e1a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff ffba 	bl	d5d80 <pinAvailable>
   d5e0c:	b128      	cbz	r0, d5e1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e0e:	4629      	mov	r1, r5
   d5e10:	4620      	mov	r0, r4
}
   d5e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e16:	f7fe bb05 	b.w	d4424 <HAL_GPIO_Write>
   d5e1a:	bd38      	pop	{r3, r4, r5, pc}

000d5e1c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5e1c:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5e1e:	b510      	push	{r4, lr}
   d5e20:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5e22:	bf9c      	itt	ls
   d5e24:	340e      	addls	r4, #14
   d5e26:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e28:	4620      	mov	r0, r4
   d5e2a:	f7ff ffa9 	bl	d5d80 <pinAvailable>
   d5e2e:	b150      	cbz	r0, d5e46 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5e30:	2103      	movs	r1, #3
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7fe fade 	bl	d43f4 <HAL_Validate_Pin_Function>
   d5e38:	2803      	cmp	r0, #3
   d5e3a:	d104      	bne.n	d5e46 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e3c:	4620      	mov	r0, r4
}
   d5e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5e42:	f7fe baff 	b.w	d4444 <HAL_ADC_Read>
}
   d5e46:	2000      	movs	r0, #0
   d5e48:	bd10      	pop	{r4, pc}

000d5e4a <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d5e4a:	b538      	push	{r3, r4, r5, lr}
   d5e4c:	4604      	mov	r4, r0
   d5e4e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d5e50:	f7ff ff96 	bl	d5d80 <pinAvailable>
   d5e54:	b1f0      	cbz	r0, d5e94 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d5e56:	2104      	movs	r1, #4
   d5e58:	4620      	mov	r0, r4
   d5e5a:	f7fe facb 	bl	d43f4 <HAL_Validate_Pin_Function>
   d5e5e:	2804      	cmp	r0, #4
   d5e60:	d105      	bne.n	d5e6e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d5e62:	b2a9      	uxth	r1, r5
   d5e64:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d5e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d5e6a:	f7fe bae3 	b.w	d4434 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d5e6e:	2102      	movs	r1, #2
   d5e70:	4620      	mov	r0, r4
   d5e72:	f7fe fabf 	bl	d43f4 <HAL_Validate_Pin_Function>
   d5e76:	2802      	cmp	r0, #2
   d5e78:	d10c      	bne.n	d5e94 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	f7fe faca 	bl	d4414 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d5e80:	2801      	cmp	r0, #1
   d5e82:	d001      	beq.n	d5e88 <_Z11analogWritetm+0x3e>
   d5e84:	2804      	cmp	r0, #4
   d5e86:	d105      	bne.n	d5e94 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5e88:	4629      	mov	r1, r5
   d5e8a:	4620      	mov	r0, r4
    }
}
   d5e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d5e90:	f7fe bae0 	b.w	d4454 <HAL_PWM_Write_Ext>
   d5e94:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e98 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5e98:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5e9a:	4d0b      	ldr	r5, [pc, #44]	; (d5ec8 <_Z19__fetch_global_Wirev+0x30>)
   d5e9c:	6829      	ldr	r1, [r5, #0]
   d5e9e:	f011 0401 	ands.w	r4, r1, #1
   d5ea2:	d10f      	bne.n	d5ec4 <_Z19__fetch_global_Wirev+0x2c>
   d5ea4:	4628      	mov	r0, r5
   d5ea6:	f7fe f8fe 	bl	d40a6 <__cxa_guard_acquire>
   d5eaa:	b158      	cbz	r0, d5ec4 <_Z19__fetch_global_Wirev+0x2c>
   d5eac:	4621      	mov	r1, r4
   d5eae:	4807      	ldr	r0, [pc, #28]	; (d5ecc <_Z19__fetch_global_Wirev+0x34>)
   d5eb0:	f7fe fd70 	bl	d4994 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5eb4:	4628      	mov	r0, r5
   d5eb6:	f7fe f8fb 	bl	d40b0 <__cxa_guard_release>
   d5eba:	4a05      	ldr	r2, [pc, #20]	; (d5ed0 <_Z19__fetch_global_Wirev+0x38>)
   d5ebc:	4905      	ldr	r1, [pc, #20]	; (d5ed4 <_Z19__fetch_global_Wirev+0x3c>)
   d5ebe:	4803      	ldr	r0, [pc, #12]	; (d5ecc <_Z19__fetch_global_Wirev+0x34>)
   d5ec0:	f000 f82c 	bl	d5f1c <__aeabi_atexit>
	return wire;
}
   d5ec4:	4801      	ldr	r0, [pc, #4]	; (d5ecc <_Z19__fetch_global_Wirev+0x34>)
   d5ec6:	bd38      	pop	{r3, r4, r5, pc}
   d5ec8:	2003e720 	.word	0x2003e720
   d5ecc:	2003e724 	.word	0x2003e724
   d5ed0:	2003e3b8 	.word	0x2003e3b8
   d5ed4:	000d493d 	.word	0x000d493d

000d5ed8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ed8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5eda:	4c0c      	ldr	r4, [pc, #48]	; (d5f0c <_GLOBAL__sub_I_SPI+0x34>)
   d5edc:	4e0c      	ldr	r6, [pc, #48]	; (d5f10 <_GLOBAL__sub_I_SPI+0x38>)
   d5ede:	4d0d      	ldr	r5, [pc, #52]	; (d5f14 <_GLOBAL__sub_I_SPI+0x3c>)
   d5ee0:	2100      	movs	r1, #0
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	f7ff f86e 	bl	d4fc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ee8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5eea:	4c0b      	ldr	r4, [pc, #44]	; (d5f18 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5eec:	4632      	mov	r2, r6
   d5eee:	4629      	mov	r1, r5
   d5ef0:	f000 f814 	bl	d5f1c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ef4:	2101      	movs	r1, #1
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff f864 	bl	d4fc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5efc:	4632      	mov	r2, r6
   d5efe:	4629      	mov	r1, r5
   d5f00:	4620      	mov	r0, r4
   d5f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f06:	f000 b809 	b.w	d5f1c <__aeabi_atexit>
   d5f0a:	bf00      	nop
   d5f0c:	2003e738 	.word	0x2003e738
   d5f10:	2003e3b8 	.word	0x2003e3b8
   d5f14:	000d4fb5 	.word	0x000d4fb5
   d5f18:	2003e748 	.word	0x2003e748

000d5f1c <__aeabi_atexit>:
   d5f1c:	460b      	mov	r3, r1
   d5f1e:	4601      	mov	r1, r0
   d5f20:	4618      	mov	r0, r3
   d5f22:	f000 bf6b 	b.w	d6dfc <__cxa_atexit>
	...

000d5f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5f28:	4b24      	ldr	r3, [pc, #144]	; (d5fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5f2a:	681a      	ldr	r2, [r3, #0]
   d5f2c:	07d0      	lsls	r0, r2, #31
   d5f2e:	bf5c      	itt	pl
   d5f30:	2201      	movpl	r2, #1
   d5f32:	601a      	strpl	r2, [r3, #0]
   d5f34:	4b22      	ldr	r3, [pc, #136]	; (d5fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5f36:	681a      	ldr	r2, [r3, #0]
   d5f38:	07d1      	lsls	r1, r2, #31
   d5f3a:	bf5c      	itt	pl
   d5f3c:	2201      	movpl	r2, #1
   d5f3e:	601a      	strpl	r2, [r3, #0]
   d5f40:	4b20      	ldr	r3, [pc, #128]	; (d5fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d2      	lsls	r2, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4b1e      	ldr	r3, [pc, #120]	; (d5fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5f4e:	681a      	ldr	r2, [r3, #0]
   d5f50:	07d0      	lsls	r0, r2, #31
   d5f52:	bf5c      	itt	pl
   d5f54:	2201      	movpl	r2, #1
   d5f56:	601a      	strpl	r2, [r3, #0]
   d5f58:	4b1c      	ldr	r3, [pc, #112]	; (d5fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5f5a:	681a      	ldr	r2, [r3, #0]
   d5f5c:	07d1      	lsls	r1, r2, #31
   d5f5e:	bf5c      	itt	pl
   d5f60:	2201      	movpl	r2, #1
   d5f62:	601a      	strpl	r2, [r3, #0]
   d5f64:	4b1a      	ldr	r3, [pc, #104]	; (d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5f66:	681a      	ldr	r2, [r3, #0]
   d5f68:	07d2      	lsls	r2, r2, #31
   d5f6a:	bf5c      	itt	pl
   d5f6c:	2201      	movpl	r2, #1
   d5f6e:	601a      	strpl	r2, [r3, #0]
   d5f70:	4b18      	ldr	r3, [pc, #96]	; (d5fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5f72:	681a      	ldr	r2, [r3, #0]
   d5f74:	07d0      	lsls	r0, r2, #31
   d5f76:	bf5c      	itt	pl
   d5f78:	2201      	movpl	r2, #1
   d5f7a:	601a      	strpl	r2, [r3, #0]
   d5f7c:	4b16      	ldr	r3, [pc, #88]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5f7e:	681a      	ldr	r2, [r3, #0]
   d5f80:	07d1      	lsls	r1, r2, #31
   d5f82:	bf5c      	itt	pl
   d5f84:	2201      	movpl	r2, #1
   d5f86:	601a      	strpl	r2, [r3, #0]
   d5f88:	4b14      	ldr	r3, [pc, #80]	; (d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5f8a:	681a      	ldr	r2, [r3, #0]
   d5f8c:	07d2      	lsls	r2, r2, #31
   d5f8e:	bf5c      	itt	pl
   d5f90:	2201      	movpl	r2, #1
   d5f92:	601a      	strpl	r2, [r3, #0]
   d5f94:	4b12      	ldr	r3, [pc, #72]	; (d5fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5f96:	681a      	ldr	r2, [r3, #0]
   d5f98:	07d0      	lsls	r0, r2, #31
   d5f9a:	bf5c      	itt	pl
   d5f9c:	2201      	movpl	r2, #1
   d5f9e:	601a      	strpl	r2, [r3, #0]
   d5fa0:	4b10      	ldr	r3, [pc, #64]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5fa2:	681a      	ldr	r2, [r3, #0]
   d5fa4:	07d1      	lsls	r1, r2, #31
   d5fa6:	bf5c      	itt	pl
   d5fa8:	2201      	movpl	r2, #1
   d5faa:	601a      	strpl	r2, [r3, #0]
   d5fac:	4b0e      	ldr	r3, [pc, #56]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5fae:	681a      	ldr	r2, [r3, #0]
   d5fb0:	07d2      	lsls	r2, r2, #31
   d5fb2:	bf5c      	itt	pl
   d5fb4:	2201      	movpl	r2, #1
   d5fb6:	601a      	strpl	r2, [r3, #0]
   d5fb8:	4770      	bx	lr
   d5fba:	bf00      	nop
   d5fbc:	2003e784 	.word	0x2003e784
   d5fc0:	2003e780 	.word	0x2003e780
   d5fc4:	2003e77c 	.word	0x2003e77c
   d5fc8:	2003e778 	.word	0x2003e778
   d5fcc:	2003e774 	.word	0x2003e774
   d5fd0:	2003e770 	.word	0x2003e770
   d5fd4:	2003e76c 	.word	0x2003e76c
   d5fd8:	2003e768 	.word	0x2003e768
   d5fdc:	2003e764 	.word	0x2003e764
   d5fe0:	2003e760 	.word	0x2003e760
   d5fe4:	2003e75c 	.word	0x2003e75c
   d5fe8:	2003e758 	.word	0x2003e758

000d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5fec:	4b18      	ldr	r3, [pc, #96]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d1      	lsls	r1, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b16      	ldr	r3, [pc, #88]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d2      	lsls	r2, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b14      	ldr	r3, [pc, #80]	; (d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d0      	lsls	r0, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b12      	ldr	r3, [pc, #72]	; (d605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b10      	ldr	r3, [pc, #64]	; (d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b0e      	ldr	r3, [pc, #56]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b0c      	ldr	r3, [pc, #48]	; (d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b0a      	ldr	r3, [pc, #40]	; (d606c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4770      	bx	lr
   d604e:	bf00      	nop
   d6050:	2003e7a4 	.word	0x2003e7a4
   d6054:	2003e7a0 	.word	0x2003e7a0
   d6058:	2003e79c 	.word	0x2003e79c
   d605c:	2003e798 	.word	0x2003e798
   d6060:	2003e794 	.word	0x2003e794
   d6064:	2003e790 	.word	0x2003e790
   d6068:	2003e78c 	.word	0x2003e78c
   d606c:	2003e788 	.word	0x2003e788

000d6070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6070:	4b18      	ldr	r3, [pc, #96]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d1      	lsls	r1, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b16      	ldr	r3, [pc, #88]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d2      	lsls	r2, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b14      	ldr	r3, [pc, #80]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d0      	lsls	r0, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4b12      	ldr	r3, [pc, #72]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d1      	lsls	r1, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b10      	ldr	r3, [pc, #64]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d2      	lsls	r2, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b0e      	ldr	r3, [pc, #56]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d0      	lsls	r0, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b0c      	ldr	r3, [pc, #48]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d1      	lsls	r1, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b0a      	ldr	r3, [pc, #40]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d2      	lsls	r2, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4770      	bx	lr
   d60d2:	bf00      	nop
   d60d4:	2003e7c4 	.word	0x2003e7c4
   d60d8:	2003e7c0 	.word	0x2003e7c0
   d60dc:	2003e7bc 	.word	0x2003e7bc
   d60e0:	2003e7b8 	.word	0x2003e7b8
   d60e4:	2003e7b4 	.word	0x2003e7b4
   d60e8:	2003e7b0 	.word	0x2003e7b0
   d60ec:	2003e7ac 	.word	0x2003e7ac
   d60f0:	2003e7a8 	.word	0x2003e7a8

000d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d60f4:	4b24      	ldr	r3, [pc, #144]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d60f6:	681a      	ldr	r2, [r3, #0]
   d60f8:	07d0      	lsls	r0, r2, #31
   d60fa:	bf5c      	itt	pl
   d60fc:	2201      	movpl	r2, #1
   d60fe:	601a      	strpl	r2, [r3, #0]
   d6100:	4b22      	ldr	r3, [pc, #136]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6102:	681a      	ldr	r2, [r3, #0]
   d6104:	07d1      	lsls	r1, r2, #31
   d6106:	bf5c      	itt	pl
   d6108:	2201      	movpl	r2, #1
   d610a:	601a      	strpl	r2, [r3, #0]
   d610c:	4b20      	ldr	r3, [pc, #128]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d610e:	681a      	ldr	r2, [r3, #0]
   d6110:	07d2      	lsls	r2, r2, #31
   d6112:	bf5c      	itt	pl
   d6114:	2201      	movpl	r2, #1
   d6116:	601a      	strpl	r2, [r3, #0]
   d6118:	4b1e      	ldr	r3, [pc, #120]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d0      	lsls	r0, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b1c      	ldr	r3, [pc, #112]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d1      	lsls	r1, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b1a      	ldr	r3, [pc, #104]	; (d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d2      	lsls	r2, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b18      	ldr	r3, [pc, #96]	; (d61a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d0      	lsls	r0, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b16      	ldr	r3, [pc, #88]	; (d61a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d1      	lsls	r1, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b14      	ldr	r3, [pc, #80]	; (d61a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d2      	lsls	r2, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b12      	ldr	r3, [pc, #72]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d0      	lsls	r0, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b10      	ldr	r3, [pc, #64]	; (d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d1      	lsls	r1, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4b0e      	ldr	r3, [pc, #56]	; (d61b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d617a:	681a      	ldr	r2, [r3, #0]
   d617c:	07d2      	lsls	r2, r2, #31
   d617e:	bf5c      	itt	pl
   d6180:	2201      	movpl	r2, #1
   d6182:	601a      	strpl	r2, [r3, #0]
   d6184:	4770      	bx	lr
   d6186:	bf00      	nop
   d6188:	2003e7f4 	.word	0x2003e7f4
   d618c:	2003e7f0 	.word	0x2003e7f0
   d6190:	2003e7ec 	.word	0x2003e7ec
   d6194:	2003e7e8 	.word	0x2003e7e8
   d6198:	2003e7e4 	.word	0x2003e7e4
   d619c:	2003e7e0 	.word	0x2003e7e0
   d61a0:	2003e7dc 	.word	0x2003e7dc
   d61a4:	2003e7d8 	.word	0x2003e7d8
   d61a8:	2003e7d4 	.word	0x2003e7d4
   d61ac:	2003e7d0 	.word	0x2003e7d0
   d61b0:	2003e7cc 	.word	0x2003e7cc
   d61b4:	2003e7c8 	.word	0x2003e7c8

000d61b8 <__aeabi_drsub>:
   d61b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d61bc:	e002      	b.n	d61c4 <__adddf3>
   d61be:	bf00      	nop

000d61c0 <__aeabi_dsub>:
   d61c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d61c4 <__adddf3>:
   d61c4:	b530      	push	{r4, r5, lr}
   d61c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d61ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d61ce:	ea94 0f05 	teq	r4, r5
   d61d2:	bf08      	it	eq
   d61d4:	ea90 0f02 	teqeq	r0, r2
   d61d8:	bf1f      	itttt	ne
   d61da:	ea54 0c00 	orrsne.w	ip, r4, r0
   d61de:	ea55 0c02 	orrsne.w	ip, r5, r2
   d61e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d61e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61ea:	f000 80e2 	beq.w	d63b2 <__adddf3+0x1ee>
   d61ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d61f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d61f6:	bfb8      	it	lt
   d61f8:	426d      	neglt	r5, r5
   d61fa:	dd0c      	ble.n	d6216 <__adddf3+0x52>
   d61fc:	442c      	add	r4, r5
   d61fe:	ea80 0202 	eor.w	r2, r0, r2
   d6202:	ea81 0303 	eor.w	r3, r1, r3
   d6206:	ea82 0000 	eor.w	r0, r2, r0
   d620a:	ea83 0101 	eor.w	r1, r3, r1
   d620e:	ea80 0202 	eor.w	r2, r0, r2
   d6212:	ea81 0303 	eor.w	r3, r1, r3
   d6216:	2d36      	cmp	r5, #54	; 0x36
   d6218:	bf88      	it	hi
   d621a:	bd30      	pophi	{r4, r5, pc}
   d621c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6220:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6224:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6228:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d622c:	d002      	beq.n	d6234 <__adddf3+0x70>
   d622e:	4240      	negs	r0, r0
   d6230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6234:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6238:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d623c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6240:	d002      	beq.n	d6248 <__adddf3+0x84>
   d6242:	4252      	negs	r2, r2
   d6244:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6248:	ea94 0f05 	teq	r4, r5
   d624c:	f000 80a7 	beq.w	d639e <__adddf3+0x1da>
   d6250:	f1a4 0401 	sub.w	r4, r4, #1
   d6254:	f1d5 0e20 	rsbs	lr, r5, #32
   d6258:	db0d      	blt.n	d6276 <__adddf3+0xb2>
   d625a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d625e:	fa22 f205 	lsr.w	r2, r2, r5
   d6262:	1880      	adds	r0, r0, r2
   d6264:	f141 0100 	adc.w	r1, r1, #0
   d6268:	fa03 f20e 	lsl.w	r2, r3, lr
   d626c:	1880      	adds	r0, r0, r2
   d626e:	fa43 f305 	asr.w	r3, r3, r5
   d6272:	4159      	adcs	r1, r3
   d6274:	e00e      	b.n	d6294 <__adddf3+0xd0>
   d6276:	f1a5 0520 	sub.w	r5, r5, #32
   d627a:	f10e 0e20 	add.w	lr, lr, #32
   d627e:	2a01      	cmp	r2, #1
   d6280:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6284:	bf28      	it	cs
   d6286:	f04c 0c02 	orrcs.w	ip, ip, #2
   d628a:	fa43 f305 	asr.w	r3, r3, r5
   d628e:	18c0      	adds	r0, r0, r3
   d6290:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6294:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6298:	d507      	bpl.n	d62aa <__adddf3+0xe6>
   d629a:	f04f 0e00 	mov.w	lr, #0
   d629e:	f1dc 0c00 	rsbs	ip, ip, #0
   d62a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d62a6:	eb6e 0101 	sbc.w	r1, lr, r1
   d62aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d62ae:	d31b      	bcc.n	d62e8 <__adddf3+0x124>
   d62b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d62b4:	d30c      	bcc.n	d62d0 <__adddf3+0x10c>
   d62b6:	0849      	lsrs	r1, r1, #1
   d62b8:	ea5f 0030 	movs.w	r0, r0, rrx
   d62bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d62c0:	f104 0401 	add.w	r4, r4, #1
   d62c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d62c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d62cc:	f080 809a 	bcs.w	d6404 <__adddf3+0x240>
   d62d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d62d4:	bf08      	it	eq
   d62d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d62da:	f150 0000 	adcs.w	r0, r0, #0
   d62de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62e2:	ea41 0105 	orr.w	r1, r1, r5
   d62e6:	bd30      	pop	{r4, r5, pc}
   d62e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d62ec:	4140      	adcs	r0, r0
   d62ee:	eb41 0101 	adc.w	r1, r1, r1
   d62f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62f6:	f1a4 0401 	sub.w	r4, r4, #1
   d62fa:	d1e9      	bne.n	d62d0 <__adddf3+0x10c>
   d62fc:	f091 0f00 	teq	r1, #0
   d6300:	bf04      	itt	eq
   d6302:	4601      	moveq	r1, r0
   d6304:	2000      	moveq	r0, #0
   d6306:	fab1 f381 	clz	r3, r1
   d630a:	bf08      	it	eq
   d630c:	3320      	addeq	r3, #32
   d630e:	f1a3 030b 	sub.w	r3, r3, #11
   d6312:	f1b3 0220 	subs.w	r2, r3, #32
   d6316:	da0c      	bge.n	d6332 <__adddf3+0x16e>
   d6318:	320c      	adds	r2, #12
   d631a:	dd08      	ble.n	d632e <__adddf3+0x16a>
   d631c:	f102 0c14 	add.w	ip, r2, #20
   d6320:	f1c2 020c 	rsb	r2, r2, #12
   d6324:	fa01 f00c 	lsl.w	r0, r1, ip
   d6328:	fa21 f102 	lsr.w	r1, r1, r2
   d632c:	e00c      	b.n	d6348 <__adddf3+0x184>
   d632e:	f102 0214 	add.w	r2, r2, #20
   d6332:	bfd8      	it	le
   d6334:	f1c2 0c20 	rsble	ip, r2, #32
   d6338:	fa01 f102 	lsl.w	r1, r1, r2
   d633c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6340:	bfdc      	itt	le
   d6342:	ea41 010c 	orrle.w	r1, r1, ip
   d6346:	4090      	lslle	r0, r2
   d6348:	1ae4      	subs	r4, r4, r3
   d634a:	bfa2      	ittt	ge
   d634c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6350:	4329      	orrge	r1, r5
   d6352:	bd30      	popge	{r4, r5, pc}
   d6354:	ea6f 0404 	mvn.w	r4, r4
   d6358:	3c1f      	subs	r4, #31
   d635a:	da1c      	bge.n	d6396 <__adddf3+0x1d2>
   d635c:	340c      	adds	r4, #12
   d635e:	dc0e      	bgt.n	d637e <__adddf3+0x1ba>
   d6360:	f104 0414 	add.w	r4, r4, #20
   d6364:	f1c4 0220 	rsb	r2, r4, #32
   d6368:	fa20 f004 	lsr.w	r0, r0, r4
   d636c:	fa01 f302 	lsl.w	r3, r1, r2
   d6370:	ea40 0003 	orr.w	r0, r0, r3
   d6374:	fa21 f304 	lsr.w	r3, r1, r4
   d6378:	ea45 0103 	orr.w	r1, r5, r3
   d637c:	bd30      	pop	{r4, r5, pc}
   d637e:	f1c4 040c 	rsb	r4, r4, #12
   d6382:	f1c4 0220 	rsb	r2, r4, #32
   d6386:	fa20 f002 	lsr.w	r0, r0, r2
   d638a:	fa01 f304 	lsl.w	r3, r1, r4
   d638e:	ea40 0003 	orr.w	r0, r0, r3
   d6392:	4629      	mov	r1, r5
   d6394:	bd30      	pop	{r4, r5, pc}
   d6396:	fa21 f004 	lsr.w	r0, r1, r4
   d639a:	4629      	mov	r1, r5
   d639c:	bd30      	pop	{r4, r5, pc}
   d639e:	f094 0f00 	teq	r4, #0
   d63a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d63a6:	bf06      	itte	eq
   d63a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d63ac:	3401      	addeq	r4, #1
   d63ae:	3d01      	subne	r5, #1
   d63b0:	e74e      	b.n	d6250 <__adddf3+0x8c>
   d63b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63b6:	bf18      	it	ne
   d63b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d63bc:	d029      	beq.n	d6412 <__adddf3+0x24e>
   d63be:	ea94 0f05 	teq	r4, r5
   d63c2:	bf08      	it	eq
   d63c4:	ea90 0f02 	teqeq	r0, r2
   d63c8:	d005      	beq.n	d63d6 <__adddf3+0x212>
   d63ca:	ea54 0c00 	orrs.w	ip, r4, r0
   d63ce:	bf04      	itt	eq
   d63d0:	4619      	moveq	r1, r3
   d63d2:	4610      	moveq	r0, r2
   d63d4:	bd30      	pop	{r4, r5, pc}
   d63d6:	ea91 0f03 	teq	r1, r3
   d63da:	bf1e      	ittt	ne
   d63dc:	2100      	movne	r1, #0
   d63de:	2000      	movne	r0, #0
   d63e0:	bd30      	popne	{r4, r5, pc}
   d63e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d63e6:	d105      	bne.n	d63f4 <__adddf3+0x230>
   d63e8:	0040      	lsls	r0, r0, #1
   d63ea:	4149      	adcs	r1, r1
   d63ec:	bf28      	it	cs
   d63ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d63f2:	bd30      	pop	{r4, r5, pc}
   d63f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d63f8:	bf3c      	itt	cc
   d63fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d63fe:	bd30      	popcc	{r4, r5, pc}
   d6400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6404:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d640c:	f04f 0000 	mov.w	r0, #0
   d6410:	bd30      	pop	{r4, r5, pc}
   d6412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6416:	bf1a      	itte	ne
   d6418:	4619      	movne	r1, r3
   d641a:	4610      	movne	r0, r2
   d641c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6420:	bf1c      	itt	ne
   d6422:	460b      	movne	r3, r1
   d6424:	4602      	movne	r2, r0
   d6426:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d642a:	bf06      	itte	eq
   d642c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6430:	ea91 0f03 	teqeq	r1, r3
   d6434:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6438:	bd30      	pop	{r4, r5, pc}
   d643a:	bf00      	nop

000d643c <__aeabi_ui2d>:
   d643c:	f090 0f00 	teq	r0, #0
   d6440:	bf04      	itt	eq
   d6442:	2100      	moveq	r1, #0
   d6444:	4770      	bxeq	lr
   d6446:	b530      	push	{r4, r5, lr}
   d6448:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d644c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6450:	f04f 0500 	mov.w	r5, #0
   d6454:	f04f 0100 	mov.w	r1, #0
   d6458:	e750      	b.n	d62fc <__adddf3+0x138>
   d645a:	bf00      	nop

000d645c <__aeabi_i2d>:
   d645c:	f090 0f00 	teq	r0, #0
   d6460:	bf04      	itt	eq
   d6462:	2100      	moveq	r1, #0
   d6464:	4770      	bxeq	lr
   d6466:	b530      	push	{r4, r5, lr}
   d6468:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d646c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6470:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6474:	bf48      	it	mi
   d6476:	4240      	negmi	r0, r0
   d6478:	f04f 0100 	mov.w	r1, #0
   d647c:	e73e      	b.n	d62fc <__adddf3+0x138>
   d647e:	bf00      	nop

000d6480 <__aeabi_f2d>:
   d6480:	0042      	lsls	r2, r0, #1
   d6482:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6486:	ea4f 0131 	mov.w	r1, r1, rrx
   d648a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d648e:	bf1f      	itttt	ne
   d6490:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6494:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6498:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d649c:	4770      	bxne	lr
   d649e:	f092 0f00 	teq	r2, #0
   d64a2:	bf14      	ite	ne
   d64a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64a8:	4770      	bxeq	lr
   d64aa:	b530      	push	{r4, r5, lr}
   d64ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   d64b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64b8:	e720      	b.n	d62fc <__adddf3+0x138>
   d64ba:	bf00      	nop

000d64bc <__aeabi_ul2d>:
   d64bc:	ea50 0201 	orrs.w	r2, r0, r1
   d64c0:	bf08      	it	eq
   d64c2:	4770      	bxeq	lr
   d64c4:	b530      	push	{r4, r5, lr}
   d64c6:	f04f 0500 	mov.w	r5, #0
   d64ca:	e00a      	b.n	d64e2 <__aeabi_l2d+0x16>

000d64cc <__aeabi_l2d>:
   d64cc:	ea50 0201 	orrs.w	r2, r0, r1
   d64d0:	bf08      	it	eq
   d64d2:	4770      	bxeq	lr
   d64d4:	b530      	push	{r4, r5, lr}
   d64d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d64da:	d502      	bpl.n	d64e2 <__aeabi_l2d+0x16>
   d64dc:	4240      	negs	r0, r0
   d64de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d64e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d64ee:	f43f aedc 	beq.w	d62aa <__adddf3+0xe6>
   d64f2:	f04f 0203 	mov.w	r2, #3
   d64f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d64fa:	bf18      	it	ne
   d64fc:	3203      	addne	r2, #3
   d64fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6502:	bf18      	it	ne
   d6504:	3203      	addne	r2, #3
   d6506:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d650a:	f1c2 0320 	rsb	r3, r2, #32
   d650e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6512:	fa20 f002 	lsr.w	r0, r0, r2
   d6516:	fa01 fe03 	lsl.w	lr, r1, r3
   d651a:	ea40 000e 	orr.w	r0, r0, lr
   d651e:	fa21 f102 	lsr.w	r1, r1, r2
   d6522:	4414      	add	r4, r2
   d6524:	e6c1      	b.n	d62aa <__adddf3+0xe6>
   d6526:	bf00      	nop

000d6528 <__aeabi_dmul>:
   d6528:	b570      	push	{r4, r5, r6, lr}
   d652a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d652e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6532:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6536:	bf1d      	ittte	ne
   d6538:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d653c:	ea94 0f0c 	teqne	r4, ip
   d6540:	ea95 0f0c 	teqne	r5, ip
   d6544:	f000 f8de 	bleq	d6704 <__aeabi_dmul+0x1dc>
   d6548:	442c      	add	r4, r5
   d654a:	ea81 0603 	eor.w	r6, r1, r3
   d654e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6552:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6556:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d655a:	bf18      	it	ne
   d655c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6568:	d038      	beq.n	d65dc <__aeabi_dmul+0xb4>
   d656a:	fba0 ce02 	umull	ip, lr, r0, r2
   d656e:	f04f 0500 	mov.w	r5, #0
   d6572:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6576:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d657a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d657e:	f04f 0600 	mov.w	r6, #0
   d6582:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6586:	f09c 0f00 	teq	ip, #0
   d658a:	bf18      	it	ne
   d658c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6590:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6594:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6598:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d659c:	d204      	bcs.n	d65a8 <__aeabi_dmul+0x80>
   d659e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d65a2:	416d      	adcs	r5, r5
   d65a4:	eb46 0606 	adc.w	r6, r6, r6
   d65a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d65ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d65b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d65b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d65b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d65bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d65c0:	bf88      	it	hi
   d65c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d65c6:	d81e      	bhi.n	d6606 <__aeabi_dmul+0xde>
   d65c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d65cc:	bf08      	it	eq
   d65ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d65d2:	f150 0000 	adcs.w	r0, r0, #0
   d65d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65da:	bd70      	pop	{r4, r5, r6, pc}
   d65dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d65e0:	ea46 0101 	orr.w	r1, r6, r1
   d65e4:	ea40 0002 	orr.w	r0, r0, r2
   d65e8:	ea81 0103 	eor.w	r1, r1, r3
   d65ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d65f0:	bfc2      	ittt	gt
   d65f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d65f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65fa:	bd70      	popgt	{r4, r5, r6, pc}
   d65fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6600:	f04f 0e00 	mov.w	lr, #0
   d6604:	3c01      	subs	r4, #1
   d6606:	f300 80ab 	bgt.w	d6760 <__aeabi_dmul+0x238>
   d660a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d660e:	bfde      	ittt	le
   d6610:	2000      	movle	r0, #0
   d6612:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6616:	bd70      	pople	{r4, r5, r6, pc}
   d6618:	f1c4 0400 	rsb	r4, r4, #0
   d661c:	3c20      	subs	r4, #32
   d661e:	da35      	bge.n	d668c <__aeabi_dmul+0x164>
   d6620:	340c      	adds	r4, #12
   d6622:	dc1b      	bgt.n	d665c <__aeabi_dmul+0x134>
   d6624:	f104 0414 	add.w	r4, r4, #20
   d6628:	f1c4 0520 	rsb	r5, r4, #32
   d662c:	fa00 f305 	lsl.w	r3, r0, r5
   d6630:	fa20 f004 	lsr.w	r0, r0, r4
   d6634:	fa01 f205 	lsl.w	r2, r1, r5
   d6638:	ea40 0002 	orr.w	r0, r0, r2
   d663c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6640:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6648:	fa21 f604 	lsr.w	r6, r1, r4
   d664c:	eb42 0106 	adc.w	r1, r2, r6
   d6650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6654:	bf08      	it	eq
   d6656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d665a:	bd70      	pop	{r4, r5, r6, pc}
   d665c:	f1c4 040c 	rsb	r4, r4, #12
   d6660:	f1c4 0520 	rsb	r5, r4, #32
   d6664:	fa00 f304 	lsl.w	r3, r0, r4
   d6668:	fa20 f005 	lsr.w	r0, r0, r5
   d666c:	fa01 f204 	lsl.w	r2, r1, r4
   d6670:	ea40 0002 	orr.w	r0, r0, r2
   d6674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d667c:	f141 0100 	adc.w	r1, r1, #0
   d6680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6684:	bf08      	it	eq
   d6686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d668a:	bd70      	pop	{r4, r5, r6, pc}
   d668c:	f1c4 0520 	rsb	r5, r4, #32
   d6690:	fa00 f205 	lsl.w	r2, r0, r5
   d6694:	ea4e 0e02 	orr.w	lr, lr, r2
   d6698:	fa20 f304 	lsr.w	r3, r0, r4
   d669c:	fa01 f205 	lsl.w	r2, r1, r5
   d66a0:	ea43 0302 	orr.w	r3, r3, r2
   d66a4:	fa21 f004 	lsr.w	r0, r1, r4
   d66a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66ac:	fa21 f204 	lsr.w	r2, r1, r4
   d66b0:	ea20 0002 	bic.w	r0, r0, r2
   d66b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d66b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66bc:	bf08      	it	eq
   d66be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66c2:	bd70      	pop	{r4, r5, r6, pc}
   d66c4:	f094 0f00 	teq	r4, #0
   d66c8:	d10f      	bne.n	d66ea <__aeabi_dmul+0x1c2>
   d66ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d66ce:	0040      	lsls	r0, r0, #1
   d66d0:	eb41 0101 	adc.w	r1, r1, r1
   d66d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66d8:	bf08      	it	eq
   d66da:	3c01      	subeq	r4, #1
   d66dc:	d0f7      	beq.n	d66ce <__aeabi_dmul+0x1a6>
   d66de:	ea41 0106 	orr.w	r1, r1, r6
   d66e2:	f095 0f00 	teq	r5, #0
   d66e6:	bf18      	it	ne
   d66e8:	4770      	bxne	lr
   d66ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d66ee:	0052      	lsls	r2, r2, #1
   d66f0:	eb43 0303 	adc.w	r3, r3, r3
   d66f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d66f8:	bf08      	it	eq
   d66fa:	3d01      	subeq	r5, #1
   d66fc:	d0f7      	beq.n	d66ee <__aeabi_dmul+0x1c6>
   d66fe:	ea43 0306 	orr.w	r3, r3, r6
   d6702:	4770      	bx	lr
   d6704:	ea94 0f0c 	teq	r4, ip
   d6708:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d670c:	bf18      	it	ne
   d670e:	ea95 0f0c 	teqne	r5, ip
   d6712:	d00c      	beq.n	d672e <__aeabi_dmul+0x206>
   d6714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6718:	bf18      	it	ne
   d671a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d671e:	d1d1      	bne.n	d66c4 <__aeabi_dmul+0x19c>
   d6720:	ea81 0103 	eor.w	r1, r1, r3
   d6724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6728:	f04f 0000 	mov.w	r0, #0
   d672c:	bd70      	pop	{r4, r5, r6, pc}
   d672e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6732:	bf06      	itte	eq
   d6734:	4610      	moveq	r0, r2
   d6736:	4619      	moveq	r1, r3
   d6738:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d673c:	d019      	beq.n	d6772 <__aeabi_dmul+0x24a>
   d673e:	ea94 0f0c 	teq	r4, ip
   d6742:	d102      	bne.n	d674a <__aeabi_dmul+0x222>
   d6744:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6748:	d113      	bne.n	d6772 <__aeabi_dmul+0x24a>
   d674a:	ea95 0f0c 	teq	r5, ip
   d674e:	d105      	bne.n	d675c <__aeabi_dmul+0x234>
   d6750:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6754:	bf1c      	itt	ne
   d6756:	4610      	movne	r0, r2
   d6758:	4619      	movne	r1, r3
   d675a:	d10a      	bne.n	d6772 <__aeabi_dmul+0x24a>
   d675c:	ea81 0103 	eor.w	r1, r1, r3
   d6760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6764:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6768:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d676c:	f04f 0000 	mov.w	r0, #0
   d6770:	bd70      	pop	{r4, r5, r6, pc}
   d6772:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6776:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d677a:	bd70      	pop	{r4, r5, r6, pc}

000d677c <__aeabi_ddiv>:
   d677c:	b570      	push	{r4, r5, r6, lr}
   d677e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6782:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d678a:	bf1d      	ittte	ne
   d678c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6790:	ea94 0f0c 	teqne	r4, ip
   d6794:	ea95 0f0c 	teqne	r5, ip
   d6798:	f000 f8a7 	bleq	d68ea <__aeabi_ddiv+0x16e>
   d679c:	eba4 0405 	sub.w	r4, r4, r5
   d67a0:	ea81 0e03 	eor.w	lr, r1, r3
   d67a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67ac:	f000 8088 	beq.w	d68c0 <__aeabi_ddiv+0x144>
   d67b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d67b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d67bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d67c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d67c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d67c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d67cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d67d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d67d4:	429d      	cmp	r5, r3
   d67d6:	bf08      	it	eq
   d67d8:	4296      	cmpeq	r6, r2
   d67da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d67de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d67e2:	d202      	bcs.n	d67ea <__aeabi_ddiv+0x6e>
   d67e4:	085b      	lsrs	r3, r3, #1
   d67e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d67ea:	1ab6      	subs	r6, r6, r2
   d67ec:	eb65 0503 	sbc.w	r5, r5, r3
   d67f0:	085b      	lsrs	r3, r3, #1
   d67f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d67f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d67fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d67fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6802:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6806:	bf22      	ittt	cs
   d6808:	1ab6      	subcs	r6, r6, r2
   d680a:	4675      	movcs	r5, lr
   d680c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6810:	085b      	lsrs	r3, r3, #1
   d6812:	ea4f 0232 	mov.w	r2, r2, rrx
   d6816:	ebb6 0e02 	subs.w	lr, r6, r2
   d681a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d681e:	bf22      	ittt	cs
   d6820:	1ab6      	subcs	r6, r6, r2
   d6822:	4675      	movcs	r5, lr
   d6824:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6828:	085b      	lsrs	r3, r3, #1
   d682a:	ea4f 0232 	mov.w	r2, r2, rrx
   d682e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6832:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6836:	bf22      	ittt	cs
   d6838:	1ab6      	subcs	r6, r6, r2
   d683a:	4675      	movcs	r5, lr
   d683c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6840:	085b      	lsrs	r3, r3, #1
   d6842:	ea4f 0232 	mov.w	r2, r2, rrx
   d6846:	ebb6 0e02 	subs.w	lr, r6, r2
   d684a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d684e:	bf22      	ittt	cs
   d6850:	1ab6      	subcs	r6, r6, r2
   d6852:	4675      	movcs	r5, lr
   d6854:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6858:	ea55 0e06 	orrs.w	lr, r5, r6
   d685c:	d018      	beq.n	d6890 <__aeabi_ddiv+0x114>
   d685e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6862:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6866:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d686a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d686e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6872:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6876:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d687a:	d1c0      	bne.n	d67fe <__aeabi_ddiv+0x82>
   d687c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6880:	d10b      	bne.n	d689a <__aeabi_ddiv+0x11e>
   d6882:	ea41 0100 	orr.w	r1, r1, r0
   d6886:	f04f 0000 	mov.w	r0, #0
   d688a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d688e:	e7b6      	b.n	d67fe <__aeabi_ddiv+0x82>
   d6890:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6894:	bf04      	itt	eq
   d6896:	4301      	orreq	r1, r0
   d6898:	2000      	moveq	r0, #0
   d689a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d689e:	bf88      	it	hi
   d68a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68a4:	f63f aeaf 	bhi.w	d6606 <__aeabi_dmul+0xde>
   d68a8:	ebb5 0c03 	subs.w	ip, r5, r3
   d68ac:	bf04      	itt	eq
   d68ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   d68b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68b6:	f150 0000 	adcs.w	r0, r0, #0
   d68ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68be:	bd70      	pop	{r4, r5, r6, pc}
   d68c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d68c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d68c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d68cc:	bfc2      	ittt	gt
   d68ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d68d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d68d6:	bd70      	popgt	{r4, r5, r6, pc}
   d68d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d68dc:	f04f 0e00 	mov.w	lr, #0
   d68e0:	3c01      	subs	r4, #1
   d68e2:	e690      	b.n	d6606 <__aeabi_dmul+0xde>
   d68e4:	ea45 0e06 	orr.w	lr, r5, r6
   d68e8:	e68d      	b.n	d6606 <__aeabi_dmul+0xde>
   d68ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d68ee:	ea94 0f0c 	teq	r4, ip
   d68f2:	bf08      	it	eq
   d68f4:	ea95 0f0c 	teqeq	r5, ip
   d68f8:	f43f af3b 	beq.w	d6772 <__aeabi_dmul+0x24a>
   d68fc:	ea94 0f0c 	teq	r4, ip
   d6900:	d10a      	bne.n	d6918 <__aeabi_ddiv+0x19c>
   d6902:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6906:	f47f af34 	bne.w	d6772 <__aeabi_dmul+0x24a>
   d690a:	ea95 0f0c 	teq	r5, ip
   d690e:	f47f af25 	bne.w	d675c <__aeabi_dmul+0x234>
   d6912:	4610      	mov	r0, r2
   d6914:	4619      	mov	r1, r3
   d6916:	e72c      	b.n	d6772 <__aeabi_dmul+0x24a>
   d6918:	ea95 0f0c 	teq	r5, ip
   d691c:	d106      	bne.n	d692c <__aeabi_ddiv+0x1b0>
   d691e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6922:	f43f aefd 	beq.w	d6720 <__aeabi_dmul+0x1f8>
   d6926:	4610      	mov	r0, r2
   d6928:	4619      	mov	r1, r3
   d692a:	e722      	b.n	d6772 <__aeabi_dmul+0x24a>
   d692c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6930:	bf18      	it	ne
   d6932:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6936:	f47f aec5 	bne.w	d66c4 <__aeabi_dmul+0x19c>
   d693a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d693e:	f47f af0d 	bne.w	d675c <__aeabi_dmul+0x234>
   d6942:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6946:	f47f aeeb 	bne.w	d6720 <__aeabi_dmul+0x1f8>
   d694a:	e712      	b.n	d6772 <__aeabi_dmul+0x24a>

000d694c <__gedf2>:
   d694c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6950:	e006      	b.n	d6960 <__cmpdf2+0x4>
   d6952:	bf00      	nop

000d6954 <__ledf2>:
   d6954:	f04f 0c01 	mov.w	ip, #1
   d6958:	e002      	b.n	d6960 <__cmpdf2+0x4>
   d695a:	bf00      	nop

000d695c <__cmpdf2>:
   d695c:	f04f 0c01 	mov.w	ip, #1
   d6960:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d696c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6970:	bf18      	it	ne
   d6972:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6976:	d01b      	beq.n	d69b0 <__cmpdf2+0x54>
   d6978:	b001      	add	sp, #4
   d697a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d697e:	bf0c      	ite	eq
   d6980:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6984:	ea91 0f03 	teqne	r1, r3
   d6988:	bf02      	ittt	eq
   d698a:	ea90 0f02 	teqeq	r0, r2
   d698e:	2000      	moveq	r0, #0
   d6990:	4770      	bxeq	lr
   d6992:	f110 0f00 	cmn.w	r0, #0
   d6996:	ea91 0f03 	teq	r1, r3
   d699a:	bf58      	it	pl
   d699c:	4299      	cmppl	r1, r3
   d699e:	bf08      	it	eq
   d69a0:	4290      	cmpeq	r0, r2
   d69a2:	bf2c      	ite	cs
   d69a4:	17d8      	asrcs	r0, r3, #31
   d69a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d69aa:	f040 0001 	orr.w	r0, r0, #1
   d69ae:	4770      	bx	lr
   d69b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69b8:	d102      	bne.n	d69c0 <__cmpdf2+0x64>
   d69ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d69be:	d107      	bne.n	d69d0 <__cmpdf2+0x74>
   d69c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69c8:	d1d6      	bne.n	d6978 <__cmpdf2+0x1c>
   d69ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d69ce:	d0d3      	beq.n	d6978 <__cmpdf2+0x1c>
   d69d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d69d4:	4770      	bx	lr
   d69d6:	bf00      	nop

000d69d8 <__aeabi_cdrcmple>:
   d69d8:	4684      	mov	ip, r0
   d69da:	4610      	mov	r0, r2
   d69dc:	4662      	mov	r2, ip
   d69de:	468c      	mov	ip, r1
   d69e0:	4619      	mov	r1, r3
   d69e2:	4663      	mov	r3, ip
   d69e4:	e000      	b.n	d69e8 <__aeabi_cdcmpeq>
   d69e6:	bf00      	nop

000d69e8 <__aeabi_cdcmpeq>:
   d69e8:	b501      	push	{r0, lr}
   d69ea:	f7ff ffb7 	bl	d695c <__cmpdf2>
   d69ee:	2800      	cmp	r0, #0
   d69f0:	bf48      	it	mi
   d69f2:	f110 0f00 	cmnmi.w	r0, #0
   d69f6:	bd01      	pop	{r0, pc}

000d69f8 <__aeabi_dcmpeq>:
   d69f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69fc:	f7ff fff4 	bl	d69e8 <__aeabi_cdcmpeq>
   d6a00:	bf0c      	ite	eq
   d6a02:	2001      	moveq	r0, #1
   d6a04:	2000      	movne	r0, #0
   d6a06:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a0a:	bf00      	nop

000d6a0c <__aeabi_dcmplt>:
   d6a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a10:	f7ff ffea 	bl	d69e8 <__aeabi_cdcmpeq>
   d6a14:	bf34      	ite	cc
   d6a16:	2001      	movcc	r0, #1
   d6a18:	2000      	movcs	r0, #0
   d6a1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a1e:	bf00      	nop

000d6a20 <__aeabi_dcmple>:
   d6a20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a24:	f7ff ffe0 	bl	d69e8 <__aeabi_cdcmpeq>
   d6a28:	bf94      	ite	ls
   d6a2a:	2001      	movls	r0, #1
   d6a2c:	2000      	movhi	r0, #0
   d6a2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a32:	bf00      	nop

000d6a34 <__aeabi_dcmpge>:
   d6a34:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a38:	f7ff ffce 	bl	d69d8 <__aeabi_cdrcmple>
   d6a3c:	bf94      	ite	ls
   d6a3e:	2001      	movls	r0, #1
   d6a40:	2000      	movhi	r0, #0
   d6a42:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a46:	bf00      	nop

000d6a48 <__aeabi_dcmpgt>:
   d6a48:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a4c:	f7ff ffc4 	bl	d69d8 <__aeabi_cdrcmple>
   d6a50:	bf34      	ite	cc
   d6a52:	2001      	movcc	r0, #1
   d6a54:	2000      	movcs	r0, #0
   d6a56:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a5a:	bf00      	nop

000d6a5c <__aeabi_d2uiz>:
   d6a5c:	004a      	lsls	r2, r1, #1
   d6a5e:	d211      	bcs.n	d6a84 <__aeabi_d2uiz+0x28>
   d6a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6a64:	d211      	bcs.n	d6a8a <__aeabi_d2uiz+0x2e>
   d6a66:	d50d      	bpl.n	d6a84 <__aeabi_d2uiz+0x28>
   d6a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6a70:	d40e      	bmi.n	d6a90 <__aeabi_d2uiz+0x34>
   d6a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a7e:	fa23 f002 	lsr.w	r0, r3, r2
   d6a82:	4770      	bx	lr
   d6a84:	f04f 0000 	mov.w	r0, #0
   d6a88:	4770      	bx	lr
   d6a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a8e:	d102      	bne.n	d6a96 <__aeabi_d2uiz+0x3a>
   d6a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6a94:	4770      	bx	lr
   d6a96:	f04f 0000 	mov.w	r0, #0
   d6a9a:	4770      	bx	lr

000d6a9c <__aeabi_uldivmod>:
   d6a9c:	b953      	cbnz	r3, d6ab4 <__aeabi_uldivmod+0x18>
   d6a9e:	b94a      	cbnz	r2, d6ab4 <__aeabi_uldivmod+0x18>
   d6aa0:	2900      	cmp	r1, #0
   d6aa2:	bf08      	it	eq
   d6aa4:	2800      	cmpeq	r0, #0
   d6aa6:	bf1c      	itt	ne
   d6aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6ab0:	f000 b9a2 	b.w	d6df8 <__aeabi_idiv0>
   d6ab4:	f1ad 0c08 	sub.w	ip, sp, #8
   d6ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6abc:	f000 f82a 	bl	d6b14 <__udivmoddi4>
   d6ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6ac8:	b004      	add	sp, #16
   d6aca:	4770      	bx	lr

000d6acc <__aeabi_d2ulz>:
   d6acc:	b5d0      	push	{r4, r6, r7, lr}
   d6ace:	2200      	movs	r2, #0
   d6ad0:	4b0e      	ldr	r3, [pc, #56]	; (d6b0c <__aeabi_d2ulz+0x40>)
   d6ad2:	4606      	mov	r6, r0
   d6ad4:	460f      	mov	r7, r1
   d6ad6:	f7ff fd27 	bl	d6528 <__aeabi_dmul>
   d6ada:	f7ff ffbf 	bl	d6a5c <__aeabi_d2uiz>
   d6ade:	4604      	mov	r4, r0
   d6ae0:	f7ff fcac 	bl	d643c <__aeabi_ui2d>
   d6ae4:	2200      	movs	r2, #0
   d6ae6:	4b0a      	ldr	r3, [pc, #40]	; (d6b10 <__aeabi_d2ulz+0x44>)
   d6ae8:	f7ff fd1e 	bl	d6528 <__aeabi_dmul>
   d6aec:	4602      	mov	r2, r0
   d6aee:	460b      	mov	r3, r1
   d6af0:	4630      	mov	r0, r6
   d6af2:	4639      	mov	r1, r7
   d6af4:	f7ff fb64 	bl	d61c0 <__aeabi_dsub>
   d6af8:	f7ff ffb0 	bl	d6a5c <__aeabi_d2uiz>
   d6afc:	4623      	mov	r3, r4
   d6afe:	2200      	movs	r2, #0
   d6b00:	ea42 0200 	orr.w	r2, r2, r0
   d6b04:	4610      	mov	r0, r2
   d6b06:	4619      	mov	r1, r3
   d6b08:	bdd0      	pop	{r4, r6, r7, pc}
   d6b0a:	bf00      	nop
   d6b0c:	3df00000 	.word	0x3df00000
   d6b10:	41f00000 	.word	0x41f00000

000d6b14 <__udivmoddi4>:
   d6b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b18:	468c      	mov	ip, r1
   d6b1a:	460e      	mov	r6, r1
   d6b1c:	4604      	mov	r4, r0
   d6b1e:	9d08      	ldr	r5, [sp, #32]
   d6b20:	2b00      	cmp	r3, #0
   d6b22:	d150      	bne.n	d6bc6 <__udivmoddi4+0xb2>
   d6b24:	428a      	cmp	r2, r1
   d6b26:	4617      	mov	r7, r2
   d6b28:	d96c      	bls.n	d6c04 <__udivmoddi4+0xf0>
   d6b2a:	fab2 fe82 	clz	lr, r2
   d6b2e:	f1be 0f00 	cmp.w	lr, #0
   d6b32:	d00b      	beq.n	d6b4c <__udivmoddi4+0x38>
   d6b34:	f1ce 0420 	rsb	r4, lr, #32
   d6b38:	fa20 f404 	lsr.w	r4, r0, r4
   d6b3c:	fa01 f60e 	lsl.w	r6, r1, lr
   d6b40:	ea44 0c06 	orr.w	ip, r4, r6
   d6b44:	fa02 f70e 	lsl.w	r7, r2, lr
   d6b48:	fa00 f40e 	lsl.w	r4, r0, lr
   d6b4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6b50:	0c22      	lsrs	r2, r4, #16
   d6b52:	fbbc f0f9 	udiv	r0, ip, r9
   d6b56:	fa1f f887 	uxth.w	r8, r7
   d6b5a:	fb09 c610 	mls	r6, r9, r0, ip
   d6b5e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6b62:	fb00 f308 	mul.w	r3, r0, r8
   d6b66:	42b3      	cmp	r3, r6
   d6b68:	d909      	bls.n	d6b7e <__udivmoddi4+0x6a>
   d6b6a:	19f6      	adds	r6, r6, r7
   d6b6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6b70:	f080 8122 	bcs.w	d6db8 <__udivmoddi4+0x2a4>
   d6b74:	42b3      	cmp	r3, r6
   d6b76:	f240 811f 	bls.w	d6db8 <__udivmoddi4+0x2a4>
   d6b7a:	3802      	subs	r0, #2
   d6b7c:	443e      	add	r6, r7
   d6b7e:	1af6      	subs	r6, r6, r3
   d6b80:	b2a2      	uxth	r2, r4
   d6b82:	fbb6 f3f9 	udiv	r3, r6, r9
   d6b86:	fb09 6613 	mls	r6, r9, r3, r6
   d6b8a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6b8e:	fb03 f808 	mul.w	r8, r3, r8
   d6b92:	45a0      	cmp	r8, r4
   d6b94:	d909      	bls.n	d6baa <__udivmoddi4+0x96>
   d6b96:	19e4      	adds	r4, r4, r7
   d6b98:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6b9c:	f080 810a 	bcs.w	d6db4 <__udivmoddi4+0x2a0>
   d6ba0:	45a0      	cmp	r8, r4
   d6ba2:	f240 8107 	bls.w	d6db4 <__udivmoddi4+0x2a0>
   d6ba6:	3b02      	subs	r3, #2
   d6ba8:	443c      	add	r4, r7
   d6baa:	ebc8 0404 	rsb	r4, r8, r4
   d6bae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6bb2:	2100      	movs	r1, #0
   d6bb4:	2d00      	cmp	r5, #0
   d6bb6:	d062      	beq.n	d6c7e <__udivmoddi4+0x16a>
   d6bb8:	fa24 f40e 	lsr.w	r4, r4, lr
   d6bbc:	2300      	movs	r3, #0
   d6bbe:	602c      	str	r4, [r5, #0]
   d6bc0:	606b      	str	r3, [r5, #4]
   d6bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bc6:	428b      	cmp	r3, r1
   d6bc8:	d907      	bls.n	d6bda <__udivmoddi4+0xc6>
   d6bca:	2d00      	cmp	r5, #0
   d6bcc:	d055      	beq.n	d6c7a <__udivmoddi4+0x166>
   d6bce:	2100      	movs	r1, #0
   d6bd0:	e885 0041 	stmia.w	r5, {r0, r6}
   d6bd4:	4608      	mov	r0, r1
   d6bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bda:	fab3 f183 	clz	r1, r3
   d6bde:	2900      	cmp	r1, #0
   d6be0:	f040 8090 	bne.w	d6d04 <__udivmoddi4+0x1f0>
   d6be4:	42b3      	cmp	r3, r6
   d6be6:	d302      	bcc.n	d6bee <__udivmoddi4+0xda>
   d6be8:	4282      	cmp	r2, r0
   d6bea:	f200 80f8 	bhi.w	d6dde <__udivmoddi4+0x2ca>
   d6bee:	1a84      	subs	r4, r0, r2
   d6bf0:	eb66 0603 	sbc.w	r6, r6, r3
   d6bf4:	2001      	movs	r0, #1
   d6bf6:	46b4      	mov	ip, r6
   d6bf8:	2d00      	cmp	r5, #0
   d6bfa:	d040      	beq.n	d6c7e <__udivmoddi4+0x16a>
   d6bfc:	e885 1010 	stmia.w	r5, {r4, ip}
   d6c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c04:	b912      	cbnz	r2, d6c0c <__udivmoddi4+0xf8>
   d6c06:	2701      	movs	r7, #1
   d6c08:	fbb7 f7f2 	udiv	r7, r7, r2
   d6c0c:	fab7 fe87 	clz	lr, r7
   d6c10:	f1be 0f00 	cmp.w	lr, #0
   d6c14:	d135      	bne.n	d6c82 <__udivmoddi4+0x16e>
   d6c16:	1bf3      	subs	r3, r6, r7
   d6c18:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6c1c:	fa1f fc87 	uxth.w	ip, r7
   d6c20:	2101      	movs	r1, #1
   d6c22:	fbb3 f0f8 	udiv	r0, r3, r8
   d6c26:	0c22      	lsrs	r2, r4, #16
   d6c28:	fb08 3610 	mls	r6, r8, r0, r3
   d6c2c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6c30:	fb0c f300 	mul.w	r3, ip, r0
   d6c34:	42b3      	cmp	r3, r6
   d6c36:	d907      	bls.n	d6c48 <__udivmoddi4+0x134>
   d6c38:	19f6      	adds	r6, r6, r7
   d6c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d6c3e:	d202      	bcs.n	d6c46 <__udivmoddi4+0x132>
   d6c40:	42b3      	cmp	r3, r6
   d6c42:	f200 80ce 	bhi.w	d6de2 <__udivmoddi4+0x2ce>
   d6c46:	4610      	mov	r0, r2
   d6c48:	1af6      	subs	r6, r6, r3
   d6c4a:	b2a2      	uxth	r2, r4
   d6c4c:	fbb6 f3f8 	udiv	r3, r6, r8
   d6c50:	fb08 6613 	mls	r6, r8, r3, r6
   d6c54:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6c58:	fb0c fc03 	mul.w	ip, ip, r3
   d6c5c:	45a4      	cmp	ip, r4
   d6c5e:	d907      	bls.n	d6c70 <__udivmoddi4+0x15c>
   d6c60:	19e4      	adds	r4, r4, r7
   d6c62:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d6c66:	d202      	bcs.n	d6c6e <__udivmoddi4+0x15a>
   d6c68:	45a4      	cmp	ip, r4
   d6c6a:	f200 80b5 	bhi.w	d6dd8 <__udivmoddi4+0x2c4>
   d6c6e:	4613      	mov	r3, r2
   d6c70:	ebcc 0404 	rsb	r4, ip, r4
   d6c74:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6c78:	e79c      	b.n	d6bb4 <__udivmoddi4+0xa0>
   d6c7a:	4629      	mov	r1, r5
   d6c7c:	4628      	mov	r0, r5
   d6c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c82:	f1ce 0120 	rsb	r1, lr, #32
   d6c86:	fa06 f30e 	lsl.w	r3, r6, lr
   d6c8a:	fa07 f70e 	lsl.w	r7, r7, lr
   d6c8e:	fa20 f901 	lsr.w	r9, r0, r1
   d6c92:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6c96:	40ce      	lsrs	r6, r1
   d6c98:	ea49 0903 	orr.w	r9, r9, r3
   d6c9c:	fbb6 faf8 	udiv	sl, r6, r8
   d6ca0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6ca4:	fb08 661a 	mls	r6, r8, sl, r6
   d6ca8:	fa1f fc87 	uxth.w	ip, r7
   d6cac:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6cb0:	fb0a f20c 	mul.w	r2, sl, ip
   d6cb4:	429a      	cmp	r2, r3
   d6cb6:	fa00 f40e 	lsl.w	r4, r0, lr
   d6cba:	d90a      	bls.n	d6cd2 <__udivmoddi4+0x1be>
   d6cbc:	19db      	adds	r3, r3, r7
   d6cbe:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d6cc2:	f080 8087 	bcs.w	d6dd4 <__udivmoddi4+0x2c0>
   d6cc6:	429a      	cmp	r2, r3
   d6cc8:	f240 8084 	bls.w	d6dd4 <__udivmoddi4+0x2c0>
   d6ccc:	f1aa 0a02 	sub.w	sl, sl, #2
   d6cd0:	443b      	add	r3, r7
   d6cd2:	1a9b      	subs	r3, r3, r2
   d6cd4:	fa1f f989 	uxth.w	r9, r9
   d6cd8:	fbb3 f1f8 	udiv	r1, r3, r8
   d6cdc:	fb08 3311 	mls	r3, r8, r1, r3
   d6ce0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6ce4:	fb01 f60c 	mul.w	r6, r1, ip
   d6ce8:	429e      	cmp	r6, r3
   d6cea:	d907      	bls.n	d6cfc <__udivmoddi4+0x1e8>
   d6cec:	19db      	adds	r3, r3, r7
   d6cee:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d6cf2:	d26b      	bcs.n	d6dcc <__udivmoddi4+0x2b8>
   d6cf4:	429e      	cmp	r6, r3
   d6cf6:	d969      	bls.n	d6dcc <__udivmoddi4+0x2b8>
   d6cf8:	3902      	subs	r1, #2
   d6cfa:	443b      	add	r3, r7
   d6cfc:	1b9b      	subs	r3, r3, r6
   d6cfe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6d02:	e78e      	b.n	d6c22 <__udivmoddi4+0x10e>
   d6d04:	f1c1 0e20 	rsb	lr, r1, #32
   d6d08:	fa22 f40e 	lsr.w	r4, r2, lr
   d6d0c:	408b      	lsls	r3, r1
   d6d0e:	4323      	orrs	r3, r4
   d6d10:	fa20 f70e 	lsr.w	r7, r0, lr
   d6d14:	fa06 f401 	lsl.w	r4, r6, r1
   d6d18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6d1c:	fa26 f60e 	lsr.w	r6, r6, lr
   d6d20:	433c      	orrs	r4, r7
   d6d22:	fbb6 f9fc 	udiv	r9, r6, ip
   d6d26:	0c27      	lsrs	r7, r4, #16
   d6d28:	fb0c 6619 	mls	r6, ip, r9, r6
   d6d2c:	fa1f f883 	uxth.w	r8, r3
   d6d30:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6d34:	fb09 f708 	mul.w	r7, r9, r8
   d6d38:	42b7      	cmp	r7, r6
   d6d3a:	fa02 f201 	lsl.w	r2, r2, r1
   d6d3e:	fa00 fa01 	lsl.w	sl, r0, r1
   d6d42:	d908      	bls.n	d6d56 <__udivmoddi4+0x242>
   d6d44:	18f6      	adds	r6, r6, r3
   d6d46:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6d4a:	d241      	bcs.n	d6dd0 <__udivmoddi4+0x2bc>
   d6d4c:	42b7      	cmp	r7, r6
   d6d4e:	d93f      	bls.n	d6dd0 <__udivmoddi4+0x2bc>
   d6d50:	f1a9 0902 	sub.w	r9, r9, #2
   d6d54:	441e      	add	r6, r3
   d6d56:	1bf6      	subs	r6, r6, r7
   d6d58:	b2a0      	uxth	r0, r4
   d6d5a:	fbb6 f4fc 	udiv	r4, r6, ip
   d6d5e:	fb0c 6614 	mls	r6, ip, r4, r6
   d6d62:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6d66:	fb04 f808 	mul.w	r8, r4, r8
   d6d6a:	45b8      	cmp	r8, r7
   d6d6c:	d907      	bls.n	d6d7e <__udivmoddi4+0x26a>
   d6d6e:	18ff      	adds	r7, r7, r3
   d6d70:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d6d74:	d228      	bcs.n	d6dc8 <__udivmoddi4+0x2b4>
   d6d76:	45b8      	cmp	r8, r7
   d6d78:	d926      	bls.n	d6dc8 <__udivmoddi4+0x2b4>
   d6d7a:	3c02      	subs	r4, #2
   d6d7c:	441f      	add	r7, r3
   d6d7e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6d82:	ebc8 0707 	rsb	r7, r8, r7
   d6d86:	fba0 8902 	umull	r8, r9, r0, r2
   d6d8a:	454f      	cmp	r7, r9
   d6d8c:	4644      	mov	r4, r8
   d6d8e:	464e      	mov	r6, r9
   d6d90:	d314      	bcc.n	d6dbc <__udivmoddi4+0x2a8>
   d6d92:	d029      	beq.n	d6de8 <__udivmoddi4+0x2d4>
   d6d94:	b365      	cbz	r5, d6df0 <__udivmoddi4+0x2dc>
   d6d96:	ebba 0304 	subs.w	r3, sl, r4
   d6d9a:	eb67 0706 	sbc.w	r7, r7, r6
   d6d9e:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6da2:	40cb      	lsrs	r3, r1
   d6da4:	40cf      	lsrs	r7, r1
   d6da6:	ea4e 0303 	orr.w	r3, lr, r3
   d6daa:	e885 0088 	stmia.w	r5, {r3, r7}
   d6dae:	2100      	movs	r1, #0
   d6db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6db4:	4613      	mov	r3, r2
   d6db6:	e6f8      	b.n	d6baa <__udivmoddi4+0x96>
   d6db8:	4610      	mov	r0, r2
   d6dba:	e6e0      	b.n	d6b7e <__udivmoddi4+0x6a>
   d6dbc:	ebb8 0402 	subs.w	r4, r8, r2
   d6dc0:	eb69 0603 	sbc.w	r6, r9, r3
   d6dc4:	3801      	subs	r0, #1
   d6dc6:	e7e5      	b.n	d6d94 <__udivmoddi4+0x280>
   d6dc8:	4604      	mov	r4, r0
   d6dca:	e7d8      	b.n	d6d7e <__udivmoddi4+0x26a>
   d6dcc:	4611      	mov	r1, r2
   d6dce:	e795      	b.n	d6cfc <__udivmoddi4+0x1e8>
   d6dd0:	4681      	mov	r9, r0
   d6dd2:	e7c0      	b.n	d6d56 <__udivmoddi4+0x242>
   d6dd4:	468a      	mov	sl, r1
   d6dd6:	e77c      	b.n	d6cd2 <__udivmoddi4+0x1be>
   d6dd8:	3b02      	subs	r3, #2
   d6dda:	443c      	add	r4, r7
   d6ddc:	e748      	b.n	d6c70 <__udivmoddi4+0x15c>
   d6dde:	4608      	mov	r0, r1
   d6de0:	e70a      	b.n	d6bf8 <__udivmoddi4+0xe4>
   d6de2:	3802      	subs	r0, #2
   d6de4:	443e      	add	r6, r7
   d6de6:	e72f      	b.n	d6c48 <__udivmoddi4+0x134>
   d6de8:	45c2      	cmp	sl, r8
   d6dea:	d3e7      	bcc.n	d6dbc <__udivmoddi4+0x2a8>
   d6dec:	463e      	mov	r6, r7
   d6dee:	e7d1      	b.n	d6d94 <__udivmoddi4+0x280>
   d6df0:	4629      	mov	r1, r5
   d6df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6df6:	bf00      	nop

000d6df8 <__aeabi_idiv0>:
   d6df8:	4770      	bx	lr
   d6dfa:	bf00      	nop

000d6dfc <__cxa_atexit>:
   d6dfc:	b510      	push	{r4, lr}
   d6dfe:	4c05      	ldr	r4, [pc, #20]	; (d6e14 <__cxa_atexit+0x18>)
   d6e00:	4613      	mov	r3, r2
   d6e02:	b12c      	cbz	r4, d6e10 <__cxa_atexit+0x14>
   d6e04:	460a      	mov	r2, r1
   d6e06:	4601      	mov	r1, r0
   d6e08:	2002      	movs	r0, #2
   d6e0a:	f3af 8000 	nop.w
   d6e0e:	bd10      	pop	{r4, pc}
   d6e10:	4620      	mov	r0, r4
   d6e12:	bd10      	pop	{r4, pc}
   d6e14:	00000000 	.word	0x00000000

000d6e18 <memcpy>:
   d6e18:	b510      	push	{r4, lr}
   d6e1a:	1e43      	subs	r3, r0, #1
   d6e1c:	440a      	add	r2, r1
   d6e1e:	4291      	cmp	r1, r2
   d6e20:	d004      	beq.n	d6e2c <memcpy+0x14>
   d6e22:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e26:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e2a:	e7f8      	b.n	d6e1e <memcpy+0x6>
   d6e2c:	bd10      	pop	{r4, pc}

000d6e2e <memset>:
   d6e2e:	4402      	add	r2, r0
   d6e30:	4603      	mov	r3, r0
   d6e32:	4293      	cmp	r3, r2
   d6e34:	d002      	beq.n	d6e3c <memset+0xe>
   d6e36:	f803 1b01 	strb.w	r1, [r3], #1
   d6e3a:	e7fa      	b.n	d6e32 <memset+0x4>
   d6e3c:	4770      	bx	lr

000d6e3e <strcmp>:
   d6e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6e42:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6e46:	2a01      	cmp	r2, #1
   d6e48:	bf28      	it	cs
   d6e4a:	429a      	cmpcs	r2, r3
   d6e4c:	d0f7      	beq.n	d6e3e <strcmp>
   d6e4e:	1ad0      	subs	r0, r2, r3
   d6e50:	4770      	bx	lr

000d6e52 <strcpy>:
   d6e52:	4603      	mov	r3, r0
   d6e54:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6e58:	f803 2b01 	strb.w	r2, [r3], #1
   d6e5c:	2a00      	cmp	r2, #0
   d6e5e:	d1f9      	bne.n	d6e54 <strcpy+0x2>
   d6e60:	4770      	bx	lr

000d6e62 <strlen>:
   d6e62:	4603      	mov	r3, r0
   d6e64:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e68:	2a00      	cmp	r2, #0
   d6e6a:	d1fb      	bne.n	d6e64 <strlen+0x2>
   d6e6c:	1a18      	subs	r0, r3, r0
   d6e6e:	3801      	subs	r0, #1
   d6e70:	4770      	bx	lr

000d6e72 <link_code_end>:
	...

000d6e74 <dynalib_user>:
   d6e74:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6e84:	0000 0000 6e6f 6f00 6666 2c00 6420 7461     ....on.off., dat
   d6e94:	3a61 0020 6e61 6c61 676f 6176 756c 0065     a: .analogvalue.
   d6ea4:	7262 6769 7468 656e 7373 7300 7465 6f70     brightness.setpo
   d6eb4:	6e69 0074 656c 0064 6f6c 5f77 696c 6867     int.led.low_ligh
   d6ec4:	0074 0000                                   t...

000d6ec8 <_ZTVN5spark13EthernetClassE>:
	...
   d6ed0:	491d 000d 4913 000d 4909 000d 48ff 000d     .I...I...I...H..
   d6ee0:	48f3 000d 48e7 000d 48db 000d 48d3 000d     .H...H...H...H..
   d6ef0:	48c9 000d 48bf 000d 4e45 000d               .H...H..EN..

000d6efc <_ZTV7TwoWire>:
	...
   d6f04:	493d 000d 4987 000d 495f 000d 493f 000d     =I...I.._I..?I..
   d6f14:	4967 000d 496f 000d 4977 000d 497f 000d     gI..oI..wI...I..

000d6f24 <_ZTV9IPAddress>:
	...
   d6f2c:	49cf 000d 49c1 000d 49c3 000d 6e6c 6600     .I...I...I..ln.f
   d6f3c:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d6f4c:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   d6f5c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   d6f6c:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   d6f7c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6f8c:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6f9c:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6fac:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6fbc:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6fcc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6fdc:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6fec:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   d6ffc:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d700c:	696e 0063 6c61 006c                         nic.all.

000d7014 <_ZTVN5spark9MeshClassE>:
	...
   d701c:	4b3f 000d 4b35 000d 4b2b 000d 4b21 000d     ?K..5K..+K..!K..
   d702c:	4b15 000d 4b09 000d 4afd 000d 4af5 000d     .K...K...J...J..
   d703c:	4aeb 000d 4ae1 000d 4e45 000d 6666 3330     .J...J..EN..ff03
   d704c:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d705c:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d706c:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d7078 <_ZTVN5spark12NetworkClassE>:
	...
   d7080:	4ddd 000d 4de7 000d 4df1 000d 4dfb 000d     .M...M...M...M..
   d7090:	4e05 000d 4e11 000d 4e1d 000d 4e29 000d     .N...N...N..)N..
   d70a0:	4e31 000d 4e3b 000d 4e45 000d               1N..;N..EN..

000d70ac <_ZTV8SPIClass>:
	...
   d70b4:	4fb5 000d 4fb7 000d                         .O...O..

000d70bc <_ZTV21StringPrintableHelper>:
	...
   d70c4:	4ff3 000d 4ff5 000d 5255 000d 5227 000d     .O...O..UR..'R..
   d70d4:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d70e4:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d70f4:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   d7104:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   d7114:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   d7124:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   d7134:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   d7144:	6425 0000                                   %d..

000d7148 <_ZTV3UDP>:
	...
   d7150:	59d5 000d 59f9 000d 5309 000d 5433 000d     .Y...Y...S..3T..
   d7160:	5301 000d 531f 000d 533d 000d 5357 000d     .S...S..=S..WS..
   d7170:	537b 000d 5417 000d 5751 000d 54b9 000d     {S...T..QW...T..
   d7180:	5639 000d 52e9 000d 596d 000d 55bd 000d     9V...R..mY...U..
   d7190:	54f1 000d 5933 000d 545d 000d 52f7 000d     .T..3Y..]T...R..
   d71a0:	5499 000d 52fd 000d 5359 000d fff0 ffff     .T...R..YS......
   d71b0:	0000 0000 5373 000d                         ....sS..

000d71b8 <_ZTV11USARTSerial>:
	...
   d71c0:	5a23 000d 5a47 000d 5a53 000d 4edd 000d     #Z..GZ..SZ...N..
   d71d0:	5a2f 000d 5a3b 000d 5a35 000d 5a41 000d     /Z..;Z..5Z..AZ..
   d71e0:	5a25 000d 5a29 000d                         %Z..)Z..

000d71e8 <_ZTV9USBSerial>:
	...
   d71f0:	5afd 000d 5b41 000d 5b1b 000d 4edd 000d     .Z..A[...[...N..
   d7200:	5b15 000d 5aff 000d 5b07 000d 5b3b 000d     .[...Z...[..;[..
   d7210:	5b0f 000d 5af9 000d                         .[...Z..

000d7218 <_ZTVN5spark9WiFiClassE>:
	...
   d7220:	5c2f 000d 5c25 000d 5c1b 000d 5bd1 000d     /\..%\...\...[..
   d7230:	5c0f 000d 5c03 000d 5bf7 000d 5bef 000d     .\...\...[...[..
   d7240:	5be5 000d 5bdb 000d 4e45 000d               .[...[..EN..

000d724c <link_const_variable_data_end>:
   d724c:	000d4361 	.word	0x000d4361
   d7250:	000d4929 	.word	0x000d4929
   d7254:	000d4ad1 	.word	0x000d4ad1
   d7258:	000d4d91 	.word	0x000d4d91
   d725c:	000d4ec9 	.word	0x000d4ec9
   d7260:	000d4f99 	.word	0x000d4f99
   d7264:	000d52b9 	.word	0x000d52b9
   d7268:	000d52d5 	.word	0x000d52d5
   d726c:	000d5c39 	.word	0x000d5c39
   d7270:	000d5ed9 	.word	0x000d5ed9
   d7274:	000d5f29 	.word	0x000d5f29
   d7278:	000d5fed 	.word	0x000d5fed
   d727c:	000d6071 	.word	0x000d6071
   d7280:	000d60f5 	.word	0x000d60f5

000d7284 <link_constructors_end>:
	...
